[
    {
        "database_id": "car_1",
        "query": "SELECT Count ( * )  ,  T2.FullName  FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker   =   T2.Id GROUP BY T2.id",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "t2",
            ".",
            "fullname",
            "from",
            "model_list",
            "as",
            "t1",
            "join",
            "car_makers",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "maker",
            "=",
            "t2",
            ".",
            "id",
            "group",
            "by",
            "t2",
            ".",
            "id"
        ],
        "results_raw": [
            [
                "Count(*)",
                "FullName"
            ],
            [
                1,
                "American Motor Company"
            ],
            [
                2,
                "Volkswagen"
            ],
            [
                1,
                "BMW"
            ]
        ],
        "response": "here are the total number of car models produced and maker full name for each car model",
        "response_toks": [
            "here",
            "are",
            "the",
            "total",
            "number",
            "of",
            "car",
            "models",
            "produced",
            "and",
            "maker",
            "full",
            "name",
            "for",
            "each",
            "car",
            "model"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Count ( * )  ,  T2.FullName  FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker   =   T2.Id GROUP BY T2.id",
        "query_w_results_blank_res": "SELECT Count ( * )  ,  T2.FullName  FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker   =   T2.Id GROUP BY T2.id",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "t2",
            ".",
            "fullname",
            "from",
            "model_list",
            "as",
            "t1",
            "join",
            "car_makers",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "maker",
            "=",
            "t2",
            ".",
            "id",
            "group",
            "by",
            "t2",
            ".",
            "id"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "t2",
            ".",
            "fullname",
            "from",
            "model_list",
            "as",
            "t1",
            "join",
            "car_makers",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "maker",
            "=",
            "t2",
            ".",
            "id",
            "group",
            "by",
            "t2",
            ".",
            "id"
        ],
        "response_blank_res": "here are the total number of car models produced and maker full name for each car model",
        "response_toks_blank_res": [
            "here",
            "are",
            "the",
            "total",
            "number",
            "of",
            "car",
            "models",
            "produced",
            "and",
            "maker",
            "full",
            "name",
            "for",
            "each",
            "car",
            "model"
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT T1.model FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker   =   T2.Id GROUP BY T2.id order by count ( * )  desc limit 1",
        "query_toks": [
            "select",
            "t1",
            ".",
            "model",
            "from",
            "model_list",
            "as",
            "t1",
            "join",
            "car_makers",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "maker",
            "=",
            "t2",
            ".",
            "id",
            "group",
            "by",
            "t2",
            ".",
            "id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Model"
            ],
            [
                "pontiac"
            ]
        ],
        "response": "the model which is the most popular is pontiac",
        "response_toks": [
            "the",
            "model",
            "which",
            "is",
            "the",
            "most",
            "popular",
            "is",
            "pontiac"
        ],
        "results_map": {
            "result0": "pontiac"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT T1.model FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker   =   T2.Id GROUP BY T2.id order by count ( * )  desc limit 1 | pontiac ",
        "query_w_results_blank_res": "SELECT T1.model FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker   =   T2.Id GROUP BY T2.id order by count ( * )  desc limit 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "model",
            "from",
            "model_list",
            "as",
            "t1",
            "join",
            "car_makers",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "maker",
            "=",
            "t2",
            ".",
            "id",
            "group",
            "by",
            "t2",
            ".",
            "id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1",
            "pontiac"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "model",
            "from",
            "model_list",
            "as",
            "t1",
            "join",
            "car_makers",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "maker",
            "=",
            "t2",
            ".",
            "id",
            "group",
            "by",
            "t2",
            ".",
            "id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "the model which is the most popular is result0",
        "response_toks_blank_res": [
            "the",
            "model",
            "which",
            "is",
            "the",
            "most",
            "popular",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT T1.model FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker   =   T2.Id GROUP BY T2.id order by count ( * ) ",
        "query_toks": [
            "select",
            "t1",
            ".",
            "model",
            "from",
            "model_list",
            "as",
            "t1",
            "join",
            "car_makers",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "maker",
            "=",
            "t2",
            ".",
            "id",
            "group",
            "by",
            "t2",
            ".",
            "id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")"
        ],
        "results_raw": [
            [
                "Model"
            ],
            [
                "amc"
            ],
            [
                "bmw"
            ],
            [
                "citroen"
            ]
        ],
        "response": "here are the models which are the least popular.",
        "response_toks": [
            "here",
            "are",
            "the",
            "models",
            "which",
            "are",
            "the",
            "least",
            "popular",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.model FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker   =   T2.Id GROUP BY T2.id order by count ( * ) ",
        "query_w_results_blank_res": "SELECT T1.model FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker   =   T2.Id GROUP BY T2.id order by count ( * ) ",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "model",
            "from",
            "model_list",
            "as",
            "t1",
            "join",
            "car_makers",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "maker",
            "=",
            "t2",
            ".",
            "id",
            "group",
            "by",
            "t2",
            ".",
            "id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "model",
            "from",
            "model_list",
            "as",
            "t1",
            "join",
            "car_makers",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "maker",
            "=",
            "t2",
            ".",
            "id",
            "group",
            "by",
            "t2",
            ".",
            "id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")"
        ],
        "response_blank_res": "here are the models which are the least popular .",
        "response_toks_blank_res": [
            "here",
            "are",
            "the",
            "models",
            "which",
            "are",
            "the",
            "least",
            "popular",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT Count ( * )  ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker   =   T2.Id GROUP BY T2.id having count ( * )   > =  3",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "t2",
            ".",
            "fullname",
            ",",
            "t2",
            ".",
            "id",
            "from",
            "model_list",
            "as",
            "t1",
            "join",
            "car_makers",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "maker",
            "=",
            "t2",
            ".",
            "id",
            "group",
            "by",
            "t2",
            ".",
            "id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "3"
        ],
        "results_raw": [
            [
                "Count(*)",
                "FullName",
                "Id"
            ],
            [
                5,
                "General Motors",
                4
            ],
            [
                3,
                "Ford Motor Company",
                5
            ],
            [
                4,
                "Chrysler",
                6
            ]
        ],
        "response": "here are the name of companies which  have three or more models",
        "response_toks": [
            "here",
            "are",
            "the",
            "name",
            "of",
            "companies",
            "which",
            "have",
            "three",
            "or",
            "more",
            "models"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Count ( * )  ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker   =   T2.Id GROUP BY T2.id having count ( * )   > =  3",
        "query_w_results_blank_res": "SELECT Count ( * )  ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker   =   T2.Id GROUP BY T2.id having count ( * )   > =  3",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "t2",
            ".",
            "fullname",
            ",",
            "t2",
            ".",
            "id",
            "from",
            "model_list",
            "as",
            "t1",
            "join",
            "car_makers",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "maker",
            "=",
            "t2",
            ".",
            "id",
            "group",
            "by",
            "t2",
            ".",
            "id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "3"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "t2",
            ".",
            "fullname",
            ",",
            "t2",
            ".",
            "id",
            "from",
            "model_list",
            "as",
            "t1",
            "join",
            "car_makers",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "maker",
            "=",
            "t2",
            ".",
            "id",
            "group",
            "by",
            "t2",
            ".",
            "id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "3"
        ],
        "response_blank_res": "here are the name of companies which have three or more models",
        "response_toks_blank_res": [
            "here",
            "are",
            "the",
            "name",
            "of",
            "companies",
            "which",
            "have",
            "three",
            "or",
            "more",
            "models"
        ]
    },
    {
        "database_id": "concert_singer",
        "query": "SELECT name FROM singer",
        "query_toks": [
            "select",
            "name",
            "from",
            "singer"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Joe Sharp"
            ],
            [
                "Timbaland"
            ],
            [
                "Justin Brown"
            ]
        ],
        "response": "There are the names of all singers.",
        "response_toks": [
            "There",
            "are",
            "the",
            "names",
            "of",
            "all",
            "singers",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT name FROM singer",
        "query_w_results_blank_res": "SELECT name FROM singer",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "singer"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "singer"
        ],
        "response_blank_res": "There are the names of all singers .",
        "response_toks_blank_res": [
            "There",
            "are",
            "the",
            "names",
            "of",
            "all",
            "singers",
            "."
        ]
    },
    {
        "database_id": "concert_singer",
        "query": "SELECT T2.name ,  count ( * )  FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id   =   T2.singer_id GROUP BY T2.singer_id",
        "query_toks": [
            "select",
            "t2",
            ".",
            "name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "singer_in_concert",
            "as",
            "t1",
            "join",
            "singer",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "singer_id",
            "=",
            "t2",
            ".",
            "singer_id",
            "group",
            "by",
            "t2",
            ".",
            "singer_id"
        ],
        "results_raw": [
            [
                "Name",
                "count(*)"
            ],
            [
                "Timbaland",
                2
            ],
            [
                "Justin Brown",
                3
            ],
            [
                "Rose White",
                1
            ]
        ],
        "response": "The table shows singer names and number of concerts for each singer.",
        "response_toks": [
            "The",
            "table",
            "shows",
            "singer",
            "names",
            "and",
            "number",
            "of",
            "concerts",
            "for",
            "each",
            "singer",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T2.name ,  count ( * )  FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id   =   T2.singer_id GROUP BY T2.singer_id",
        "query_w_results_blank_res": "SELECT T2.name ,  count ( * )  FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id   =   T2.singer_id GROUP BY T2.singer_id",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "singer_in_concert",
            "as",
            "t1",
            "join",
            "singer",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "singer_id",
            "=",
            "t2",
            ".",
            "singer_id",
            "group",
            "by",
            "t2",
            ".",
            "singer_id"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "singer_in_concert",
            "as",
            "t1",
            "join",
            "singer",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "singer_id",
            "=",
            "t2",
            ".",
            "singer_id",
            "group",
            "by",
            "t2",
            ".",
            "singer_id"
        ],
        "response_blank_res": "The table shows singer names and number of concerts for each singer .",
        "response_toks_blank_res": [
            "The",
            "table",
            "shows",
            "singer",
            "names",
            "and",
            "number",
            "of",
            "concerts",
            "for",
            "each",
            "singer",
            "."
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count ( distinct template_id )  FROM Documents",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "template_id",
            ")",
            "from",
            "documents"
        ],
        "results_raw": [
            [
                "count(distinct template_id)"
            ],
            [
                12
            ]
        ],
        "response": "Yes, there are 12 distinct template IDs.",
        "response_toks": [
            "Yes",
            ",",
            "there",
            "are",
            "12",
            "distinct",
            "template",
            "IDs",
            "."
        ],
        "results_map": {
            "result0": "12"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( distinct template_id )  FROM Documents | 12 ",
        "query_w_results_blank_res": "SELECT count ( distinct template_id )  FROM Documents | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "distinct",
            "template_id",
            ")",
            "from",
            "documents",
            "12"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "distinct",
            "template_id",
            ")",
            "from",
            "documents",
            "result0"
        ],
        "response_blank_res": "Yes , there are result0 distinct template IDs .",
        "response_toks_blank_res": [
            "Yes",
            ",",
            "there",
            "are",
            "result0",
            "distinct",
            "template",
            "IDs",
            "."
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count ( template_id )  FROM Documents GROUP BY template_id HAVING count ( * )   >  1",
        "query_toks": [
            "select",
            "count",
            "(",
            "template_id",
            ")",
            "from",
            "documents",
            "group",
            "by",
            "template_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "results_raw": [
            [
                "count(template_id)"
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2
            ]
        ],
        "response": "There are 2 template ids that are used by more than one document.",
        "response_toks": [
            "There",
            "are",
            "2",
            "template",
            "ids",
            "that",
            "are",
            "used",
            "by",
            "more",
            "than",
            "one",
            "document",
            "."
        ],
        "results_map": {
            "result0": "2"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( template_id )  FROM Documents GROUP BY template_id HAVING count ( * )   >  1 | 2 ",
        "query_w_results_blank_res": "SELECT count ( template_id )  FROM Documents GROUP BY template_id HAVING count ( * )   >  1 | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "template_id",
            ")",
            "from",
            "documents",
            "group",
            "by",
            "template_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1",
            "2"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "template_id",
            ")",
            "from",
            "documents",
            "group",
            "by",
            "template_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1",
            "result0"
        ],
        "response_blank_res": "There are result0 template ids that are used by more than one document .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "template",
            "ids",
            "that",
            "are",
            "used",
            "by",
            "more",
            "than",
            "one",
            "document",
            "."
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_id FROM Documents GROUP BY template_id HAVING count ( * )   >  1",
        "query_toks": [
            "select",
            "document_id",
            "from",
            "documents",
            "group",
            "by",
            "template_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "results_raw": [
            [
                "Document_ID"
            ],
            [
                385906526
            ],
            [
                3830
            ],
            [
                16514113
            ]
        ],
        "response": "The documents that use each of the template_ids that are used by more than one document are shown in the result table.",
        "response_toks": [
            "The",
            "documents",
            "that",
            "use",
            "each",
            "of",
            "the",
            "template_ids",
            "that",
            "are",
            "used",
            "by",
            "more",
            "than",
            "one",
            "document",
            "are",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT document_id FROM Documents GROUP BY template_id HAVING count ( * )   >  1",
        "query_w_results_blank_res": "SELECT document_id FROM Documents GROUP BY template_id HAVING count ( * )   >  1",
        "query_toks_w_results": [
            "select",
            "document_id",
            "from",
            "documents",
            "group",
            "by",
            "template_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "document_id",
            "from",
            "documents",
            "group",
            "by",
            "template_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "response_blank_res": "The documents that use each of the template_ids that are used by more than one document are shown in the result table .",
        "response_toks_blank_res": [
            "The",
            "documents",
            "that",
            "use",
            "each",
            "of",
            "the",
            "template_ids",
            "that",
            "are",
            "used",
            "by",
            "more",
            "than",
            "one",
            "document",
            "are",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id   =   T2.address_id WHERE T2.country   =   'Haiti'",
        "query_toks": [
            "select",
            "t1",
            ".",
            "first_name",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "addresses",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "permanent_address_id",
            "=",
            "t2",
            ".",
            "address_id",
            "where",
            "t2",
            ".",
            "country",
            "=",
            "'haiti'"
        ],
        "results_raw": [
            [
                "first_name"
            ],
            [
                "Hobart"
            ],
            [
                "Warren"
            ],
            [
                "Delaney"
            ]
        ],
        "response": "Here are the first names of the students who permanently live in the country Haiti",
        "response_toks": [
            "Here",
            "are",
            "the",
            "first",
            "names",
            "of",
            "the",
            "students",
            "who",
            "permanently",
            "live",
            "in",
            "the",
            "country",
            "Haiti"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id   =   T2.address_id WHERE T2.country   =   'Haiti'",
        "query_w_results_blank_res": "SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id   =   T2.address_id WHERE T2.country   =   'Haiti'",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "first_name",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "addresses",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "permanent_address_id",
            "=",
            "t2",
            ".",
            "address_id",
            "where",
            "t2",
            ".",
            "country",
            "=",
            "'haiti'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "first_name",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "addresses",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "permanent_address_id",
            "=",
            "t2",
            ".",
            "address_id",
            "where",
            "t2",
            ".",
            "country",
            "=",
            "'haiti'"
        ],
        "response_blank_res": "Here are the first names of the students who permanently live in the country Haiti",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "first",
            "names",
            "of",
            "the",
            "students",
            "who",
            "permanently",
            "live",
            "in",
            "the",
            "country",
            "Haiti"
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT first_name FROM Students WHERE cell_mobile_number  =  '09700166582'",
        "query_toks": [
            "select",
            "first_name",
            "from",
            "students",
            "where",
            "cell_mobile_number",
            "=",
            "'09700166582'"
        ],
        "results_raw": [
            [
                "first_name"
            ],
            [
                "Jarvis"
            ]
        ],
        "response": "the first name of the students who have the cell phone number 09700166582 is Jarvis",
        "response_toks": [
            "the",
            "first",
            "name",
            "of",
            "the",
            "students",
            "who",
            "have",
            "the",
            "cell",
            "phone",
            "number",
            "09700166582",
            "is",
            "Jarvis"
        ],
        "results_map": {
            "result0": "Jarvis"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT first_name FROM Students WHERE cell_mobile_number  =  '09700166582' | Jarvis ",
        "query_w_results_blank_res": "SELECT first_name FROM Students WHERE cell_mobile_number  =  '09700166582' | result0 ",
        "query_toks_w_results": [
            "select",
            "first_name",
            "from",
            "students",
            "where",
            "cell_mobile_number",
            "=",
            "'09700166582'",
            "Jarvis"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "first_name",
            "from",
            "students",
            "where",
            "cell_mobile_number",
            "=",
            "'09700166582'",
            "result0"
        ],
        "response_blank_res": "the first name of the students who have the cell phone number 09700166582 is result0",
        "response_toks_blank_res": [
            "the",
            "first",
            "name",
            "of",
            "the",
            "students",
            "who",
            "have",
            "the",
            "cell",
            "phone",
            "number",
            "09700166582",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT T1.last_name, * FROM Students as T1 join addresses as T2 on T1.current_address_id  =  T2.address_id WHERE T1.cell_mobile_number  =  '09700166582'",
        "query_toks": [
            "select",
            "t1",
            ".",
            "last_name",
            ",",
            "*",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "addresses",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "current_address_id",
            "=",
            "t2",
            ".",
            "address_id",
            "where",
            "t1",
            ".",
            "cell_mobile_number",
            "=",
            "'09700166582'"
        ],
        "results_raw": [
            [
                "last_name",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details"
            ],
            [
                "Carroll",
                7,
                "193 Marlin Brook",
                "Apt. 406",
                null,
                "Herzoghaven",
                "068",
                "Arkansas",
                "Cook Islands",
                null
            ]
        ],
        "response": "Here are the last name and the detailed current address of the student who has the cell phone number 09700166582",
        "response_toks": [
            "Here",
            "are",
            "the",
            "last",
            "name",
            "and",
            "the",
            "detailed",
            "current",
            "address",
            "of",
            "the",
            "student",
            "who",
            "has",
            "the",
            "cell",
            "phone",
            "number",
            "09700166582"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.last_name, * FROM Students as T1 join addresses as T2 on T1.current_address_id  =  T2.address_id WHERE T1.cell_mobile_number  =  '09700166582'",
        "query_w_results_blank_res": "SELECT T1.last_name, * FROM Students as T1 join addresses as T2 on T1.current_address_id  =  T2.address_id WHERE T1.cell_mobile_number  =  '09700166582'",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "last_name",
            ",",
            "*",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "addresses",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "current_address_id",
            "=",
            "t2",
            ".",
            "address_id",
            "where",
            "t1",
            ".",
            "cell_mobile_number",
            "=",
            "'09700166582'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "last_name",
            ",",
            "*",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "addresses",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "current_address_id",
            "=",
            "t2",
            ".",
            "address_id",
            "where",
            "t1",
            ".",
            "cell_mobile_number",
            "=",
            "'09700166582'"
        ],
        "response_blank_res": "Here are the last name and the detailed current address of the student who has the cell phone number 09700166582",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "last",
            "name",
            "and",
            "the",
            "detailed",
            "current",
            "address",
            "of",
            "the",
            "student",
            "who",
            "has",
            "the",
            "cell",
            "phone",
            "number",
            "09700166582"
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT email_address FROM Students where cell_mobile_number  =  '09700166582'",
        "query_toks": [
            "select",
            "email_address",
            "from",
            "students",
            "where",
            "cell_mobile_number",
            "=",
            "'09700166582'"
        ],
        "results_raw": [
            [
                "email_address"
            ],
            [
                "jillian26@example.net"
            ]
        ],
        "response": "the email address of the student who has the cell phone number 09700166582 is jillian26@example.net",
        "response_toks": [
            "the",
            "email",
            "address",
            "of",
            "the",
            "student",
            "who",
            "has",
            "the",
            "cell",
            "phone",
            "number",
            "09700166582",
            "is",
            "jillian26",
            "@",
            "example.net"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT email_address FROM Students where cell_mobile_number  =  '09700166582'",
        "query_w_results_blank_res": "SELECT email_address FROM Students where cell_mobile_number  =  '09700166582'",
        "query_toks_w_results": [
            "select",
            "email_address",
            "from",
            "students",
            "where",
            "cell_mobile_number",
            "=",
            "'09700166582'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "email_address",
            "from",
            "students",
            "where",
            "cell_mobile_number",
            "=",
            "'09700166582'"
        ],
        "response_blank_res": "the email address of the student who has the cell phone number 09700166582 is jillian26 @ example.net",
        "response_toks_blank_res": [
            "the",
            "email",
            "address",
            "of",
            "the",
            "student",
            "who",
            "has",
            "the",
            "cell",
            "phone",
            "number",
            "09700166582",
            "is",
            "jillian26",
            "@",
            "example.net"
        ]
    },
    {
        "database_id": "concert_singer",
        "query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id   =   T2.stadium_id WHERE T1.year   =   2014",
        "query_toks": [
            "select",
            "name",
            "from",
            "stadium",
            "except",
            "select",
            "t2",
            ".",
            "name",
            "from",
            "concert",
            "as",
            "t1",
            "join",
            "stadium",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stadium_id",
            "=",
            "t2",
            ".",
            "stadium_id",
            "where",
            "t1",
            ".",
            "year",
            "=",
            "2014"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Balmoor"
            ],
            [
                "Bayview Stadium"
            ],
            [
                "Forthbank Stadium"
            ]
        ],
        "response": "here are the name of the stadium that does not have a concert in year 2014",
        "response_toks": [
            "here",
            "are",
            "the",
            "name",
            "of",
            "the",
            "stadium",
            "that",
            "does",
            "not",
            "have",
            "a",
            "concert",
            "in",
            "year",
            "2014"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id   =   T2.stadium_id WHERE T1.year   =   2014",
        "query_w_results_blank_res": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id   =   T2.stadium_id WHERE T1.year   =   2014",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "stadium",
            "except",
            "select",
            "t2",
            ".",
            "name",
            "from",
            "concert",
            "as",
            "t1",
            "join",
            "stadium",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stadium_id",
            "=",
            "t2",
            ".",
            "stadium_id",
            "where",
            "t1",
            ".",
            "year",
            "=",
            "2014"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "stadium",
            "except",
            "select",
            "t2",
            ".",
            "name",
            "from",
            "concert",
            "as",
            "t1",
            "join",
            "stadium",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stadium_id",
            "=",
            "t2",
            ".",
            "stadium_id",
            "where",
            "t1",
            ".",
            "year",
            "=",
            "2014"
        ],
        "response_blank_res": "here are the name of the stadium that does not have a concert in year 2014",
        "response_toks_blank_res": [
            "here",
            "are",
            "the",
            "name",
            "of",
            "the",
            "stadium",
            "that",
            "does",
            "not",
            "have",
            "a",
            "concert",
            "in",
            "year",
            "2014"
        ]
    },
    {
        "database_id": "concert_singer",
        "query": "select Capacity from stadium where name  =  'Balmoor'",
        "query_toks": [
            "select",
            "capacity",
            "from",
            "stadium",
            "where",
            "name",
            "=",
            "'balmoor'"
        ],
        "results_raw": [
            [
                "Capacity"
            ],
            [
                4000
            ]
        ],
        "response": "the capacity of Balmoor is 4000",
        "response_toks": [
            "the",
            "capacity",
            "of",
            "Balmoor",
            "is",
            "4000"
        ],
        "results_map": {
            "result0": "4000"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "select Capacity from stadium where name  =  'Balmoor' | 4000 ",
        "query_w_results_blank_res": "select Capacity from stadium where name  =  'Balmoor' | result0 ",
        "query_toks_w_results": [
            "select",
            "capacity",
            "from",
            "stadium",
            "where",
            "name",
            "=",
            "'balmoor'",
            "4000"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "capacity",
            "from",
            "stadium",
            "where",
            "name",
            "=",
            "'balmoor'",
            "result0"
        ],
        "response_blank_res": "the capacity of Balmoor is result0",
        "response_toks_blank_res": [
            "the",
            "capacity",
            "of",
            "Balmoor",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "concert_singer",
        "query": "select T2.Theme from stadium as T1 join concert as T2 on T1.Stadium_ID  =  T2.Stadium_ID where T1.Name  =  'Balmoor'",
        "query_toks": [
            "select",
            "t2",
            ".",
            "theme",
            "from",
            "stadium",
            "as",
            "t1",
            "join",
            "concert",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stadium_id",
            "=",
            "t2",
            ".",
            "stadium_id",
            "where",
            "t1",
            ".",
            "name",
            "=",
            "'balmoor'"
        ],
        "results_raw": [
            [
                "Theme"
            ],
            [
                "Happy Tonight"
            ]
        ],
        "response": "the theme of Balmoor is Happy Tonight",
        "response_toks": [
            "the",
            "theme",
            "of",
            "Balmoor",
            "is",
            "Happy",
            "Tonight"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "select T2.Theme from stadium as T1 join concert as T2 on T1.Stadium_ID  =  T2.Stadium_ID where T1.Name  =  'Balmoor'",
        "query_w_results_blank_res": "select T2.Theme from stadium as T1 join concert as T2 on T1.Stadium_ID  =  T2.Stadium_ID where T1.Name  =  'Balmoor'",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "theme",
            "from",
            "stadium",
            "as",
            "t1",
            "join",
            "concert",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stadium_id",
            "=",
            "t2",
            ".",
            "stadium_id",
            "where",
            "t1",
            ".",
            "name",
            "=",
            "'balmoor'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "theme",
            "from",
            "stadium",
            "as",
            "t1",
            "join",
            "concert",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stadium_id",
            "=",
            "t2",
            ".",
            "stadium_id",
            "where",
            "t1",
            ".",
            "name",
            "=",
            "'balmoor'"
        ],
        "response_blank_res": "the theme of Balmoor is Happy Tonight",
        "response_toks_blank_res": [
            "the",
            "theme",
            "of",
            "Balmoor",
            "is",
            "Happy",
            "Tonight"
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT count ( * )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  ) ",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "dogs",
            "where",
            "dog_id",
            "in",
            "(",
            "select",
            "dog_id",
            "from",
            "treatments",
            ")"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                9
            ]
        ],
        "response": "9 dogs have gone through treatment.",
        "response_toks": [
            "9",
            "dogs",
            "have",
            "gone",
            "through",
            "treatment",
            "."
        ],
        "results_map": {
            "result0": "9"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  )  | 9 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  )  | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "dogs",
            "where",
            "dog_id",
            "in",
            "(",
            "select",
            "dog_id",
            "from",
            "treatments",
            ")",
            "9"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "dogs",
            "where",
            "dog_id",
            "in",
            "(",
            "select",
            "dog_id",
            "from",
            "treatments",
            ")",
            "result0"
        ],
        "response_blank_res": "result0 dogs have gone through treatment .",
        "response_toks_blank_res": [
            "result0",
            "dogs",
            "have",
            "gone",
            "through",
            "treatment",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT age FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  ) ",
        "query_toks": [
            "select",
            "age",
            "from",
            "dogs",
            "where",
            "dog_id",
            "in",
            "(",
            "select",
            "dog_id",
            "from",
            "treatments",
            ")"
        ],
        "results_raw": [
            [
                "age"
            ],
            [
                "6"
            ],
            [
                "9"
            ],
            [
                "5"
            ]
        ],
        "response": "These are the ages of dogs which have gone through treatment",
        "response_toks": [
            "These",
            "are",
            "the",
            "ages",
            "of",
            "dogs",
            "which",
            "have",
            "gone",
            "through",
            "treatment"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT age FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  ) ",
        "query_w_results_blank_res": "SELECT age FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  ) ",
        "query_toks_w_results": [
            "select",
            "age",
            "from",
            "dogs",
            "where",
            "dog_id",
            "in",
            "(",
            "select",
            "dog_id",
            "from",
            "treatments",
            ")"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "age",
            "from",
            "dogs",
            "where",
            "dog_id",
            "in",
            "(",
            "select",
            "dog_id",
            "from",
            "treatments",
            ")"
        ],
        "response_blank_res": "These are the ages of dogs which have gone through treatment",
        "response_toks_blank_res": [
            "These",
            "are",
            "the",
            "ages",
            "of",
            "dogs",
            "which",
            "have",
            "gone",
            "through",
            "treatment"
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT weight FROM Dogs WHERE age = 2 ORDER BY weight DESC LIMIT 1",
        "query_toks": [
            "select",
            "weight",
            "from",
            "dogs",
            "where",
            "age",
            "=",
            "2",
            "order",
            "by",
            "weight",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "weight"
            ],
            [
                "9.48"
            ]
        ],
        "response": "This is the highest weight among dogs of age 2.",
        "response_toks": [
            "This",
            "is",
            "the",
            "highest",
            "weight",
            "among",
            "dogs",
            "of",
            "age",
            "2",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT weight FROM Dogs WHERE age = 2 ORDER BY weight DESC LIMIT 1",
        "query_w_results_blank_res": "SELECT weight FROM Dogs WHERE age = 2 ORDER BY weight DESC LIMIT 1",
        "query_toks_w_results": [
            "select",
            "weight",
            "from",
            "dogs",
            "where",
            "age",
            "=",
            "2",
            "order",
            "by",
            "weight",
            "desc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "weight",
            "from",
            "dogs",
            "where",
            "age",
            "=",
            "2",
            "order",
            "by",
            "weight",
            "desc",
            "limit",
            "1"
        ],
        "response_blank_res": "This is the highest weight among dogs of age 2 .",
        "response_toks_blank_res": [
            "This",
            "is",
            "the",
            "highest",
            "weight",
            "among",
            "dogs",
            "of",
            "age",
            "2",
            "."
        ]
    },
    {
        "database_id": "course_teach",
        "query": "SELECT COUNT ( * )  FROM teacher",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "teacher"
        ],
        "results_raw": [
            [
                "COUNT(*)"
            ],
            [
                7
            ]
        ],
        "response": "There are 7 teachers",
        "response_toks": [
            "There",
            "are",
            "7",
            "teachers"
        ],
        "results_map": {
            "result0": "7"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT COUNT ( * )  FROM teacher | 7 ",
        "query_w_results_blank_res": "SELECT COUNT ( * )  FROM teacher | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "teacher",
            "7"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "teacher",
            "result0"
        ],
        "response_blank_res": "There are result0 teachers",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "teachers"
        ]
    },
    {
        "database_id": "course_teach",
        "query": "SELECT COUNT ( * )  FROM course_arrange",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "course_arrange"
        ],
        "results_raw": [
            [
                "COUNT(*)"
            ],
            [
                6
            ]
        ],
        "response": "There are 6 different courses",
        "response_toks": [
            "There",
            "are",
            "6",
            "different",
            "courses"
        ],
        "results_map": {
            "result0": "6"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT COUNT ( * )  FROM course_arrange | 6 ",
        "query_w_results_blank_res": "SELECT COUNT ( * )  FROM course_arrange | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "course_arrange",
            "6"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "course_arrange",
            "result0"
        ],
        "response_blank_res": "There are result0 different courses",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "different",
            "courses"
        ]
    },
    {
        "database_id": "course_teach",
        "query": "SELECT T2.Name , COUNT ( * )  FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
        "query_toks": [
            "select",
            "t2",
            ".",
            "name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "course_arrange",
            "as",
            "t1",
            "join",
            "teacher",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "teacher_id",
            "=",
            "t2",
            ".",
            "teacher_id",
            "group",
            "by",
            "t2",
            ".",
            "name"
        ],
        "results_raw": [
            [
                "Name",
                "COUNT(*)"
            ],
            [
                "Anne Walker",
                2
            ],
            [
                "Gustaaf Deloor",
                1
            ],
            [
                "Kearsley Brown",
                1
            ]
        ],
        "response": "Here are the names of teachers and the number of courses they teach",
        "response_toks": [
            "Here",
            "are",
            "the",
            "names",
            "of",
            "teachers",
            "and",
            "the",
            "number",
            "of",
            "courses",
            "they",
            "teach"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T2.Name , COUNT ( * )  FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
        "query_w_results_blank_res": "SELECT T2.Name , COUNT ( * )  FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "course_arrange",
            "as",
            "t1",
            "join",
            "teacher",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "teacher_id",
            "=",
            "t2",
            ".",
            "teacher_id",
            "group",
            "by",
            "t2",
            ".",
            "name"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "course_arrange",
            "as",
            "t1",
            "join",
            "teacher",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "teacher_id",
            "=",
            "t2",
            ".",
            "teacher_id",
            "group",
            "by",
            "t2",
            ".",
            "name"
        ],
        "response_blank_res": "Here are the names of teachers and the number of courses they teach",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "names",
            "of",
            "teachers",
            "and",
            "the",
            "number",
            "of",
            "courses",
            "they",
            "teach"
        ]
    },
    {
        "database_id": "course_teach",
        "query": "SELECT Name , age FROM teacher",
        "query_toks": [
            "select",
            "name",
            ",",
            "age",
            "from",
            "teacher"
        ],
        "results_raw": [
            [
                "Name",
                "Age"
            ],
            [
                "Joseph Huts",
                "32"
            ],
            [
                "Gustaaf Deloor",
                "29"
            ],
            [
                "Vicente Carretero",
                "26"
            ]
        ],
        "response": "Here are the names and the ages of all the teachers",
        "response_toks": [
            "Here",
            "are",
            "the",
            "names",
            "and",
            "the",
            "ages",
            "of",
            "all",
            "the",
            "teachers"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Name , age FROM teacher",
        "query_w_results_blank_res": "SELECT Name , age FROM teacher",
        "query_toks_w_results": [
            "select",
            "name",
            ",",
            "age",
            "from",
            "teacher"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            ",",
            "age",
            "from",
            "teacher"
        ],
        "response_blank_res": "Here are the names and the ages of all the teachers",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "names",
            "and",
            "the",
            "ages",
            "of",
            "all",
            "the",
            "teachers"
        ]
    },
    {
        "database_id": "battle_death",
        "query": "SELECT latin_commander FROM battle WHERE name  =  \"Battle of Serres\"",
        "query_toks": [
            "select",
            "latin_commander",
            "from",
            "battle",
            "where",
            "name",
            "=",
            "\"battle",
            "of",
            "serres\""
        ],
        "results_raw": [
            [
                "latin_commander"
            ],
            [
                "Unknown"
            ]
        ],
        "response": "The Latin commandar of Battle of Serres is Unknown",
        "response_toks": [
            "The",
            "Latin",
            "commandar",
            "of",
            "Battle",
            "of",
            "Serres",
            "is",
            "Unknown"
        ],
        "results_map": {
            "result0": "Unknown"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT latin_commander FROM battle WHERE name  =  \"Battle of Serres\" | Unknown ",
        "query_w_results_blank_res": "SELECT latin_commander FROM battle WHERE name  =  \"Battle of Serres\" | result0 ",
        "query_toks_w_results": [
            "select",
            "latin_commander",
            "from",
            "battle",
            "where",
            "name",
            "=",
            "\"battle",
            "of",
            "serres\"",
            "Unknown"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "latin_commander",
            "from",
            "battle",
            "where",
            "name",
            "=",
            "\"battle",
            "of",
            "serres\"",
            "result0"
        ],
        "response_blank_res": "The Latin commandar of Battle of Serres is result0",
        "response_toks_blank_res": [
            "The",
            "Latin",
            "commandar",
            "of",
            "Battle",
            "of",
            "Serres",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "battle_death",
        "query": "SELECT result FROM battle WHERE date  =  \"31 January 1206\"",
        "query_toks": [
            "select",
            "result",
            "from",
            "battle",
            "where",
            "date",
            "=",
            "\"31",
            "january",
            "1206\""
        ],
        "results_raw": [
            [
                "result"
            ],
            [
                "Bulgarian victory"
            ]
        ],
        "response": "The result of the battle with a date 31 Jan 1206 is Bulgarian victory",
        "response_toks": [
            "The",
            "result",
            "of",
            "the",
            "battle",
            "with",
            "a",
            "date",
            "31",
            "Jan",
            "1206",
            "is",
            "Bulgarian",
            "victory"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT result FROM battle WHERE date  =  \"31 January 1206\"",
        "query_w_results_blank_res": "SELECT result FROM battle WHERE date  =  \"31 January 1206\"",
        "query_toks_w_results": [
            "select",
            "result",
            "from",
            "battle",
            "where",
            "date",
            "=",
            "\"31",
            "january",
            "1206\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "result",
            "from",
            "battle",
            "where",
            "date",
            "=",
            "\"31",
            "january",
            "1206\""
        ],
        "response_blank_res": "The result of the battle with a date 31 Jan 1206 is Bulgarian victory",
        "response_toks_blank_res": [
            "The",
            "result",
            "of",
            "the",
            "battle",
            "with",
            "a",
            "date",
            "31",
            "Jan",
            "1206",
            "is",
            "Bulgarian",
            "victory"
        ]
    },
    {
        "database_id": "battle_death",
        "query": "SELECT bulgarian_commander FROM battle WHERE date  =  \"June 1205\"",
        "query_toks": [
            "select",
            "bulgarian_commander",
            "from",
            "battle",
            "where",
            "date",
            "=",
            "\"june",
            "1205\""
        ],
        "results_raw": [
            [
                "bulgarian_commander"
            ],
            [
                "Kaloyan"
            ],
            [
                "Boril"
            ]
        ],
        "response": "The bulgarian commaned on Jun 1205 are Kaloyan and Boril",
        "response_toks": [
            "The",
            "bulgarian",
            "commaned",
            "on",
            "Jun",
            "1205",
            "are",
            "Kaloyan",
            "and",
            "Boril"
        ],
        "results_map": {
            "result0": "Kaloyan",
            "result1": "Boril"
        },
        "results_blank_res": "result0 result1 ",
        "query_w_results": "SELECT bulgarian_commander FROM battle WHERE date  =  \"June 1205\" | Kaloyan Boril ",
        "query_w_results_blank_res": "SELECT bulgarian_commander FROM battle WHERE date  =  \"June 1205\" | result0 result1 ",
        "query_toks_w_results": [
            "select",
            "bulgarian_commander",
            "from",
            "battle",
            "where",
            "date",
            "=",
            "\"june",
            "1205\"",
            "Kaloyan",
            "Boril"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "bulgarian_commander",
            "from",
            "battle",
            "where",
            "date",
            "=",
            "\"june",
            "1205\"",
            "result0",
            "result1"
        ],
        "response_blank_res": "The bulgarian commaned on Jun 1205 are result0 and result1",
        "response_toks_blank_res": [
            "The",
            "bulgarian",
            "commaned",
            "on",
            "Jun",
            "1205",
            "are",
            "result0",
            "and",
            "result1"
        ]
    },
    {
        "database_id": "battle_death",
        "query": "SELECT name FROM battle WHERE latin_commander  =  \"Baldwin I\"",
        "query_toks": [
            "select",
            "name",
            "from",
            "battle",
            "where",
            "latin_commander",
            "=",
            "\"baldwin",
            "i\""
        ],
        "results_raw": [
            [
                "name"
            ],
            [
                "Battle of Adrianople"
            ]
        ],
        "response": "The name of balwin 1 is Battle of Adrianople",
        "response_toks": [
            "The",
            "name",
            "of",
            "balwin",
            "1",
            "is",
            "Battle",
            "of",
            "Adrianople"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT name FROM battle WHERE latin_commander  =  \"Baldwin I\"",
        "query_w_results_blank_res": "SELECT name FROM battle WHERE latin_commander  =  \"Baldwin I\"",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "battle",
            "where",
            "latin_commander",
            "=",
            "\"baldwin",
            "i\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "battle",
            "where",
            "latin_commander",
            "=",
            "\"baldwin",
            "i\""
        ],
        "response_blank_res": "The name of balwin 1 is Battle of Adrianople",
        "response_toks_blank_res": [
            "The",
            "name",
            "of",
            "balwin",
            "1",
            "is",
            "Battle",
            "of",
            "Adrianople"
        ]
    },
    {
        "database_id": "tvshow",
        "query": "SELECT count ( * )  FROM TV_Channel",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "tv_channel"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                15
            ]
        ],
        "response": "There are 15 TV Channels.",
        "response_toks": [
            "There",
            "are",
            "15",
            "TV",
            "Channels",
            "."
        ],
        "results_map": {
            "result0": "15"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM TV_Channel | 15 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM TV_Channel | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "tv_channel",
            "15"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "tv_channel",
            "result0"
        ],
        "response_blank_res": "There are result0 TV Channels .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "TV",
            "Channels",
            "."
        ]
    },
    {
        "database_id": "tvshow",
        "query": "SELECT language FROM TV_Channel where series_name = 'Sky Music'",
        "query_toks": [
            "select",
            "language",
            "from",
            "tv_channel",
            "where",
            "series_name",
            "=",
            "'sky",
            "music'"
        ],
        "results_raw": [
            [
                "Language"
            ],
            [
                "Italian"
            ]
        ],
        "response": "The language of the series sky music is Italian",
        "response_toks": [
            "The",
            "language",
            "of",
            "the",
            "series",
            "sky",
            "music",
            "is",
            "Italian"
        ],
        "results_map": {
            "result0": "Italian"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT language FROM TV_Channel where series_name = 'Sky Music' | Italian ",
        "query_w_results_blank_res": "SELECT language FROM TV_Channel where series_name = 'Sky Music' | result0 ",
        "query_toks_w_results": [
            "select",
            "language",
            "from",
            "tv_channel",
            "where",
            "series_name",
            "=",
            "'sky",
            "music'",
            "Italian"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "language",
            "from",
            "tv_channel",
            "where",
            "series_name",
            "=",
            "'sky",
            "music'",
            "result0"
        ],
        "response_blank_res": "The language of the series sky music is result0",
        "response_toks_blank_res": [
            "The",
            "language",
            "of",
            "the",
            "series",
            "sky",
            "music",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "tvshow",
        "query": "SELECT title FROM Cartoon where id = 2.0",
        "query_toks": [
            "select",
            "title",
            "from",
            "cartoon",
            "where",
            "id",
            "=",
            "2.0"
        ],
        "results_raw": [
            [
                "Title"
            ],
            [
                "Terror on Dinosaur Island!"
            ]
        ],
        "response": "the title of the cartoon with id 2.0 is Terror on Dinosaur Island!",
        "response_toks": [
            "the",
            "title",
            "of",
            "the",
            "cartoon",
            "with",
            "id",
            "2.0",
            "is",
            "Terror",
            "on",
            "Dinosaur",
            "Island",
            "!"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT title FROM Cartoon where id = 2.0",
        "query_w_results_blank_res": "SELECT title FROM Cartoon where id = 2.0",
        "query_toks_w_results": [
            "select",
            "title",
            "from",
            "cartoon",
            "where",
            "id",
            "=",
            "2.0"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "title",
            "from",
            "cartoon",
            "where",
            "id",
            "=",
            "2.0"
        ],
        "response_blank_res": "the title of the cartoon with id 2.0 is Terror on Dinosaur Island !",
        "response_toks_blank_res": [
            "the",
            "title",
            "of",
            "the",
            "cartoon",
            "with",
            "id",
            "2.0",
            "is",
            "Terror",
            "on",
            "Dinosaur",
            "Island",
            "!"
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT Horsepower FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1",
        "query_toks": [
            "select",
            "horsepower",
            "from",
            "cars_data",
            "order",
            "by",
            "horsepower",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Horsepower"
            ],
            [
                "null"
            ]
        ],
        "response": "The highest horsepower on the table is null.",
        "response_toks": [
            "The",
            "highest",
            "horsepower",
            "on",
            "the",
            "table",
            "is",
            "null",
            "."
        ],
        "results_map": {
            "result0": "null"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT Horsepower FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 | null ",
        "query_w_results_blank_res": "SELECT Horsepower FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "horsepower",
            "from",
            "cars_data",
            "order",
            "by",
            "horsepower",
            "desc",
            "limit",
            "1",
            "null"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "horsepower",
            "from",
            "cars_data",
            "order",
            "by",
            "horsepower",
            "desc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "The highest horsepower on the table is result0 .",
        "response_toks_blank_res": [
            "The",
            "highest",
            "horsepower",
            "on",
            "the",
            "table",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT count ( * )  FROM CARS_DATA",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "cars_data"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                406
            ]
        ],
        "response": "There are 406 entries in the cars data table.",
        "response_toks": [
            "There",
            "are",
            "406",
            "entries",
            "in",
            "the",
            "cars",
            "data",
            "table",
            "."
        ],
        "results_map": {
            "result0": "406"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM CARS_DATA | 406 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM CARS_DATA | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "cars_data",
            "406"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "cars_data",
            "result0"
        ],
        "response_blank_res": "There are result0 entries in the cars data table .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "entries",
            "in",
            "the",
            "cars",
            "data",
            "table",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT sum ( cylinders )  FROM CARS_DATA",
        "query_toks": [
            "select",
            "sum",
            "(",
            "cylinders",
            ")",
            "from",
            "cars_data"
        ],
        "results_raw": [
            [
                "sum(cylinders)"
            ],
            [
                2223
            ]
        ],
        "response": "There are a total of 2223 cylinders among entries in the cars data table.",
        "response_toks": [
            "There",
            "are",
            "a",
            "total",
            "of",
            "2223",
            "cylinders",
            "among",
            "entries",
            "in",
            "the",
            "cars",
            "data",
            "table",
            "."
        ],
        "results_map": {
            "result0": "2223"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT sum ( cylinders )  FROM CARS_DATA | 2223 ",
        "query_w_results_blank_res": "SELECT sum ( cylinders )  FROM CARS_DATA | result0 ",
        "query_toks_w_results": [
            "select",
            "sum",
            "(",
            "cylinders",
            ")",
            "from",
            "cars_data",
            "2223"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "sum",
            "(",
            "cylinders",
            ")",
            "from",
            "cars_data",
            "result0"
        ],
        "response_blank_res": "There are a total of result0 cylinders among entries in the cars data table .",
        "response_toks_blank_res": [
            "There",
            "are",
            "a",
            "total",
            "of",
            "result0",
            "cylinders",
            "among",
            "entries",
            "in",
            "the",
            "cars",
            "data",
            "table",
            "."
        ]
    },
    {
        "database_id": "employee_hire_evaluation",
        "query": "SELECT district FROM shop ORDER BY number_products DESC LIMIT 1",
        "query_toks": [
            "select",
            "district",
            "from",
            "shop",
            "order",
            "by",
            "number_products",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "District"
            ],
            [
                "Lahden Stadion"
            ]
        ],
        "response": "Lahden Stadion has the largest number of products",
        "response_toks": [
            "Lahden",
            "Stadion",
            "has",
            "the",
            "largest",
            "number",
            "of",
            "products"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT district FROM shop ORDER BY number_products DESC LIMIT 1",
        "query_w_results_blank_res": "SELECT district FROM shop ORDER BY number_products DESC LIMIT 1",
        "query_toks_w_results": [
            "select",
            "district",
            "from",
            "shop",
            "order",
            "by",
            "number_products",
            "desc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "district",
            "from",
            "shop",
            "order",
            "by",
            "number_products",
            "desc",
            "limit",
            "1"
        ],
        "response_blank_res": "Lahden Stadion has the largest number of products",
        "response_toks_blank_res": [
            "Lahden",
            "Stadion",
            "has",
            "the",
            "largest",
            "number",
            "of",
            "products"
        ]
    },
    {
        "database_id": "employee_hire_evaluation",
        "query": "SELECT manager_name FROM shop ORDER BY number_products DESC LIMIT 1",
        "query_toks": [
            "select",
            "manager_name",
            "from",
            "shop",
            "order",
            "by",
            "number_products",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Manager_name"
            ],
            [
                "Ilkka M\u00e4kel\u00e4"
            ]
        ],
        "response": "Ilkka M\u00e4kel\u00e4 is the manager of the shop which has the largest number of products.",
        "response_toks": [
            "Ilkka",
            "M\u00e4kel\u00e4",
            "is",
            "the",
            "manager",
            "of",
            "the",
            "shop",
            "which",
            "has",
            "the",
            "largest",
            "number",
            "of",
            "products",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT manager_name FROM shop ORDER BY number_products DESC LIMIT 1",
        "query_w_results_blank_res": "SELECT manager_name FROM shop ORDER BY number_products DESC LIMIT 1",
        "query_toks_w_results": [
            "select",
            "manager_name",
            "from",
            "shop",
            "order",
            "by",
            "number_products",
            "desc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "manager_name",
            "from",
            "shop",
            "order",
            "by",
            "number_products",
            "desc",
            "limit",
            "1"
        ],
        "response_blank_res": "Ilkka M\u00e4kel\u00e4 is the manager of the shop which has the largest number of products .",
        "response_toks_blank_res": [
            "Ilkka",
            "M\u00e4kel\u00e4",
            "is",
            "the",
            "manager",
            "of",
            "the",
            "shop",
            "which",
            "has",
            "the",
            "largest",
            "number",
            "of",
            "products",
            "."
        ]
    },
    {
        "database_id": "employee_hire_evaluation",
        "query": "SELECT number_products FROM shop ORDER BY number_products DESC LIMIT 1",
        "query_toks": [
            "select",
            "number_products",
            "from",
            "shop",
            "order",
            "by",
            "number_products",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Number_products"
            ],
            [
                15000
            ]
        ],
        "response": "The number of products in the shop of that manager which has the largest number of products is 15000.",
        "response_toks": [
            "The",
            "number",
            "of",
            "products",
            "in",
            "the",
            "shop",
            "of",
            "that",
            "manager",
            "which",
            "has",
            "the",
            "largest",
            "number",
            "of",
            "products",
            "is",
            "15000",
            "."
        ],
        "results_map": {
            "result0": "15000"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT number_products FROM shop ORDER BY number_products DESC LIMIT 1 | 15000 ",
        "query_w_results_blank_res": "SELECT number_products FROM shop ORDER BY number_products DESC LIMIT 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "number_products",
            "from",
            "shop",
            "order",
            "by",
            "number_products",
            "desc",
            "limit",
            "1",
            "15000"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "number_products",
            "from",
            "shop",
            "order",
            "by",
            "number_products",
            "desc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "The number of products in the shop of that manager which has the largest number of products is result0 .",
        "response_toks_blank_res": [
            "The",
            "number",
            "of",
            "products",
            "in",
            "the",
            "shop",
            "of",
            "that",
            "manager",
            "which",
            "has",
            "the",
            "largest",
            "number",
            "of",
            "products",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "employee_hire_evaluation",
        "query": "SELECT location FROM shop ORDER BY number_products DESC LIMIT 1",
        "query_toks": [
            "select",
            "location",
            "from",
            "shop",
            "order",
            "by",
            "number_products",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Location"
            ],
            [
                "Lahti"
            ]
        ],
        "response": "The location of the district that has the shop with the largest number of products is Lahti",
        "response_toks": [
            "The",
            "location",
            "of",
            "the",
            "district",
            "that",
            "has",
            "the",
            "shop",
            "with",
            "the",
            "largest",
            "number",
            "of",
            "products",
            "is",
            "Lahti"
        ],
        "results_map": {
            "result0": "Lahti"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT location FROM shop ORDER BY number_products DESC LIMIT 1 | Lahti ",
        "query_w_results_blank_res": "SELECT location FROM shop ORDER BY number_products DESC LIMIT 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "location",
            "from",
            "shop",
            "order",
            "by",
            "number_products",
            "desc",
            "limit",
            "1",
            "Lahti"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "location",
            "from",
            "shop",
            "order",
            "by",
            "number_products",
            "desc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "The location of the district that has the shop with the largest number of products is result0",
        "response_toks_blank_res": [
            "The",
            "location",
            "of",
            "the",
            "district",
            "that",
            "has",
            "the",
            "shop",
            "with",
            "the",
            "largest",
            "number",
            "of",
            "products",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "employee_hire_evaluation",
        "query": "SELECT shop_ID FROM shop ORDER BY number_products DESC LIMIT 1",
        "query_toks": [
            "select",
            "shop_id",
            "from",
            "shop",
            "order",
            "by",
            "number_products",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Shop_ID"
            ],
            [
                8
            ]
        ],
        "response": "The shop id of the shop which has the largest number of products is 8",
        "response_toks": [
            "The",
            "shop",
            "id",
            "of",
            "the",
            "shop",
            "which",
            "has",
            "the",
            "largest",
            "number",
            "of",
            "products",
            "is",
            "8"
        ],
        "results_map": {
            "result0": "8"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT shop_ID FROM shop ORDER BY number_products DESC LIMIT 1 | 8 ",
        "query_w_results_blank_res": "SELECT shop_ID FROM shop ORDER BY number_products DESC LIMIT 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "shop_id",
            "from",
            "shop",
            "order",
            "by",
            "number_products",
            "desc",
            "limit",
            "1",
            "8"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "shop_id",
            "from",
            "shop",
            "order",
            "by",
            "number_products",
            "desc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "The shop id of the shop which has the largest number of products is result0",
        "response_toks_blank_res": [
            "The",
            "shop",
            "id",
            "of",
            "the",
            "shop",
            "which",
            "has",
            "the",
            "largest",
            "number",
            "of",
            "products",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT avg ( Population )  FROM city",
        "query_toks": [
            "select",
            "avg",
            "(",
            "population",
            ")",
            "from",
            "city"
        ],
        "results_raw": [
            [
                "avg(Population)"
            ],
            [
                350468.22358421184
            ]
        ],
        "response": "the average population of all cities is 350468.22358421184",
        "response_toks": [
            "the",
            "average",
            "population",
            "of",
            "all",
            "cities",
            "is",
            "350468.22358421184"
        ],
        "results_map": {
            "result0": "350468.22358421184"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT avg ( Population )  FROM city | 350468.22358421184 ",
        "query_w_results_blank_res": "SELECT avg ( Population )  FROM city | result0 ",
        "query_toks_w_results": [
            "select",
            "avg",
            "(",
            "population",
            ")",
            "from",
            "city",
            "350468.22358421184"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "avg",
            "(",
            "population",
            ")",
            "from",
            "city",
            "result0"
        ],
        "response_blank_res": "the average population of all cities is result0",
        "response_toks_blank_res": [
            "the",
            "average",
            "population",
            "of",
            "all",
            "cities",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT District FROM city WHERE Population  >   ( SELECT avg ( Population )  FROM city ) ",
        "query_toks": [
            "select",
            "district",
            "from",
            "city",
            "where",
            "population",
            ">",
            "(",
            "select",
            "avg",
            "(",
            "population",
            ")",
            "from",
            "city",
            ")"
        ],
        "results_raw": [
            [
                "District"
            ],
            [
                "Kabol"
            ],
            [
                "Noord-Holland"
            ],
            [
                "Zuid-Holland"
            ]
        ],
        "response": "Here is the result table of the districts which have cities with populations greater than the average. For example, one of them is Kabol.",
        "response_toks": [
            "Here",
            "is",
            "the",
            "result",
            "table",
            "of",
            "the",
            "districts",
            "which",
            "have",
            "cities",
            "with",
            "populations",
            "greater",
            "than",
            "the",
            "average",
            ".",
            "For",
            "example",
            ",",
            "one",
            "of",
            "them",
            "is",
            "Kabol",
            "."
        ],
        "results_map": {
            "result0": "Kabol"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT District FROM city WHERE Population  >   ( SELECT avg ( Population )  FROM city )  | Kabol ",
        "query_w_results_blank_res": "SELECT District FROM city WHERE Population  >   ( SELECT avg ( Population )  FROM city )  | result0 ",
        "query_toks_w_results": [
            "select",
            "district",
            "from",
            "city",
            "where",
            "population",
            ">",
            "(",
            "select",
            "avg",
            "(",
            "population",
            ")",
            "from",
            "city",
            ")",
            "Kabol"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "district",
            "from",
            "city",
            "where",
            "population",
            ">",
            "(",
            "select",
            "avg",
            "(",
            "population",
            ")",
            "from",
            "city",
            ")",
            "result0"
        ],
        "response_blank_res": "Here is the result table of the districts which have cities with populations greater than the average . For example , one of them is result0 .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "result",
            "table",
            "of",
            "the",
            "districts",
            "which",
            "have",
            "cities",
            "with",
            "populations",
            "greater",
            "than",
            "the",
            "average",
            ".",
            "For",
            "example",
            ",",
            "one",
            "of",
            "them",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT count ( * )  ,  District FROM city WHERE Population  >   ( SELECT avg ( Population )  FROM city )  GROUP BY District",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "district",
            "from",
            "city",
            "where",
            "population",
            ">",
            "(",
            "select",
            "avg",
            "(",
            "population",
            ")",
            "from",
            "city",
            ")",
            "group",
            "by",
            "district"
        ],
        "results_raw": [
            [
                "count(*)",
                "District"
            ],
            [
                1,
                "Abidjan"
            ],
            [
                1,
                "Abu Dhabi"
            ],
            [
                1,
                "Adana"
            ]
        ],
        "response": "Here is the result table of the number of cities in each district whose population is greater than the average population of cities. For example, district Abidjan has only one city with a population greater than the average.",
        "response_toks": [
            "Here",
            "is",
            "the",
            "result",
            "table",
            "of",
            "the",
            "number",
            "of",
            "cities",
            "in",
            "each",
            "district",
            "whose",
            "population",
            "is",
            "greater",
            "than",
            "the",
            "average",
            "population",
            "of",
            "cities",
            ".",
            "For",
            "example",
            ",",
            "district",
            "Abidjan",
            "has",
            "only",
            "one",
            "city",
            "with",
            "a",
            "population",
            "greater",
            "than",
            "the",
            "average",
            "."
        ],
        "results_map": {
            "result0": "Abidjan"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  ,  District FROM city WHERE Population  >   ( SELECT avg ( Population )  FROM city )  GROUP BY District | Abidjan ",
        "query_w_results_blank_res": "SELECT count ( * )  ,  District FROM city WHERE Population  >   ( SELECT avg ( Population )  FROM city )  GROUP BY District | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "district",
            "from",
            "city",
            "where",
            "population",
            ">",
            "(",
            "select",
            "avg",
            "(",
            "population",
            ")",
            "from",
            "city",
            ")",
            "group",
            "by",
            "district",
            "Abidjan"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "district",
            "from",
            "city",
            "where",
            "population",
            ">",
            "(",
            "select",
            "avg",
            "(",
            "population",
            ")",
            "from",
            "city",
            ")",
            "group",
            "by",
            "district",
            "result0"
        ],
        "response_blank_res": "Here is the result table of the number of cities in each district whose population is greater than the average population of cities . For example , district result0 has only one city with a population greater than the average .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "result",
            "table",
            "of",
            "the",
            "number",
            "of",
            "cities",
            "in",
            "each",
            "district",
            "whose",
            "population",
            "is",
            "greater",
            "than",
            "the",
            "average",
            "population",
            "of",
            "cities",
            ".",
            "For",
            "example",
            ",",
            "district",
            "result0",
            "has",
            "only",
            "one",
            "city",
            "with",
            "a",
            "population",
            "greater",
            "than",
            "the",
            "average",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT Name FROM country WHERE GovernmentForm   =   \"US Territory\"",
        "query_toks": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "governmentform",
            "=",
            "\"us",
            "territory\""
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "American Samoa"
            ],
            [
                "Guam"
            ],
            [
                "Virgin Islands, U.S."
            ]
        ],
        "response": "Here are the names of the nations whose government form is US territory.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "names",
            "of",
            "the",
            "nations",
            "whose",
            "government",
            "form",
            "is",
            "US",
            "territory",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Name FROM country WHERE GovernmentForm   =   \"US Territory\"",
        "query_w_results_blank_res": "SELECT Name FROM country WHERE GovernmentForm   =   \"US Territory\"",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "governmentform",
            "=",
            "\"us",
            "territory\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "governmentform",
            "=",
            "\"us",
            "territory\""
        ],
        "response_blank_res": "Here are the names of the nations whose government form is US territory .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "names",
            "of",
            "the",
            "nations",
            "whose",
            "government",
            "form",
            "is",
            "US",
            "territory",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT GNP, population FROM country WHERE GovernmentForm   =   \"US Territory\"",
        "query_toks": [
            "select",
            "gnp",
            ",",
            "population",
            "from",
            "country",
            "where",
            "governmentform",
            "=",
            "\"us",
            "territory\""
        ],
        "results_raw": [
            [
                "GNP",
                "Population"
            ],
            [
                334.0,
                68000
            ],
            [
                1197.0,
                168000
            ],
            [
                0.0,
                93000
            ]
        ],
        "response": "Here are the GNP and population of nations whose government form is US territory.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "GNP",
            "and",
            "population",
            "of",
            "nations",
            "whose",
            "government",
            "form",
            "is",
            "US",
            "territory",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT GNP, population FROM country WHERE GovernmentForm   =   \"US Territory\"",
        "query_w_results_blank_res": "SELECT GNP, population FROM country WHERE GovernmentForm   =   \"US Territory\"",
        "query_toks_w_results": [
            "select",
            "gnp",
            ",",
            "population",
            "from",
            "country",
            "where",
            "governmentform",
            "=",
            "\"us",
            "territory\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "gnp",
            ",",
            "population",
            "from",
            "country",
            "where",
            "governmentform",
            "=",
            "\"us",
            "territory\""
        ],
        "response_blank_res": "Here are the GNP and population of nations whose government form is US territory .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "GNP",
            "and",
            "population",
            "of",
            "nations",
            "whose",
            "government",
            "form",
            "is",
            "US",
            "territory",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT avg ( GNP )  ,  sum ( population )  FROM country WHERE GovernmentForm   =   \"US Territory\"",
        "query_toks": [
            "select",
            "avg",
            "(",
            "gnp",
            ")",
            ",",
            "sum",
            "(",
            "population",
            ")",
            "from",
            "country",
            "where",
            "governmentform",
            "=",
            "\"us",
            "territory\""
        ],
        "results_raw": [
            [
                "avg(GNP)",
                "sum(population)"
            ],
            [
                510.3333333333333,
                329000
            ]
        ],
        "response": "Here are the average GNP and total population in all nations whose government form is US territory, which are 510.3333333333333 and 329000.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "average",
            "GNP",
            "and",
            "total",
            "population",
            "in",
            "all",
            "nations",
            "whose",
            "government",
            "form",
            "is",
            "US",
            "territory",
            ",",
            "which",
            "are",
            "510.3333333333333",
            "and",
            "329000",
            "."
        ],
        "results_map": {
            "result0": "510.3333333333333",
            "result1": "329000"
        },
        "results_blank_res": "result0 result1 ",
        "query_w_results": "SELECT avg ( GNP )  ,  sum ( population )  FROM country WHERE GovernmentForm   =   \"US Territory\" | 510.3333333333333 329000 ",
        "query_w_results_blank_res": "SELECT avg ( GNP )  ,  sum ( population )  FROM country WHERE GovernmentForm   =   \"US Territory\" | result0 result1 ",
        "query_toks_w_results": [
            "select",
            "avg",
            "(",
            "gnp",
            ")",
            ",",
            "sum",
            "(",
            "population",
            ")",
            "from",
            "country",
            "where",
            "governmentform",
            "=",
            "\"us",
            "territory\"",
            "510.3333333333333",
            "329000"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "avg",
            "(",
            "gnp",
            ")",
            ",",
            "sum",
            "(",
            "population",
            ")",
            "from",
            "country",
            "where",
            "governmentform",
            "=",
            "\"us",
            "territory\"",
            "result0",
            "result1"
        ],
        "response_blank_res": "Here are the average GNP and total population in all nations whose government form is US territory , which are result0 and result1 .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "average",
            "GNP",
            "and",
            "total",
            "population",
            "in",
            "all",
            "nations",
            "whose",
            "government",
            "form",
            "is",
            "US",
            "territory",
            ",",
            "which",
            "are",
            "result0",
            "and",
            "result1",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT sum ( SurfaceArea )  FROM country WHERE Continent  =  \"Asia\"",
        "query_toks": [
            "select",
            "sum",
            "(",
            "surfacearea",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"asia\""
        ],
        "results_raw": [
            [
                "sum(SurfaceArea)"
            ],
            [
                31881005.0
            ]
        ],
        "response": "The surface area of the continent Asia is 31881005.0.",
        "response_toks": [
            "The",
            "surface",
            "area",
            "of",
            "the",
            "continent",
            "Asia",
            "is",
            "31881005.0",
            "."
        ],
        "results_map": {
            "result0": "31881005.0"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT sum ( SurfaceArea )  FROM country WHERE Continent  =  \"Asia\" | 31881005.0 ",
        "query_w_results_blank_res": "SELECT sum ( SurfaceArea )  FROM country WHERE Continent  =  \"Asia\" | result0 ",
        "query_toks_w_results": [
            "select",
            "sum",
            "(",
            "surfacearea",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"asia\"",
            "31881005.0"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "sum",
            "(",
            "surfacearea",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"asia\"",
            "result0"
        ],
        "response_blank_res": "The surface area of the continent Asia is result0 .",
        "response_toks_blank_res": [
            "The",
            "surface",
            "area",
            "of",
            "the",
            "continent",
            "Asia",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT LocalName FROM country",
        "query_toks": [
            "select",
            "localname",
            "from",
            "country"
        ],
        "results_raw": [
            [
                "LocalName"
            ],
            [
                "Aruba"
            ],
            [
                "Afganistan/Afqanestan"
            ],
            [
                "Angola"
            ]
        ],
        "response": "These are all the local names.",
        "response_toks": [
            "These",
            "are",
            "all",
            "the",
            "local",
            "names",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT LocalName FROM country",
        "query_w_results_blank_res": "SELECT LocalName FROM country",
        "query_toks_w_results": [
            "select",
            "localname",
            "from",
            "country"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "localname",
            "from",
            "country"
        ],
        "response_blank_res": "These are all the local names .",
        "response_toks_blank_res": [
            "These",
            "are",
            "all",
            "the",
            "local",
            "names",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT Code FROM country WHERE Name  =  \"Aruba\"",
        "query_toks": [
            "select",
            "code",
            "from",
            "country",
            "where",
            "name",
            "=",
            "\"aruba\""
        ],
        "results_raw": [
            [
                "Code"
            ],
            [
                "ABW"
            ]
        ],
        "response": "Aruba's code is ABW.",
        "response_toks": [
            "Aruba",
            "'s",
            "code",
            "is",
            "ABW",
            "."
        ],
        "results_map": {
            "result0": "ABW"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT Code FROM country WHERE Name  =  \"Aruba\" | ABW ",
        "query_w_results_blank_res": "SELECT Code FROM country WHERE Name  =  \"Aruba\" | result0 ",
        "query_toks_w_results": [
            "select",
            "code",
            "from",
            "country",
            "where",
            "name",
            "=",
            "\"aruba\"",
            "ABW"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "code",
            "from",
            "country",
            "where",
            "name",
            "=",
            "\"aruba\"",
            "result0"
        ],
        "response_blank_res": "Aruba 's code is result0 .",
        "response_toks_blank_res": [
            "Aruba",
            "'s",
            "code",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "employee_hire_evaluation",
        "query": "SELECT count ( * )  FROM shop",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "shop"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                9
            ]
        ],
        "response": "There are 9 shops total.",
        "response_toks": [
            "There",
            "are",
            "9",
            "shops",
            "total",
            "."
        ],
        "results_map": {
            "result0": "9"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM shop | 9 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM shop | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "shop",
            "9"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "shop",
            "result0"
        ],
        "response_blank_res": "There are result0 shops total .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "shops",
            "total",
            "."
        ]
    },
    {
        "database_id": "employee_hire_evaluation",
        "query": "SELECT * FROM shop",
        "query_toks": [
            "select",
            "*",
            "from",
            "shop"
        ],
        "results_raw": [
            [
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name"
            ],
            [
                1,
                "FC Haka",
                "Valkeakoski",
                "Tehtaan kentt\u00e4",
                3516,
                "Olli Huttunen"
            ],
            [
                2,
                "HJK",
                "Helsinki",
                "Finnair Stadium",
                10770,
                "Antti Muurinen"
            ],
            [
                3,
                "FC Honka",
                "Espoo",
                "Tapiolan Urheilupuisto",
                6000,
                "Mika Lehkosuo"
            ]
        ],
        "response": "Yes, these are all the shops' names.",
        "response_toks": [
            "Yes",
            ",",
            "these",
            "are",
            "all",
            "the",
            "shops",
            "'",
            "names",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT * FROM shop",
        "query_w_results_blank_res": "SELECT * FROM shop",
        "query_toks_w_results": [
            "select",
            "*",
            "from",
            "shop"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "*",
            "from",
            "shop"
        ],
        "response_blank_res": "Yes , these are all the shops ' names .",
        "response_toks_blank_res": [
            "Yes",
            ",",
            "these",
            "are",
            "all",
            "the",
            "shops",
            "'",
            "names",
            "."
        ]
    },
    {
        "database_id": "employee_hire_evaluation",
        "query": "SELECT count ( * )  FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id   =   t2.shop_id GROUP BY t2.name",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "hiring",
            "as",
            "t1",
            "join",
            "shop",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "shop_id",
            "=",
            "t2",
            ".",
            "shop_id",
            "group",
            "by",
            "t2",
            ".",
            "name"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                2
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "response": "These are the number of employees hired by each shop.",
        "response_toks": [
            "These",
            "are",
            "the",
            "number",
            "of",
            "employees",
            "hired",
            "by",
            "each",
            "shop",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT count ( * )  FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id   =   t2.shop_id GROUP BY t2.name",
        "query_w_results_blank_res": "SELECT count ( * )  FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id   =   t2.shop_id GROUP BY t2.name",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "hiring",
            "as",
            "t1",
            "join",
            "shop",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "shop_id",
            "=",
            "t2",
            ".",
            "shop_id",
            "group",
            "by",
            "t2",
            ".",
            "name"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "hiring",
            "as",
            "t1",
            "join",
            "shop",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "shop_id",
            "=",
            "t2",
            ".",
            "shop_id",
            "group",
            "by",
            "t2",
            ".",
            "name"
        ],
        "response_blank_res": "These are the number of employees hired by each shop .",
        "response_toks_blank_res": [
            "These",
            "are",
            "the",
            "number",
            "of",
            "employees",
            "hired",
            "by",
            "each",
            "shop",
            "."
        ]
    },
    {
        "database_id": "concert_singer",
        "query": "SELECT name from singer",
        "query_toks": [
            "select",
            "name",
            "from",
            "singer"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Joe Sharp"
            ],
            [
                "Timbaland"
            ],
            [
                "Justin Brown"
            ]
        ],
        "response": "The list of singers names are shown in the result table.",
        "response_toks": [
            "The",
            "list",
            "of",
            "singers",
            "names",
            "are",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT name from singer",
        "query_w_results_blank_res": "SELECT name from singer",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "singer"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "singer"
        ],
        "response_blank_res": "The list of singers names are shown in the result table .",
        "response_toks_blank_res": [
            "The",
            "list",
            "of",
            "singers",
            "names",
            "are",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ]
    },
    {
        "database_id": "concert_singer",
        "query": "SELECT song_release_year from singer where Name  =  \"Joe Sharp\" and Song_Name  =  \"You\"",
        "query_toks": [
            "select",
            "song_release_year",
            "from",
            "singer",
            "where",
            "name",
            "=",
            "\"joe",
            "sharp\"",
            "and",
            "song_name",
            "=",
            "\"you\""
        ],
        "results_raw": [
            [
                "Song_release_year"
            ],
            [
                "1992"
            ]
        ],
        "response": "The song named You by singer named Joe Sharp was released in 1992.",
        "response_toks": [
            "The",
            "song",
            "named",
            "You",
            "by",
            "singer",
            "named",
            "Joe",
            "Sharp",
            "was",
            "released",
            "in",
            "1992",
            "."
        ],
        "results_map": {
            "result0": "1992"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT song_release_year from singer where Name  =  \"Joe Sharp\" and Song_Name  =  \"You\" | 1992 ",
        "query_w_results_blank_res": "SELECT song_release_year from singer where Name  =  \"Joe Sharp\" and Song_Name  =  \"You\" | result0 ",
        "query_toks_w_results": [
            "select",
            "song_release_year",
            "from",
            "singer",
            "where",
            "name",
            "=",
            "\"joe",
            "sharp\"",
            "and",
            "song_name",
            "=",
            "\"you\"",
            "1992"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "song_release_year",
            "from",
            "singer",
            "where",
            "name",
            "=",
            "\"joe",
            "sharp\"",
            "and",
            "song_name",
            "=",
            "\"you\"",
            "result0"
        ],
        "response_blank_res": "The song named You by singer named Joe Sharp was released in result0 .",
        "response_toks_blank_res": [
            "The",
            "song",
            "named",
            "You",
            "by",
            "singer",
            "named",
            "Joe",
            "Sharp",
            "was",
            "released",
            "in",
            "result0",
            "."
        ]
    },
    {
        "database_id": "concert_singer",
        "query": "SELECT count ( * )  FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id   =   T2.singer_id where T2.name  =  \"Joe Sharp\" GROUP BY T2.singer_id",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "singer_in_concert",
            "as",
            "t1",
            "join",
            "singer",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "singer_id",
            "=",
            "t2",
            ".",
            "singer_id",
            "where",
            "t2",
            ".",
            "name",
            "=",
            "\"joe",
            "sharp\"",
            "group",
            "by",
            "t2",
            ".",
            "singer_id"
        ],
        "results_raw": [
            [
                "count(*)"
            ]
        ],
        "response": "The number of concerts that Joe Sharp has held is 0.",
        "response_toks": [
            "The",
            "number",
            "of",
            "concerts",
            "that",
            "Joe",
            "Sharp",
            "has",
            "held",
            "is",
            "0",
            "."
        ],
        "results_map": null,
        "results_blank_res": null,
        "query_w_results": null,
        "query_w_results_blank_res": null,
        "query_toks_w_results": null,
        "query_toks_w_results_blank_res": null,
        "response_blank_res": null,
        "response_toks_blank_res": null
    },
    {
        "database_id": "concert_singer",
        "query": "SELECT country from singer where name  =  \"Joe Sharp\"",
        "query_toks": [
            "select",
            "country",
            "from",
            "singer",
            "where",
            "name",
            "=",
            "\"joe",
            "sharp\""
        ],
        "results_raw": [
            [
                "Country"
            ],
            [
                "Netherlands"
            ]
        ],
        "response": "Singer named Joe Sharp is from the Netherlands.",
        "response_toks": [
            "Singer",
            "named",
            "Joe",
            "Sharp",
            "is",
            "from",
            "the",
            "Netherlands",
            "."
        ],
        "results_map": {
            "result0": "Netherlands"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT country from singer where name  =  \"Joe Sharp\" | Netherlands ",
        "query_w_results_blank_res": "SELECT country from singer where name  =  \"Joe Sharp\" | result0 ",
        "query_toks_w_results": [
            "select",
            "country",
            "from",
            "singer",
            "where",
            "name",
            "=",
            "\"joe",
            "sharp\"",
            "Netherlands"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "country",
            "from",
            "singer",
            "where",
            "name",
            "=",
            "\"joe",
            "sharp\"",
            "result0"
        ],
        "response_blank_res": "Singer named Joe Sharp is from the result0 .",
        "response_toks_blank_res": [
            "Singer",
            "named",
            "Joe",
            "Sharp",
            "is",
            "from",
            "the",
            "result0",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT Continent FROM CONTINENTS",
        "query_toks": [
            "select",
            "continent",
            "from",
            "continents"
        ],
        "results_raw": [
            [
                "Continent"
            ],
            [
                "america"
            ],
            [
                "europe"
            ],
            [
                "asia"
            ]
        ],
        "response": "Here are all continents.",
        "response_toks": [
            "Here",
            "are",
            "all",
            "continents",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Continent FROM CONTINENTS",
        "query_w_results_blank_res": "SELECT Continent FROM CONTINENTS",
        "query_toks_w_results": [
            "select",
            "continent",
            "from",
            "continents"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "continent",
            "from",
            "continents"
        ],
        "response_blank_res": "Here are all continents .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "all",
            "continents",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT T1.ContId ,  T1.Continent ,  count ( * )  FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId   =   T2.Continent GROUP BY T1.ContId",
        "query_toks": [
            "select",
            "t1",
            ".",
            "contid",
            ",",
            "t1",
            ".",
            "continent",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "continents",
            "as",
            "t1",
            "join",
            "countries",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "contid",
            "=",
            "t2",
            ".",
            "continent",
            "group",
            "by",
            "t1",
            ".",
            "contid"
        ],
        "results_raw": [
            [
                "ContId",
                "Continent",
                "count(*)"
            ],
            [
                1,
                "america",
                3
            ],
            [
                2,
                "europe",
                6
            ],
            [
                3,
                "asia",
                2
            ]
        ],
        "response": "Here are the number of countries belonging to each continent along with the id and name of the corresponding continent.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "number",
            "of",
            "countries",
            "belonging",
            "to",
            "each",
            "continent",
            "along",
            "with",
            "the",
            "id",
            "and",
            "name",
            "of",
            "the",
            "corresponding",
            "continent",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.ContId ,  T1.Continent ,  count ( * )  FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId   =   T2.Continent GROUP BY T1.ContId",
        "query_w_results_blank_res": "SELECT T1.ContId ,  T1.Continent ,  count ( * )  FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId   =   T2.Continent GROUP BY T1.ContId",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "contid",
            ",",
            "t1",
            ".",
            "continent",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "continents",
            "as",
            "t1",
            "join",
            "countries",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "contid",
            "=",
            "t2",
            ".",
            "continent",
            "group",
            "by",
            "t1",
            ".",
            "contid"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "contid",
            ",",
            "t1",
            ".",
            "continent",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "continents",
            "as",
            "t1",
            "join",
            "countries",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "contid",
            "=",
            "t2",
            ".",
            "continent",
            "group",
            "by",
            "t1",
            ".",
            "contid"
        ],
        "response_blank_res": "Here are the number of countries belonging to each continent along with the id and name of the corresponding continent .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "number",
            "of",
            "countries",
            "belonging",
            "to",
            "each",
            "continent",
            "along",
            "with",
            "the",
            "id",
            "and",
            "name",
            "of",
            "the",
            "corresponding",
            "continent",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model   =   T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId   =   T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker   =   T4.Id WHERE T3.weight  <  3500",
        "query_toks": [
            "select",
            "distinct",
            "t1",
            ".",
            "model",
            "from",
            "model_list",
            "as",
            "t1",
            "join",
            "car_names",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "model",
            "=",
            "t2",
            ".",
            "model",
            "join",
            "cars_data",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "makeid",
            "=",
            "t3",
            ".",
            "id",
            "join",
            "car_makers",
            "as",
            "t4",
            "on",
            "t1",
            ".",
            "maker",
            "=",
            "t4",
            ".",
            "id",
            "where",
            "t3",
            ".",
            "weight",
            "<",
            "3500"
        ],
        "results_raw": [
            [
                "Model"
            ],
            [
                "plymouth"
            ],
            [
                "amc"
            ],
            [
                "ford"
            ]
        ],
        "response": "These are the models that are lighter than 3500.",
        "response_toks": [
            "These",
            "are",
            "the",
            "models",
            "that",
            "are",
            "lighter",
            "than",
            "3500",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model   =   T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId   =   T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker   =   T4.Id WHERE T3.weight  <  3500",
        "query_w_results_blank_res": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model   =   T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId   =   T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker   =   T4.Id WHERE T3.weight  <  3500",
        "query_toks_w_results": [
            "select",
            "distinct",
            "t1",
            ".",
            "model",
            "from",
            "model_list",
            "as",
            "t1",
            "join",
            "car_names",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "model",
            "=",
            "t2",
            ".",
            "model",
            "join",
            "cars_data",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "makeid",
            "=",
            "t3",
            ".",
            "id",
            "join",
            "car_makers",
            "as",
            "t4",
            "on",
            "t1",
            ".",
            "maker",
            "=",
            "t4",
            ".",
            "id",
            "where",
            "t3",
            ".",
            "weight",
            "<",
            "3500"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "t1",
            ".",
            "model",
            "from",
            "model_list",
            "as",
            "t1",
            "join",
            "car_names",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "model",
            "=",
            "t2",
            ".",
            "model",
            "join",
            "cars_data",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "makeid",
            "=",
            "t3",
            ".",
            "id",
            "join",
            "car_makers",
            "as",
            "t4",
            "on",
            "t1",
            ".",
            "maker",
            "=",
            "t4",
            ".",
            "id",
            "where",
            "t3",
            ".",
            "weight",
            "<",
            "3500"
        ],
        "response_blank_res": "These are the models that are lighter than 3500 .",
        "response_toks_blank_res": [
            "These",
            "are",
            "the",
            "models",
            "that",
            "are",
            "lighter",
            "than",
            "3500",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT DISTINCT T3.Weight FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model   =   T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId   =   T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker   =   T4.Id WHERE T1.Model = \"bmw\"",
        "query_toks": [
            "select",
            "distinct",
            "t3",
            ".",
            "weight",
            "from",
            "model_list",
            "as",
            "t1",
            "join",
            "car_names",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "model",
            "=",
            "t2",
            ".",
            "model",
            "join",
            "cars_data",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "makeid",
            "=",
            "t3",
            ".",
            "id",
            "join",
            "car_makers",
            "as",
            "t4",
            "on",
            "t1",
            ".",
            "maker",
            "=",
            "t4",
            ".",
            "id",
            "where",
            "t1",
            ".",
            "model",
            "=",
            "\"bmw\""
        ],
        "results_raw": [
            [
                "Weight"
            ],
            [
                2234
            ],
            [
                2600
            ]
        ],
        "response": "These are the weights of all BMW models.",
        "response_toks": [
            "These",
            "are",
            "the",
            "weights",
            "of",
            "all",
            "BMW",
            "models",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT DISTINCT T3.Weight FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model   =   T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId   =   T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker   =   T4.Id WHERE T1.Model = \"bmw\"",
        "query_w_results_blank_res": "SELECT DISTINCT T3.Weight FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model   =   T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId   =   T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker   =   T4.Id WHERE T1.Model = \"bmw\"",
        "query_toks_w_results": [
            "select",
            "distinct",
            "t3",
            ".",
            "weight",
            "from",
            "model_list",
            "as",
            "t1",
            "join",
            "car_names",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "model",
            "=",
            "t2",
            ".",
            "model",
            "join",
            "cars_data",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "makeid",
            "=",
            "t3",
            ".",
            "id",
            "join",
            "car_makers",
            "as",
            "t4",
            "on",
            "t1",
            ".",
            "maker",
            "=",
            "t4",
            ".",
            "id",
            "where",
            "t1",
            ".",
            "model",
            "=",
            "\"bmw\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "t3",
            ".",
            "weight",
            "from",
            "model_list",
            "as",
            "t1",
            "join",
            "car_names",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "model",
            "=",
            "t2",
            ".",
            "model",
            "join",
            "cars_data",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "makeid",
            "=",
            "t3",
            ".",
            "id",
            "join",
            "car_makers",
            "as",
            "t4",
            "on",
            "t1",
            ".",
            "maker",
            "=",
            "t4",
            ".",
            "id",
            "where",
            "t1",
            ".",
            "model",
            "=",
            "\"bmw\""
        ],
        "response_blank_res": "These are the weights of all BMW models .",
        "response_toks_blank_res": [
            "These",
            "are",
            "the",
            "weights",
            "of",
            "all",
            "BMW",
            "models",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT Model FROM car_names WHERE MakeId = 2",
        "query_toks": [
            "select",
            "model",
            "from",
            "car_names",
            "where",
            "makeid",
            "=",
            "2"
        ],
        "results_raw": [
            [
                "Model"
            ],
            [
                "buick"
            ]
        ],
        "response": "The carmaker with id 2 is volkswagen.",
        "response_toks": [
            "The",
            "carmaker",
            "with",
            "id",
            "2",
            "is",
            "volkswagen",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Model FROM car_names WHERE MakeId = 2",
        "query_w_results_blank_res": "SELECT Model FROM car_names WHERE MakeId = 2",
        "query_toks_w_results": [
            "select",
            "model",
            "from",
            "car_names",
            "where",
            "makeid",
            "=",
            "2"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "model",
            "from",
            "car_names",
            "where",
            "makeid",
            "=",
            "2"
        ],
        "response_blank_res": "The carmaker with id 2 is volkswagen .",
        "response_toks_blank_res": [
            "The",
            "carmaker",
            "with",
            "id",
            "2",
            "is",
            "volkswagen",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT count ( * )  from country",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "country"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                239
            ]
        ],
        "response": "Hi. There are 239 contries listed.",
        "response_toks": [
            "Hi",
            ".",
            "There",
            "are",
            "239",
            "contries",
            "listed",
            "."
        ],
        "results_map": {
            "result0": "239"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  from country | 239 ",
        "query_w_results_blank_res": "SELECT count ( * )  from country | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "country",
            "239"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "country",
            "result0"
        ],
        "response_blank_res": "Hi . There are result0 contries listed .",
        "response_toks_blank_res": [
            "Hi",
            ".",
            "There",
            "are",
            "result0",
            "contries",
            "listed",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT count ( distinct GovernmentForm )  from country",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "governmentform",
            ")",
            "from",
            "country"
        ],
        "results_raw": [
            [
                "count(distinct GovernmentForm)"
            ],
            [
                35
            ]
        ],
        "response": "There are 35 different forms of government",
        "response_toks": [
            "There",
            "are",
            "35",
            "different",
            "forms",
            "of",
            "government"
        ],
        "results_map": {
            "result0": "35"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( distinct GovernmentForm )  from country | 35 ",
        "query_w_results_blank_res": "SELECT count ( distinct GovernmentForm )  from country | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "distinct",
            "governmentform",
            ")",
            "from",
            "country",
            "35"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "distinct",
            "governmentform",
            ")",
            "from",
            "country",
            "result0"
        ],
        "response_blank_res": "There are result0 different forms of government",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "different",
            "forms",
            "of",
            "government"
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT distinct GovernmentForm from country",
        "query_toks": [
            "select",
            "distinct",
            "governmentform",
            "from",
            "country"
        ],
        "results_raw": [
            [
                "GovernmentForm"
            ],
            [
                "Nonmetropolitan Territory of The Netherlands"
            ],
            [
                "Islamic Emirate"
            ],
            [
                "Republic"
            ]
        ],
        "response": "Here are the  35 different forms of government",
        "response_toks": [
            "Here",
            "are",
            "the",
            "35",
            "different",
            "forms",
            "of",
            "government"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT distinct GovernmentForm from country",
        "query_w_results_blank_res": "SELECT distinct GovernmentForm from country",
        "query_toks_w_results": [
            "select",
            "distinct",
            "governmentform",
            "from",
            "country"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "governmentform",
            "from",
            "country"
        ],
        "response_blank_res": "Here are the 35 different forms of government",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "35",
            "different",
            "forms",
            "of",
            "government"
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT count ( * )  from country where GovernmentForm  =  \"Republic\"",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "country",
            "where",
            "governmentform",
            "=",
            "\"republic\""
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                122
            ]
        ],
        "response": "There are 122 contries have a Republic government form",
        "response_toks": [
            "There",
            "are",
            "122",
            "contries",
            "have",
            "a",
            "Republic",
            "government",
            "form"
        ],
        "results_map": {
            "result0": "122"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  from country where GovernmentForm  =  \"Republic\" | 122 ",
        "query_w_results_blank_res": "SELECT count ( * )  from country where GovernmentForm  =  \"Republic\" | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "country",
            "where",
            "governmentform",
            "=",
            "\"republic\"",
            "122"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "country",
            "where",
            "governmentform",
            "=",
            "\"republic\"",
            "result0"
        ],
        "response_blank_res": "There are result0 contries have a Republic government form",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "contries",
            "have",
            "a",
            "Republic",
            "government",
            "form"
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT name from country where GovernmentForm  =  \"Republic\"",
        "query_toks": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "governmentform",
            "=",
            "\"republic\""
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Angola"
            ],
            [
                "Albania"
            ],
            [
                "Armenia"
            ]
        ],
        "response": "Here are the names of the 122 countries that have a Republic government form",
        "response_toks": [
            "Here",
            "are",
            "the",
            "names",
            "of",
            "the",
            "122",
            "countries",
            "that",
            "have",
            "a",
            "Republic",
            "government",
            "form"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT name from country where GovernmentForm  =  \"Republic\"",
        "query_w_results_blank_res": "SELECT name from country where GovernmentForm  =  \"Republic\"",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "governmentform",
            "=",
            "\"republic\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "governmentform",
            "=",
            "\"republic\""
        ],
        "response_blank_res": "Here are the names of the 122 countries that have a Republic government form",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "names",
            "of",
            "the",
            "122",
            "countries",
            "that",
            "have",
            "a",
            "Republic",
            "government",
            "form"
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT T2.language from country as T1 join countrylanguage as T2 on T1.Code  =  T2.CountryCode where  T1.name  =  \"Latvia\"",
        "query_toks": [
            "select",
            "t2",
            ".",
            "language",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t1",
            ".",
            "name",
            "=",
            "\"latvia\""
        ],
        "results_raw": [
            [
                "Language"
            ],
            [
                "Belorussian"
            ],
            [
                "Latvian"
            ],
            [
                "Lithuanian"
            ]
        ],
        "response": "Here are the languages spoken in the country with name Latvia",
        "response_toks": [
            "Here",
            "are",
            "the",
            "languages",
            "spoken",
            "in",
            "the",
            "country",
            "with",
            "name",
            "Latvia"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T2.language from country as T1 join countrylanguage as T2 on T1.Code  =  T2.CountryCode where  T1.name  =  \"Latvia\"",
        "query_w_results_blank_res": "SELECT T2.language from country as T1 join countrylanguage as T2 on T1.Code  =  T2.CountryCode where  T1.name  =  \"Latvia\"",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "language",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t1",
            ".",
            "name",
            "=",
            "\"latvia\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "language",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t1",
            ".",
            "name",
            "=",
            "\"latvia\""
        ],
        "response_blank_res": "Here are the languages spoken in the country with name Latvia",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "languages",
            "spoken",
            "in",
            "the",
            "country",
            "with",
            "name",
            "Latvia"
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT count ( * )  FROM AIRLINES",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "airlines"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                12
            ]
        ],
        "response": "The number of airlines is 12.",
        "response_toks": [
            "The",
            "number",
            "of",
            "airlines",
            "is",
            "12",
            "."
        ],
        "results_map": {
            "result0": "12"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM AIRLINES | 12 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM AIRLINES | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "airlines",
            "12"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "airlines",
            "result0"
        ],
        "response_blank_res": "The number of airlines is result0 .",
        "response_toks_blank_res": [
            "The",
            "number",
            "of",
            "airlines",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT Airline FROM AIRLINES WHERE Airline = \"United Airlines\"",
        "query_toks": [
            "select",
            "airline",
            "from",
            "airlines",
            "where",
            "airline",
            "=",
            "\"united",
            "airlines\""
        ],
        "results_raw": [
            [
                "Airline"
            ],
            [
                "United Airlines"
            ]
        ],
        "response": "The name of the USA airline is United Airlines.",
        "response_toks": [
            "The",
            "name",
            "of",
            "the",
            "USA",
            "airline",
            "is",
            "United",
            "Airlines",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Airline FROM AIRLINES WHERE Airline = \"United Airlines\"",
        "query_w_results_blank_res": "SELECT Airline FROM AIRLINES WHERE Airline = \"United Airlines\"",
        "query_toks_w_results": [
            "select",
            "airline",
            "from",
            "airlines",
            "where",
            "airline",
            "=",
            "\"united",
            "airlines\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "airline",
            "from",
            "airlines",
            "where",
            "airline",
            "=",
            "\"united",
            "airlines\""
        ],
        "response_blank_res": "The name of the USA airline is United Airlines .",
        "response_toks_blank_res": [
            "The",
            "name",
            "of",
            "the",
            "USA",
            "airline",
            "is",
            "United",
            "Airlines",
            "."
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline = \"US Airways\"",
        "query_toks": [
            "select",
            "abbreviation",
            "from",
            "airlines",
            "where",
            "airline",
            "=",
            "\"us",
            "airways\""
        ],
        "results_raw": [
            [
                "Abbreviation"
            ],
            [
                "USAir"
            ]
        ],
        "response": "The abbreviation of US Airways is USAir.",
        "response_toks": [
            "The",
            "abbreviation",
            "of",
            "US",
            "Airways",
            "is",
            "USAir",
            "."
        ],
        "results_map": {
            "result0": "USAir"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT Abbreviation FROM AIRLINES WHERE Airline = \"US Airways\" | USAir ",
        "query_w_results_blank_res": "SELECT Abbreviation FROM AIRLINES WHERE Airline = \"US Airways\" | result0 ",
        "query_toks_w_results": [
            "select",
            "abbreviation",
            "from",
            "airlines",
            "where",
            "airline",
            "=",
            "\"us",
            "airways\"",
            "USAir"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "abbreviation",
            "from",
            "airlines",
            "where",
            "airline",
            "=",
            "\"us",
            "airways\"",
            "result0"
        ],
        "response_blank_res": "The abbreviation of US Airways is result0 .",
        "response_toks_blank_res": [
            "The",
            "abbreviation",
            "of",
            "US",
            "Airways",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "singer",
        "query": "SELECT count ( * )  from singer",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "singer"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                8
            ]
        ],
        "response": "There are 8 singers.",
        "response_toks": [
            "There",
            "are",
            "8",
            "singers",
            "."
        ],
        "results_map": {
            "result0": "8"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  from singer | 8 ",
        "query_w_results_blank_res": "SELECT count ( * )  from singer | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "singer",
            "8"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "singer",
            "result0"
        ],
        "response_blank_res": "There are result0 singers .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "singers",
            "."
        ]
    },
    {
        "database_id": "singer",
        "query": "SELECT citizenship from singer where name  =  \"Alice Walton\"",
        "query_toks": [
            "select",
            "citizenship",
            "from",
            "singer",
            "where",
            "name",
            "=",
            "\"alice",
            "walton\""
        ],
        "results_raw": [
            [
                "Citizenship"
            ],
            [
                "United States"
            ]
        ],
        "response": "The Citizenship of Alice Walton is United States",
        "response_toks": [
            "The",
            "Citizenship",
            "of",
            "Alice",
            "Walton",
            "is",
            "United",
            "States"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT citizenship from singer where name  =  \"Alice Walton\"",
        "query_w_results_blank_res": "SELECT citizenship from singer where name  =  \"Alice Walton\"",
        "query_toks_w_results": [
            "select",
            "citizenship",
            "from",
            "singer",
            "where",
            "name",
            "=",
            "\"alice",
            "walton\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "citizenship",
            "from",
            "singer",
            "where",
            "name",
            "=",
            "\"alice",
            "walton\""
        ],
        "response_blank_res": "The Citizenship of Alice Walton is United States",
        "response_toks_blank_res": [
            "The",
            "Citizenship",
            "of",
            "Alice",
            "Walton",
            "is",
            "United",
            "States"
        ]
    },
    {
        "database_id": "singer",
        "query": "SELECT Sales from song where song_id  =  3",
        "query_toks": [
            "select",
            "sales",
            "from",
            "song",
            "where",
            "song_id",
            "=",
            "3"
        ],
        "results_raw": [
            [
                "Sales"
            ],
            [
                351421.0
            ]
        ],
        "response": "The sales from song id 3 is 351421.0.",
        "response_toks": [
            "The",
            "sales",
            "from",
            "song",
            "id",
            "3",
            "is",
            "351421.0",
            "."
        ],
        "results_map": {
            "result0": "351421.0"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT Sales from song where song_id  =  3 | 351421.0 ",
        "query_w_results_blank_res": "SELECT Sales from song where song_id  =  3 | result0 ",
        "query_toks_w_results": [
            "select",
            "sales",
            "from",
            "song",
            "where",
            "song_id",
            "=",
            "3",
            "351421.0"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "sales",
            "from",
            "song",
            "where",
            "song_id",
            "=",
            "3",
            "result0"
        ],
        "response_blank_res": "The sales from song id 3 is result0 .",
        "response_toks_blank_res": [
            "The",
            "sales",
            "from",
            "song",
            "id",
            "3",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT country FROM AIRLINES where Airline  =  'Delta Airlines'",
        "query_toks": [
            "select",
            "country",
            "from",
            "airlines",
            "where",
            "airline",
            "=",
            "'delta",
            "airlines'"
        ],
        "results_raw": [
            [
                "Country"
            ],
            [
                "USA"
            ]
        ],
        "response": "Delta Airlines is from the country 'USA'.",
        "response_toks": [
            "Delta",
            "Airlines",
            "is",
            "from",
            "the",
            "country",
            "'USA",
            "'",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT country FROM AIRLINES where Airline  =  'Delta Airlines'",
        "query_w_results_blank_res": "SELECT country FROM AIRLINES where Airline  =  'Delta Airlines'",
        "query_toks_w_results": [
            "select",
            "country",
            "from",
            "airlines",
            "where",
            "airline",
            "=",
            "'delta",
            "airlines'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "country",
            "from",
            "airlines",
            "where",
            "airline",
            "=",
            "'delta",
            "airlines'"
        ],
        "response_blank_res": "Delta Airlines is from the country 'USA ' .",
        "response_toks_blank_res": [
            "Delta",
            "Airlines",
            "is",
            "from",
            "the",
            "country",
            "'USA",
            "'",
            "."
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT DestAirport FROM flights where FlightNo  =  44",
        "query_toks": [
            "select",
            "destairport",
            "from",
            "flights",
            "where",
            "flightno",
            "=",
            "44"
        ],
        "results_raw": [
            [
                "DestAirport"
            ],
            [
                " ACV"
            ],
            [
                " ABR"
            ]
        ],
        "response": "The destination airports of flight no 44 are ACV and ABR.",
        "response_toks": [
            "The",
            "destination",
            "airports",
            "of",
            "flight",
            "no",
            "44",
            "are",
            "ACV",
            "and",
            "ABR",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT DestAirport FROM flights where FlightNo  =  44",
        "query_w_results_blank_res": "SELECT DestAirport FROM flights where FlightNo  =  44",
        "query_toks_w_results": [
            "select",
            "destairport",
            "from",
            "flights",
            "where",
            "flightno",
            "=",
            "44"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "destairport",
            "from",
            "flights",
            "where",
            "flightno",
            "=",
            "44"
        ],
        "response_blank_res": "The destination airports of flight no 44 are ACV and ABR .",
        "response_toks_blank_res": [
            "The",
            "destination",
            "airports",
            "of",
            "flight",
            "no",
            "44",
            "are",
            "ACV",
            "and",
            "ABR",
            "."
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid   =   T2.Airline GROUP BY T1.Airline ORDER BY count ( * )  DESC LIMIT 1",
        "query_toks": [
            "select",
            "t1",
            ".",
            "airline",
            "from",
            "airlines",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "uid",
            "=",
            "t2",
            ".",
            "airline",
            "group",
            "by",
            "t1",
            ".",
            "airline",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Airline"
            ],
            [
                "AirTran Airways"
            ]
        ],
        "response": "AirTran Airways is the airline has the most number of flights.",
        "response_toks": [
            "AirTran",
            "Airways",
            "is",
            "the",
            "airline",
            "has",
            "the",
            "most",
            "number",
            "of",
            "flights",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid   =   T2.Airline GROUP BY T1.Airline ORDER BY count ( * )  DESC LIMIT 1",
        "query_w_results_blank_res": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid   =   T2.Airline GROUP BY T1.Airline ORDER BY count ( * )  DESC LIMIT 1",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "airline",
            "from",
            "airlines",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "uid",
            "=",
            "t2",
            ".",
            "airline",
            "group",
            "by",
            "t1",
            ".",
            "airline",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "airline",
            "from",
            "airlines",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "uid",
            "=",
            "t2",
            ".",
            "airline",
            "group",
            "by",
            "t1",
            ".",
            "airline",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "response_blank_res": "AirTran Airways is the airline has the most number of flights .",
        "response_toks_blank_res": [
            "AirTran",
            "Airways",
            "is",
            "the",
            "airline",
            "has",
            "the",
            "most",
            "number",
            "of",
            "flights",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT  count ( distinct course_id )  from courses",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "course_id",
            ")",
            "from",
            "courses"
        ],
        "results_raw": [
            [
                "count(distinct course_id)"
            ],
            [
                15
            ]
        ],
        "response": "The number of the courses with different course ids is 15.",
        "response_toks": [
            "The",
            "number",
            "of",
            "the",
            "courses",
            "with",
            "different",
            "course",
            "ids",
            "is",
            "15",
            "."
        ],
        "results_map": {
            "result0": "15"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT  count ( distinct course_id )  from courses | 15 ",
        "query_w_results_blank_res": "SELECT  count ( distinct course_id )  from courses | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "distinct",
            "course_id",
            ")",
            "from",
            "courses",
            "15"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "distinct",
            "course_id",
            ")",
            "from",
            "courses",
            "result0"
        ],
        "response_blank_res": "The number of the courses with different course ids is result0 .",
        "response_toks_blank_res": [
            "The",
            "number",
            "of",
            "the",
            "courses",
            "with",
            "different",
            "course",
            "ids",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id   =   T2.course_id GROUP BY T1.course_name ORDER BY count ( * )  LIMIT 1",
        "query_toks": [
            "select",
            "t1",
            ".",
            "course_name",
            "from",
            "courses",
            "as",
            "t1",
            "join",
            "student_enrolment_courses",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "course_id",
            "=",
            "t2",
            ".",
            "course_id",
            "group",
            "by",
            "t1",
            ".",
            "course_name",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "course_name"
            ],
            [
                "ai"
            ]
        ],
        "response": "The name of the course with least number of students of enrollments is ai.",
        "response_toks": [
            "The",
            "name",
            "of",
            "the",
            "course",
            "with",
            "least",
            "number",
            "of",
            "students",
            "of",
            "enrollments",
            "is",
            "ai",
            "."
        ],
        "results_map": {
            "result0": "ai"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id   =   T2.course_id GROUP BY T1.course_name ORDER BY count ( * )  LIMIT 1 | ai ",
        "query_w_results_blank_res": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id   =   T2.course_id GROUP BY T1.course_name ORDER BY count ( * )  LIMIT 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "course_name",
            "from",
            "courses",
            "as",
            "t1",
            "join",
            "student_enrolment_courses",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "course_id",
            "=",
            "t2",
            ".",
            "course_id",
            "group",
            "by",
            "t1",
            ".",
            "course_name",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "limit",
            "1",
            "ai"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "course_name",
            "from",
            "courses",
            "as",
            "t1",
            "join",
            "student_enrolment_courses",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "course_id",
            "=",
            "t2",
            ".",
            "course_id",
            "group",
            "by",
            "t1",
            ".",
            "course_name",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "The name of the course with least number of students of enrollments is result0 .",
        "response_toks_blank_res": [
            "The",
            "name",
            "of",
            "the",
            "course",
            "with",
            "least",
            "number",
            "of",
            "students",
            "of",
            "enrollments",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "concert_singer",
        "query": "SELECT  count ( * )  FROM concert",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "concert"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                6
            ]
        ],
        "response": "There are 6 concerts",
        "response_toks": [
            "There",
            "are",
            "6",
            "concerts"
        ],
        "results_map": {
            "result0": "6"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT  count ( * )  FROM concert | 6 ",
        "query_w_results_blank_res": "SELECT  count ( * )  FROM concert | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "concert",
            "6"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "concert",
            "result0"
        ],
        "response_blank_res": "There are result0 concerts",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "concerts"
        ]
    },
    {
        "database_id": "concert_singer",
        "query": "SELECT T2.name , count ( * )  FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
        "query_toks": [
            "select",
            "t2",
            ".",
            "name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "concert",
            "as",
            "t1",
            "join",
            "stadium",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stadium_id",
            "=",
            "t2",
            ".",
            "stadium_id",
            "group",
            "by",
            "t1",
            ".",
            "stadium_id"
        ],
        "results_raw": [
            [
                "Name",
                "count(*)"
            ],
            [
                "Stark's Park",
                1
            ],
            [
                "Glebe Park",
                1
            ],
            [
                "Somerset Park",
                2
            ]
        ],
        "response": "Here are the stadium names and the number of concerts in each stadium",
        "response_toks": [
            "Here",
            "are",
            "the",
            "stadium",
            "names",
            "and",
            "the",
            "number",
            "of",
            "concerts",
            "in",
            "each",
            "stadium"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T2.name , count ( * )  FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
        "query_w_results_blank_res": "SELECT T2.name , count ( * )  FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "concert",
            "as",
            "t1",
            "join",
            "stadium",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stadium_id",
            "=",
            "t2",
            ".",
            "stadium_id",
            "group",
            "by",
            "t1",
            ".",
            "stadium_id"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "concert",
            "as",
            "t1",
            "join",
            "stadium",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stadium_id",
            "=",
            "t2",
            ".",
            "stadium_id",
            "group",
            "by",
            "t1",
            ".",
            "stadium_id"
        ],
        "response_blank_res": "Here are the stadium names and the number of concerts in each stadium",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "stadium",
            "names",
            "and",
            "the",
            "number",
            "of",
            "concerts",
            "in",
            "each",
            "stadium"
        ]
    },
    {
        "database_id": "concert_singer",
        "query": "SELECT capacity from stadium where name  =  \"Stark s Park\"",
        "query_toks": [
            "select",
            "capacity",
            "from",
            "stadium",
            "where",
            "name",
            "=",
            "\"stark",
            "s",
            "park\""
        ],
        "results_raw": [
            [
                "Capacity"
            ],
            [
                10104
            ]
        ],
        "response": "the capacity of the stadium with the name Stark's Park is 10104",
        "response_toks": [
            "the",
            "capacity",
            "of",
            "the",
            "stadium",
            "with",
            "the",
            "name",
            "Stark",
            "'s",
            "Park",
            "is",
            "10104"
        ],
        "results_map": {
            "result0": "10104"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT capacity from stadium where name  =  \"Stark s Park\" | 10104 ",
        "query_w_results_blank_res": "SELECT capacity from stadium where name  =  \"Stark s Park\" | result0 ",
        "query_toks_w_results": [
            "select",
            "capacity",
            "from",
            "stadium",
            "where",
            "name",
            "=",
            "\"stark",
            "s",
            "park\"",
            "10104"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "capacity",
            "from",
            "stadium",
            "where",
            "name",
            "=",
            "\"stark",
            "s",
            "park\"",
            "result0"
        ],
        "response_blank_res": "the capacity of the stadium with the name Stark 's Park is result0",
        "response_toks_blank_res": [
            "the",
            "capacity",
            "of",
            "the",
            "stadium",
            "with",
            "the",
            "name",
            "Stark",
            "'s",
            "Park",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "concert_singer",
        "query": "SELECT concert_name from concert",
        "query_toks": [
            "select",
            "concert_name",
            "from",
            "concert"
        ],
        "results_raw": [
            [
                "concert_Name"
            ],
            [
                "Auditions"
            ],
            [
                "Super bootcamp"
            ],
            [
                "Home Visits"
            ]
        ],
        "response": "Here are all the concert names",
        "response_toks": [
            "Here",
            "are",
            "all",
            "the",
            "concert",
            "names"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT concert_name from concert",
        "query_w_results_blank_res": "SELECT concert_name from concert",
        "query_toks_w_results": [
            "select",
            "concert_name",
            "from",
            "concert"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "concert_name",
            "from",
            "concert"
        ],
        "response_blank_res": "Here are all the concert names",
        "response_toks_blank_res": [
            "Here",
            "are",
            "all",
            "the",
            "concert",
            "names"
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "select count ( * )  from  ( SELECT distinct treatment_type_code from treatments ) ",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "(",
            "select",
            "distinct",
            "treatment_type_code",
            "from",
            "treatments",
            ")"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                3
            ]
        ],
        "response": "There are three different treatment type.",
        "response_toks": [
            "There",
            "are",
            "three",
            "different",
            "treatment",
            "type",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "select count ( * )  from  ( SELECT distinct treatment_type_code from treatments ) ",
        "query_w_results_blank_res": "select count ( * )  from  ( SELECT distinct treatment_type_code from treatments ) ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "(",
            "select",
            "distinct",
            "treatment_type_code",
            "from",
            "treatments",
            ")"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "(",
            "select",
            "distinct",
            "treatment_type_code",
            "from",
            "treatments",
            ")"
        ],
        "response_blank_res": "There are three different treatment type .",
        "response_toks_blank_res": [
            "There",
            "are",
            "three",
            "different",
            "treatment",
            "type",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT * FROM Treatments ORDER BY cost_of_treatment DESC LIMIT 1",
        "query_toks": [
            "select",
            "*",
            "from",
            "treatments",
            "order",
            "by",
            "cost_of_treatment",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ],
            [
                13,
                7,
                8,
                "VAC",
                "2018-02-26 09:08:53",
                945
            ]
        ],
        "response": "This is the information about the most expensive treatment.",
        "response_toks": [
            "This",
            "is",
            "the",
            "information",
            "about",
            "the",
            "most",
            "expensive",
            "treatment",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT * FROM Treatments ORDER BY cost_of_treatment DESC LIMIT 1",
        "query_w_results_blank_res": "SELECT * FROM Treatments ORDER BY cost_of_treatment DESC LIMIT 1",
        "query_toks_w_results": [
            "select",
            "*",
            "from",
            "treatments",
            "order",
            "by",
            "cost_of_treatment",
            "desc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "*",
            "from",
            "treatments",
            "order",
            "by",
            "cost_of_treatment",
            "desc",
            "limit",
            "1"
        ],
        "response_blank_res": "This is the information about the most expensive treatment .",
        "response_toks_blank_res": [
            "This",
            "is",
            "the",
            "information",
            "about",
            "the",
            "most",
            "expensive",
            "treatment",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "query_toks": [
            "select",
            "cost_of_treatment",
            "from",
            "treatments",
            "order",
            "by",
            "date_of_treatment",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "cost_of_treatment"
            ],
            [
                407
            ]
        ],
        "response": "The most recent treatment has a price of 407.",
        "response_toks": [
            "The",
            "most",
            "recent",
            "treatment",
            "has",
            "a",
            "price",
            "of",
            "407",
            "."
        ],
        "results_map": {
            "result0": "407"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1 | 407 ",
        "query_w_results_blank_res": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "cost_of_treatment",
            "from",
            "treatments",
            "order",
            "by",
            "date_of_treatment",
            "desc",
            "limit",
            "1",
            "407"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "cost_of_treatment",
            "from",
            "treatments",
            "order",
            "by",
            "date_of_treatment",
            "desc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "The most recent treatment has a price of result0 .",
        "response_toks_blank_res": [
            "The",
            "most",
            "recent",
            "treatment",
            "has",
            "a",
            "price",
            "of",
            "result0",
            "."
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid   =   T2.Airline GROUP BY T1.Airline HAVING count ( * )   <  200",
        "query_toks": [
            "select",
            "t1",
            ".",
            "airline",
            "from",
            "airlines",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "uid",
            "=",
            "t2",
            ".",
            "airline",
            "group",
            "by",
            "t1",
            ".",
            "airline",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<",
            "200"
        ],
        "results_raw": [
            [
                "Airline"
            ],
            [
                "AirTran Airways"
            ],
            [
                "Allegiant Air"
            ],
            [
                "American Airlines"
            ]
        ],
        "response": "The airlines that have fewer than 200 flights are shown in the result table.",
        "response_toks": [
            "The",
            "airlines",
            "that",
            "have",
            "fewer",
            "than",
            "200",
            "flights",
            "are",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid   =   T2.Airline GROUP BY T1.Airline HAVING count ( * )   <  200",
        "query_w_results_blank_res": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid   =   T2.Airline GROUP BY T1.Airline HAVING count ( * )   <  200",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "airline",
            "from",
            "airlines",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "uid",
            "=",
            "t2",
            ".",
            "airline",
            "group",
            "by",
            "t1",
            ".",
            "airline",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<",
            "200"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "airline",
            "from",
            "airlines",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "uid",
            "=",
            "t2",
            ".",
            "airline",
            "group",
            "by",
            "t1",
            ".",
            "airline",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<",
            "200"
        ],
        "response_blank_res": "The airlines that have fewer than 200 flights are shown in the result table .",
        "response_toks_blank_res": [
            "The",
            "airlines",
            "that",
            "have",
            "fewer",
            "than",
            "200",
            "flights",
            "are",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT T1.Airline, T2.DestAirport FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid   =   T2.Airline GROUP BY T1.Airline HAVING count ( * )   <  200 limit 3",
        "query_toks": [
            "select",
            "t1",
            ".",
            "airline",
            ",",
            "t2",
            ".",
            "destairport",
            "from",
            "airlines",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "uid",
            "=",
            "t2",
            ".",
            "airline",
            "group",
            "by",
            "t1",
            ".",
            "airline",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<",
            "200",
            "limit",
            "3"
        ],
        "results_raw": [
            [
                "Airline",
                "DestAirport"
            ],
            [
                "AirTran Airways",
                " AIV"
            ],
            [
                "Allegiant Air",
                " KQA"
            ],
            [
                "American Airlines",
                " CAK"
            ]
        ],
        "response": "The destination airport of the first three of the airlines that have fewer than 200 flights are show in the result table. The country is not available.",
        "response_toks": [
            "The",
            "destination",
            "airport",
            "of",
            "the",
            "first",
            "three",
            "of",
            "the",
            "airlines",
            "that",
            "have",
            "fewer",
            "than",
            "200",
            "flights",
            "are",
            "show",
            "in",
            "the",
            "result",
            "table",
            ".",
            "The",
            "country",
            "is",
            "not",
            "available",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.Airline, T2.DestAirport FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid   =   T2.Airline GROUP BY T1.Airline HAVING count ( * )   <  200 limit 3",
        "query_w_results_blank_res": "SELECT T1.Airline, T2.DestAirport FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid   =   T2.Airline GROUP BY T1.Airline HAVING count ( * )   <  200 limit 3",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "airline",
            ",",
            "t2",
            ".",
            "destairport",
            "from",
            "airlines",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "uid",
            "=",
            "t2",
            ".",
            "airline",
            "group",
            "by",
            "t1",
            ".",
            "airline",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<",
            "200",
            "limit",
            "3"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "airline",
            ",",
            "t2",
            ".",
            "destairport",
            "from",
            "airlines",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "uid",
            "=",
            "t2",
            ".",
            "airline",
            "group",
            "by",
            "t1",
            ".",
            "airline",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<",
            "200",
            "limit",
            "3"
        ],
        "response_blank_res": "The destination airport of the first three of the airlines that have fewer than 200 flights are show in the result table . The country is not available .",
        "response_toks_blank_res": [
            "The",
            "destination",
            "airport",
            "of",
            "the",
            "first",
            "three",
            "of",
            "the",
            "airlines",
            "that",
            "have",
            "fewer",
            "than",
            "200",
            "flights",
            "are",
            "show",
            "in",
            "the",
            "result",
            "table",
            ".",
            "The",
            "country",
            "is",
            "not",
            "available",
            "."
        ]
    },
    {
        "database_id": "poker_player",
        "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT ( * )   >  1",
        "query_toks": [
            "select",
            "nationality",
            "from",
            "people",
            "group",
            "by",
            "nationality",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "results_raw": [
            [
                "Nationality"
            ],
            [
                "Russia"
            ]
        ],
        "response": "Russia is the only nationality shared by more than 1 person.",
        "response_toks": [
            "Russia",
            "is",
            "the",
            "only",
            "nationality",
            "shared",
            "by",
            "more",
            "than",
            "1",
            "person",
            "."
        ],
        "results_map": {
            "result0": "Russia"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT ( * )   >  1 | Russia ",
        "query_w_results_blank_res": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT ( * )   >  1 | result0 ",
        "query_toks_w_results": [
            "select",
            "nationality",
            "from",
            "people",
            "group",
            "by",
            "nationality",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1",
            "Russia"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "nationality",
            "from",
            "people",
            "group",
            "by",
            "nationality",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1",
            "result0"
        ],
        "response_blank_res": "result0 is the only nationality shared by more than 1 person .",
        "response_toks_blank_res": [
            "result0",
            "is",
            "the",
            "only",
            "nationality",
            "shared",
            "by",
            "more",
            "than",
            "1",
            "person",
            "."
        ]
    },
    {
        "database_id": "poker_player",
        "query": "SELECT People_ID FROM people WHERE Nationality  =  'Russia'",
        "query_toks": [
            "select",
            "people_id",
            "from",
            "people",
            "where",
            "nationality",
            "=",
            "'russia'"
        ],
        "results_raw": [
            [
                "People_ID"
            ],
            [
                1
            ],
            [
                3
            ],
            [
                4
            ]
        ],
        "response": "Here are the IDs for people having a nationality of Russia.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "IDs",
            "for",
            "people",
            "having",
            "a",
            "nationality",
            "of",
            "Russia",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT People_ID FROM people WHERE Nationality  =  'Russia'",
        "query_w_results_blank_res": "SELECT People_ID FROM people WHERE Nationality  =  'Russia'",
        "query_toks_w_results": [
            "select",
            "people_id",
            "from",
            "people",
            "where",
            "nationality",
            "=",
            "'russia'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "people_id",
            "from",
            "people",
            "where",
            "nationality",
            "=",
            "'russia'"
        ],
        "response_blank_res": "Here are the IDs for people having a nationality of Russia .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "IDs",
            "for",
            "people",
            "having",
            "a",
            "nationality",
            "of",
            "Russia",
            "."
        ]
    },
    {
        "database_id": "poker_player",
        "query": "SELECT People_ID, name FROM people WHERE Nationality  =  'Russia'",
        "query_toks": [
            "select",
            "people_id",
            ",",
            "name",
            "from",
            "people",
            "where",
            "nationality",
            "=",
            "'russia'"
        ],
        "results_raw": [
            [
                "People_ID",
                "Name"
            ],
            [
                1,
                "Aleksey Ostapenko"
            ],
            [
                3,
                "Roman Bragin"
            ],
            [
                4,
                "Sergey Grankin"
            ]
        ],
        "response": "Here are the IDs and names for people having a nationality of Russia.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "IDs",
            "and",
            "names",
            "for",
            "people",
            "having",
            "a",
            "nationality",
            "of",
            "Russia",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT People_ID, name FROM people WHERE Nationality  =  'Russia'",
        "query_w_results_blank_res": "SELECT People_ID, name FROM people WHERE Nationality  =  'Russia'",
        "query_toks_w_results": [
            "select",
            "people_id",
            ",",
            "name",
            "from",
            "people",
            "where",
            "nationality",
            "=",
            "'russia'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "people_id",
            ",",
            "name",
            "from",
            "people",
            "where",
            "nationality",
            "=",
            "'russia'"
        ],
        "response_blank_res": "Here are the IDs and names for people having a nationality of Russia .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "IDs",
            "and",
            "names",
            "for",
            "people",
            "having",
            "a",
            "nationality",
            "of",
            "Russia",
            "."
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT avg ( loser_age )  FROM matches",
        "query_toks": [
            "select",
            "avg",
            "(",
            "loser_age",
            ")",
            "from",
            "matches"
        ],
        "results_raw": [
            [
                "avg(loser_age)"
            ],
            [
                27.31121386258453
            ]
        ],
        "response": "27.31121386258453 is the average age of all losers of all matches.",
        "response_toks": [
            "27.31121386258453",
            "is",
            "the",
            "average",
            "age",
            "of",
            "all",
            "losers",
            "of",
            "all",
            "matches",
            "."
        ],
        "results_map": {
            "result0": "27.31121386258453"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT avg ( loser_age )  FROM matches | 27.31121386258453 ",
        "query_w_results_blank_res": "SELECT avg ( loser_age )  FROM matches | result0 ",
        "query_toks_w_results": [
            "select",
            "avg",
            "(",
            "loser_age",
            ")",
            "from",
            "matches",
            "27.31121386258453"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "avg",
            "(",
            "loser_age",
            ")",
            "from",
            "matches",
            "result0"
        ],
        "response_blank_res": "result0 is the average age of all losers of all matches .",
        "response_toks_blank_res": [
            "result0",
            "is",
            "the",
            "average",
            "age",
            "of",
            "all",
            "losers",
            "of",
            "all",
            "matches",
            "."
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT avg ( winner_age )  FROM matches",
        "query_toks": [
            "select",
            "avg",
            "(",
            "winner_age",
            ")",
            "from",
            "matches"
        ],
        "results_raw": [
            [
                "avg(winner_age)"
            ],
            [
                27.062177773183823
            ]
        ],
        "response": "27.062177773183823 is the average age of all winners of all matches.",
        "response_toks": [
            "27.062177773183823",
            "is",
            "the",
            "average",
            "age",
            "of",
            "all",
            "winners",
            "of",
            "all",
            "matches",
            "."
        ],
        "results_map": {
            "result0": "27.062177773183823"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT avg ( winner_age )  FROM matches | 27.062177773183823 ",
        "query_w_results_blank_res": "SELECT avg ( winner_age )  FROM matches | result0 ",
        "query_toks_w_results": [
            "select",
            "avg",
            "(",
            "winner_age",
            ")",
            "from",
            "matches",
            "27.062177773183823"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "avg",
            "(",
            "winner_age",
            ")",
            "from",
            "matches",
            "result0"
        ],
        "response_blank_res": "result0 is the average age of all winners of all matches .",
        "response_toks_blank_res": [
            "result0",
            "is",
            "the",
            "average",
            "age",
            "of",
            "all",
            "winners",
            "of",
            "all",
            "matches",
            "."
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT avg ( minutes )  FROM matches",
        "query_toks": [
            "select",
            "avg",
            "(",
            "minutes",
            ")",
            "from",
            "matches"
        ],
        "results_raw": [
            [
                "avg(minutes)"
            ],
            [
                98.78057553956835
            ]
        ],
        "response": "98.78057553956835 is the average munites of all matches.",
        "response_toks": [
            "98.78057553956835",
            "is",
            "the",
            "average",
            "munites",
            "of",
            "all",
            "matches",
            "."
        ],
        "results_map": {
            "result0": "98.78057553956835"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT avg ( minutes )  FROM matches | 98.78057553956835 ",
        "query_w_results_blank_res": "SELECT avg ( minutes )  FROM matches | result0 ",
        "query_toks_w_results": [
            "select",
            "avg",
            "(",
            "minutes",
            ")",
            "from",
            "matches",
            "98.78057553956835"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "avg",
            "(",
            "minutes",
            ")",
            "from",
            "matches",
            "result0"
        ],
        "response_blank_res": "result0 is the average munites of all matches .",
        "response_toks_blank_res": [
            "result0",
            "is",
            "the",
            "average",
            "munites",
            "of",
            "all",
            "matches",
            "."
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT max ( minutes )  FROM matches",
        "query_toks": [
            "select",
            "max",
            "(",
            "minutes",
            ")",
            "from",
            "matches"
        ],
        "results_raw": [
            [
                "max(minutes)"
            ],
            [
                199
            ]
        ],
        "response": "The longest match had 199 minutes.",
        "response_toks": [
            "The",
            "longest",
            "match",
            "had",
            "199",
            "minutes",
            "."
        ],
        "results_map": {
            "result0": "199"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT max ( minutes )  FROM matches | 199 ",
        "query_w_results_blank_res": "SELECT max ( minutes )  FROM matches | result0 ",
        "query_toks_w_results": [
            "select",
            "max",
            "(",
            "minutes",
            ")",
            "from",
            "matches",
            "199"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "max",
            "(",
            "minutes",
            ")",
            "from",
            "matches",
            "result0"
        ],
        "response_blank_res": "The longest match had result0 minutes .",
        "response_toks_blank_res": [
            "The",
            "longest",
            "match",
            "had",
            "result0",
            "minutes",
            "."
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT min ( minutes )  FROM matches",
        "query_toks": [
            "select",
            "min",
            "(",
            "minutes",
            ")",
            "from",
            "matches"
        ],
        "results_raw": [
            [
                "min(minutes)"
            ],
            [
                0
            ]
        ],
        "response": "The shortest match had 0 minute.",
        "response_toks": [
            "The",
            "shortest",
            "match",
            "had",
            "0",
            "minute",
            "."
        ],
        "results_map": {
            "result0": "0"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT min ( minutes )  FROM matches | 0 ",
        "query_w_results_blank_res": "SELECT min ( minutes )  FROM matches | result0 ",
        "query_toks_w_results": [
            "select",
            "min",
            "(",
            "minutes",
            ")",
            "from",
            "matches",
            "0"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "min",
            "(",
            "minutes",
            ")",
            "from",
            "matches",
            "result0"
        ],
        "response_blank_res": "The shortest match had result0 minute .",
        "response_toks_blank_res": [
            "The",
            "shortest",
            "match",
            "had",
            "result0",
            "minute",
            "."
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT count ( * )  FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport   =   T2.AirportCode WHERE T2.city  like  \"%Aberdeen%\" OR T2.city  like  \"%Abilene%\"",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "as",
            "t1",
            "join",
            "airports",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "destairport",
            "=",
            "t2",
            ".",
            "airportcode",
            "where",
            "t2",
            ".",
            "city",
            "like",
            "\"%aberdeen%\"",
            "or",
            "t2",
            ".",
            "city",
            "like",
            "\"%abilene%\""
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                0
            ]
        ],
        "response": "The count of  flights are landing in the city of aberdeen or abilene  is 0",
        "response_toks": [
            "The",
            "count",
            "of",
            "flights",
            "are",
            "landing",
            "in",
            "the",
            "city",
            "of",
            "aberdeen",
            "or",
            "abilene",
            "is",
            "0"
        ],
        "results_map": {
            "result0": "0"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport   =   T2.AirportCode WHERE T2.city  like  \"%Aberdeen%\" OR T2.city  like  \"%Abilene%\" | 0 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport   =   T2.AirportCode WHERE T2.city  like  \"%Aberdeen%\" OR T2.city  like  \"%Abilene%\" | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "as",
            "t1",
            "join",
            "airports",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "destairport",
            "=",
            "t2",
            ".",
            "airportcode",
            "where",
            "t2",
            ".",
            "city",
            "like",
            "\"%aberdeen%\"",
            "or",
            "t2",
            ".",
            "city",
            "like",
            "\"%abilene%\"",
            "0"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "as",
            "t1",
            "join",
            "airports",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "destairport",
            "=",
            "t2",
            ".",
            "airportcode",
            "where",
            "t2",
            ".",
            "city",
            "like",
            "\"%aberdeen%\"",
            "or",
            "t2",
            ".",
            "city",
            "like",
            "\"%abilene%\"",
            "result0"
        ],
        "response_blank_res": "The count of flights are landing in the city of aberdeen or abilene is result0",
        "response_toks_blank_res": [
            "The",
            "count",
            "of",
            "flights",
            "are",
            "landing",
            "in",
            "the",
            "city",
            "of",
            "aberdeen",
            "or",
            "abilene",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT airportCode FROM  Airports  WHERE  city like \"%Abilene%\"",
        "query_toks": [
            "select",
            "airportcode",
            "from",
            "airports",
            "where",
            "city",
            "like",
            "\"%abilene%\""
        ],
        "results_raw": [
            [
                "AirportCode"
            ],
            [
                "DYS"
            ],
            [
                "ABI"
            ]
        ],
        "response": "The airport codes for the city Abilene are shown  in the  table",
        "response_toks": [
            "The",
            "airport",
            "codes",
            "for",
            "the",
            "city",
            "Abilene",
            "are",
            "shown",
            "in",
            "the",
            "table"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT airportCode FROM  Airports  WHERE  city like \"%Abilene%\"",
        "query_w_results_blank_res": "SELECT airportCode FROM  Airports  WHERE  city like \"%Abilene%\"",
        "query_toks_w_results": [
            "select",
            "airportcode",
            "from",
            "airports",
            "where",
            "city",
            "like",
            "\"%abilene%\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "airportcode",
            "from",
            "airports",
            "where",
            "city",
            "like",
            "\"%abilene%\""
        ],
        "response_blank_res": "The airport codes for the city Abilene are shown in the table",
        "response_toks_blank_res": [
            "The",
            "airport",
            "codes",
            "for",
            "the",
            "city",
            "Abilene",
            "are",
            "shown",
            "in",
            "the",
            "table"
        ]
    },
    {
        "database_id": "museum_visit",
        "query": "SELECT name from museum",
        "query_toks": [
            "select",
            "name",
            "from",
            "museum"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Plaza Museum"
            ],
            [
                "Capital Plaza Museum"
            ],
            [
                "Jefferson Development Museum"
            ]
        ],
        "response": "The names of the museums are in the result table.",
        "response_toks": [
            "The",
            "names",
            "of",
            "the",
            "museums",
            "are",
            "in",
            "the",
            "result",
            "table",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT name from museum",
        "query_w_results_blank_res": "SELECT name from museum",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "museum"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "museum"
        ],
        "response_blank_res": "The names of the museums are in the result table .",
        "response_toks_blank_res": [
            "The",
            "names",
            "of",
            "the",
            "museums",
            "are",
            "in",
            "the",
            "result",
            "table",
            "."
        ]
    },
    {
        "database_id": "museum_visit",
        "query": "SELECT t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID   =   t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count ( * )  DESC LIMIT 1",
        "query_toks": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "museum",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "museum_id",
            "=",
            "t2",
            ".",
            "museum_id",
            "group",
            "by",
            "t2",
            ".",
            "museum_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Capital Plaza Museum"
            ]
        ],
        "response": "The name of the museum that was visited the most is in the result table.",
        "response_toks": [
            "The",
            "name",
            "of",
            "the",
            "museum",
            "that",
            "was",
            "visited",
            "the",
            "most",
            "is",
            "in",
            "the",
            "result",
            "table",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID   =   t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count ( * )  DESC LIMIT 1",
        "query_w_results_blank_res": "SELECT t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID   =   t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count ( * )  DESC LIMIT 1",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "museum",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "museum_id",
            "=",
            "t2",
            ".",
            "museum_id",
            "group",
            "by",
            "t2",
            ".",
            "museum_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "museum",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "museum_id",
            "=",
            "t2",
            ".",
            "museum_id",
            "group",
            "by",
            "t2",
            ".",
            "museum_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "response_blank_res": "The name of the museum that was visited the most is in the result table .",
        "response_toks_blank_res": [
            "The",
            "name",
            "of",
            "the",
            "museum",
            "that",
            "was",
            "visited",
            "the",
            "most",
            "is",
            "in",
            "the",
            "result",
            "table",
            "."
        ]
    },
    {
        "database_id": "museum_visit",
        "query": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID   =   t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count ( * )  DESC LIMIT 1",
        "query_toks": [
            "select",
            "t2",
            ".",
            "museum_id",
            ",",
            "t1",
            ".",
            "name",
            "from",
            "museum",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "museum_id",
            "=",
            "t2",
            ".",
            "museum_id",
            "group",
            "by",
            "t2",
            ".",
            "museum_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Museum_ID",
                "Name"
            ],
            [
                2,
                "Capital Plaza Museum"
            ]
        ],
        "response": "The id and name of the museum that was visited the most are in the result table.",
        "response_toks": [
            "The",
            "id",
            "and",
            "name",
            "of",
            "the",
            "museum",
            "that",
            "was",
            "visited",
            "the",
            "most",
            "are",
            "in",
            "the",
            "result",
            "table",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID   =   t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count ( * )  DESC LIMIT 1",
        "query_w_results_blank_res": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID   =   t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count ( * )  DESC LIMIT 1",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "museum_id",
            ",",
            "t1",
            ".",
            "name",
            "from",
            "museum",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "museum_id",
            "=",
            "t2",
            ".",
            "museum_id",
            "group",
            "by",
            "t2",
            ".",
            "museum_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "museum_id",
            ",",
            "t1",
            ".",
            "name",
            "from",
            "museum",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "museum_id",
            "=",
            "t2",
            ".",
            "museum_id",
            "group",
            "by",
            "t2",
            ".",
            "museum_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "response_blank_res": "The id and name of the museum that was visited the most are in the result table .",
        "response_toks_blank_res": [
            "The",
            "id",
            "and",
            "name",
            "of",
            "the",
            "museum",
            "that",
            "was",
            "visited",
            "the",
            "most",
            "are",
            "in",
            "the",
            "result",
            "table",
            "."
        ]
    },
    {
        "database_id": "tvshow",
        "query": "SELECT Title FROM Cartoon WHERE Directed_by  =  \"Ben Jones\" OR Directed_by  =  \"Brandon Vietti\"",
        "query_toks": [
            "select",
            "title",
            "from",
            "cartoon",
            "where",
            "directed_by",
            "=",
            "\"ben",
            "jones\"",
            "or",
            "directed_by",
            "=",
            "\"brandon",
            "vietti\""
        ],
        "results_raw": [
            [
                "Title"
            ],
            [
                "The Rise of the Blue Beetle!"
            ],
            [
                "Terror on Dinosaur Island!"
            ],
            [
                "Day of the Dark Knight!"
            ]
        ],
        "response": "Here is a list of the titles or cartoons directed by Ben Jones or Brandon Vietti.",
        "response_toks": [
            "Here",
            "is",
            "a",
            "list",
            "of",
            "the",
            "titles",
            "or",
            "cartoons",
            "directed",
            "by",
            "Ben",
            "Jones",
            "or",
            "Brandon",
            "Vietti",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Title FROM Cartoon WHERE Directed_by  =  \"Ben Jones\" OR Directed_by  =  \"Brandon Vietti\"",
        "query_w_results_blank_res": "SELECT Title FROM Cartoon WHERE Directed_by  =  \"Ben Jones\" OR Directed_by  =  \"Brandon Vietti\"",
        "query_toks_w_results": [
            "select",
            "title",
            "from",
            "cartoon",
            "where",
            "directed_by",
            "=",
            "\"ben",
            "jones\"",
            "or",
            "directed_by",
            "=",
            "\"brandon",
            "vietti\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "title",
            "from",
            "cartoon",
            "where",
            "directed_by",
            "=",
            "\"ben",
            "jones\"",
            "or",
            "directed_by",
            "=",
            "\"brandon",
            "vietti\""
        ],
        "response_blank_res": "Here is a list of the titles or cartoons directed by Ben Jones or Brandon Vietti .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "a",
            "list",
            "of",
            "the",
            "titles",
            "or",
            "cartoons",
            "directed",
            "by",
            "Ben",
            "Jones",
            "or",
            "Brandon",
            "Vietti",
            "."
        ]
    },
    {
        "database_id": "tvshow",
        "query": "SELECT Title, original_air_date FROM Cartoon WHERE Directed_by  =  \"Ben Jones\" OR Directed_by  =  \"Brandon Vietti\"",
        "query_toks": [
            "select",
            "title",
            ",",
            "original_air_date",
            "from",
            "cartoon",
            "where",
            "directed_by",
            "=",
            "\"ben",
            "jones\"",
            "or",
            "directed_by",
            "=",
            "\"brandon",
            "vietti\""
        ],
        "results_raw": [
            [
                "Title",
                "Original_air_date"
            ],
            [
                "The Rise of the Blue Beetle!",
                "November14,2008"
            ],
            [
                "Terror on Dinosaur Island!",
                "November21,2008"
            ],
            [
                "Day of the Dark Knight!",
                "January2,2009"
            ]
        ],
        "response": "Here is a table of the titles of cartoons directed by Ben Jones or Brandon Vietti and their original air dates.",
        "response_toks": [
            "Here",
            "is",
            "a",
            "table",
            "of",
            "the",
            "titles",
            "of",
            "cartoons",
            "directed",
            "by",
            "Ben",
            "Jones",
            "or",
            "Brandon",
            "Vietti",
            "and",
            "their",
            "original",
            "air",
            "dates",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Title, original_air_date FROM Cartoon WHERE Directed_by  =  \"Ben Jones\" OR Directed_by  =  \"Brandon Vietti\"",
        "query_w_results_blank_res": "SELECT Title, original_air_date FROM Cartoon WHERE Directed_by  =  \"Ben Jones\" OR Directed_by  =  \"Brandon Vietti\"",
        "query_toks_w_results": [
            "select",
            "title",
            ",",
            "original_air_date",
            "from",
            "cartoon",
            "where",
            "directed_by",
            "=",
            "\"ben",
            "jones\"",
            "or",
            "directed_by",
            "=",
            "\"brandon",
            "vietti\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "title",
            ",",
            "original_air_date",
            "from",
            "cartoon",
            "where",
            "directed_by",
            "=",
            "\"ben",
            "jones\"",
            "or",
            "directed_by",
            "=",
            "\"brandon",
            "vietti\""
        ],
        "response_blank_res": "Here is a table of the titles of cartoons directed by Ben Jones or Brandon Vietti and their original air dates .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "a",
            "table",
            "of",
            "the",
            "titles",
            "of",
            "cartoons",
            "directed",
            "by",
            "Ben",
            "Jones",
            "or",
            "Brandon",
            "Vietti",
            "and",
            "their",
            "original",
            "air",
            "dates",
            "."
        ]
    },
    {
        "database_id": "tvshow",
        "query": "SELECT Title, written_by FROM Cartoon WHERE Directed_by  =  \"Ben Jones\" OR Directed_by  =  \"Brandon Vietti\"",
        "query_toks": [
            "select",
            "title",
            ",",
            "written_by",
            "from",
            "cartoon",
            "where",
            "directed_by",
            "=",
            "\"ben",
            "jones\"",
            "or",
            "directed_by",
            "=",
            "\"brandon",
            "vietti\""
        ],
        "results_raw": [
            [
                "Title",
                "Written_by"
            ],
            [
                "The Rise of the Blue Beetle!",
                "Michael Jelenic"
            ],
            [
                "Terror on Dinosaur Island!",
                "Steven Melching"
            ],
            [
                "Day of the Dark Knight!",
                "J. M. DeMatteis"
            ]
        ],
        "response": "Here is a table of the titles of cartoons directed by Ben Jones or Brandon Vietti and their writers.",
        "response_toks": [
            "Here",
            "is",
            "a",
            "table",
            "of",
            "the",
            "titles",
            "of",
            "cartoons",
            "directed",
            "by",
            "Ben",
            "Jones",
            "or",
            "Brandon",
            "Vietti",
            "and",
            "their",
            "writers",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Title, written_by FROM Cartoon WHERE Directed_by  =  \"Ben Jones\" OR Directed_by  =  \"Brandon Vietti\"",
        "query_w_results_blank_res": "SELECT Title, written_by FROM Cartoon WHERE Directed_by  =  \"Ben Jones\" OR Directed_by  =  \"Brandon Vietti\"",
        "query_toks_w_results": [
            "select",
            "title",
            ",",
            "written_by",
            "from",
            "cartoon",
            "where",
            "directed_by",
            "=",
            "\"ben",
            "jones\"",
            "or",
            "directed_by",
            "=",
            "\"brandon",
            "vietti\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "title",
            ",",
            "written_by",
            "from",
            "cartoon",
            "where",
            "directed_by",
            "=",
            "\"ben",
            "jones\"",
            "or",
            "directed_by",
            "=",
            "\"brandon",
            "vietti\""
        ],
        "response_blank_res": "Here is a table of the titles of cartoons directed by Ben Jones or Brandon Vietti and their writers .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "a",
            "table",
            "of",
            "the",
            "titles",
            "of",
            "cartoons",
            "directed",
            "by",
            "Ben",
            "Jones",
            "or",
            "Brandon",
            "Vietti",
            "and",
            "their",
            "writers",
            "."
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "query": "SELECT * from Documents WHERE Document_Description LIKE \"%w%\"",
        "query_toks": [
            "select",
            "*",
            "from",
            "documents",
            "where",
            "document_description",
            "like",
            "\"%w%\""
        ],
        "results_raw": [
            [
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details"
            ],
            [
                82,
                11,
                "Data base",
                "w",
                null
            ],
            [
                801801,
                4,
                "How to read a book",
                "w",
                null
            ]
        ],
        "response": "These are the information about documents with a \"w\" in their description.",
        "response_toks": [
            "These",
            "are",
            "the",
            "information",
            "about",
            "documents",
            "with",
            "a",
            "``",
            "w",
            "''",
            "in",
            "their",
            "description",
            "."
        ],
        "results_map": {
            "result0": "w"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT * from Documents WHERE Document_Description LIKE \"%w%\" | w ",
        "query_w_results_blank_res": "SELECT * from Documents WHERE Document_Description LIKE \"%w%\" | result0 ",
        "query_toks_w_results": [
            "select",
            "*",
            "from",
            "documents",
            "where",
            "document_description",
            "like",
            "\"%w%\"",
            "w"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "*",
            "from",
            "documents",
            "where",
            "document_description",
            "like",
            "\"%w%\"",
            "result0"
        ],
        "response_blank_res": "These are the information about documents with a `` result0 '' in their description .",
        "response_toks_blank_res": [
            "These",
            "are",
            "the",
            "information",
            "about",
            "documents",
            "with",
            "a",
            "``",
            "result0",
            "''",
            "in",
            "their",
            "description",
            "."
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_name from Documents WHERE Document_Description LIKE \"%w%\"",
        "query_toks": [
            "select",
            "document_name",
            "from",
            "documents",
            "where",
            "document_description",
            "like",
            "\"%w%\""
        ],
        "results_raw": [
            [
                "Document_Name"
            ],
            [
                "Data base"
            ],
            [
                "How to read a book"
            ]
        ],
        "response": "Sure, these are the names of documents that have a \"w\" in the description.",
        "response_toks": [
            "Sure",
            ",",
            "these",
            "are",
            "the",
            "names",
            "of",
            "documents",
            "that",
            "have",
            "a",
            "``",
            "w",
            "''",
            "in",
            "the",
            "description",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT document_name from Documents WHERE Document_Description LIKE \"%w%\"",
        "query_w_results_blank_res": "SELECT document_name from Documents WHERE Document_Description LIKE \"%w%\"",
        "query_toks_w_results": [
            "select",
            "document_name",
            "from",
            "documents",
            "where",
            "document_description",
            "like",
            "\"%w%\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "document_name",
            "from",
            "documents",
            "where",
            "document_description",
            "like",
            "\"%w%\""
        ],
        "response_blank_res": "Sure , these are the names of documents that have a `` w '' in the description .",
        "response_toks_blank_res": [
            "Sure",
            ",",
            "these",
            "are",
            "the",
            "names",
            "of",
            "documents",
            "that",
            "have",
            "a",
            "``",
            "w",
            "''",
            "in",
            "the",
            "description",
            "."
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_name , template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
        "query_toks": [
            "select",
            "document_name",
            ",",
            "template_id",
            "from",
            "documents",
            "where",
            "document_description",
            "like",
            "\"%w%\""
        ],
        "results_raw": [
            [
                "Document_Name",
                "Template_ID"
            ],
            [
                "Data base",
                11
            ],
            [
                "How to read a book",
                4
            ]
        ],
        "response": "These are the names and template ids of documents whose description contain a \"w\"",
        "response_toks": [
            "These",
            "are",
            "the",
            "names",
            "and",
            "template",
            "ids",
            "of",
            "documents",
            "whose",
            "description",
            "contain",
            "a",
            "``",
            "w",
            "''"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT document_name , template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
        "query_w_results_blank_res": "SELECT document_name , template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
        "query_toks_w_results": [
            "select",
            "document_name",
            ",",
            "template_id",
            "from",
            "documents",
            "where",
            "document_description",
            "like",
            "\"%w%\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "document_name",
            ",",
            "template_id",
            "from",
            "documents",
            "where",
            "document_description",
            "like",
            "\"%w%\""
        ],
        "response_blank_res": "These are the names and template ids of documents whose description contain a `` w ''",
        "response_toks_blank_res": [
            "These",
            "are",
            "the",
            "names",
            "and",
            "template",
            "ids",
            "of",
            "documents",
            "whose",
            "description",
            "contain",
            "a",
            "``",
            "w",
            "''"
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT avg ( loser_age )   FROM matches",
        "query_toks": [
            "select",
            "avg",
            "(",
            "loser_age",
            ")",
            "from",
            "matches"
        ],
        "results_raw": [
            [
                "avg(loser_age)"
            ],
            [
                27.31121386258453
            ]
        ],
        "response": "The average age the the losers are 27.31121386258453",
        "response_toks": [
            "The",
            "average",
            "age",
            "the",
            "the",
            "losers",
            "are",
            "27.31121386258453"
        ],
        "results_map": {
            "result0": "27.31121386258453"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT avg ( loser_age )   FROM matches | 27.31121386258453 ",
        "query_w_results_blank_res": "SELECT avg ( loser_age )   FROM matches | result0 ",
        "query_toks_w_results": [
            "select",
            "avg",
            "(",
            "loser_age",
            ")",
            "from",
            "matches",
            "27.31121386258453"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "avg",
            "(",
            "loser_age",
            ")",
            "from",
            "matches",
            "result0"
        ],
        "response_blank_res": "The average age the the losers are result0",
        "response_toks_blank_res": [
            "The",
            "average",
            "age",
            "the",
            "the",
            "losers",
            "are",
            "result0"
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT avg ( winner_age )   FROM matches",
        "query_toks": [
            "select",
            "avg",
            "(",
            "winner_age",
            ")",
            "from",
            "matches"
        ],
        "results_raw": [
            [
                "avg(winner_age)"
            ],
            [
                27.062177773183823
            ]
        ],
        "response": "the average age of the winners is 27.062177773183823",
        "response_toks": [
            "the",
            "average",
            "age",
            "of",
            "the",
            "winners",
            "is",
            "27.062177773183823"
        ],
        "results_map": {
            "result0": "27.062177773183823"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT avg ( winner_age )   FROM matches | 27.062177773183823 ",
        "query_w_results_blank_res": "SELECT avg ( winner_age )   FROM matches | result0 ",
        "query_toks_w_results": [
            "select",
            "avg",
            "(",
            "winner_age",
            ")",
            "from",
            "matches",
            "27.062177773183823"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "avg",
            "(",
            "winner_age",
            ")",
            "from",
            "matches",
            "result0"
        ],
        "response_blank_res": "the average age of the winners is result0",
        "response_toks_blank_res": [
            "the",
            "average",
            "age",
            "of",
            "the",
            "winners",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT count ( * )  from matches where winner_hand  =  \"L\"",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "matches",
            "where",
            "winner_hand",
            "=",
            "\"l\""
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                47
            ]
        ],
        "response": "There are 47 winners that are left handed",
        "response_toks": [
            "There",
            "are",
            "47",
            "winners",
            "that",
            "are",
            "left",
            "handed"
        ],
        "results_map": {
            "result0": "47"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  from matches where winner_hand  =  \"L\" | 47 ",
        "query_w_results_blank_res": "SELECT count ( * )  from matches where winner_hand  =  \"L\" | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "matches",
            "where",
            "winner_hand",
            "=",
            "\"l\"",
            "47"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "matches",
            "where",
            "winner_hand",
            "=",
            "\"l\"",
            "result0"
        ],
        "response_blank_res": "There are result0 winners that are left handed",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "winners",
            "that",
            "are",
            "left",
            "handed"
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT winner_name, loser_name from matches where minutes  =   ( select max ( minutes )  from matches ) ",
        "query_toks": [
            "select",
            "winner_name",
            ",",
            "loser_name",
            "from",
            "matches",
            "where",
            "minutes",
            "=",
            "(",
            "select",
            "max",
            "(",
            "minutes",
            ")",
            "from",
            "matches",
            ")"
        ],
        "results_raw": [
            [
                "winner_name",
                "loser_name"
            ],
            [
                "Petra Kvitova",
                "Angelique Kerber"
            ]
        ],
        "response": "the names of the winner and loser from the longest match are Petra Kvitova and Angelique Kerber respectively.",
        "response_toks": [
            "the",
            "names",
            "of",
            "the",
            "winner",
            "and",
            "loser",
            "from",
            "the",
            "longest",
            "match",
            "are",
            "Petra",
            "Kvitova",
            "and",
            "Angelique",
            "Kerber",
            "respectively",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT winner_name, loser_name from matches where minutes  =   ( select max ( minutes )  from matches ) ",
        "query_w_results_blank_res": "SELECT winner_name, loser_name from matches where minutes  =   ( select max ( minutes )  from matches ) ",
        "query_toks_w_results": [
            "select",
            "winner_name",
            ",",
            "loser_name",
            "from",
            "matches",
            "where",
            "minutes",
            "=",
            "(",
            "select",
            "max",
            "(",
            "minutes",
            ")",
            "from",
            "matches",
            ")"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "winner_name",
            ",",
            "loser_name",
            "from",
            "matches",
            "where",
            "minutes",
            "=",
            "(",
            "select",
            "max",
            "(",
            "minutes",
            ")",
            "from",
            "matches",
            ")"
        ],
        "response_blank_res": "the names of the winner and loser from the longest match are Petra Kvitova and Angelique Kerber respectively .",
        "response_toks_blank_res": [
            "the",
            "names",
            "of",
            "the",
            "winner",
            "and",
            "loser",
            "from",
            "the",
            "longest",
            "match",
            "are",
            "Petra",
            "Kvitova",
            "and",
            "Angelique",
            "Kerber",
            "respectively",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT name FROM Dogs",
        "query_toks": [
            "select",
            "name",
            "from",
            "dogs"
        ],
        "results_raw": [
            [
                "name"
            ],
            [
                "Kacey"
            ],
            [
                "Hipolito"
            ],
            [
                "Mavis"
            ]
        ],
        "response": "The table shows the names of all the dogs.",
        "response_toks": [
            "The",
            "table",
            "shows",
            "the",
            "names",
            "of",
            "all",
            "the",
            "dogs",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT name FROM Dogs",
        "query_w_results_blank_res": "SELECT name FROM Dogs",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "dogs"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "dogs"
        ],
        "response_blank_res": "The table shows the names of all the dogs .",
        "response_toks_blank_res": [
            "The",
            "table",
            "shows",
            "the",
            "names",
            "of",
            "all",
            "the",
            "dogs",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT name FROM Dogs WHERE breed_code   =    (  SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count ( * )  ASC LIMIT 1  ) ",
        "query_toks": [
            "select",
            "name",
            "from",
            "dogs",
            "where",
            "breed_code",
            "=",
            "(",
            "select",
            "breed_code",
            "from",
            "dogs",
            "group",
            "by",
            "breed_code",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "asc",
            "limit",
            "1",
            ")"
        ],
        "results_raw": [
            [
                "name"
            ],
            [
                "Kacey"
            ],
            [
                "Houston"
            ],
            [
                "George"
            ]
        ],
        "response": "The table shows the names of the dogs with the rarest breed.",
        "response_toks": [
            "The",
            "table",
            "shows",
            "the",
            "names",
            "of",
            "the",
            "dogs",
            "with",
            "the",
            "rarest",
            "breed",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT name FROM Dogs WHERE breed_code   =    (  SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count ( * )  ASC LIMIT 1  ) ",
        "query_w_results_blank_res": "SELECT name FROM Dogs WHERE breed_code   =    (  SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count ( * )  ASC LIMIT 1  ) ",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "dogs",
            "where",
            "breed_code",
            "=",
            "(",
            "select",
            "breed_code",
            "from",
            "dogs",
            "group",
            "by",
            "breed_code",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "asc",
            "limit",
            "1",
            ")"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "dogs",
            "where",
            "breed_code",
            "=",
            "(",
            "select",
            "breed_code",
            "from",
            "dogs",
            "group",
            "by",
            "breed_code",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "asc",
            "limit",
            "1",
            ")"
        ],
        "response_blank_res": "The table shows the names of the dogs with the rarest breed .",
        "response_toks_blank_res": [
            "The",
            "table",
            "shows",
            "the",
            "names",
            "of",
            "the",
            "dogs",
            "with",
            "the",
            "rarest",
            "breed",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT name, gender FROM Dogs WHERE breed_code   =    (  SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count ( * )  ASC LIMIT 1  ) ",
        "query_toks": [
            "select",
            "name",
            ",",
            "gender",
            "from",
            "dogs",
            "where",
            "breed_code",
            "=",
            "(",
            "select",
            "breed_code",
            "from",
            "dogs",
            "group",
            "by",
            "breed_code",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "asc",
            "limit",
            "1",
            ")"
        ],
        "results_raw": [
            [
                "name",
                "gender"
            ],
            [
                "Kacey",
                "1"
            ],
            [
                "Houston",
                "0"
            ],
            [
                "George",
                "0"
            ]
        ],
        "response": "The table shows the names and genders of the dogs with the rarest breed.",
        "response_toks": [
            "The",
            "table",
            "shows",
            "the",
            "names",
            "and",
            "genders",
            "of",
            "the",
            "dogs",
            "with",
            "the",
            "rarest",
            "breed",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT name, gender FROM Dogs WHERE breed_code   =    (  SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count ( * )  ASC LIMIT 1  ) ",
        "query_w_results_blank_res": "SELECT name, gender FROM Dogs WHERE breed_code   =    (  SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count ( * )  ASC LIMIT 1  ) ",
        "query_toks_w_results": [
            "select",
            "name",
            ",",
            "gender",
            "from",
            "dogs",
            "where",
            "breed_code",
            "=",
            "(",
            "select",
            "breed_code",
            "from",
            "dogs",
            "group",
            "by",
            "breed_code",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "asc",
            "limit",
            "1",
            ")"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            ",",
            "gender",
            "from",
            "dogs",
            "where",
            "breed_code",
            "=",
            "(",
            "select",
            "breed_code",
            "from",
            "dogs",
            "group",
            "by",
            "breed_code",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "asc",
            "limit",
            "1",
            ")"
        ],
        "response_blank_res": "The table shows the names and genders of the dogs with the rarest breed .",
        "response_toks_blank_res": [
            "The",
            "table",
            "shows",
            "the",
            "names",
            "and",
            "genders",
            "of",
            "the",
            "dogs",
            "with",
            "the",
            "rarest",
            "breed",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id   =   T2.dog_id WHERE T1.breed_code   =    (  SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count ( * )  ASC LIMIT 1  ) ",
        "query_toks": [
            "select",
            "t1",
            ".",
            "name",
            ",",
            "t2",
            ".",
            "date_of_treatment",
            "from",
            "dogs",
            "as",
            "t1",
            "join",
            "treatments",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "dog_id",
            "=",
            "t2",
            ".",
            "dog_id",
            "where",
            "t1",
            ".",
            "breed_code",
            "=",
            "(",
            "select",
            "breed_code",
            "from",
            "dogs",
            "group",
            "by",
            "breed_code",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "asc",
            "limit",
            "1",
            ")"
        ],
        "results_raw": [
            [
                "name",
                "date_of_treatment"
            ],
            [
                "Lyric",
                "2018-03-19 04:39:54"
            ],
            [
                "Houston",
                "2018-03-15 20:25:34"
            ],
            [
                "Lyric",
                "2018-03-08 05:26:23"
            ]
        ],
        "response": "The table shows the names and treatment dates of the dogs with the rarest breed.",
        "response_toks": [
            "The",
            "table",
            "shows",
            "the",
            "names",
            "and",
            "treatment",
            "dates",
            "of",
            "the",
            "dogs",
            "with",
            "the",
            "rarest",
            "breed",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id   =   T2.dog_id WHERE T1.breed_code   =    (  SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count ( * )  ASC LIMIT 1  ) ",
        "query_w_results_blank_res": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id   =   T2.dog_id WHERE T1.breed_code   =    (  SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count ( * )  ASC LIMIT 1  ) ",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "name",
            ",",
            "t2",
            ".",
            "date_of_treatment",
            "from",
            "dogs",
            "as",
            "t1",
            "join",
            "treatments",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "dog_id",
            "=",
            "t2",
            ".",
            "dog_id",
            "where",
            "t1",
            ".",
            "breed_code",
            "=",
            "(",
            "select",
            "breed_code",
            "from",
            "dogs",
            "group",
            "by",
            "breed_code",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "asc",
            "limit",
            "1",
            ")"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "name",
            ",",
            "t2",
            ".",
            "date_of_treatment",
            "from",
            "dogs",
            "as",
            "t1",
            "join",
            "treatments",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "dog_id",
            "=",
            "t2",
            ".",
            "dog_id",
            "where",
            "t1",
            ".",
            "breed_code",
            "=",
            "(",
            "select",
            "breed_code",
            "from",
            "dogs",
            "group",
            "by",
            "breed_code",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "asc",
            "limit",
            "1",
            ")"
        ],
        "response_blank_res": "The table shows the names and treatment dates of the dogs with the rarest breed .",
        "response_toks_blank_res": [
            "The",
            "table",
            "shows",
            "the",
            "names",
            "and",
            "treatment",
            "dates",
            "of",
            "the",
            "dogs",
            "with",
            "the",
            "rarest",
            "breed",
            "."
        ]
    },
    {
        "database_id": "pets_1",
        "query": "SELECT count ( * )  FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "where",
            "t3",
            ".",
            "pettype",
            "=",
            "'cat'"
        ],
        "results_raw": [
            [
                "count(stuid)"
            ],
            [
                34
            ]
        ],
        "response": "There are 34 students who have a cat pet.",
        "response_toks": [
            "There",
            "are",
            "34",
            "students",
            "who",
            "have",
            "a",
            "cat",
            "pet",
            "."
        ],
        "results_map": {
            "result0": "34"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' | 34 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "where",
            "t3",
            ".",
            "pettype",
            "=",
            "'cat'",
            "34"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "where",
            "t3",
            ".",
            "pettype",
            "=",
            "'cat'",
            "result0"
        ],
        "response_blank_res": "There are result0 students who have a cat pet .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "students",
            "who",
            "have",
            "a",
            "cat",
            "pet",
            "."
        ]
    },
    {
        "database_id": "pets_1",
        "query": "select count ( * )  from  ( SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T3.pettype   =   'cat' ) ",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "(",
            "select",
            "stuid",
            "from",
            "student",
            "except",
            "select",
            "t1",
            ".",
            "stuid",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "where",
            "t3",
            ".",
            "pettype",
            "=",
            "'cat'",
            ")"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                33
            ]
        ],
        "response": "There are  33 students who don't have a cat pet",
        "response_toks": [
            "There",
            "are",
            "33",
            "students",
            "who",
            "do",
            "n't",
            "have",
            "a",
            "cat",
            "pet"
        ],
        "results_map": {
            "result0": "33"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "select count ( * )  from  ( SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T3.pettype   =   'cat' )  | 33 ",
        "query_w_results_blank_res": "select count ( * )  from  ( SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T3.pettype   =   'cat' )  | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "(",
            "select",
            "stuid",
            "from",
            "student",
            "except",
            "select",
            "t1",
            ".",
            "stuid",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "where",
            "t3",
            ".",
            "pettype",
            "=",
            "'cat'",
            ")",
            "33"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "(",
            "select",
            "stuid",
            "from",
            "student",
            "except",
            "select",
            "t1",
            ".",
            "stuid",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "where",
            "t3",
            ".",
            "pettype",
            "=",
            "'cat'",
            ")",
            "result0"
        ],
        "response_blank_res": "There are result0 students who do n't have a cat pet",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "students",
            "who",
            "do",
            "n't",
            "have",
            "a",
            "cat",
            "pet"
        ]
    },
    {
        "database_id": "pets_1",
        "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T3.pettype   =   'cat'",
        "query_toks": [
            "select",
            "stuid",
            "from",
            "student",
            "except",
            "select",
            "t1",
            ".",
            "stuid",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "where",
            "t3",
            ".",
            "pettype",
            "=",
            "'cat'"
        ],
        "results_raw": [
            [
                "StuID"
            ],
            [
                1002
            ],
            [
                1003
            ],
            [
                1004
            ]
        ],
        "response": "Here is the table of  the ids of the students who don't have a cat pet . For example, they are 1002 and 1003",
        "response_toks": [
            "Here",
            "is",
            "the",
            "table",
            "of",
            "the",
            "ids",
            "of",
            "the",
            "students",
            "who",
            "do",
            "n't",
            "have",
            "a",
            "cat",
            "pet",
            ".",
            "For",
            "example",
            ",",
            "they",
            "are",
            "1002",
            "and",
            "1003"
        ],
        "results_map": {
            "result0": "1002",
            "result1": "1003"
        },
        "results_blank_res": "result0 result1 ",
        "query_w_results": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T3.pettype   =   'cat' | 1002 1003 ",
        "query_w_results_blank_res": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T3.pettype   =   'cat' | result0 result1 ",
        "query_toks_w_results": [
            "select",
            "stuid",
            "from",
            "student",
            "except",
            "select",
            "t1",
            ".",
            "stuid",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "where",
            "t3",
            ".",
            "pettype",
            "=",
            "'cat'",
            "1002",
            "1003"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "stuid",
            "from",
            "student",
            "except",
            "select",
            "t1",
            ".",
            "stuid",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "where",
            "t3",
            ".",
            "pettype",
            "=",
            "'cat'",
            "result0",
            "result1"
        ],
        "response_blank_res": "Here is the table of the ids of the students who do n't have a cat pet . For example , they are result0 and result1",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "table",
            "of",
            "the",
            "ids",
            "of",
            "the",
            "students",
            "who",
            "do",
            "n't",
            "have",
            "a",
            "cat",
            "pet",
            ".",
            "For",
            "example",
            ",",
            "they",
            "are",
            "result0",
            "and",
            "result1"
        ]
    },
    {
        "database_id": "museum_visit",
        "query": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID   =   t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID   =   t2.Museum_ID WHERE t3.open_year  >  2011",
        "query_toks": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "visitor",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "visitor_id",
            "join",
            "museum",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "museum_id",
            "=",
            "t2",
            ".",
            "museum_id",
            "where",
            "t3",
            ".",
            "open_year",
            "<",
            "2009",
            "intersect",
            "select",
            "t1",
            ".",
            "name",
            "from",
            "visitor",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "visitor_id",
            "join",
            "museum",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "museum_id",
            "=",
            "t2",
            ".",
            "museum_id",
            "where",
            "t3",
            ".",
            "open_year",
            ">",
            "2011"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Fernando Gago"
            ]
        ],
        "response": "The name of the visitor who visited a museum opened before 2009 and a museum opened after 2011 is Fernando Gago.",
        "response_toks": [
            "The",
            "name",
            "of",
            "the",
            "visitor",
            "who",
            "visited",
            "a",
            "museum",
            "opened",
            "before",
            "2009",
            "and",
            "a",
            "museum",
            "opened",
            "after",
            "2011",
            "is",
            "Fernando",
            "Gago",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID   =   t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID   =   t2.Museum_ID WHERE t3.open_year  >  2011",
        "query_w_results_blank_res": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID   =   t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID   =   t2.Museum_ID WHERE t3.open_year  >  2011",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "visitor",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "visitor_id",
            "join",
            "museum",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "museum_id",
            "=",
            "t2",
            ".",
            "museum_id",
            "where",
            "t3",
            ".",
            "open_year",
            "<",
            "2009",
            "intersect",
            "select",
            "t1",
            ".",
            "name",
            "from",
            "visitor",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "visitor_id",
            "join",
            "museum",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "museum_id",
            "=",
            "t2",
            ".",
            "museum_id",
            "where",
            "t3",
            ".",
            "open_year",
            ">",
            "2011"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "visitor",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "visitor_id",
            "join",
            "museum",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "museum_id",
            "=",
            "t2",
            ".",
            "museum_id",
            "where",
            "t3",
            ".",
            "open_year",
            "<",
            "2009",
            "intersect",
            "select",
            "t1",
            ".",
            "name",
            "from",
            "visitor",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "visitor_id",
            "join",
            "museum",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "museum_id",
            "=",
            "t2",
            ".",
            "museum_id",
            "where",
            "t3",
            ".",
            "open_year",
            ">",
            "2011"
        ],
        "response_blank_res": "The name of the visitor who visited a museum opened before 2009 and a museum opened after 2011 is Fernando Gago .",
        "response_toks_blank_res": [
            "The",
            "name",
            "of",
            "the",
            "visitor",
            "who",
            "visited",
            "a",
            "museum",
            "opened",
            "before",
            "2009",
            "and",
            "a",
            "museum",
            "opened",
            "after",
            "2011",
            "is",
            "Fernando",
            "Gago",
            "."
        ]
    },
    {
        "database_id": "museum_visit",
        "query": "SELECT t3.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID   =   t2.Museum_ID WHERE t3.open_year  <  2009 AND t1.name  =   ( SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID   =   t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID   =   t2.Museum_ID WHERE t3.open_year  >  2011 ) ",
        "query_toks": [
            "select",
            "t3",
            ".",
            "name",
            "from",
            "visitor",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "visitor_id",
            "join",
            "museum",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "museum_id",
            "=",
            "t2",
            ".",
            "museum_id",
            "where",
            "t3",
            ".",
            "open_year",
            "<",
            "2009",
            "and",
            "t1",
            ".",
            "name",
            "=",
            "(",
            "select",
            "t1",
            ".",
            "name",
            "from",
            "visitor",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "visitor_id",
            "join",
            "museum",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "museum_id",
            "=",
            "t2",
            ".",
            "museum_id",
            "where",
            "t3",
            ".",
            "open_year",
            "<",
            "2009",
            "intersect",
            "select",
            "t1",
            ".",
            "name",
            "from",
            "visitor",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "visitor_id",
            "join",
            "museum",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "museum_id",
            "=",
            "t2",
            ".",
            "museum_id",
            "where",
            "t3",
            ".",
            "open_year",
            ">",
            "2011",
            ")"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Plaza Museum"
            ]
        ],
        "response": "The name of the museum that the visitor who visited a museum opened before 2009 and a museum opened after 2011 and also visited before 2009 is Plaza Museum.",
        "response_toks": [
            "The",
            "name",
            "of",
            "the",
            "museum",
            "that",
            "the",
            "visitor",
            "who",
            "visited",
            "a",
            "museum",
            "opened",
            "before",
            "2009",
            "and",
            "a",
            "museum",
            "opened",
            "after",
            "2011",
            "and",
            "also",
            "visited",
            "before",
            "2009",
            "is",
            "Plaza",
            "Museum",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT t3.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID   =   t2.Museum_ID WHERE t3.open_year  <  2009 AND t1.name  =   ( SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID   =   t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID   =   t2.Museum_ID WHERE t3.open_year  >  2011 ) ",
        "query_w_results_blank_res": "SELECT t3.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID   =   t2.Museum_ID WHERE t3.open_year  <  2009 AND t1.name  =   ( SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID   =   t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID   =   t2.Museum_ID WHERE t3.open_year  >  2011 ) ",
        "query_toks_w_results": [
            "select",
            "t3",
            ".",
            "name",
            "from",
            "visitor",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "visitor_id",
            "join",
            "museum",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "museum_id",
            "=",
            "t2",
            ".",
            "museum_id",
            "where",
            "t3",
            ".",
            "open_year",
            "<",
            "2009",
            "and",
            "t1",
            ".",
            "name",
            "=",
            "(",
            "select",
            "t1",
            ".",
            "name",
            "from",
            "visitor",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "visitor_id",
            "join",
            "museum",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "museum_id",
            "=",
            "t2",
            ".",
            "museum_id",
            "where",
            "t3",
            ".",
            "open_year",
            "<",
            "2009",
            "intersect",
            "select",
            "t1",
            ".",
            "name",
            "from",
            "visitor",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "visitor_id",
            "join",
            "museum",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "museum_id",
            "=",
            "t2",
            ".",
            "museum_id",
            "where",
            "t3",
            ".",
            "open_year",
            ">",
            "2011",
            ")"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t3",
            ".",
            "name",
            "from",
            "visitor",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "visitor_id",
            "join",
            "museum",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "museum_id",
            "=",
            "t2",
            ".",
            "museum_id",
            "where",
            "t3",
            ".",
            "open_year",
            "<",
            "2009",
            "and",
            "t1",
            ".",
            "name",
            "=",
            "(",
            "select",
            "t1",
            ".",
            "name",
            "from",
            "visitor",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "visitor_id",
            "join",
            "museum",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "museum_id",
            "=",
            "t2",
            ".",
            "museum_id",
            "where",
            "t3",
            ".",
            "open_year",
            "<",
            "2009",
            "intersect",
            "select",
            "t1",
            ".",
            "name",
            "from",
            "visitor",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "visitor_id",
            "join",
            "museum",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "museum_id",
            "=",
            "t2",
            ".",
            "museum_id",
            "where",
            "t3",
            ".",
            "open_year",
            ">",
            "2011",
            ")"
        ],
        "response_blank_res": "The name of the museum that the visitor who visited a museum opened before 2009 and a museum opened after 2011 and also visited before 2009 is Plaza Museum .",
        "response_toks_blank_res": [
            "The",
            "name",
            "of",
            "the",
            "museum",
            "that",
            "the",
            "visitor",
            "who",
            "visited",
            "a",
            "museum",
            "opened",
            "before",
            "2009",
            "and",
            "a",
            "museum",
            "opened",
            "after",
            "2011",
            "and",
            "also",
            "visited",
            "before",
            "2009",
            "is",
            "Plaza",
            "Museum",
            "."
        ]
    },
    {
        "database_id": "museum_visit",
        "query": "SELECT t2.total_spent / t2.Num_of_ticket FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID   =   t2.Museum_ID WHERE t3.name  =  \"Plaza Museum\"",
        "query_toks": [
            "select",
            "t2",
            ".",
            "total_spent",
            "/",
            "t2",
            ".",
            "num_of_ticket",
            "from",
            "visitor",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "visitor_id",
            "join",
            "museum",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "museum_id",
            "=",
            "t2",
            ".",
            "museum_id",
            "where",
            "t3",
            ".",
            "name",
            "=",
            "\"plaza",
            "museum\""
        ],
        "results_raw": [
            [
                "t2.total_spent / t2.Num_of_ticket"
            ],
            [
                16.006999999999998
            ]
        ],
        "response": "The price per ticket at Plaza Museum is 16.006999999999998.",
        "response_toks": [
            "The",
            "price",
            "per",
            "ticket",
            "at",
            "Plaza",
            "Museum",
            "is",
            "16.006999999999998",
            "."
        ],
        "results_map": {
            "result0": "16.006999999999998"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT t2.total_spent / t2.Num_of_ticket FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID   =   t2.Museum_ID WHERE t3.name  =  \"Plaza Museum\" | 16.006999999999998 ",
        "query_w_results_blank_res": "SELECT t2.total_spent / t2.Num_of_ticket FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID   =   t2.Museum_ID WHERE t3.name  =  \"Plaza Museum\" | result0 ",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "total_spent",
            "/",
            "t2",
            ".",
            "num_of_ticket",
            "from",
            "visitor",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "visitor_id",
            "join",
            "museum",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "museum_id",
            "=",
            "t2",
            ".",
            "museum_id",
            "where",
            "t3",
            ".",
            "name",
            "=",
            "\"plaza",
            "museum\"",
            "16.006999999999998"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "total_spent",
            "/",
            "t2",
            ".",
            "num_of_ticket",
            "from",
            "visitor",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "visitor_id",
            "join",
            "museum",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "museum_id",
            "=",
            "t2",
            ".",
            "museum_id",
            "where",
            "t3",
            ".",
            "name",
            "=",
            "\"plaza",
            "museum\"",
            "result0"
        ],
        "response_blank_res": "The price per ticket at Plaza Museum is result0 .",
        "response_toks_blank_res": [
            "The",
            "price",
            "per",
            "ticket",
            "at",
            "Plaza",
            "Museum",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "museum_visit",
        "query": "SELECT level_of_membership FROM visitor WHERE name  =  \"Fernando Gago\"",
        "query_toks": [
            "select",
            "level_of_membership",
            "from",
            "visitor",
            "where",
            "name",
            "=",
            "\"fernando",
            "gago\""
        ],
        "results_raw": [
            [
                "Level_of_membership"
            ],
            [
                6
            ]
        ],
        "response": "The level of membership of Fernando Gago is 6.",
        "response_toks": [
            "The",
            "level",
            "of",
            "membership",
            "of",
            "Fernando",
            "Gago",
            "is",
            "6",
            "."
        ],
        "results_map": {
            "result0": "6"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT level_of_membership FROM visitor WHERE name  =  \"Fernando Gago\" | 6 ",
        "query_w_results_blank_res": "SELECT level_of_membership FROM visitor WHERE name  =  \"Fernando Gago\" | result0 ",
        "query_toks_w_results": [
            "select",
            "level_of_membership",
            "from",
            "visitor",
            "where",
            "name",
            "=",
            "\"fernando",
            "gago\"",
            "6"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "level_of_membership",
            "from",
            "visitor",
            "where",
            "name",
            "=",
            "\"fernando",
            "gago\"",
            "result0"
        ],
        "response_blank_res": "The level of membership of Fernando Gago is result0 .",
        "response_toks_blank_res": [
            "The",
            "level",
            "of",
            "membership",
            "of",
            "Fernando",
            "Gago",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "museum_visit",
        "query": "SELECT age FROM visitor WHERE name  =  \"Fernando Gago\"",
        "query_toks": [
            "select",
            "age",
            "from",
            "visitor",
            "where",
            "name",
            "=",
            "\"fernando",
            "gago\""
        ],
        "results_raw": [
            [
                "Age"
            ],
            [
                36
            ]
        ],
        "response": "The age of the visitor Fernando Gago is 36.",
        "response_toks": [
            "The",
            "age",
            "of",
            "the",
            "visitor",
            "Fernando",
            "Gago",
            "is",
            "36",
            "."
        ],
        "results_map": {
            "result0": "36"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT age FROM visitor WHERE name  =  \"Fernando Gago\" | 36 ",
        "query_w_results_blank_res": "SELECT age FROM visitor WHERE name  =  \"Fernando Gago\" | result0 ",
        "query_toks_w_results": [
            "select",
            "age",
            "from",
            "visitor",
            "where",
            "name",
            "=",
            "\"fernando",
            "gago\"",
            "36"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "age",
            "from",
            "visitor",
            "where",
            "name",
            "=",
            "\"fernando",
            "gago\"",
            "result0"
        ],
        "response_blank_res": "The age of the visitor Fernando Gago is result0 .",
        "response_toks_blank_res": [
            "The",
            "age",
            "of",
            "the",
            "visitor",
            "Fernando",
            "Gago",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT T1.SourceAirport FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid   =   T1.Airline WHERE T2.Airline   =   \"United Airlines\"",
        "query_toks": [
            "select",
            "t1",
            ".",
            "sourceairport",
            "from",
            "flights",
            "as",
            "t1",
            "join",
            "airlines",
            "as",
            "t2",
            "on",
            "t2",
            ".",
            "uid",
            "=",
            "t1",
            ".",
            "airline",
            "where",
            "t2",
            ".",
            "airline",
            "=",
            "\"united",
            "airlines\""
        ],
        "results_raw": [
            [
                "SourceAirport"
            ],
            [
                " APG"
            ],
            [
                " ASY"
            ],
            [
                " CVO"
            ]
        ],
        "response": "Here are the source airports for flights with the airline United Airlines.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "source",
            "airports",
            "for",
            "flights",
            "with",
            "the",
            "airline",
            "United",
            "Airlines",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.SourceAirport FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid   =   T1.Airline WHERE T2.Airline   =   \"United Airlines\"",
        "query_w_results_blank_res": "SELECT T1.SourceAirport FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid   =   T1.Airline WHERE T2.Airline   =   \"United Airlines\"",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "sourceairport",
            "from",
            "flights",
            "as",
            "t1",
            "join",
            "airlines",
            "as",
            "t2",
            "on",
            "t2",
            ".",
            "uid",
            "=",
            "t1",
            ".",
            "airline",
            "where",
            "t2",
            ".",
            "airline",
            "=",
            "\"united",
            "airlines\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "sourceairport",
            "from",
            "flights",
            "as",
            "t1",
            "join",
            "airlines",
            "as",
            "t2",
            "on",
            "t2",
            ".",
            "uid",
            "=",
            "t1",
            ".",
            "airline",
            "where",
            "t2",
            ".",
            "airline",
            "=",
            "\"united",
            "airlines\""
        ],
        "response_blank_res": "Here are the source airports for flights with the airline United Airlines .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "source",
            "airports",
            "for",
            "flights",
            "with",
            "the",
            "airline",
            "United",
            "Airlines",
            "."
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid   =   T1.Airline WHERE T2.Airline   =   \"United Airlines\"",
        "query_toks": [
            "select",
            "t1",
            ".",
            "flightno",
            "from",
            "flights",
            "as",
            "t1",
            "join",
            "airlines",
            "as",
            "t2",
            "on",
            "t2",
            ".",
            "uid",
            "=",
            "t1",
            ".",
            "airline",
            "where",
            "t2",
            ".",
            "airline",
            "=",
            "\"united",
            "airlines\""
        ],
        "results_raw": [
            [
                "FlightNo"
            ],
            [
                28
            ],
            [
                29
            ],
            [
                44
            ]
        ],
        "response": "Here are the flight numbers of all flights with the airline United Airlines.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "flight",
            "numbers",
            "of",
            "all",
            "flights",
            "with",
            "the",
            "airline",
            "United",
            "Airlines",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid   =   T1.Airline WHERE T2.Airline   =   \"United Airlines\"",
        "query_w_results_blank_res": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid   =   T1.Airline WHERE T2.Airline   =   \"United Airlines\"",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "flightno",
            "from",
            "flights",
            "as",
            "t1",
            "join",
            "airlines",
            "as",
            "t2",
            "on",
            "t2",
            ".",
            "uid",
            "=",
            "t1",
            ".",
            "airline",
            "where",
            "t2",
            ".",
            "airline",
            "=",
            "\"united",
            "airlines\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "flightno",
            "from",
            "flights",
            "as",
            "t1",
            "join",
            "airlines",
            "as",
            "t2",
            "on",
            "t2",
            ".",
            "uid",
            "=",
            "t1",
            ".",
            "airline",
            "where",
            "t2",
            ".",
            "airline",
            "=",
            "\"united",
            "airlines\""
        ],
        "response_blank_res": "Here are the flight numbers of all flights with the airline United Airlines .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "flight",
            "numbers",
            "of",
            "all",
            "flights",
            "with",
            "the",
            "airline",
            "United",
            "Airlines",
            "."
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT DestAirport FROM flights WHERE FlightNo  =  28",
        "query_toks": [
            "select",
            "destairport",
            "from",
            "flights",
            "where",
            "flightno",
            "=",
            "28"
        ],
        "results_raw": [
            [
                "DestAirport"
            ],
            [
                " ASY"
            ],
            [
                " APG"
            ]
        ],
        "response": "Here are the destination airports of the flights with number 28.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "destination",
            "airports",
            "of",
            "the",
            "flights",
            "with",
            "number",
            "28",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT DestAirport FROM flights WHERE FlightNo  =  28",
        "query_w_results_blank_res": "SELECT DestAirport FROM flights WHERE FlightNo  =  28",
        "query_toks_w_results": [
            "select",
            "destairport",
            "from",
            "flights",
            "where",
            "flightno",
            "=",
            "28"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "destairport",
            "from",
            "flights",
            "where",
            "flightno",
            "=",
            "28"
        ],
        "response_blank_res": "Here are the destination airports of the flights with number 28 .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "destination",
            "airports",
            "of",
            "the",
            "flights",
            "with",
            "number",
            "28",
            "."
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT DestAirport FROM flights WHERE FlightNo  =  29",
        "query_toks": [
            "select",
            "destairport",
            "from",
            "flights",
            "where",
            "flightno",
            "=",
            "29"
        ],
        "results_raw": [
            [
                "DestAirport"
            ],
            [
                " APG"
            ],
            [
                " ABQ"
            ]
        ],
        "response": "Here are the destination airports of the flights with number 29.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "destination",
            "airports",
            "of",
            "the",
            "flights",
            "with",
            "number",
            "29",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT DestAirport FROM flights WHERE FlightNo  =  29",
        "query_w_results_blank_res": "SELECT DestAirport FROM flights WHERE FlightNo  =  29",
        "query_toks_w_results": [
            "select",
            "destairport",
            "from",
            "flights",
            "where",
            "flightno",
            "=",
            "29"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "destairport",
            "from",
            "flights",
            "where",
            "flightno",
            "=",
            "29"
        ],
        "response_blank_res": "Here are the destination airports of the flights with number 29 .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "destination",
            "airports",
            "of",
            "the",
            "flights",
            "with",
            "number",
            "29",
            "."
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT first_name,  last_name FROM players",
        "query_toks": [
            "select",
            "first_name",
            ",",
            "last_name",
            "from",
            "players"
        ],
        "results_raw": null,
        "response": "There are the first and last names of all the players.",
        "response_toks": [
            "There",
            "are",
            "the",
            "first",
            "and",
            "last",
            "names",
            "of",
            "all",
            "the",
            "players",
            "."
        ],
        "results_map": null,
        "results_blank_res": null,
        "query_w_results": null,
        "query_w_results_blank_res": null,
        "query_toks_w_results": null,
        "query_toks_w_results_blank_res": null,
        "response_blank_res": null,
        "response_toks_blank_res": null
    },
    {
        "database_id": "wta_1",
        "query": "SELECT first_name ,  last_name FROM players WHERE hand   =   'L'",
        "query_toks": [
            "select",
            "first_name",
            ",",
            "last_name",
            "from",
            "players",
            "where",
            "hand",
            "=",
            "'l'"
        ],
        "results_raw": [
            [
                "first_name",
                "last_name"
            ],
            [
                "Florencia",
                "Labat"
            ],
            [
                "Magui",
                "Serna"
            ],
            [
                "Amanda",
                "Grahame"
            ]
        ],
        "response": "There are the first names of all left-hand players.",
        "response_toks": [
            "There",
            "are",
            "the",
            "first",
            "names",
            "of",
            "all",
            "left-hand",
            "players",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT first_name ,  last_name FROM players WHERE hand   =   'L'",
        "query_w_results_blank_res": "SELECT first_name ,  last_name FROM players WHERE hand   =   'L'",
        "query_toks_w_results": [
            "select",
            "first_name",
            ",",
            "last_name",
            "from",
            "players",
            "where",
            "hand",
            "=",
            "'l'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "first_name",
            ",",
            "last_name",
            "from",
            "players",
            "where",
            "hand",
            "=",
            "'l'"
        ],
        "response_blank_res": "There are the first names of all left-hand players .",
        "response_toks_blank_res": [
            "There",
            "are",
            "the",
            "first",
            "names",
            "of",
            "all",
            "left-hand",
            "players",
            "."
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT count ( * )  FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =   T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid   =   T1.Airline WHERE T2.City   =   \"Aberdeen\" AND T3.Airline   =   \"United Airlines\"",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "as",
            "t1",
            "join",
            "airports",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "destairport",
            "=",
            "t2",
            ".",
            "airportcode",
            "join",
            "airlines",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "uid",
            "=",
            "t1",
            ".",
            "airline",
            "where",
            "t2",
            ".",
            "city",
            "=",
            "\"aberdeen\"",
            "and",
            "t3",
            ".",
            "airline",
            "=",
            "\"united",
            "airlines\""
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                0
            ]
        ],
        "response": "Here are the number of United Airlines flights which go to City 'Aberdeen', which is 0.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "number",
            "of",
            "United",
            "Airlines",
            "flights",
            "which",
            "go",
            "to",
            "City",
            "'Aberdeen",
            "'",
            ",",
            "which",
            "is",
            "0",
            "."
        ],
        "results_map": {
            "result0": "0"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =   T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid   =   T1.Airline WHERE T2.City   =   \"Aberdeen\" AND T3.Airline   =   \"United Airlines\" | 0 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =   T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid   =   T1.Airline WHERE T2.City   =   \"Aberdeen\" AND T3.Airline   =   \"United Airlines\" | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "as",
            "t1",
            "join",
            "airports",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "destairport",
            "=",
            "t2",
            ".",
            "airportcode",
            "join",
            "airlines",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "uid",
            "=",
            "t1",
            ".",
            "airline",
            "where",
            "t2",
            ".",
            "city",
            "=",
            "\"aberdeen\"",
            "and",
            "t3",
            ".",
            "airline",
            "=",
            "\"united",
            "airlines\"",
            "0"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "as",
            "t1",
            "join",
            "airports",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "destairport",
            "=",
            "t2",
            ".",
            "airportcode",
            "join",
            "airlines",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "uid",
            "=",
            "t1",
            ".",
            "airline",
            "where",
            "t2",
            ".",
            "city",
            "=",
            "\"aberdeen\"",
            "and",
            "t3",
            ".",
            "airline",
            "=",
            "\"united",
            "airlines\"",
            "result0"
        ],
        "response_blank_res": "Here are the number of United Airlines flights which go to City 'Aberdeen ' , which is result0 .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "number",
            "of",
            "United",
            "Airlines",
            "flights",
            "which",
            "go",
            "to",
            "City",
            "'Aberdeen",
            "'",
            ",",
            "which",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT T2.city FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =   T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid   =   T1.Airline where T2.city ! =   'Aberdeen' and T3.airline  =  \"United Airlines\"",
        "query_toks": [
            "select",
            "t2",
            ".",
            "city",
            "from",
            "flights",
            "as",
            "t1",
            "join",
            "airports",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "destairport",
            "=",
            "t2",
            ".",
            "airportcode",
            "join",
            "airlines",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "uid",
            "=",
            "t1",
            ".",
            "airline",
            "where",
            "t2",
            ".",
            "city",
            "!",
            "=",
            "'aberdeen'",
            "and",
            "t3",
            ".",
            "airline",
            "=",
            "\"united",
            "airlines\""
        ],
        "results_raw": [
            [
                "City"
            ]
        ],
        "response": "Here are the cities does United Airlines go to except for Aberdeen.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "cities",
            "does",
            "United",
            "Airlines",
            "go",
            "to",
            "except",
            "for",
            "Aberdeen",
            "."
        ],
        "results_map": null,
        "results_blank_res": null,
        "query_w_results": null,
        "query_w_results_blank_res": null,
        "query_toks_w_results": null,
        "query_toks_w_results_blank_res": null,
        "response_blank_res": null,
        "response_toks_blank_res": null
    },
    {
        "database_id": "course_teach",
        "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID   =   T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID   =   T3.Teacher_ID WHERE T2.Course   =   \"Math\"",
        "query_toks": [
            "select",
            "t3",
            ".",
            "name",
            "from",
            "course_arrange",
            "as",
            "t1",
            "join",
            "course",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "course_id",
            "=",
            "t2",
            ".",
            "course_id",
            "join",
            "teacher",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "teacher_id",
            "=",
            "t3",
            ".",
            "teacher_id",
            "where",
            "t2",
            ".",
            "course",
            "=",
            "\"math\""
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Kearsley Brown"
            ],
            [
                "Vicente Carretero"
            ]
        ],
        "response": "The names  of the teacher for the math course   are \nKearsley Brown,\nVicente Carretero",
        "response_toks": [
            "The",
            "names",
            "of",
            "the",
            "teacher",
            "for",
            "the",
            "math",
            "course",
            "are",
            "Kearsley",
            "Brown",
            ",",
            "Vicente",
            "Carretero"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID   =   T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID   =   T3.Teacher_ID WHERE T2.Course   =   \"Math\"",
        "query_w_results_blank_res": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID   =   T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID   =   T3.Teacher_ID WHERE T2.Course   =   \"Math\"",
        "query_toks_w_results": [
            "select",
            "t3",
            ".",
            "name",
            "from",
            "course_arrange",
            "as",
            "t1",
            "join",
            "course",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "course_id",
            "=",
            "t2",
            ".",
            "course_id",
            "join",
            "teacher",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "teacher_id",
            "=",
            "t3",
            ".",
            "teacher_id",
            "where",
            "t2",
            ".",
            "course",
            "=",
            "\"math\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t3",
            ".",
            "name",
            "from",
            "course_arrange",
            "as",
            "t1",
            "join",
            "course",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "course_id",
            "=",
            "t2",
            ".",
            "course_id",
            "join",
            "teacher",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "teacher_id",
            "=",
            "t3",
            ".",
            "teacher_id",
            "where",
            "t2",
            ".",
            "course",
            "=",
            "\"math\""
        ],
        "response_blank_res": "The names of the teacher for the math course are Kearsley Brown , Vicente Carretero",
        "response_toks_blank_res": [
            "The",
            "names",
            "of",
            "the",
            "teacher",
            "for",
            "the",
            "math",
            "course",
            "are",
            "Kearsley",
            "Brown",
            ",",
            "Vicente",
            "Carretero"
        ]
    },
    {
        "database_id": "course_teach",
        "query": "SELECT T1.Grade FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID   =   T2.Course_ID where T2.Course  =  \"Math\"",
        "query_toks": [
            "select",
            "t1",
            ".",
            "grade",
            "from",
            "course_arrange",
            "as",
            "t1",
            "join",
            "course",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "course_id",
            "=",
            "t2",
            ".",
            "course_id",
            "where",
            "t2",
            ".",
            "course",
            "=",
            "\"math\""
        ],
        "results_raw": [
            [
                "Grade"
            ],
            [
                3
            ],
            [
                1
            ]
        ],
        "response": "The   grades  of courses that the teachers for the math teach are 1 and 3",
        "response_toks": [
            "The",
            "grades",
            "of",
            "courses",
            "that",
            "the",
            "teachers",
            "for",
            "the",
            "math",
            "teach",
            "are",
            "1",
            "and",
            "3"
        ],
        "results_map": {
            "result0": "1",
            "result1": "3"
        },
        "results_blank_res": "result0 result1 ",
        "query_w_results": "SELECT T1.Grade FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID   =   T2.Course_ID where T2.Course  =  \"Math\" | 1 3 ",
        "query_w_results_blank_res": "SELECT T1.Grade FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID   =   T2.Course_ID where T2.Course  =  \"Math\" | result0 result1 ",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "grade",
            "from",
            "course_arrange",
            "as",
            "t1",
            "join",
            "course",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "course_id",
            "=",
            "t2",
            ".",
            "course_id",
            "where",
            "t2",
            ".",
            "course",
            "=",
            "\"math\"",
            "1",
            "3"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "grade",
            "from",
            "course_arrange",
            "as",
            "t1",
            "join",
            "course",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "course_id",
            "=",
            "t2",
            ".",
            "course_id",
            "where",
            "t2",
            ".",
            "course",
            "=",
            "\"math\"",
            "result0",
            "result1"
        ],
        "response_blank_res": "The grades of courses that the teachers for the math teach are result0 and result1",
        "response_toks_blank_res": [
            "The",
            "grades",
            "of",
            "courses",
            "that",
            "the",
            "teachers",
            "for",
            "the",
            "math",
            "teach",
            "are",
            "result0",
            "and",
            "result1"
        ]
    },
    {
        "database_id": "course_teach",
        "query": "SELECT T2.Staring_Date  FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID   =   T2.Course_ID where T2.Course  =  \"Math\"",
        "query_toks": [
            "select",
            "t2",
            ".",
            "staring_date",
            "from",
            "course_arrange",
            "as",
            "t1",
            "join",
            "course",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "course_id",
            "=",
            "t2",
            ".",
            "course_id",
            "where",
            "t2",
            ".",
            "course",
            "=",
            "\"math\""
        ],
        "results_raw": [
            [
                "Staring_Date"
            ],
            [
                "6 May"
            ],
            [
                "6 May"
            ]
        ],
        "response": "Here are the Staring Dates  of the math courses.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "Staring",
            "Dates",
            "of",
            "the",
            "math",
            "courses",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T2.Staring_Date  FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID   =   T2.Course_ID where T2.Course  =  \"Math\"",
        "query_w_results_blank_res": "SELECT T2.Staring_Date  FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID   =   T2.Course_ID where T2.Course  =  \"Math\"",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "staring_date",
            "from",
            "course_arrange",
            "as",
            "t1",
            "join",
            "course",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "course_id",
            "=",
            "t2",
            ".",
            "course_id",
            "where",
            "t2",
            ".",
            "course",
            "=",
            "\"math\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "staring_date",
            "from",
            "course_arrange",
            "as",
            "t1",
            "join",
            "course",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "course_id",
            "=",
            "t2",
            ".",
            "course_id",
            "where",
            "t2",
            ".",
            "course",
            "=",
            "\"math\""
        ],
        "response_blank_res": "Here are the Staring Dates of the math courses .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "Staring",
            "Dates",
            "of",
            "the",
            "math",
            "courses",
            "."
        ]
    },
    {
        "database_id": "poker_player",
        "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
        "query_toks": [
            "select",
            "t1",
            ".",
            "birth_date",
            "from",
            "people",
            "as",
            "t1",
            "join",
            "poker_player",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "people_id",
            "=",
            "t2",
            ".",
            "people_id",
            "order",
            "by",
            "t2",
            ".",
            "earnings",
            "asc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Birth_Date"
            ],
            [
                "August 8, 1986"
            ]
        ],
        "response": "The birth date of the poker player with the lowest earnings is August 8, 1986.",
        "response_toks": [
            "The",
            "birth",
            "date",
            "of",
            "the",
            "poker",
            "player",
            "with",
            "the",
            "lowest",
            "earnings",
            "is",
            "August",
            "8",
            ",",
            "1986",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
        "query_w_results_blank_res": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "birth_date",
            "from",
            "people",
            "as",
            "t1",
            "join",
            "poker_player",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "people_id",
            "=",
            "t2",
            ".",
            "people_id",
            "order",
            "by",
            "t2",
            ".",
            "earnings",
            "asc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "birth_date",
            "from",
            "people",
            "as",
            "t1",
            "join",
            "poker_player",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "people_id",
            "=",
            "t2",
            ".",
            "people_id",
            "order",
            "by",
            "t2",
            ".",
            "earnings",
            "asc",
            "limit",
            "1"
        ],
        "response_blank_res": "The birth date of the poker player with the lowest earnings is August 8 , 1986 .",
        "response_toks_blank_res": [
            "The",
            "birth",
            "date",
            "of",
            "the",
            "poker",
            "player",
            "with",
            "the",
            "lowest",
            "earnings",
            "is",
            "August",
            "8",
            ",",
            "1986",
            "."
        ]
    },
    {
        "database_id": "poker_player",
        "query": "SELECT name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
        "query_toks": [
            "select",
            "name",
            "from",
            "people",
            "as",
            "t1",
            "join",
            "poker_player",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "people_id",
            "=",
            "t2",
            ".",
            "people_id",
            "order",
            "by",
            "t2",
            ".",
            "earnings",
            "asc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Yevgeni Sivozhelez"
            ]
        ],
        "response": "The name of the poker player with the lowest earnings is Yevgeni Sivozhelez.",
        "response_toks": [
            "The",
            "name",
            "of",
            "the",
            "poker",
            "player",
            "with",
            "the",
            "lowest",
            "earnings",
            "is",
            "Yevgeni",
            "Sivozhelez",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
        "query_w_results_blank_res": "SELECT name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "people",
            "as",
            "t1",
            "join",
            "poker_player",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "people_id",
            "=",
            "t2",
            ".",
            "people_id",
            "order",
            "by",
            "t2",
            ".",
            "earnings",
            "asc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "people",
            "as",
            "t1",
            "join",
            "poker_player",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "people_id",
            "=",
            "t2",
            ".",
            "people_id",
            "order",
            "by",
            "t2",
            ".",
            "earnings",
            "asc",
            "limit",
            "1"
        ],
        "response_blank_res": "The name of the poker player with the lowest earnings is Yevgeni Sivozhelez .",
        "response_toks_blank_res": [
            "The",
            "name",
            "of",
            "the",
            "poker",
            "player",
            "with",
            "the",
            "lowest",
            "earnings",
            "is",
            "Yevgeni",
            "Sivozhelez",
            "."
        ]
    },
    {
        "database_id": "poker_player",
        "query": "SELECT Nationality FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
        "query_toks": [
            "select",
            "nationality",
            "from",
            "people",
            "as",
            "t1",
            "join",
            "poker_player",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "people_id",
            "=",
            "t2",
            ".",
            "people_id",
            "order",
            "by",
            "t2",
            ".",
            "earnings",
            "asc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Nationality"
            ],
            [
                "Russia"
            ]
        ],
        "response": "The nationality of the poker player with the lowest earnings is Russia.",
        "response_toks": [
            "The",
            "nationality",
            "of",
            "the",
            "poker",
            "player",
            "with",
            "the",
            "lowest",
            "earnings",
            "is",
            "Russia",
            "."
        ],
        "results_map": {
            "result0": "Russia"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT Nationality FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1 | Russia ",
        "query_w_results_blank_res": "SELECT Nationality FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "nationality",
            "from",
            "people",
            "as",
            "t1",
            "join",
            "poker_player",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "people_id",
            "=",
            "t2",
            ".",
            "people_id",
            "order",
            "by",
            "t2",
            ".",
            "earnings",
            "asc",
            "limit",
            "1",
            "Russia"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "nationality",
            "from",
            "people",
            "as",
            "t1",
            "join",
            "poker_player",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "people_id",
            "=",
            "t2",
            ".",
            "people_id",
            "order",
            "by",
            "t2",
            ".",
            "earnings",
            "asc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "The nationality of the poker player with the lowest earnings is result0 .",
        "response_toks_blank_res": [
            "The",
            "nationality",
            "of",
            "the",
            "poker",
            "player",
            "with",
            "the",
            "lowest",
            "earnings",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "poker_player",
        "query": "SELECT count ( * )  FROM poker_player",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "poker_player"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                5
            ]
        ],
        "response": "There are 5 poker players.",
        "response_toks": [
            "There",
            "are",
            "5",
            "poker",
            "players",
            "."
        ],
        "results_map": {
            "result0": "5"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM poker_player | 5 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM poker_player | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "poker_player",
            "5"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "poker_player",
            "result0"
        ],
        "response_blank_res": "There are result0 poker players .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "poker",
            "players",
            "."
        ]
    },
    {
        "database_id": "poker_player",
        "query": "SELECT count ( * )  FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID WHERE T1.Height  >  200",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "people",
            "as",
            "t1",
            "join",
            "poker_player",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "people_id",
            "=",
            "t2",
            ".",
            "people_id",
            "where",
            "t1",
            ".",
            "height",
            ">",
            "200"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                2
            ]
        ],
        "response": "Two poker players are taller than 200.",
        "response_toks": [
            "Two",
            "poker",
            "players",
            "are",
            "taller",
            "than",
            "200",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT count ( * )  FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID WHERE T1.Height  >  200",
        "query_w_results_blank_res": "SELECT count ( * )  FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID WHERE T1.Height  >  200",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "people",
            "as",
            "t1",
            "join",
            "poker_player",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "people_id",
            "=",
            "t2",
            ".",
            "people_id",
            "where",
            "t1",
            ".",
            "height",
            ">",
            "200"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "people",
            "as",
            "t1",
            "join",
            "poker_player",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "people_id",
            "=",
            "t2",
            ".",
            "people_id",
            "where",
            "t1",
            ".",
            "height",
            ">",
            "200"
        ],
        "response_blank_res": "Two poker players are taller than 200 .",
        "response_toks_blank_res": [
            "Two",
            "poker",
            "players",
            "are",
            "taller",
            "than",
            "200",
            "."
        ]
    },
    {
        "database_id": "poker_player",
        "query": "SELECT avg ( T2.Earnings )  FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID WHERE T1.Height  >  200",
        "query_toks": [
            "select",
            "avg",
            "(",
            "t2",
            ".",
            "earnings",
            ")",
            "from",
            "people",
            "as",
            "t1",
            "join",
            "poker_player",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "people_id",
            "=",
            "t2",
            ".",
            "people_id",
            "where",
            "t1",
            ".",
            "height",
            ">",
            "200"
        ],
        "results_raw": [
            [
                "avg(T2.Earnings)"
            ],
            [
                309445.0
            ]
        ],
        "response": "These are the average earnings of the players whose height is higher than 200.",
        "response_toks": [
            "These",
            "are",
            "the",
            "average",
            "earnings",
            "of",
            "the",
            "players",
            "whose",
            "height",
            "is",
            "higher",
            "than",
            "200",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT avg ( T2.Earnings )  FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID WHERE T1.Height  >  200",
        "query_w_results_blank_res": "SELECT avg ( T2.Earnings )  FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID WHERE T1.Height  >  200",
        "query_toks_w_results": [
            "select",
            "avg",
            "(",
            "t2",
            ".",
            "earnings",
            ")",
            "from",
            "people",
            "as",
            "t1",
            "join",
            "poker_player",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "people_id",
            "=",
            "t2",
            ".",
            "people_id",
            "where",
            "t1",
            ".",
            "height",
            ">",
            "200"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "avg",
            "(",
            "t2",
            ".",
            "earnings",
            ")",
            "from",
            "people",
            "as",
            "t1",
            "join",
            "poker_player",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "people_id",
            "=",
            "t2",
            ".",
            "people_id",
            "where",
            "t1",
            ".",
            "height",
            ">",
            "200"
        ],
        "response_blank_res": "These are the average earnings of the players whose height is higher than 200 .",
        "response_toks_blank_res": [
            "These",
            "are",
            "the",
            "average",
            "earnings",
            "of",
            "the",
            "players",
            "whose",
            "height",
            "is",
            "higher",
            "than",
            "200",
            "."
        ]
    },
    {
        "database_id": "pets_1",
        "query": "SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
        "query_toks": [
            "select",
            "t1",
            ".",
            "stuid",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "where",
            "t3",
            ".",
            "pettype",
            "=",
            "'dog'"
        ],
        "results_raw": [
            [
                "StuID"
            ],
            [
                1002
            ],
            [
                1002
            ]
        ],
        "response": "Here is the list of student ids for students who have dogs as their pet.",
        "response_toks": [
            "Here",
            "is",
            "the",
            "list",
            "of",
            "student",
            "ids",
            "for",
            "students",
            "who",
            "have",
            "dogs",
            "as",
            "their",
            "pet",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
        "query_w_results_blank_res": "SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "stuid",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "where",
            "t3",
            ".",
            "pettype",
            "=",
            "'dog'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "stuid",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "where",
            "t3",
            ".",
            "pettype",
            "=",
            "'dog'"
        ],
        "response_blank_res": "Here is the list of student ids for students who have dogs as their pet .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "list",
            "of",
            "student",
            "ids",
            "for",
            "students",
            "who",
            "have",
            "dogs",
            "as",
            "their",
            "pet",
            "."
        ]
    },
    {
        "database_id": "pets_1",
        "query": "SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' intersect SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
        "query_toks": [
            "select",
            "t1",
            ".",
            "stuid",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "where",
            "t3",
            ".",
            "pettype",
            "=",
            "'dog'",
            "intersect",
            "select",
            "t1",
            ".",
            "stuid",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "where",
            "t3",
            ".",
            "pettype",
            "=",
            "'cat'"
        ],
        "results_raw": [
            [
                "StuID"
            ]
        ],
        "response": "There is no student have a cat and dog as a pet.",
        "response_toks": [
            "There",
            "is",
            "no",
            "student",
            "have",
            "a",
            "cat",
            "and",
            "dog",
            "as",
            "a",
            "pet",
            "."
        ],
        "results_map": null,
        "results_blank_res": null,
        "query_w_results": null,
        "query_w_results_blank_res": null,
        "query_toks_w_results": null,
        "query_toks_w_results_blank_res": null,
        "response_blank_res": null,
        "response_toks_blank_res": null
    },
    {
        "database_id": "pets_1",
        "query": "SELECT T1.Fname, T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
        "query_toks": [
            "select",
            "t1",
            ".",
            "fname",
            ",",
            "t1",
            ".",
            "age",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "where",
            "t3",
            ".",
            "pettype",
            "=",
            "'dog'"
        ],
        "results_raw": [
            [
                "Fname",
                "Age"
            ],
            [
                "Tracy",
                19
            ],
            [
                "Tracy",
                19
            ]
        ],
        "response": "Sure! Here is the list of the first name and ages of the two students who have dogs as pets.",
        "response_toks": [
            "Sure",
            "!",
            "Here",
            "is",
            "the",
            "list",
            "of",
            "the",
            "first",
            "name",
            "and",
            "ages",
            "of",
            "the",
            "two",
            "students",
            "who",
            "have",
            "dogs",
            "as",
            "pets",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.Fname, T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
        "query_w_results_blank_res": "SELECT T1.Fname, T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "fname",
            ",",
            "t1",
            ".",
            "age",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "where",
            "t3",
            ".",
            "pettype",
            "=",
            "'dog'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "fname",
            ",",
            "t1",
            ".",
            "age",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "where",
            "t3",
            ".",
            "pettype",
            "=",
            "'dog'"
        ],
        "response_blank_res": "Sure ! Here is the list of the first name and ages of the two students who have dogs as pets .",
        "response_toks_blank_res": [
            "Sure",
            "!",
            "Here",
            "is",
            "the",
            "list",
            "of",
            "the",
            "first",
            "name",
            "and",
            "ages",
            "of",
            "the",
            "two",
            "students",
            "who",
            "have",
            "dogs",
            "as",
            "pets",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT count ( * )  from country",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "country"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                239
            ]
        ],
        "response": "There are 239 countries.",
        "response_toks": [
            "There",
            "are",
            "239",
            "countries",
            "."
        ],
        "results_map": {
            "result0": "239"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  from country | 239 ",
        "query_w_results_blank_res": "SELECT count ( * )  from country | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "country",
            "239"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "country",
            "result0"
        ],
        "response_blank_res": "There are result0 countries .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "countries",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT countrycode  from city where name  =  \"Herat\"",
        "query_toks": [
            "select",
            "countrycode",
            "from",
            "city",
            "where",
            "name",
            "=",
            "\"herat\""
        ],
        "results_raw": [
            [
                "CountryCode"
            ],
            [
                "AFG"
            ]
        ],
        "response": "AFG is the country code for city Herat.",
        "response_toks": [
            "AFG",
            "is",
            "the",
            "country",
            "code",
            "for",
            "city",
            "Herat",
            "."
        ],
        "results_map": {
            "result0": "AFG"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT countrycode  from city where name  =  \"Herat\" | AFG ",
        "query_w_results_blank_res": "SELECT countrycode  from city where name  =  \"Herat\" | result0 ",
        "query_toks_w_results": [
            "select",
            "countrycode",
            "from",
            "city",
            "where",
            "name",
            "=",
            "\"herat\"",
            "AFG"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "countrycode",
            "from",
            "city",
            "where",
            "name",
            "=",
            "\"herat\"",
            "result0"
        ],
        "response_blank_res": "result0 is the country code for city Herat .",
        "response_toks_blank_res": [
            "result0",
            "is",
            "the",
            "country",
            "code",
            "for",
            "city",
            "Herat",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT population  from city where name  =  \"Qandahar\"",
        "query_toks": [
            "select",
            "population",
            "from",
            "city",
            "where",
            "name",
            "=",
            "\"qandahar\""
        ],
        "results_raw": [
            [
                "Population"
            ],
            [
                237500
            ]
        ],
        "response": "The population of city Qandahar is 237500.",
        "response_toks": [
            "The",
            "population",
            "of",
            "city",
            "Qandahar",
            "is",
            "237500",
            "."
        ],
        "results_map": {
            "result0": "237500"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT population  from city where name  =  \"Qandahar\" | 237500 ",
        "query_w_results_blank_res": "SELECT population  from city where name  =  \"Qandahar\" | result0 ",
        "query_toks_w_results": [
            "select",
            "population",
            "from",
            "city",
            "where",
            "name",
            "=",
            "\"qandahar\"",
            "237500"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "population",
            "from",
            "city",
            "where",
            "name",
            "=",
            "\"qandahar\"",
            "result0"
        ],
        "response_blank_res": "The population of city Qandahar is result0 .",
        "response_toks_blank_res": [
            "The",
            "population",
            "of",
            "city",
            "Qandahar",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "tvshow",
        "query": "select id from tv_channel where country in  ( SELECT country FROM tv_channel GROUP BY country HAVING count ( * )   >  2 ) ",
        "query_toks": [
            "select",
            "id",
            "from",
            "tv_channel",
            "where",
            "country",
            "in",
            "(",
            "select",
            "country",
            "from",
            "tv_channel",
            "group",
            "by",
            "country",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "2",
            ")"
        ],
        "results_raw": [
            [
                "id"
            ],
            [
                "700"
            ],
            [
                "701"
            ],
            [
                "703"
            ]
        ],
        "response": "Here are the ids of tv channels whose country has more than two tv channels.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "ids",
            "of",
            "tv",
            "channels",
            "whose",
            "country",
            "has",
            "more",
            "than",
            "two",
            "tv",
            "channels",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "select id from tv_channel where country in  ( SELECT country FROM tv_channel GROUP BY country HAVING count ( * )   >  2 ) ",
        "query_w_results_blank_res": "select id from tv_channel where country in  ( SELECT country FROM tv_channel GROUP BY country HAVING count ( * )   >  2 ) ",
        "query_toks_w_results": [
            "select",
            "id",
            "from",
            "tv_channel",
            "where",
            "country",
            "in",
            "(",
            "select",
            "country",
            "from",
            "tv_channel",
            "group",
            "by",
            "country",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "2",
            ")"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "id",
            "from",
            "tv_channel",
            "where",
            "country",
            "in",
            "(",
            "select",
            "country",
            "from",
            "tv_channel",
            "group",
            "by",
            "country",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "2",
            ")"
        ],
        "response_blank_res": "Here are the ids of tv channels whose country has more than two tv channels .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "ids",
            "of",
            "tv",
            "channels",
            "whose",
            "country",
            "has",
            "more",
            "than",
            "two",
            "tv",
            "channels",
            "."
        ]
    },
    {
        "database_id": "tvshow",
        "query": "select package_option from tv_channel where country in  ( SELECT country FROM tv_channel GROUP BY country HAVING count ( * )   >  2 ) ",
        "query_toks": [
            "select",
            "package_option",
            "from",
            "tv_channel",
            "where",
            "country",
            "in",
            "(",
            "select",
            "country",
            "from",
            "tv_channel",
            "group",
            "by",
            "country",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "2",
            ")"
        ],
        "results_raw": [
            [
                "Package_Option"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ]
        ],
        "response": "Here are the package options of tv channels whose country has more than two tv channels.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "package",
            "options",
            "of",
            "tv",
            "channels",
            "whose",
            "country",
            "has",
            "more",
            "than",
            "two",
            "tv",
            "channels",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "select package_option from tv_channel where country in  ( SELECT country FROM tv_channel GROUP BY country HAVING count ( * )   >  2 ) ",
        "query_w_results_blank_res": "select package_option from tv_channel where country in  ( SELECT country FROM tv_channel GROUP BY country HAVING count ( * )   >  2 ) ",
        "query_toks_w_results": [
            "select",
            "package_option",
            "from",
            "tv_channel",
            "where",
            "country",
            "in",
            "(",
            "select",
            "country",
            "from",
            "tv_channel",
            "group",
            "by",
            "country",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "2",
            ")"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "package_option",
            "from",
            "tv_channel",
            "where",
            "country",
            "in",
            "(",
            "select",
            "country",
            "from",
            "tv_channel",
            "group",
            "by",
            "country",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "2",
            ")"
        ],
        "response_blank_res": "Here are the package options of tv channels whose country has more than two tv channels .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "package",
            "options",
            "of",
            "tv",
            "channels",
            "whose",
            "country",
            "has",
            "more",
            "than",
            "two",
            "tv",
            "channels",
            "."
        ]
    },
    {
        "database_id": "tvshow",
        "query": "SELECT series_name FROM tv_channel order by series_name asc",
        "query_toks": [
            "select",
            "series_name",
            "from",
            "tv_channel",
            "order",
            "by",
            "series_name",
            "asc"
        ],
        "results_raw": [
            [
                "series_name"
            ],
            [
                "Classica"
            ],
            [
                "Hip Hop TV"
            ],
            [
                "MTV Classic"
            ]
        ],
        "response": "Series names of tv channels in alphabetical order are shown in the table.",
        "response_toks": [
            "Series",
            "names",
            "of",
            "tv",
            "channels",
            "in",
            "alphabetical",
            "order",
            "are",
            "shown",
            "in",
            "the",
            "table",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT series_name FROM tv_channel order by series_name asc",
        "query_w_results_blank_res": "SELECT series_name FROM tv_channel order by series_name asc",
        "query_toks_w_results": [
            "select",
            "series_name",
            "from",
            "tv_channel",
            "order",
            "by",
            "series_name",
            "asc"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "series_name",
            "from",
            "tv_channel",
            "order",
            "by",
            "series_name",
            "asc"
        ],
        "response_blank_res": "Series names of tv channels in alphabetical order are shown in the table .",
        "response_toks_blank_res": [
            "Series",
            "names",
            "of",
            "tv",
            "channels",
            "in",
            "alphabetical",
            "order",
            "are",
            "shown",
            "in",
            "the",
            "table",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT count ( * )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  ) ",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "dogs",
            "where",
            "dog_id",
            "in",
            "(",
            "select",
            "dog_id",
            "from",
            "treatments",
            ")"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                9
            ]
        ],
        "response": "There are 9 dogs who have gone through treatments.",
        "response_toks": [
            "There",
            "are",
            "9",
            "dogs",
            "who",
            "have",
            "gone",
            "through",
            "treatments",
            "."
        ],
        "results_map": {
            "result0": "9"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  )  | 9 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  )  | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "dogs",
            "where",
            "dog_id",
            "in",
            "(",
            "select",
            "dog_id",
            "from",
            "treatments",
            ")",
            "9"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "dogs",
            "where",
            "dog_id",
            "in",
            "(",
            "select",
            "dog_id",
            "from",
            "treatments",
            ")",
            "result0"
        ],
        "response_blank_res": "There are result0 dogs who have gone through treatments .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "dogs",
            "who",
            "have",
            "gone",
            "through",
            "treatments",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT min ( age )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  ) ",
        "query_toks": [
            "select",
            "min",
            "(",
            "age",
            ")",
            "from",
            "dogs",
            "where",
            "dog_id",
            "in",
            "(",
            "select",
            "dog_id",
            "from",
            "treatments",
            ")"
        ],
        "results_raw": [
            [
                "min(age)"
            ],
            [
                "1"
            ]
        ],
        "response": "The youngest dog who has gone through any treatment has an age of 1.",
        "response_toks": [
            "The",
            "youngest",
            "dog",
            "who",
            "has",
            "gone",
            "through",
            "any",
            "treatment",
            "has",
            "an",
            "age",
            "of",
            "1",
            "."
        ],
        "results_map": {
            "result0": "1"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT min ( age )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  )  | 1 ",
        "query_w_results_blank_res": "SELECT min ( age )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  )  | result0 ",
        "query_toks_w_results": [
            "select",
            "min",
            "(",
            "age",
            ")",
            "from",
            "dogs",
            "where",
            "dog_id",
            "in",
            "(",
            "select",
            "dog_id",
            "from",
            "treatments",
            ")",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "min",
            "(",
            "age",
            ")",
            "from",
            "dogs",
            "where",
            "dog_id",
            "in",
            "(",
            "select",
            "dog_id",
            "from",
            "treatments",
            ")",
            "result0"
        ],
        "response_blank_res": "The youngest dog who has gone through any treatment has an age of result0 .",
        "response_toks_blank_res": [
            "The",
            "youngest",
            "dog",
            "who",
            "has",
            "gone",
            "through",
            "any",
            "treatment",
            "has",
            "an",
            "age",
            "of",
            "result0",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT max ( age )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  ) ",
        "query_toks": [
            "select",
            "max",
            "(",
            "age",
            ")",
            "from",
            "dogs",
            "where",
            "dog_id",
            "in",
            "(",
            "select",
            "dog_id",
            "from",
            "treatments",
            ")"
        ],
        "results_raw": [
            [
                "max(age)"
            ],
            [
                "9"
            ]
        ],
        "response": "The oldest dog who has gone through any treatment has an age of 9.",
        "response_toks": [
            "The",
            "oldest",
            "dog",
            "who",
            "has",
            "gone",
            "through",
            "any",
            "treatment",
            "has",
            "an",
            "age",
            "of",
            "9",
            "."
        ],
        "results_map": {
            "result0": "9"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT max ( age )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  )  | 9 ",
        "query_w_results_blank_res": "SELECT max ( age )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  )  | result0 ",
        "query_toks_w_results": [
            "select",
            "max",
            "(",
            "age",
            ")",
            "from",
            "dogs",
            "where",
            "dog_id",
            "in",
            "(",
            "select",
            "dog_id",
            "from",
            "treatments",
            ")",
            "9"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "max",
            "(",
            "age",
            ")",
            "from",
            "dogs",
            "where",
            "dog_id",
            "in",
            "(",
            "select",
            "dog_id",
            "from",
            "treatments",
            ")",
            "result0"
        ],
        "response_blank_res": "The oldest dog who has gone through any treatment has an age of result0 .",
        "response_toks_blank_res": [
            "The",
            "oldest",
            "dog",
            "who",
            "has",
            "gone",
            "through",
            "any",
            "treatment",
            "has",
            "an",
            "age",
            "of",
            "result0",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT avg ( age )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  ) ",
        "query_toks": [
            "select",
            "avg",
            "(",
            "age",
            ")",
            "from",
            "dogs",
            "where",
            "dog_id",
            "in",
            "(",
            "select",
            "dog_id",
            "from",
            "treatments",
            ")"
        ],
        "results_raw": [
            [
                "avg(age)"
            ],
            [
                5.111111111111111
            ]
        ],
        "response": "The dogs who have gone through any treatment have an average age of 5.111111111111111.",
        "response_toks": [
            "The",
            "dogs",
            "who",
            "have",
            "gone",
            "through",
            "any",
            "treatment",
            "have",
            "an",
            "average",
            "age",
            "of",
            "5.111111111111111",
            "."
        ],
        "results_map": {
            "result0": "5.111111111111111"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT avg ( age )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  )  | 5.111111111111111 ",
        "query_w_results_blank_res": "SELECT avg ( age )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  )  | result0 ",
        "query_toks_w_results": [
            "select",
            "avg",
            "(",
            "age",
            ")",
            "from",
            "dogs",
            "where",
            "dog_id",
            "in",
            "(",
            "select",
            "dog_id",
            "from",
            "treatments",
            ")",
            "5.111111111111111"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "avg",
            "(",
            "age",
            ")",
            "from",
            "dogs",
            "where",
            "dog_id",
            "in",
            "(",
            "select",
            "dog_id",
            "from",
            "treatments",
            ")",
            "result0"
        ],
        "response_blank_res": "The dogs who have gone through any treatment have an average age of result0 .",
        "response_toks_blank_res": [
            "The",
            "dogs",
            "who",
            "have",
            "gone",
            "through",
            "any",
            "treatment",
            "have",
            "an",
            "average",
            "age",
            "of",
            "result0",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT Name FROM country WHERE Name NOT IN  ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   \"English\" ) ",
        "query_toks": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "name",
            "not",
            "in",
            "(",
            "select",
            "t1",
            ".",
            "name",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "language",
            "=",
            "\"english\"",
            ")"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Afghanistan"
            ],
            [
                "Angola"
            ],
            [
                "Albania"
            ]
        ],
        "response": "this shows the countries names which don\u2018t use English",
        "response_toks": [
            "this",
            "shows",
            "the",
            "countries",
            "names",
            "which",
            "don",
            "\u2018",
            "t",
            "use",
            "English"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Name FROM country WHERE Name NOT IN  ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   \"English\" ) ",
        "query_w_results_blank_res": "SELECT Name FROM country WHERE Name NOT IN  ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   \"English\" ) ",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "name",
            "not",
            "in",
            "(",
            "select",
            "t1",
            ".",
            "name",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "language",
            "=",
            "\"english\"",
            ")"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "name",
            "not",
            "in",
            "(",
            "select",
            "t1",
            ".",
            "name",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "language",
            "=",
            "\"english\"",
            ")"
        ],
        "response_blank_res": "this shows the countries names which don \u2018 t use English",
        "response_toks_blank_res": [
            "this",
            "shows",
            "the",
            "countries",
            "names",
            "which",
            "don",
            "\u2018",
            "t",
            "use",
            "English"
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT Name,sum ( Population )  FROM country WHERE Name NOT IN  ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   \"English\" )  group by Name",
        "query_toks": [
            "select",
            "name",
            ",",
            "sum",
            "(",
            "population",
            ")",
            "from",
            "country",
            "where",
            "name",
            "not",
            "in",
            "(",
            "select",
            "t1",
            ".",
            "name",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "language",
            "=",
            "\"english\"",
            ")",
            "group",
            "by",
            "name"
        ],
        "results_raw": [
            [
                "Name",
                "sum(Population)"
            ],
            [
                "Afghanistan",
                22720000
            ],
            [
                "Albania",
                3401200
            ],
            [
                "Algeria",
                31471000
            ]
        ],
        "response": "this shows the population of country that do not user English",
        "response_toks": [
            "this",
            "shows",
            "the",
            "population",
            "of",
            "country",
            "that",
            "do",
            "not",
            "user",
            "English"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Name,sum ( Population )  FROM country WHERE Name NOT IN  ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   \"English\" )  group by Name",
        "query_w_results_blank_res": "SELECT Name,sum ( Population )  FROM country WHERE Name NOT IN  ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   \"English\" )  group by Name",
        "query_toks_w_results": [
            "select",
            "name",
            ",",
            "sum",
            "(",
            "population",
            ")",
            "from",
            "country",
            "where",
            "name",
            "not",
            "in",
            "(",
            "select",
            "t1",
            ".",
            "name",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "language",
            "=",
            "\"english\"",
            ")",
            "group",
            "by",
            "name"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            ",",
            "sum",
            "(",
            "population",
            ")",
            "from",
            "country",
            "where",
            "name",
            "not",
            "in",
            "(",
            "select",
            "t1",
            ".",
            "name",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "language",
            "=",
            "\"english\"",
            ")",
            "group",
            "by",
            "name"
        ],
        "response_blank_res": "this shows the population of country that do not user English",
        "response_toks_blank_res": [
            "this",
            "shows",
            "the",
            "population",
            "of",
            "country",
            "that",
            "do",
            "not",
            "user",
            "English"
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT T2.Weight FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId   =   T2.Id WHERE T1.MakeID  =  1",
        "query_toks": [
            "select",
            "t2",
            ".",
            "weight",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "cars_data",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t2",
            ".",
            "id",
            "where",
            "t1",
            ".",
            "makeid",
            "=",
            "1"
        ],
        "results_raw": [
            [
                "Weight"
            ],
            [
                3504
            ]
        ],
        "response": "The weight of the car with make id 1 is 3504.",
        "response_toks": [
            "The",
            "weight",
            "of",
            "the",
            "car",
            "with",
            "make",
            "id",
            "1",
            "is",
            "3504",
            "."
        ],
        "results_map": {
            "result0": "3504"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT T2.Weight FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId   =   T2.Id WHERE T1.MakeID  =  1 | 3504 ",
        "query_w_results_blank_res": "SELECT T2.Weight FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId   =   T2.Id WHERE T1.MakeID  =  1 | result0 ",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "weight",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "cars_data",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t2",
            ".",
            "id",
            "where",
            "t1",
            ".",
            "makeid",
            "=",
            "1",
            "3504"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "weight",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "cars_data",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t2",
            ".",
            "id",
            "where",
            "t1",
            ".",
            "makeid",
            "=",
            "1",
            "result0"
        ],
        "response_blank_res": "The weight of the car with make id 1 is result0 .",
        "response_toks_blank_res": [
            "The",
            "weight",
            "of",
            "the",
            "car",
            "with",
            "make",
            "id",
            "1",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT T2.Year FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId   =   T2.Id WHERE T1.Model  =  \"buick\"",
        "query_toks": [
            "select",
            "t2",
            ".",
            "year",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "cars_data",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t2",
            ".",
            "id",
            "where",
            "t1",
            ".",
            "model",
            "=",
            "\"buick\""
        ],
        "results_raw": [
            [
                "Year"
            ],
            [
                1970
            ],
            [
                1970
            ],
            [
                1972
            ]
        ],
        "response": "The car model buick was launched in the following years.",
        "response_toks": [
            "The",
            "car",
            "model",
            "buick",
            "was",
            "launched",
            "in",
            "the",
            "following",
            "years",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T2.Year FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId   =   T2.Id WHERE T1.Model  =  \"buick\"",
        "query_w_results_blank_res": "SELECT T2.Year FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId   =   T2.Id WHERE T1.Model  =  \"buick\"",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "year",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "cars_data",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t2",
            ".",
            "id",
            "where",
            "t1",
            ".",
            "model",
            "=",
            "\"buick\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "year",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "cars_data",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t2",
            ".",
            "id",
            "where",
            "t1",
            ".",
            "model",
            "=",
            "\"buick\""
        ],
        "response_blank_res": "The car model buick was launched in the following years .",
        "response_toks_blank_res": [
            "The",
            "car",
            "model",
            "buick",
            "was",
            "launched",
            "in",
            "the",
            "following",
            "years",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT T2.Horsepower FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId   =   T2.Id WHERE T1.Model  =  \"plymouth\"",
        "query_toks": [
            "select",
            "t2",
            ".",
            "horsepower",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "cars_data",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t2",
            ".",
            "id",
            "where",
            "t1",
            ".",
            "model",
            "=",
            "\"plymouth\""
        ],
        "results_raw": [
            [
                "Horsepower"
            ],
            [
                "150"
            ],
            [
                "215"
            ],
            [
                "175"
            ]
        ],
        "response": "The horsepowers of the car model plymouth are the following.",
        "response_toks": [
            "The",
            "horsepowers",
            "of",
            "the",
            "car",
            "model",
            "plymouth",
            "are",
            "the",
            "following",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T2.Horsepower FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId   =   T2.Id WHERE T1.Model  =  \"plymouth\"",
        "query_w_results_blank_res": "SELECT T2.Horsepower FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId   =   T2.Id WHERE T1.Model  =  \"plymouth\"",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "horsepower",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "cars_data",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t2",
            ".",
            "id",
            "where",
            "t1",
            ".",
            "model",
            "=",
            "\"plymouth\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "horsepower",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "cars_data",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t2",
            ".",
            "id",
            "where",
            "t1",
            ".",
            "model",
            "=",
            "\"plymouth\""
        ],
        "response_blank_res": "The horsepowers of the car model plymouth are the following .",
        "response_toks_blank_res": [
            "The",
            "horsepowers",
            "of",
            "the",
            "car",
            "model",
            "plymouth",
            "are",
            "the",
            "following",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1",
        "query_toks": [
            "select",
            "t1",
            ".",
            "model",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "cars_data",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t2",
            ".",
            "id",
            "where",
            "t2",
            ".",
            "cylinders",
            "=",
            "4",
            "order",
            "by",
            "t2",
            ".",
            "horsepower",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Model"
            ],
            [
                "ford"
            ]
        ],
        "response": "The model with the largest horsepower among cars with 4 cylinders is ford.",
        "response_toks": [
            "The",
            "model",
            "with",
            "the",
            "largest",
            "horsepower",
            "among",
            "cars",
            "with",
            "4",
            "cylinders",
            "is",
            "ford",
            "."
        ],
        "results_map": {
            "result0": "ford"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1 | ford ",
        "query_w_results_blank_res": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "model",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "cars_data",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t2",
            ".",
            "id",
            "where",
            "t2",
            ".",
            "cylinders",
            "=",
            "4",
            "order",
            "by",
            "t2",
            ".",
            "horsepower",
            "desc",
            "limit",
            "1",
            "ford"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "model",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "cars_data",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t2",
            ".",
            "id",
            "where",
            "t2",
            ".",
            "cylinders",
            "=",
            "4",
            "order",
            "by",
            "t2",
            ".",
            "horsepower",
            "desc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "The model with the largest horsepower among cars with 4 cylinders is result0 .",
        "response_toks_blank_res": [
            "The",
            "model",
            "with",
            "the",
            "largest",
            "horsepower",
            "among",
            "cars",
            "with",
            "4",
            "cylinders",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "select count ( * )  from cars_data where year = '1974'",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "cars_data",
            "where",
            "year",
            "=",
            "'1974'"
        ],
        "results_raw": [
            [
                "number"
            ],
            [
                27
            ]
        ],
        "response": "There are 27 different cars on this list were produced in 1974.",
        "response_toks": [
            "There",
            "are",
            "27",
            "different",
            "cars",
            "on",
            "this",
            "list",
            "were",
            "produced",
            "in",
            "1974",
            "."
        ],
        "results_map": {
            "result0": "27"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "select count ( * )  from cars_data where year = '1974' | 27 ",
        "query_w_results_blank_res": "select count ( * )  from cars_data where year = '1974' | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "cars_data",
            "where",
            "year",
            "=",
            "'1974'",
            "27"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "cars_data",
            "where",
            "year",
            "=",
            "'1974'",
            "result0"
        ],
        "response_blank_res": "There are result0 different cars on this list were produced in 1974 .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "different",
            "cars",
            "on",
            "this",
            "list",
            "were",
            "produced",
            "in",
            "1974",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "select id  from cars_data where year = '1974' and Cylinders  =  '8'",
        "query_toks": [
            "select",
            "id",
            "from",
            "cars_data",
            "where",
            "year",
            "=",
            "'1974'",
            "and",
            "cylinders",
            "=",
            "'8'"
        ],
        "results_raw": [
            [
                "Id"
            ],
            [
                144
            ],
            [
                145
            ],
            [
                146
            ]
        ],
        "response": "There are the results of the car IDs produced in 1974 with 8 cylinders.",
        "response_toks": [
            "There",
            "are",
            "the",
            "results",
            "of",
            "the",
            "car",
            "IDs",
            "produced",
            "in",
            "1974",
            "with",
            "8",
            "cylinders",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "select id  from cars_data where year = '1974' and Cylinders  =  '8'",
        "query_w_results_blank_res": "select id  from cars_data where year = '1974' and Cylinders  =  '8'",
        "query_toks_w_results": [
            "select",
            "id",
            "from",
            "cars_data",
            "where",
            "year",
            "=",
            "'1974'",
            "and",
            "cylinders",
            "=",
            "'8'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "id",
            "from",
            "cars_data",
            "where",
            "year",
            "=",
            "'1974'",
            "and",
            "cylinders",
            "=",
            "'8'"
        ],
        "response_blank_res": "There are the results of the car IDs produced in 1974 with 8 cylinders .",
        "response_toks_blank_res": [
            "There",
            "are",
            "the",
            "results",
            "of",
            "the",
            "car",
            "IDs",
            "produced",
            "in",
            "1974",
            "with",
            "8",
            "cylinders",
            "."
        ]
    },
    {
        "database_id": "employee_hire_evaluation",
        "query": "select name from shop",
        "query_toks": [
            "select",
            "name",
            "from",
            "shop"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "FC Haka"
            ],
            [
                "HJK"
            ],
            [
                "FC Honka"
            ]
        ],
        "response": "here are the names of shop",
        "response_toks": [
            "here",
            "are",
            "the",
            "names",
            "of",
            "shop"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "select name from shop",
        "query_w_results_blank_res": "select name from shop",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "shop"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "shop"
        ],
        "response_blank_res": "here are the names of shop",
        "response_toks_blank_res": [
            "here",
            "are",
            "the",
            "names",
            "of",
            "shop"
        ]
    },
    {
        "database_id": "employee_hire_evaluation",
        "query": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id   =   t2.shop_id GROUP BY t1.shop_id",
        "query_toks": [
            "select",
            "t2",
            ".",
            "name",
            "from",
            "hiring",
            "as",
            "t1",
            "join",
            "shop",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "shop_id",
            "=",
            "t2",
            ".",
            "shop_id",
            "group",
            "by",
            "t1",
            ".",
            "shop_id"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "FC Haka"
            ],
            [
                "HJK"
            ],
            [
                "FC Inter"
            ]
        ],
        "response": "here are the names of shop which are hiring",
        "response_toks": [
            "here",
            "are",
            "the",
            "names",
            "of",
            "shop",
            "which",
            "are",
            "hiring"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id   =   t2.shop_id GROUP BY t1.shop_id",
        "query_w_results_blank_res": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id   =   t2.shop_id GROUP BY t1.shop_id",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "name",
            "from",
            "hiring",
            "as",
            "t1",
            "join",
            "shop",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "shop_id",
            "=",
            "t2",
            ".",
            "shop_id",
            "group",
            "by",
            "t1",
            ".",
            "shop_id"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "name",
            "from",
            "hiring",
            "as",
            "t1",
            "join",
            "shop",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "shop_id",
            "=",
            "t2",
            ".",
            "shop_id",
            "group",
            "by",
            "t1",
            ".",
            "shop_id"
        ],
        "response_blank_res": "here are the names of shop which are hiring",
        "response_toks_blank_res": [
            "here",
            "are",
            "the",
            "names",
            "of",
            "shop",
            "which",
            "are",
            "hiring"
        ]
    },
    {
        "database_id": "employee_hire_evaluation",
        "query": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id   =   t2.shop_id GROUP BY t1.shop_id ORDER BY count ( * )  DESC LIMIT 1",
        "query_toks": [
            "select",
            "t2",
            ".",
            "name",
            "from",
            "hiring",
            "as",
            "t1",
            "join",
            "shop",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "shop_id",
            "=",
            "t2",
            ".",
            "shop_id",
            "group",
            "by",
            "t1",
            ".",
            "shop_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "FC Haka"
            ]
        ],
        "response": "the name of shop which is hiring the highest number of employees is FC Haka",
        "response_toks": [
            "the",
            "name",
            "of",
            "shop",
            "which",
            "is",
            "hiring",
            "the",
            "highest",
            "number",
            "of",
            "employees",
            "is",
            "FC",
            "Haka"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id   =   t2.shop_id GROUP BY t1.shop_id ORDER BY count ( * )  DESC LIMIT 1",
        "query_w_results_blank_res": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id   =   t2.shop_id GROUP BY t1.shop_id ORDER BY count ( * )  DESC LIMIT 1",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "name",
            "from",
            "hiring",
            "as",
            "t1",
            "join",
            "shop",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "shop_id",
            "=",
            "t2",
            ".",
            "shop_id",
            "group",
            "by",
            "t1",
            ".",
            "shop_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "name",
            "from",
            "hiring",
            "as",
            "t1",
            "join",
            "shop",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "shop_id",
            "=",
            "t2",
            ".",
            "shop_id",
            "group",
            "by",
            "t1",
            ".",
            "shop_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "response_blank_res": "the name of shop which is hiring the highest number of employees is FC Haka",
        "response_toks_blank_res": [
            "the",
            "name",
            "of",
            "shop",
            "which",
            "is",
            "hiring",
            "the",
            "highest",
            "number",
            "of",
            "employees",
            "is",
            "FC",
            "Haka"
        ]
    },
    {
        "database_id": "singer",
        "query": "select count ( distinct Singer_ID )  from Singer",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "singer_id",
            ")",
            "from",
            "singer"
        ],
        "results_raw": [
            [
                "count(distinct Singer_ID)"
            ],
            [
                8
            ]
        ],
        "response": "There are 8 singers in total.",
        "response_toks": [
            "There",
            "are",
            "8",
            "singers",
            "in",
            "total",
            "."
        ],
        "results_map": {
            "result0": "8"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "select count ( distinct Singer_ID )  from Singer | 8 ",
        "query_w_results_blank_res": "select count ( distinct Singer_ID )  from Singer | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "distinct",
            "singer_id",
            ")",
            "from",
            "singer",
            "8"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "distinct",
            "singer_id",
            ")",
            "from",
            "singer",
            "result0"
        ],
        "response_blank_res": "There are result0 singers in total .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "singers",
            "in",
            "total",
            "."
        ]
    },
    {
        "database_id": "singer",
        "query": "SELECT count ( DISTINCT T1.Name )  FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales > 300000",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "t1",
            ".",
            "name",
            ")",
            "from",
            "singer",
            "as",
            "t1",
            "join",
            "song",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "singer_id",
            "=",
            "t2",
            ".",
            "singer_id",
            "where",
            "t2",
            ".",
            "sales",
            ">",
            "300000"
        ],
        "results_raw": [
            [
                "count(DISTINCT T1.Name)"
            ],
            [
                3
            ]
        ],
        "response": "There are 3 singers that have songs with sales more than 300000.",
        "response_toks": [
            "There",
            "are",
            "3",
            "singers",
            "that",
            "have",
            "songs",
            "with",
            "sales",
            "more",
            "than",
            "300000",
            "."
        ],
        "results_map": {
            "result0": "3"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( DISTINCT T1.Name )  FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales > 300000 | 3 ",
        "query_w_results_blank_res": "SELECT count ( DISTINCT T1.Name )  FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales > 300000 | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "distinct",
            "t1",
            ".",
            "name",
            ")",
            "from",
            "singer",
            "as",
            "t1",
            "join",
            "song",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "singer_id",
            "=",
            "t2",
            ".",
            "singer_id",
            "where",
            "t2",
            ".",
            "sales",
            ">",
            "300000",
            "3"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "distinct",
            "t1",
            ".",
            "name",
            ")",
            "from",
            "singer",
            "as",
            "t1",
            "join",
            "song",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "singer_id",
            "=",
            "t2",
            ".",
            "singer_id",
            "where",
            "t2",
            ".",
            "sales",
            ">",
            "300000",
            "result0"
        ],
        "response_blank_res": "There are result0 singers that have songs with sales more than 300000 .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "singers",
            "that",
            "have",
            "songs",
            "with",
            "sales",
            "more",
            "than",
            "300000",
            "."
        ]
    },
    {
        "database_id": "singer",
        "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales > 300000",
        "query_toks": [
            "select",
            "distinct",
            "t1",
            ".",
            "name",
            "from",
            "singer",
            "as",
            "t1",
            "join",
            "song",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "singer_id",
            "=",
            "t2",
            ".",
            "singer_id",
            "where",
            "t2",
            ".",
            "sales",
            ">",
            "300000"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Liliane Bettencourt"
            ],
            [
                "Christy Walton"
            ],
            [
                "Iris Fontbona"
            ]
        ],
        "response": "Here is the result table shows the distinct names of singers that have songs with sales more than 300000.",
        "response_toks": [
            "Here",
            "is",
            "the",
            "result",
            "table",
            "shows",
            "the",
            "distinct",
            "names",
            "of",
            "singers",
            "that",
            "have",
            "songs",
            "with",
            "sales",
            "more",
            "than",
            "300000",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales > 300000",
        "query_w_results_blank_res": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales > 300000",
        "query_toks_w_results": [
            "select",
            "distinct",
            "t1",
            ".",
            "name",
            "from",
            "singer",
            "as",
            "t1",
            "join",
            "song",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "singer_id",
            "=",
            "t2",
            ".",
            "singer_id",
            "where",
            "t2",
            ".",
            "sales",
            ">",
            "300000"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "t1",
            ".",
            "name",
            "from",
            "singer",
            "as",
            "t1",
            "join",
            "song",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "singer_id",
            "=",
            "t2",
            ".",
            "singer_id",
            "where",
            "t2",
            ".",
            "sales",
            ">",
            "300000"
        ],
        "response_blank_res": "Here is the result table shows the distinct names of singers that have songs with sales more than 300000 .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "result",
            "table",
            "shows",
            "the",
            "distinct",
            "names",
            "of",
            "singers",
            "that",
            "have",
            "songs",
            "with",
            "sales",
            "more",
            "than",
            "300000",
            "."
        ]
    },
    {
        "database_id": "voter_1",
        "query": "SELECT contestant_name FROM CONTESTANTS",
        "query_toks": [
            "select",
            "contestant_name",
            "from",
            "contestants"
        ],
        "results_raw": [
            [
                "contestant_name"
            ],
            [
                "Edwina Burnam"
            ],
            [
                "Tabatha Gehling"
            ],
            [
                "Kelly Clauss"
            ]
        ],
        "response": "These are the names of all contestants.",
        "response_toks": [
            "These",
            "are",
            "the",
            "names",
            "of",
            "all",
            "contestants",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT contestant_name FROM CONTESTANTS",
        "query_w_results_blank_res": "SELECT contestant_name FROM CONTESTANTS",
        "query_toks_w_results": [
            "select",
            "contestant_name",
            "from",
            "contestants"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "contestant_name",
            "from",
            "contestants"
        ],
        "response_blank_res": "These are the names of all contestants .",
        "response_toks_blank_res": [
            "These",
            "are",
            "the",
            "names",
            "of",
            "all",
            "contestants",
            "."
        ]
    },
    {
        "database_id": "voter_1",
        "query": "SELECT COUNT ( contestant_name )  FROM CONTESTANTS",
        "query_toks": [
            "select",
            "count",
            "(",
            "contestant_name",
            ")",
            "from",
            "contestants"
        ],
        "results_raw": [
            [
                "COUNT(contestant_name)"
            ],
            [
                11
            ]
        ],
        "response": "The number of contestants is 11.",
        "response_toks": [
            "The",
            "number",
            "of",
            "contestants",
            "is",
            "11",
            "."
        ],
        "results_map": {
            "result0": "11"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT COUNT ( contestant_name )  FROM CONTESTANTS | 11 ",
        "query_w_results_blank_res": "SELECT COUNT ( contestant_name )  FROM CONTESTANTS | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "contestant_name",
            ")",
            "from",
            "contestants",
            "11"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "contestant_name",
            ")",
            "from",
            "contestants",
            "result0"
        ],
        "response_blank_res": "The number of contestants is result0 .",
        "response_toks_blank_res": [
            "The",
            "number",
            "of",
            "contestants",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "voter_1",
        "query": "SELECT contestant_name FROM CONTESTANTS WHERE contestant_number  =  1",
        "query_toks": [
            "select",
            "contestant_name",
            "from",
            "contestants",
            "where",
            "contestant_number",
            "=",
            "1"
        ],
        "results_raw": [
            [
                "contestant_name"
            ],
            [
                "Edwina Burnam"
            ]
        ],
        "response": "Edwina Burnam has contestant number 1.",
        "response_toks": [
            "Edwina",
            "Burnam",
            "has",
            "contestant",
            "number",
            "1",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT contestant_name FROM CONTESTANTS WHERE contestant_number  =  1",
        "query_w_results_blank_res": "SELECT contestant_name FROM CONTESTANTS WHERE contestant_number  =  1",
        "query_toks_w_results": [
            "select",
            "contestant_name",
            "from",
            "contestants",
            "where",
            "contestant_number",
            "=",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "contestant_name",
            "from",
            "contestants",
            "where",
            "contestant_number",
            "=",
            "1"
        ],
        "response_blank_res": "Edwina Burnam has contestant number 1 .",
        "response_toks_blank_res": [
            "Edwina",
            "Burnam",
            "has",
            "contestant",
            "number",
            "1",
            "."
        ]
    },
    {
        "database_id": "voter_1",
        "query": "SELECT contestant_name FROM CONTESTANTS WHERE contestant_number  =  2",
        "query_toks": [
            "select",
            "contestant_name",
            "from",
            "contestants",
            "where",
            "contestant_number",
            "=",
            "2"
        ],
        "results_raw": [
            [
                "contestant_name"
            ],
            [
                "Tabatha Gehling"
            ]
        ],
        "response": "Tabatha Gehling has contestant number 2.",
        "response_toks": [
            "Tabatha",
            "Gehling",
            "has",
            "contestant",
            "number",
            "2",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT contestant_name FROM CONTESTANTS WHERE contestant_number  =  2",
        "query_w_results_blank_res": "SELECT contestant_name FROM CONTESTANTS WHERE contestant_number  =  2",
        "query_toks_w_results": [
            "select",
            "contestant_name",
            "from",
            "contestants",
            "where",
            "contestant_number",
            "=",
            "2"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "contestant_name",
            "from",
            "contestants",
            "where",
            "contestant_number",
            "=",
            "2"
        ],
        "response_blank_res": "Tabatha Gehling has contestant number 2 .",
        "response_toks_blank_res": [
            "Tabatha",
            "Gehling",
            "has",
            "contestant",
            "number",
            "2",
            "."
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT airportname FROM airports",
        "query_toks": [
            "select",
            "airportname",
            "from",
            "airports"
        ],
        "results_raw": [
            [
                "AirportName"
            ],
            [
                "Phillips AAF "
            ],
            [
                "Municipal "
            ],
            [
                "Dyess AFB "
            ]
        ],
        "response": "All airport names are listed in the result table.",
        "response_toks": [
            "All",
            "airport",
            "names",
            "are",
            "listed",
            "in",
            "the",
            "result",
            "table",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT airportname FROM airports",
        "query_w_results_blank_res": "SELECT airportname FROM airports",
        "query_toks_w_results": [
            "select",
            "airportname",
            "from",
            "airports"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "airportname",
            "from",
            "airports"
        ],
        "response_blank_res": "All airport names are listed in the result table .",
        "response_toks_blank_res": [
            "All",
            "airport",
            "names",
            "are",
            "listed",
            "in",
            "the",
            "result",
            "table",
            "."
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT COUNT ( DISTINCT Flightno )  FROM flights",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "flightno",
            ")",
            "from",
            "flights"
        ],
        "results_raw": [
            [
                "COUNT(DISTINCT Flightno)"
            ],
            [
                836
            ]
        ],
        "response": "There are 836 different flightNo.",
        "response_toks": [
            "There",
            "are",
            "836",
            "different",
            "flightNo",
            "."
        ],
        "results_map": {
            "result0": "836"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT COUNT ( DISTINCT Flightno )  FROM flights | 836 ",
        "query_w_results_blank_res": "SELECT COUNT ( DISTINCT Flightno )  FROM flights | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "distinct",
            "flightno",
            ")",
            "from",
            "flights",
            "836"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "distinct",
            "flightno",
            ")",
            "from",
            "flights",
            "result0"
        ],
        "response_blank_res": "There are result0 different flightNo .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "different",
            "flightNo",
            "."
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT COUNT ( DISTINCT country )  FROM airports",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "country",
            ")",
            "from",
            "airports"
        ],
        "results_raw": [
            [
                "COUNT(DISTINCT country)"
            ],
            [
                1
            ]
        ],
        "response": "There is 1 country.",
        "response_toks": [
            "There",
            "is",
            "1",
            "country",
            "."
        ],
        "results_map": {
            "result0": "1"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT COUNT ( DISTINCT country )  FROM airports | 1 ",
        "query_w_results_blank_res": "SELECT COUNT ( DISTINCT country )  FROM airports | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "distinct",
            "country",
            ")",
            "from",
            "airports",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "distinct",
            "country",
            ")",
            "from",
            "airports",
            "result0"
        ],
        "response_blank_res": "There is result0 country .",
        "response_toks_blank_res": [
            "There",
            "is",
            "result0",
            "country",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT count ( * )  from Breeds",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "breeds"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                3
            ]
        ],
        "response": "There are three dog breeds.",
        "response_toks": [
            "There",
            "are",
            "three",
            "dog",
            "breeds",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT count ( * )  from Breeds",
        "query_w_results_blank_res": "SELECT count ( * )  from Breeds",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "breeds"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "breeds"
        ],
        "response_blank_res": "There are three dog breeds .",
        "response_toks_blank_res": [
            "There",
            "are",
            "three",
            "dog",
            "breeds",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code   =   T2.breed_code GROUP BY T1.breed_name ORDER BY count ( * )  DESC LIMIT 1",
        "query_toks": [
            "select",
            "t1",
            ".",
            "breed_name",
            "from",
            "breeds",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "breed_code",
            "=",
            "t2",
            ".",
            "breed_code",
            "group",
            "by",
            "t1",
            ".",
            "breed_name",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "breed_name"
            ],
            [
                "Bulldog"
            ]
        ],
        "response": "The Bulldog has most number of dogs",
        "response_toks": [
            "The",
            "Bulldog",
            "has",
            "most",
            "number",
            "of",
            "dogs"
        ],
        "results_map": {
            "result0": "Bulldog"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code   =   T2.breed_code GROUP BY T1.breed_name ORDER BY count ( * )  DESC LIMIT 1 | Bulldog ",
        "query_w_results_blank_res": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code   =   T2.breed_code GROUP BY T1.breed_name ORDER BY count ( * )  DESC LIMIT 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "breed_name",
            "from",
            "breeds",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "breed_code",
            "=",
            "t2",
            ".",
            "breed_code",
            "group",
            "by",
            "t1",
            ".",
            "breed_name",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1",
            "Bulldog"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "breed_name",
            "from",
            "breeds",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "breed_code",
            "=",
            "t2",
            ".",
            "breed_code",
            "group",
            "by",
            "t1",
            ".",
            "breed_name",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "The result0 has most number of dogs",
        "response_toks_blank_res": [
            "The",
            "result0",
            "has",
            "most",
            "number",
            "of",
            "dogs"
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT T2.size_code FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code   =   T2.breed_code where T1.breed_name = \"Bulldog\"",
        "query_toks": [
            "select",
            "t2",
            ".",
            "size_code",
            "from",
            "breeds",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "breed_code",
            "=",
            "t2",
            ".",
            "breed_code",
            "where",
            "t1",
            ".",
            "breed_name",
            "=",
            "\"bulldog\""
        ],
        "results_raw": [
            [
                "size_code"
            ],
            [
                "LGE"
            ],
            [
                "MED"
            ],
            [
                "MED"
            ]
        ],
        "response": "Here are the size codes of the dogs with bulldog breed name.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "size",
            "codes",
            "of",
            "the",
            "dogs",
            "with",
            "bulldog",
            "breed",
            "name",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T2.size_code FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code   =   T2.breed_code where T1.breed_name = \"Bulldog\"",
        "query_w_results_blank_res": "SELECT T2.size_code FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code   =   T2.breed_code where T1.breed_name = \"Bulldog\"",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "size_code",
            "from",
            "breeds",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "breed_code",
            "=",
            "t2",
            ".",
            "breed_code",
            "where",
            "t1",
            ".",
            "breed_name",
            "=",
            "\"bulldog\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "size_code",
            "from",
            "breeds",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "breed_code",
            "=",
            "t2",
            ".",
            "breed_code",
            "where",
            "t1",
            ".",
            "breed_name",
            "=",
            "\"bulldog\""
        ],
        "response_blank_res": "Here are the size codes of the dogs with bulldog breed name .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "size",
            "codes",
            "of",
            "the",
            "dogs",
            "with",
            "bulldog",
            "breed",
            "name",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code   =   T2.breed_code GROUP BY T1.breed_name ORDER BY count ( * )  DESC LIMIT 1",
        "query_toks": [
            "select",
            "t1",
            ".",
            "breed_name",
            "from",
            "breeds",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "breed_code",
            "=",
            "t2",
            ".",
            "breed_code",
            "group",
            "by",
            "t1",
            ".",
            "breed_name",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "breed_name"
            ],
            [
                "Bulldog"
            ]
        ],
        "response": "The name of the breed with most dogs is Bulldog.",
        "response_toks": [
            "The",
            "name",
            "of",
            "the",
            "breed",
            "with",
            "most",
            "dogs",
            "is",
            "Bulldog",
            "."
        ],
        "results_map": {
            "result0": "Bulldog"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code   =   T2.breed_code GROUP BY T1.breed_name ORDER BY count ( * )  DESC LIMIT 1 | Bulldog ",
        "query_w_results_blank_res": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code   =   T2.breed_code GROUP BY T1.breed_name ORDER BY count ( * )  DESC LIMIT 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "breed_name",
            "from",
            "breeds",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "breed_code",
            "=",
            "t2",
            ".",
            "breed_code",
            "group",
            "by",
            "t1",
            ".",
            "breed_name",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1",
            "Bulldog"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "breed_name",
            "from",
            "breeds",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "breed_code",
            "=",
            "t2",
            ".",
            "breed_code",
            "group",
            "by",
            "t1",
            ".",
            "breed_name",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "The name of the breed with most dogs is result0 .",
        "response_toks_blank_res": [
            "The",
            "name",
            "of",
            "the",
            "breed",
            "with",
            "most",
            "dogs",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "orchestra",
        "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "query_toks": [
            "select",
            "name",
            "from",
            "conductor",
            "order",
            "by",
            "year_of_work",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Robert Craft"
            ]
        ],
        "response": "Robert Craft works the most years",
        "response_toks": [
            "Robert",
            "Craft",
            "works",
            "the",
            "most",
            "years"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "query_w_results_blank_res": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "conductor",
            "order",
            "by",
            "year_of_work",
            "desc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "conductor",
            "order",
            "by",
            "year_of_work",
            "desc",
            "limit",
            "1"
        ],
        "response_blank_res": "Robert Craft works the most years",
        "response_toks_blank_res": [
            "Robert",
            "Craft",
            "works",
            "the",
            "most",
            "years"
        ]
    },
    {
        "database_id": "orchestra",
        "query": "SELECT Year_of_Work FROM conductor where name = 'Robert Craft'",
        "query_toks": [
            "select",
            "year_of_work",
            "from",
            "conductor",
            "where",
            "name",
            "=",
            "'robert",
            "craft'"
        ],
        "results_raw": [
            [
                "Year_of_Work"
            ],
            [
                21
            ]
        ],
        "response": "Robert Craft  worked 21 years",
        "response_toks": [
            "Robert",
            "Craft",
            "worked",
            "21",
            "years"
        ],
        "results_map": {
            "result0": "21"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT Year_of_Work FROM conductor where name = 'Robert Craft' | 21 ",
        "query_w_results_blank_res": "SELECT Year_of_Work FROM conductor where name = 'Robert Craft' | result0 ",
        "query_toks_w_results": [
            "select",
            "year_of_work",
            "from",
            "conductor",
            "where",
            "name",
            "=",
            "'robert",
            "craft'",
            "21"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "year_of_work",
            "from",
            "conductor",
            "where",
            "name",
            "=",
            "'robert",
            "craft'",
            "result0"
        ],
        "response_blank_res": "Robert Craft worked result0 years",
        "response_toks_blank_res": [
            "Robert",
            "Craft",
            "worked",
            "result0",
            "years"
        ]
    },
    {
        "database_id": "orchestra",
        "query": "SELECT Name FROM conductor ORDER BY Year_of_Work asc LIMIT 1",
        "query_toks": [
            "select",
            "name",
            "from",
            "conductor",
            "order",
            "by",
            "year_of_work",
            "asc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Colin Davis"
            ]
        ],
        "response": "Colin Davis works the  least years",
        "response_toks": [
            "Colin",
            "Davis",
            "works",
            "the",
            "least",
            "years"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Name FROM conductor ORDER BY Year_of_Work asc LIMIT 1",
        "query_w_results_blank_res": "SELECT Name FROM conductor ORDER BY Year_of_Work asc LIMIT 1",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "conductor",
            "order",
            "by",
            "year_of_work",
            "asc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "conductor",
            "order",
            "by",
            "year_of_work",
            "asc",
            "limit",
            "1"
        ],
        "response_blank_res": "Colin Davis works the least years",
        "response_toks_blank_res": [
            "Colin",
            "Davis",
            "works",
            "the",
            "least",
            "years"
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT * FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id GROUP BY T1.professional_id order by COUNT ( * )   desc limit 1",
        "query_toks": [
            "select",
            "*",
            "from",
            "professionals",
            "as",
            "t1",
            "join",
            "treatments",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "professional_id",
            "=",
            "t2",
            ".",
            "professional_id",
            "group",
            "by",
            "t1",
            ".",
            "professional_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number"
            ],
            [
                9,
                "Veterenarian",
                "Monte",
                "07073 Brenna Ways Suite 089\nLowehaven, KY 93275-96",
                "South Rockyport",
                "SouthCarolina",
                "80775",
                "Kshlerin",
                "schneider.kathryne@example.org",
                "320-508-6023",
                "962-983-8109x3509"
            ]
        ],
        "response": "Here is the information about the professional who has done the most treatments.",
        "response_toks": [
            "Here",
            "is",
            "the",
            "information",
            "about",
            "the",
            "professional",
            "who",
            "has",
            "done",
            "the",
            "most",
            "treatments",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT * FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id GROUP BY T1.professional_id order by COUNT ( * )   desc limit 1",
        "query_w_results_blank_res": "SELECT * FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id GROUP BY T1.professional_id order by COUNT ( * )   desc limit 1",
        "query_toks_w_results": [
            "select",
            "*",
            "from",
            "professionals",
            "as",
            "t1",
            "join",
            "treatments",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "professional_id",
            "=",
            "t2",
            ".",
            "professional_id",
            "group",
            "by",
            "t1",
            ".",
            "professional_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "*",
            "from",
            "professionals",
            "as",
            "t1",
            "join",
            "treatments",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "professional_id",
            "=",
            "t2",
            ".",
            "professional_id",
            "group",
            "by",
            "t1",
            ".",
            "professional_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "response_blank_res": "Here is the information about the professional who has done the most treatments .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "information",
            "about",
            "the",
            "professional",
            "who",
            "has",
            "done",
            "the",
            "most",
            "treatments",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT * FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id GROUP BY T1.professional_id order by COUNT ( * )   limit 1",
        "query_toks": [
            "select",
            "*",
            "from",
            "professionals",
            "as",
            "t1",
            "join",
            "treatments",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "professional_id",
            "=",
            "t2",
            ".",
            "professional_id",
            "group",
            "by",
            "t1",
            ".",
            "professional_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number"
            ],
            [
                5,
                "Veterenarian",
                "Danny",
                "188 VonRueden Tunnel Suite 630\nNorth Macibury, NV ",
                "New Laurytown",
                "Hawaii",
                "84515",
                "Considine",
                "mekhi.little@example.org",
                "1-609-566-2752x25197",
                "011.193.9081x3186"
            ]
        ],
        "response": "Here is the information about the professional who has done the least treatments.",
        "response_toks": [
            "Here",
            "is",
            "the",
            "information",
            "about",
            "the",
            "professional",
            "who",
            "has",
            "done",
            "the",
            "least",
            "treatments",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT * FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id GROUP BY T1.professional_id order by COUNT ( * )   limit 1",
        "query_w_results_blank_res": "SELECT * FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id GROUP BY T1.professional_id order by COUNT ( * )   limit 1",
        "query_toks_w_results": [
            "select",
            "*",
            "from",
            "professionals",
            "as",
            "t1",
            "join",
            "treatments",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "professional_id",
            "=",
            "t2",
            ".",
            "professional_id",
            "group",
            "by",
            "t1",
            ".",
            "professional_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "*",
            "from",
            "professionals",
            "as",
            "t1",
            "join",
            "treatments",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "professional_id",
            "=",
            "t2",
            ".",
            "professional_id",
            "group",
            "by",
            "t1",
            ".",
            "professional_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "limit",
            "1"
        ],
        "response_blank_res": "Here is the information about the professional who has done the least treatments .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "information",
            "about",
            "the",
            "professional",
            "who",
            "has",
            "done",
            "the",
            "least",
            "treatments",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "select count ( * )  from  ( SELECT * FROM Professionals AS T1 JOIN Treatments AS T2 group by T2.professional_id having count ( * )  < =  3 ) ",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "(",
            "select",
            "*",
            "from",
            "professionals",
            "as",
            "t1",
            "join",
            "treatments",
            "as",
            "t2",
            "group",
            "by",
            "t2",
            ".",
            "professional_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<",
            "=",
            "3",
            ")"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                0
            ]
        ],
        "response": "There is no prefessional who has at most 3 treatments.",
        "response_toks": [
            "There",
            "is",
            "no",
            "prefessional",
            "who",
            "has",
            "at",
            "most",
            "3",
            "treatments",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "select count ( * )  from  ( SELECT * FROM Professionals AS T1 JOIN Treatments AS T2 group by T2.professional_id having count ( * )  < =  3 ) ",
        "query_w_results_blank_res": "select count ( * )  from  ( SELECT * FROM Professionals AS T1 JOIN Treatments AS T2 group by T2.professional_id having count ( * )  < =  3 ) ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "(",
            "select",
            "*",
            "from",
            "professionals",
            "as",
            "t1",
            "join",
            "treatments",
            "as",
            "t2",
            "group",
            "by",
            "t2",
            ".",
            "professional_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<",
            "=",
            "3",
            ")"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "(",
            "select",
            "*",
            "from",
            "professionals",
            "as",
            "t1",
            "join",
            "treatments",
            "as",
            "t2",
            "group",
            "by",
            "t2",
            ".",
            "professional_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<",
            "=",
            "3",
            ")"
        ],
        "response_blank_res": "There is no prefessional who has at most 3 treatments .",
        "response_toks_blank_res": [
            "There",
            "is",
            "no",
            "prefessional",
            "who",
            "has",
            "at",
            "most",
            "3",
            "treatments",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "select avg ( ct )  from  ( SELECT count ( * )  as ct FROM Professionals AS T1 JOIN Treatments AS T2 group by T2.professional_id ) ",
        "query_toks": [
            "select",
            "avg",
            "(",
            "ct",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "ct",
            "from",
            "professionals",
            "as",
            "t1",
            "join",
            "treatments",
            "as",
            "t2",
            "group",
            "by",
            "t2",
            ".",
            "professional_id",
            ")"
        ],
        "results_raw": [
            [
                "avg(ct)"
            ],
            [
                28.125
            ]
        ],
        "response": "The average number of treatments taken by all professionals is 28.125.",
        "response_toks": [
            "The",
            "average",
            "number",
            "of",
            "treatments",
            "taken",
            "by",
            "all",
            "professionals",
            "is",
            "28.125",
            "."
        ],
        "results_map": {
            "result0": "28.125"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "select avg ( ct )  from  ( SELECT count ( * )  as ct FROM Professionals AS T1 JOIN Treatments AS T2 group by T2.professional_id )  | 28.125 ",
        "query_w_results_blank_res": "select avg ( ct )  from  ( SELECT count ( * )  as ct FROM Professionals AS T1 JOIN Treatments AS T2 group by T2.professional_id )  | result0 ",
        "query_toks_w_results": [
            "select",
            "avg",
            "(",
            "ct",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "ct",
            "from",
            "professionals",
            "as",
            "t1",
            "join",
            "treatments",
            "as",
            "t2",
            "group",
            "by",
            "t2",
            ".",
            "professional_id",
            ")",
            "28.125"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "avg",
            "(",
            "ct",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "*",
            ")",
            "as",
            "ct",
            "from",
            "professionals",
            "as",
            "t1",
            "join",
            "treatments",
            "as",
            "t2",
            "group",
            "by",
            "t2",
            ".",
            "professional_id",
            ")",
            "result0"
        ],
        "response_blank_res": "The average number of treatments taken by all professionals is result0 .",
        "response_toks_blank_res": [
            "The",
            "average",
            "number",
            "of",
            "treatments",
            "taken",
            "by",
            "all",
            "professionals",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "select name from country where code not in  ( SELECT CountryCode FROM countrylanguage WHERE LANGUAGE   =   \"English\" ) ",
        "query_toks": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "code",
            "not",
            "in",
            "(",
            "select",
            "countrycode",
            "from",
            "countrylanguage",
            "where",
            "language",
            "=",
            "\"english\"",
            ")"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Afghanistan"
            ],
            [
                "Angola"
            ],
            [
                "Albania"
            ]
        ],
        "response": "Here are the names of countries that do not speak English.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "names",
            "of",
            "countries",
            "that",
            "do",
            "not",
            "speak",
            "English",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "select name from country where code not in  ( SELECT CountryCode FROM countrylanguage WHERE LANGUAGE   =   \"English\" ) ",
        "query_w_results_blank_res": "select name from country where code not in  ( SELECT CountryCode FROM countrylanguage WHERE LANGUAGE   =   \"English\" ) ",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "code",
            "not",
            "in",
            "(",
            "select",
            "countrycode",
            "from",
            "countrylanguage",
            "where",
            "language",
            "=",
            "\"english\"",
            ")"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "code",
            "not",
            "in",
            "(",
            "select",
            "countrycode",
            "from",
            "countrylanguage",
            "where",
            "language",
            "=",
            "\"english\"",
            ")"
        ],
        "response_blank_res": "Here are the names of countries that do not speak English .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "names",
            "of",
            "countries",
            "that",
            "do",
            "not",
            "speak",
            "English",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "select name from country where code in  ( SELECT Code FROM country WHERE GovernmentForm ! =  \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE   =   \"English\" ) ",
        "query_toks": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "code",
            "in",
            "(",
            "select",
            "code",
            "from",
            "country",
            "where",
            "governmentform",
            "!",
            "=",
            "\"republic\"",
            "except",
            "select",
            "countrycode",
            "from",
            "countrylanguage",
            "where",
            "language",
            "=",
            "\"english\"",
            ")"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Afghanistan"
            ],
            [
                "Andorra"
            ],
            [
                "United Arab Emirates"
            ]
        ],
        "response": "Here are the names of countries that do not speak English and whose government forms are not Republic",
        "response_toks": [
            "Here",
            "are",
            "the",
            "names",
            "of",
            "countries",
            "that",
            "do",
            "not",
            "speak",
            "English",
            "and",
            "whose",
            "government",
            "forms",
            "are",
            "not",
            "Republic"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "select name from country where code in  ( SELECT Code FROM country WHERE GovernmentForm ! =  \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE   =   \"English\" ) ",
        "query_w_results_blank_res": "select name from country where code in  ( SELECT Code FROM country WHERE GovernmentForm ! =  \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE   =   \"English\" ) ",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "code",
            "in",
            "(",
            "select",
            "code",
            "from",
            "country",
            "where",
            "governmentform",
            "!",
            "=",
            "\"republic\"",
            "except",
            "select",
            "countrycode",
            "from",
            "countrylanguage",
            "where",
            "language",
            "=",
            "\"english\"",
            ")"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "code",
            "in",
            "(",
            "select",
            "code",
            "from",
            "country",
            "where",
            "governmentform",
            "!",
            "=",
            "\"republic\"",
            "except",
            "select",
            "countrycode",
            "from",
            "countrylanguage",
            "where",
            "language",
            "=",
            "\"english\"",
            ")"
        ],
        "response_blank_res": "Here are the names of countries that do not speak English and whose government forms are not Republic",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "names",
            "of",
            "countries",
            "that",
            "do",
            "not",
            "speak",
            "English",
            "and",
            "whose",
            "government",
            "forms",
            "are",
            "not",
            "Republic"
        ]
    },
    {
        "database_id": "voter_1",
        "query": "SELECT count ( * )  FROM votes WHERE state   =   'NY' or  state   =   'CA'",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "votes",
            "where",
            "state",
            "=",
            "'ny'",
            "or",
            "state",
            "=",
            "'ca'"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                3
            ]
        ],
        "response": "The number of votes from state 'NY' or 'CA' is 3.",
        "response_toks": [
            "The",
            "number",
            "of",
            "votes",
            "from",
            "state",
            "'NY",
            "'",
            "or",
            "'CA",
            "'",
            "is",
            "3",
            "."
        ],
        "results_map": {
            "result0": "3"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM votes WHERE state   =   'NY' or  state   =   'CA' | 3 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM votes WHERE state   =   'NY' or  state   =   'CA' | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "votes",
            "where",
            "state",
            "=",
            "'ny'",
            "or",
            "state",
            "=",
            "'ca'",
            "3"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "votes",
            "where",
            "state",
            "=",
            "'ny'",
            "or",
            "state",
            "=",
            "'ca'",
            "result0"
        ],
        "response_blank_res": "The number of votes from state 'NY ' or 'CA ' is result0 .",
        "response_toks_blank_res": [
            "The",
            "number",
            "of",
            "votes",
            "from",
            "state",
            "'NY",
            "'",
            "or",
            "'CA",
            "'",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "voter_1",
        "query": "SELECT distinct contestant_number FROM votes",
        "query_toks": [
            "select",
            "distinct",
            "contestant_number",
            "from",
            "votes"
        ],
        "results_raw": [
            [
                "contestant_number"
            ],
            [
                2
            ],
            [
                3
            ],
            [
                5
            ]
        ],
        "response": "The different contestant numbers are listed.",
        "response_toks": [
            "The",
            "different",
            "contestant",
            "numbers",
            "are",
            "listed",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT distinct contestant_number FROM votes",
        "query_w_results_blank_res": "SELECT distinct contestant_number FROM votes",
        "query_toks_w_results": [
            "select",
            "distinct",
            "contestant_number",
            "from",
            "votes"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "contestant_number",
            "from",
            "votes"
        ],
        "response_blank_res": "The different contestant numbers are listed .",
        "response_toks_blank_res": [
            "The",
            "different",
            "contestant",
            "numbers",
            "are",
            "listed",
            "."
        ]
    },
    {
        "database_id": "voter_1",
        "query": "SELECT count ( * )  from votes where contestant_number  =  '5'",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "votes",
            "where",
            "contestant_number",
            "=",
            "'5'"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                1
            ]
        ],
        "response": "The number of vote id of contestant number 5 is 1.",
        "response_toks": [
            "The",
            "number",
            "of",
            "vote",
            "id",
            "of",
            "contestant",
            "number",
            "5",
            "is",
            "1",
            "."
        ],
        "results_map": {
            "result0": "1"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  from votes where contestant_number  =  '5' | 1 ",
        "query_w_results_blank_res": "SELECT count ( * )  from votes where contestant_number  =  '5' | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "votes",
            "where",
            "contestant_number",
            "=",
            "'5'",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "votes",
            "where",
            "contestant_number",
            "=",
            "'5'",
            "result0"
        ],
        "response_blank_res": "The number of vote id of contestant number 5 is result0 .",
        "response_toks_blank_res": [
            "The",
            "number",
            "of",
            "vote",
            "id",
            "of",
            "contestant",
            "number",
            "5",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "poker_player",
        "query": "SELECT distinct Nationality FROM people",
        "query_toks": [
            "select",
            "distinct",
            "nationality",
            "from",
            "people"
        ],
        "results_raw": [
            [
                "Nationality"
            ],
            [
                "Russia"
            ],
            [
                "Bulgaria"
            ]
        ],
        "response": "Russia and Bulgaria are the two different countries in the table",
        "response_toks": [
            "Russia",
            "and",
            "Bulgaria",
            "are",
            "the",
            "two",
            "different",
            "countries",
            "in",
            "the",
            "table"
        ],
        "results_map": {
            "result0": "Russia",
            "result1": "Bulgaria"
        },
        "results_blank_res": "result0 result1 ",
        "query_w_results": "SELECT distinct Nationality FROM people | Russia Bulgaria ",
        "query_w_results_blank_res": "SELECT distinct Nationality FROM people | result0 result1 ",
        "query_toks_w_results": [
            "select",
            "distinct",
            "nationality",
            "from",
            "people",
            "Russia",
            "Bulgaria"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "nationality",
            "from",
            "people",
            "result0",
            "result1"
        ],
        "response_blank_res": "result0 and result1 are the two different countries in the table",
        "response_toks_blank_res": [
            "result0",
            "and",
            "result1",
            "are",
            "the",
            "two",
            "different",
            "countries",
            "in",
            "the",
            "table"
        ]
    },
    {
        "database_id": "poker_player",
        "query": "SELECT Nationality FROM people",
        "query_toks": [
            "select",
            "nationality",
            "from",
            "people"
        ],
        "results_raw": [
            [
                "Nationality"
            ],
            [
                "Russia"
            ],
            [
                "Bulgaria"
            ],
            [
                "Russia"
            ]
        ],
        "response": "here are all the nationalities in the table",
        "response_toks": [
            "here",
            "are",
            "all",
            "the",
            "nationalities",
            "in",
            "the",
            "table"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Nationality FROM people",
        "query_w_results_blank_res": "SELECT Nationality FROM people",
        "query_toks_w_results": [
            "select",
            "nationality",
            "from",
            "people"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "nationality",
            "from",
            "people"
        ],
        "response_blank_res": "here are all the nationalities in the table",
        "response_toks_blank_res": [
            "here",
            "are",
            "all",
            "the",
            "nationalities",
            "in",
            "the",
            "table"
        ]
    },
    {
        "database_id": "poker_player",
        "query": "SELECT count ( * )  FROM people where Nationality  =  'Russia'",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "people",
            "where",
            "nationality",
            "=",
            "'russia'"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                6
            ]
        ],
        "response": "the number of records where nationality is Russia is 6",
        "response_toks": [
            "the",
            "number",
            "of",
            "records",
            "where",
            "nationality",
            "is",
            "Russia",
            "is",
            "6"
        ],
        "results_map": {
            "result0": "6"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM people where Nationality  =  'Russia' | 6 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM people where Nationality  =  'Russia' | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "people",
            "where",
            "nationality",
            "=",
            "'russia'",
            "6"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "people",
            "where",
            "nationality",
            "=",
            "'russia'",
            "result0"
        ],
        "response_blank_res": "the number of records where nationality is Russia is result0",
        "response_toks_blank_res": [
            "the",
            "number",
            "of",
            "records",
            "where",
            "nationality",
            "is",
            "Russia",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "poker_player",
        "query": "SELECT count ( * )  FROM people where Nationality  =  'Bulgaria'",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "people",
            "where",
            "nationality",
            "=",
            "'bulgaria'"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                1
            ]
        ],
        "response": "the number of records where nationality is Bulgaria is 1",
        "response_toks": [
            "the",
            "number",
            "of",
            "records",
            "where",
            "nationality",
            "is",
            "Bulgaria",
            "is",
            "1"
        ],
        "results_map": {
            "result0": "1"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM people where Nationality  =  'Bulgaria' | 1 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM people where Nationality  =  'Bulgaria' | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "people",
            "where",
            "nationality",
            "=",
            "'bulgaria'",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "people",
            "where",
            "nationality",
            "=",
            "'bulgaria'",
            "result0"
        ],
        "response_blank_res": "the number of records where nationality is Bulgaria is result0",
        "response_toks_blank_res": [
            "the",
            "number",
            "of",
            "records",
            "where",
            "nationality",
            "is",
            "Bulgaria",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT * FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker GROUP BY T1.Id HAVING count ( * )   >  3",
        "query_toks": [
            "select",
            "*",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "maker",
            "group",
            "by",
            "t1",
            ".",
            "id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "3"
        ],
        "results_raw": [
            [
                "Id",
                "Maker",
                "FullName",
                "Country"
            ],
            [
                4,
                "gm",
                "General Motors",
                "1"
            ],
            [
                6,
                "chrysler",
                "Chrysler",
                "1"
            ]
        ],
        "response": "Here are the information of the makers who designed more than 3 car models.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "information",
            "of",
            "the",
            "makers",
            "who",
            "designed",
            "more",
            "than",
            "3",
            "car",
            "models",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT * FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker GROUP BY T1.Id HAVING count ( * )   >  3",
        "query_w_results_blank_res": "SELECT * FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker GROUP BY T1.Id HAVING count ( * )   >  3",
        "query_toks_w_results": [
            "select",
            "*",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "maker",
            "group",
            "by",
            "t1",
            ".",
            "id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "3"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "*",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "maker",
            "group",
            "by",
            "t1",
            ".",
            "id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "3"
        ],
        "response_blank_res": "Here are the information of the makers who designed more than 3 car models .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "information",
            "of",
            "the",
            "makers",
            "who",
            "designed",
            "more",
            "than",
            "3",
            "car",
            "models",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT T1.id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker GROUP BY T1.Id HAVING count ( * )   >  3",
        "query_toks": [
            "select",
            "t1",
            ".",
            "id",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "maker",
            "group",
            "by",
            "t1",
            ".",
            "id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "3"
        ],
        "results_raw": [
            [
                "Id"
            ],
            [
                4
            ],
            [
                6
            ]
        ],
        "response": "4 and 6 are the ids of the makes who designed more than 3 car models.",
        "response_toks": [
            "4",
            "and",
            "6",
            "are",
            "the",
            "ids",
            "of",
            "the",
            "makes",
            "who",
            "designed",
            "more",
            "than",
            "3",
            "car",
            "models",
            "."
        ],
        "results_map": {
            "result0": "4",
            "result1": "6"
        },
        "results_blank_res": "result0 result1 ",
        "query_w_results": "SELECT T1.id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker GROUP BY T1.Id HAVING count ( * )   >  3 | 4 6 ",
        "query_w_results_blank_res": "SELECT T1.id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker GROUP BY T1.Id HAVING count ( * )   >  3 | result0 result1 ",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "id",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "maker",
            "group",
            "by",
            "t1",
            ".",
            "id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "3",
            "4",
            "6"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "id",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "maker",
            "group",
            "by",
            "t1",
            ".",
            "id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "3",
            "result0",
            "result1"
        ],
        "response_blank_res": "result0 and result1 are the ids of the makes who designed more than 3 car models .",
        "response_toks_blank_res": [
            "result0",
            "and",
            "result1",
            "are",
            "the",
            "ids",
            "of",
            "the",
            "makes",
            "who",
            "designed",
            "more",
            "than",
            "3",
            "car",
            "models",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker GROUP BY T1.Id HAVING count ( * )   >  3",
        "query_toks": [
            "select",
            "t1",
            ".",
            "fullname",
            ",",
            "t1",
            ".",
            "id",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "maker",
            "group",
            "by",
            "t1",
            ".",
            "id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "3"
        ],
        "results_raw": [
            [
                "FullName",
                "Id"
            ],
            [
                "General Motors",
                4
            ],
            [
                "Chrysler",
                6
            ]
        ],
        "response": "Here are the full name and id of the makes who designed more than 3 car models appear in the same table.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "full",
            "name",
            "and",
            "id",
            "of",
            "the",
            "makes",
            "who",
            "designed",
            "more",
            "than",
            "3",
            "car",
            "models",
            "appear",
            "in",
            "the",
            "same",
            "table",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker GROUP BY T1.Id HAVING count ( * )   >  3",
        "query_w_results_blank_res": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker GROUP BY T1.Id HAVING count ( * )   >  3",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "fullname",
            ",",
            "t1",
            ".",
            "id",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "maker",
            "group",
            "by",
            "t1",
            ".",
            "id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "3"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "fullname",
            ",",
            "t1",
            ".",
            "id",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "maker",
            "group",
            "by",
            "t1",
            ".",
            "id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "3"
        ],
        "response_blank_res": "Here are the full name and id of the makes who designed more than 3 car models appear in the same table .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "full",
            "name",
            "and",
            "id",
            "of",
            "the",
            "makes",
            "who",
            "designed",
            "more",
            "than",
            "3",
            "car",
            "models",
            "appear",
            "in",
            "the",
            "same",
            "table",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT avg ( Horsepower )  FROM cars_data",
        "query_toks": [
            "select",
            "avg",
            "(",
            "horsepower",
            ")",
            "from",
            "cars_data"
        ],
        "results_raw": [
            [
                "avg(Horsepower)"
            ],
            [
                103.5295566502463
            ]
        ],
        "response": "This is the average horsepower.",
        "response_toks": [
            "This",
            "is",
            "the",
            "average",
            "horsepower",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT avg ( Horsepower )  FROM cars_data",
        "query_w_results_blank_res": "SELECT avg ( Horsepower )  FROM cars_data",
        "query_toks_w_results": [
            "select",
            "avg",
            "(",
            "horsepower",
            ")",
            "from",
            "cars_data"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "avg",
            "(",
            "horsepower",
            ")",
            "from",
            "cars_data"
        ],
        "response_blank_res": "This is the average horsepower .",
        "response_toks_blank_res": [
            "This",
            "is",
            "the",
            "average",
            "horsepower",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT Id FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1",
        "query_toks": [
            "select",
            "id",
            "from",
            "cars_data",
            "order",
            "by",
            "horsepower",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Id"
            ],
            [
                39
            ]
        ],
        "response": "This is the id of the car with largest horsepower.",
        "response_toks": [
            "This",
            "is",
            "the",
            "id",
            "of",
            "the",
            "car",
            "with",
            "largest",
            "horsepower",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Id FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1",
        "query_w_results_blank_res": "SELECT Id FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1",
        "query_toks_w_results": [
            "select",
            "id",
            "from",
            "cars_data",
            "order",
            "by",
            "horsepower",
            "desc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "id",
            "from",
            "cars_data",
            "order",
            "by",
            "horsepower",
            "desc",
            "limit",
            "1"
        ],
        "response_blank_res": "This is the id of the car with largest horsepower .",
        "response_toks_blank_res": [
            "This",
            "is",
            "the",
            "id",
            "of",
            "the",
            "car",
            "with",
            "largest",
            "horsepower",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1",
        "query_toks": [
            "select",
            "accelerate",
            "from",
            "cars_data",
            "order",
            "by",
            "horsepower",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Accelerate"
            ],
            [
                19.0
            ]
        ],
        "response": "This is the acceleration of car id 39",
        "response_toks": [
            "This",
            "is",
            "the",
            "acceleration",
            "of",
            "car",
            "id",
            "39"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1",
        "query_w_results_blank_res": "SELECT accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1",
        "query_toks_w_results": [
            "select",
            "accelerate",
            "from",
            "cars_data",
            "order",
            "by",
            "horsepower",
            "desc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "accelerate",
            "from",
            "cars_data",
            "order",
            "by",
            "horsepower",
            "desc",
            "limit",
            "1"
        ],
        "response_blank_res": "This is the acceleration of car id 39",
        "response_toks_blank_res": [
            "This",
            "is",
            "the",
            "acceleration",
            "of",
            "car",
            "id",
            "39"
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT COUNT ( * )  FROM CARS_DATA WHERE Accelerate  >  19.0",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "cars_data",
            "where",
            "accelerate",
            ">",
            "19.0"
        ],
        "results_raw": [
            [
                "COUNT(*)"
            ],
            [
                39
            ]
        ],
        "response": "There are 39 cars that have accelerate more than 19.0",
        "response_toks": [
            "There",
            "are",
            "39",
            "cars",
            "that",
            "have",
            "accelerate",
            "more",
            "than",
            "19.0"
        ],
        "results_map": {
            "result0": "39"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT COUNT ( * )  FROM CARS_DATA WHERE Accelerate  >  19.0 | 39 ",
        "query_w_results_blank_res": "SELECT COUNT ( * )  FROM CARS_DATA WHERE Accelerate  >  19.0 | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "cars_data",
            "where",
            "accelerate",
            ">",
            "19.0",
            "39"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "cars_data",
            "where",
            "accelerate",
            ">",
            "19.0",
            "result0"
        ],
        "response_blank_res": "There are result0 cars that have accelerate more than 19.0",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "cars",
            "that",
            "have",
            "accelerate",
            "more",
            "than",
            "19.0"
        ]
    },
    {
        "database_id": "concert_singer",
        "query": "SELECT year from concert where concert_name  =  \"Auditions\"",
        "query_toks": [
            "select",
            "year",
            "from",
            "concert",
            "where",
            "concert_name",
            "=",
            "\"auditions\""
        ],
        "results_raw": [
            [
                "Year"
            ],
            [
                "2014"
            ]
        ],
        "response": "2014 is the year of the concert with a name Auditions.",
        "response_toks": [
            "2014",
            "is",
            "the",
            "year",
            "of",
            "the",
            "concert",
            "with",
            "a",
            "name",
            "Auditions",
            "."
        ],
        "results_map": {
            "result0": "2014"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT year from concert where concert_name  =  \"Auditions\" | 2014 ",
        "query_w_results_blank_res": "SELECT year from concert where concert_name  =  \"Auditions\" | result0 ",
        "query_toks_w_results": [
            "select",
            "year",
            "from",
            "concert",
            "where",
            "concert_name",
            "=",
            "\"auditions\"",
            "2014"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "year",
            "from",
            "concert",
            "where",
            "concert_name",
            "=",
            "\"auditions\"",
            "result0"
        ],
        "response_blank_res": "result0 is the year of the concert with a name Auditions .",
        "response_toks_blank_res": [
            "result0",
            "is",
            "the",
            "year",
            "of",
            "the",
            "concert",
            "with",
            "a",
            "name",
            "Auditions",
            "."
        ]
    },
    {
        "database_id": "concert_singer",
        "query": "SELECT year from concert where concert_name  =  \"Super bootcamp\"",
        "query_toks": [
            "select",
            "year",
            "from",
            "concert",
            "where",
            "concert_name",
            "=",
            "\"super",
            "bootcamp\""
        ],
        "results_raw": [
            [
                "Year"
            ],
            [
                "2014"
            ]
        ],
        "response": "2014 is the year of the concert with a name Super bootcamp",
        "response_toks": [
            "2014",
            "is",
            "the",
            "year",
            "of",
            "the",
            "concert",
            "with",
            "a",
            "name",
            "Super",
            "bootcamp"
        ],
        "results_map": {
            "result0": "2014"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT year from concert where concert_name  =  \"Super bootcamp\" | 2014 ",
        "query_w_results_blank_res": "SELECT year from concert where concert_name  =  \"Super bootcamp\" | result0 ",
        "query_toks_w_results": [
            "select",
            "year",
            "from",
            "concert",
            "where",
            "concert_name",
            "=",
            "\"super",
            "bootcamp\"",
            "2014"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "year",
            "from",
            "concert",
            "where",
            "concert_name",
            "=",
            "\"super",
            "bootcamp\"",
            "result0"
        ],
        "response_blank_res": "result0 is the year of the concert with a name Super bootcamp",
        "response_toks_blank_res": [
            "result0",
            "is",
            "the",
            "year",
            "of",
            "the",
            "concert",
            "with",
            "a",
            "name",
            "Super",
            "bootcamp"
        ]
    },
    {
        "database_id": "concert_singer",
        "query": "SELECT year from concert where concert_name  =  \"Home Visits\"",
        "query_toks": [
            "select",
            "year",
            "from",
            "concert",
            "where",
            "concert_name",
            "=",
            "\"home",
            "visits\""
        ],
        "results_raw": [
            [
                "Year"
            ],
            [
                "2015"
            ]
        ],
        "response": "2015 is the year of the concert with a name Home Visits",
        "response_toks": [
            "2015",
            "is",
            "the",
            "year",
            "of",
            "the",
            "concert",
            "with",
            "a",
            "name",
            "Home",
            "Visits"
        ],
        "results_map": {
            "result0": "2015"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT year from concert where concert_name  =  \"Home Visits\" | 2015 ",
        "query_w_results_blank_res": "SELECT year from concert where concert_name  =  \"Home Visits\" | result0 ",
        "query_toks_w_results": [
            "select",
            "year",
            "from",
            "concert",
            "where",
            "concert_name",
            "=",
            "\"home",
            "visits\"",
            "2015"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "year",
            "from",
            "concert",
            "where",
            "concert_name",
            "=",
            "\"home",
            "visits\"",
            "result0"
        ],
        "response_blank_res": "result0 is the year of the concert with a name Home Visits",
        "response_toks_blank_res": [
            "result0",
            "is",
            "the",
            "year",
            "of",
            "the",
            "concert",
            "with",
            "a",
            "name",
            "Home",
            "Visits"
        ]
    },
    {
        "database_id": "concert_singer",
        "query": "SELECT concert_name FROM concert WHERE YEAR   =   2014 OR YEAR   =   2015",
        "query_toks": [
            "select",
            "concert_name",
            "from",
            "concert",
            "where",
            "year",
            "=",
            "2014",
            "or",
            "year",
            "=",
            "2015"
        ],
        "results_raw": [
            [
                "concert_Name"
            ],
            [
                "Auditions"
            ],
            [
                "Super bootcamp"
            ],
            [
                "Home Visits"
            ]
        ],
        "response": "Yes. There are other concerts other than those with names of Auditions, Super bootcamp, and Home Visits in year 2014 or 2015",
        "response_toks": [
            "Yes",
            ".",
            "There",
            "are",
            "other",
            "concerts",
            "other",
            "than",
            "those",
            "with",
            "names",
            "of",
            "Auditions",
            ",",
            "Super",
            "bootcamp",
            ",",
            "and",
            "Home",
            "Visits",
            "in",
            "year",
            "2014",
            "or",
            "2015"
        ],
        "results_map": {
            "result0": "Auditions"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT concert_name FROM concert WHERE YEAR   =   2014 OR YEAR   =   2015 | Auditions ",
        "query_w_results_blank_res": "SELECT concert_name FROM concert WHERE YEAR   =   2014 OR YEAR   =   2015 | result0 ",
        "query_toks_w_results": [
            "select",
            "concert_name",
            "from",
            "concert",
            "where",
            "year",
            "=",
            "2014",
            "or",
            "year",
            "=",
            "2015",
            "Auditions"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "concert_name",
            "from",
            "concert",
            "where",
            "year",
            "=",
            "2014",
            "or",
            "year",
            "=",
            "2015",
            "result0"
        ],
        "response_blank_res": "Yes . There are other concerts other than those with names of result0 , Super bootcamp , and Home Visits in year 2014 or 2015",
        "response_toks_blank_res": [
            "Yes",
            ".",
            "There",
            "are",
            "other",
            "concerts",
            "other",
            "than",
            "those",
            "with",
            "names",
            "of",
            "result0",
            ",",
            "Super",
            "bootcamp",
            ",",
            "and",
            "Home",
            "Visits",
            "in",
            "year",
            "2014",
            "or",
            "2015"
        ]
    },
    {
        "database_id": "concert_singer",
        "query": "SELECT count ( * )  FROM concert WHERE YEAR   =   2014 OR YEAR   =   2015",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "concert",
            "where",
            "year",
            "=",
            "2014",
            "or",
            "year",
            "=",
            "2015"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                6
            ]
        ],
        "response": "There were 6 concerts in year 2014 or 2015",
        "response_toks": [
            "There",
            "were",
            "6",
            "concerts",
            "in",
            "year",
            "2014",
            "or",
            "2015"
        ],
        "results_map": {
            "result0": "6"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM concert WHERE YEAR   =   2014 OR YEAR   =   2015 | 6 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM concert WHERE YEAR   =   2014 OR YEAR   =   2015 | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "concert",
            "where",
            "year",
            "=",
            "2014",
            "or",
            "year",
            "=",
            "2015",
            "6"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "concert",
            "where",
            "year",
            "=",
            "2014",
            "or",
            "year",
            "=",
            "2015",
            "result0"
        ],
        "response_blank_res": "There were result0 concerts in year 2014 or 2015",
        "response_toks_blank_res": [
            "There",
            "were",
            "result0",
            "concerts",
            "in",
            "year",
            "2014",
            "or",
            "2015"
        ]
    },
    {
        "database_id": "concert_singer",
        "query": "SELECT count ( * )  FROM concert WHERE YEAR   =   2014",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "concert",
            "where",
            "year",
            "=",
            "2014"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                3
            ]
        ],
        "response": "There were 3 concerts in year 2014",
        "response_toks": [
            "There",
            "were",
            "3",
            "concerts",
            "in",
            "year",
            "2014"
        ],
        "results_map": {
            "result0": "3"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM concert WHERE YEAR   =   2014 | 3 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM concert WHERE YEAR   =   2014 | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "concert",
            "where",
            "year",
            "=",
            "2014",
            "3"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "concert",
            "where",
            "year",
            "=",
            "2014",
            "result0"
        ],
        "response_blank_res": "There were result0 concerts in year 2014",
        "response_toks_blank_res": [
            "There",
            "were",
            "result0",
            "concerts",
            "in",
            "year",
            "2014"
        ]
    },
    {
        "database_id": "concert_singer",
        "query": "SELECT count ( * )  FROM concert WHERE YEAR   =   2015",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "concert",
            "where",
            "year",
            "=",
            "2015"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                3
            ]
        ],
        "response": "There were 3 concerts in year 2015",
        "response_toks": [
            "There",
            "were",
            "3",
            "concerts",
            "in",
            "year",
            "2015"
        ],
        "results_map": {
            "result0": "3"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM concert WHERE YEAR   =   2015 | 3 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM concert WHERE YEAR   =   2015 | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "concert",
            "where",
            "year",
            "=",
            "2015",
            "3"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "concert",
            "where",
            "year",
            "=",
            "2015",
            "result0"
        ],
        "response_blank_res": "There were result0 concerts in year 2015",
        "response_toks_blank_res": [
            "There",
            "were",
            "result0",
            "concerts",
            "in",
            "year",
            "2015"
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT distinct tourney_name FROM matches",
        "query_toks": [
            "select",
            "distinct",
            "tourney_name",
            "from",
            "matches"
        ],
        "results_raw": [
            [
                "tourney_name"
            ],
            [
                "WTA Championships"
            ],
            [
                "Auckland"
            ],
            [
                "Brisbane"
            ]
        ],
        "response": "The names of the different tourneys are shown in the result table.",
        "response_toks": [
            "The",
            "names",
            "of",
            "the",
            "different",
            "tourneys",
            "are",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT distinct tourney_name FROM matches",
        "query_w_results_blank_res": "SELECT distinct tourney_name FROM matches",
        "query_toks_w_results": [
            "select",
            "distinct",
            "tourney_name",
            "from",
            "matches"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "tourney_name",
            "from",
            "matches"
        ],
        "response_blank_res": "The names of the different tourneys are shown in the result table .",
        "response_toks_blank_res": [
            "The",
            "names",
            "of",
            "the",
            "different",
            "tourneys",
            "are",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count ( * )   >  10",
        "query_toks": [
            "select",
            "tourney_name",
            "from",
            "matches",
            "group",
            "by",
            "tourney_name",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "10"
        ],
        "results_raw": [
            [
                "tourney_name"
            ],
            [
                "Australian Open"
            ],
            [
                "Cincinnati"
            ],
            [
                "French Open"
            ]
        ],
        "response": "Yes, the names of the tourneys with more than 10 matches are shown in the result table.",
        "response_toks": [
            "Yes",
            ",",
            "the",
            "names",
            "of",
            "the",
            "tourneys",
            "with",
            "more",
            "than",
            "10",
            "matches",
            "are",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count ( * )   >  10",
        "query_w_results_blank_res": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count ( * )   >  10",
        "query_toks_w_results": [
            "select",
            "tourney_name",
            "from",
            "matches",
            "group",
            "by",
            "tourney_name",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "10"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "tourney_name",
            "from",
            "matches",
            "group",
            "by",
            "tourney_name",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "10"
        ],
        "response_blank_res": "Yes , the names of the tourneys with more than 10 matches are shown in the result table .",
        "response_toks_blank_res": [
            "Yes",
            ",",
            "the",
            "names",
            "of",
            "the",
            "tourneys",
            "with",
            "more",
            "than",
            "10",
            "matches",
            "are",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count ( * )   >  10",
        "query_toks": [
            "select",
            "tourney_name",
            "from",
            "matches",
            "group",
            "by",
            "tourney_name",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "10"
        ],
        "results_raw": [
            [
                "tourney_name"
            ],
            [
                "Australian Open"
            ],
            [
                "Cincinnati"
            ],
            [
                "French Open"
            ]
        ],
        "response": "Yes, the names of the tourneys with more than 10 matches are shown in the result table.",
        "response_toks": [
            "Yes",
            ",",
            "the",
            "names",
            "of",
            "the",
            "tourneys",
            "with",
            "more",
            "than",
            "10",
            "matches",
            "are",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count ( * )   >  10",
        "query_w_results_blank_res": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count ( * )   >  10",
        "query_toks_w_results": [
            "select",
            "tourney_name",
            "from",
            "matches",
            "group",
            "by",
            "tourney_name",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "10"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "tourney_name",
            "from",
            "matches",
            "group",
            "by",
            "tourney_name",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "10"
        ],
        "response_blank_res": "Yes , the names of the tourneys with more than 10 matches are shown in the result table .",
        "response_toks_blank_res": [
            "Yes",
            ",",
            "the",
            "names",
            "of",
            "the",
            "tourneys",
            "with",
            "more",
            "than",
            "10",
            "matches",
            "are",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT count ( * )   from students",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "students"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                15
            ]
        ],
        "response": "There are 15  graduates.",
        "response_toks": [
            "There",
            "are",
            "15",
            "graduates",
            "."
        ],
        "results_map": {
            "result0": "15"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )   from students | 15 ",
        "query_w_results_blank_res": "SELECT count ( * )   from students | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "students",
            "15"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "students",
            "result0"
        ],
        "response_blank_res": "There are result0 graduates .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "graduates",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT distinct date_left from students",
        "query_toks": [
            "select",
            "distinct",
            "date_left",
            "from",
            "students"
        ],
        "results_raw": [
            [
                "date_left"
            ],
            [
                "1971-05-17 19:28:49"
            ],
            [
                "2013-10-05 17:41:28"
            ],
            [
                "2007-03-31 09:53:19"
            ]
        ],
        "response": "Yes, the unique date lefts are shown in the result table.",
        "response_toks": [
            "Yes",
            ",",
            "the",
            "unique",
            "date",
            "lefts",
            "are",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT distinct date_left from students",
        "query_w_results_blank_res": "SELECT distinct date_left from students",
        "query_toks_w_results": [
            "select",
            "distinct",
            "date_left",
            "from",
            "students"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "date_left",
            "from",
            "students"
        ],
        "response_blank_res": "Yes , the unique date lefts are shown in the result table .",
        "response_toks_blank_res": [
            "Yes",
            ",",
            "the",
            "unique",
            "date",
            "lefts",
            "are",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
        "query_toks": [
            "select",
            "first_name",
            ",",
            "middle_name",
            ",",
            "last_name",
            "from",
            "students",
            "order",
            "by",
            "date_left",
            "asc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "first_name",
                "middle_name",
                "last_name"
            ],
            [
                "Timmothy",
                "Anna",
                "Ward"
            ]
        ],
        "response": "The first name, middle name and last name of the earliest graduate of the school is shown in the result table.",
        "response_toks": [
            "The",
            "first",
            "name",
            ",",
            "middle",
            "name",
            "and",
            "last",
            "name",
            "of",
            "the",
            "earliest",
            "graduate",
            "of",
            "the",
            "school",
            "is",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
        "query_w_results_blank_res": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
        "query_toks_w_results": [
            "select",
            "first_name",
            ",",
            "middle_name",
            ",",
            "last_name",
            "from",
            "students",
            "order",
            "by",
            "date_left",
            "asc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "first_name",
            ",",
            "middle_name",
            ",",
            "last_name",
            "from",
            "students",
            "order",
            "by",
            "date_left",
            "asc",
            "limit",
            "1"
        ],
        "response_blank_res": "The first name , middle name and last name of the earliest graduate of the school is shown in the result table .",
        "response_toks_blank_res": [
            "The",
            "first",
            "name",
            ",",
            "middle",
            "name",
            "and",
            "last",
            "name",
            "of",
            "the",
            "earliest",
            "graduate",
            "of",
            "the",
            "school",
            "is",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT SourceAirport FROM Flights WHERE FlightNo = '28'",
        "query_toks": [
            "select",
            "sourceairport",
            "from",
            "flights",
            "where",
            "flightno",
            "=",
            "'28'"
        ],
        "results_raw": [
            [
                "SourceAirport"
            ],
            [
                " APG"
            ],
            [
                " ABQ"
            ]
        ],
        "response": "The source airports of the flight whose number is 28 are \"APG\" and \"ABQ\".",
        "response_toks": [
            "The",
            "source",
            "airports",
            "of",
            "the",
            "flight",
            "whose",
            "number",
            "is",
            "28",
            "are",
            "``",
            "APG",
            "''",
            "and",
            "``",
            "ABQ",
            "''",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT SourceAirport FROM Flights WHERE FlightNo = '28'",
        "query_w_results_blank_res": "SELECT SourceAirport FROM Flights WHERE FlightNo = '28'",
        "query_toks_w_results": [
            "select",
            "sourceairport",
            "from",
            "flights",
            "where",
            "flightno",
            "=",
            "'28'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "sourceairport",
            "from",
            "flights",
            "where",
            "flightno",
            "=",
            "'28'"
        ],
        "response_blank_res": "The source airports of the flight whose number is 28 are `` APG '' and `` ABQ '' .",
        "response_toks_blank_res": [
            "The",
            "source",
            "airports",
            "of",
            "the",
            "flight",
            "whose",
            "number",
            "is",
            "28",
            "are",
            "``",
            "APG",
            "''",
            "and",
            "``",
            "ABQ",
            "''",
            "."
        ]
    },
    {
        "database_id": "flight_2",
        "query": "select city from airports where airportcode = 'APG'",
        "query_toks": [
            "select",
            "city",
            "from",
            "airports",
            "where",
            "airportcode",
            "=",
            "'apg'"
        ],
        "results_raw": [
            [
                "City"
            ],
            [
                "Aberdeen "
            ]
        ],
        "response": "The city with the airport code \"APG\" is \"Aberdeen\".",
        "response_toks": [
            "The",
            "city",
            "with",
            "the",
            "airport",
            "code",
            "``",
            "APG",
            "''",
            "is",
            "``",
            "Aberdeen",
            "''",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "select city from airports where airportcode = 'APG'",
        "query_w_results_blank_res": "select city from airports where airportcode = 'APG'",
        "query_toks_w_results": [
            "select",
            "city",
            "from",
            "airports",
            "where",
            "airportcode",
            "=",
            "'apg'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "city",
            "from",
            "airports",
            "where",
            "airportcode",
            "=",
            "'apg'"
        ],
        "response_blank_res": "The city with the airport code `` APG '' is `` Aberdeen '' .",
        "response_toks_blank_res": [
            "The",
            "city",
            "with",
            "the",
            "airport",
            "code",
            "``",
            "APG",
            "''",
            "is",
            "``",
            "Aberdeen",
            "''",
            "."
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN  ( SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights ) ",
        "query_toks": [
            "select",
            "airportname",
            "from",
            "airports",
            "where",
            "airportcode",
            "not",
            "in",
            "(",
            "select",
            "sourceairport",
            "from",
            "flights",
            "union",
            "select",
            "destairport",
            "from",
            "flights",
            ")"
        ],
        "results_raw": [
            [
                "AirportName"
            ],
            [
                "Phillips AAF "
            ],
            [
                "Municipal "
            ],
            [
                "Dyess AFB "
            ]
        ],
        "response": "Here is the result table shows the names of airports which do not have any flight in and out. For example, the airport \"Phillips AAF\" does not have any flight in and out.",
        "response_toks": [
            "Here",
            "is",
            "the",
            "result",
            "table",
            "shows",
            "the",
            "names",
            "of",
            "airports",
            "which",
            "do",
            "not",
            "have",
            "any",
            "flight",
            "in",
            "and",
            "out",
            ".",
            "For",
            "example",
            ",",
            "the",
            "airport",
            "``",
            "Phillips",
            "AAF",
            "''",
            "does",
            "not",
            "have",
            "any",
            "flight",
            "in",
            "and",
            "out",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN  ( SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights ) ",
        "query_w_results_blank_res": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN  ( SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights ) ",
        "query_toks_w_results": [
            "select",
            "airportname",
            "from",
            "airports",
            "where",
            "airportcode",
            "not",
            "in",
            "(",
            "select",
            "sourceairport",
            "from",
            "flights",
            "union",
            "select",
            "destairport",
            "from",
            "flights",
            ")"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "airportname",
            "from",
            "airports",
            "where",
            "airportcode",
            "not",
            "in",
            "(",
            "select",
            "sourceairport",
            "from",
            "flights",
            "union",
            "select",
            "destairport",
            "from",
            "flights",
            ")"
        ],
        "response_blank_res": "Here is the result table shows the names of airports which do not have any flight in and out . For example , the airport `` Phillips AAF '' does not have any flight in and out .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "result",
            "table",
            "shows",
            "the",
            "names",
            "of",
            "airports",
            "which",
            "do",
            "not",
            "have",
            "any",
            "flight",
            "in",
            "and",
            "out",
            ".",
            "For",
            "example",
            ",",
            "the",
            "airport",
            "``",
            "Phillips",
            "AAF",
            "''",
            "does",
            "not",
            "have",
            "any",
            "flight",
            "in",
            "and",
            "out",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT * FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
        "query_toks": [
            "select",
            "*",
            "from",
            "transcripts",
            "order",
            "by",
            "transcript_date",
            "asc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "transcript_id",
                "transcript_date",
                "other_details"
            ],
            [
                8,
                "1975-05-06 12:04:47",
                null
            ]
        ],
        "response": "the result table shows the info of the first transcript released.",
        "response_toks": [
            "the",
            "result",
            "table",
            "shows",
            "the",
            "info",
            "of",
            "the",
            "first",
            "transcript",
            "released",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT * FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
        "query_w_results_blank_res": "SELECT * FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
        "query_toks_w_results": [
            "select",
            "*",
            "from",
            "transcripts",
            "order",
            "by",
            "transcript_date",
            "asc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "*",
            "from",
            "transcripts",
            "order",
            "by",
            "transcript_date",
            "asc",
            "limit",
            "1"
        ],
        "response_blank_res": "the result table shows the info of the first transcript released .",
        "response_toks_blank_res": [
            "the",
            "result",
            "table",
            "shows",
            "the",
            "info",
            "of",
            "the",
            "first",
            "transcript",
            "released",
            "."
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT DISTINCT winner_name  FROM matches ORDER BY winner_age LIMIT 3",
        "query_toks": [
            "select",
            "distinct",
            "winner_name",
            "from",
            "matches",
            "order",
            "by",
            "winner_age",
            "limit",
            "3"
        ],
        "results_raw": [
            [
                "winner_name"
            ],
            [
                "Madison Keys"
            ],
            [
                "Elina Svitolina"
            ],
            [
                "Garbine Muguruza"
            ]
        ],
        "response": "The winner name of 3 youngest winners are  Madison Keys,  Madison Keys  and Madison Keys",
        "response_toks": [
            "The",
            "winner",
            "name",
            "of",
            "3",
            "youngest",
            "winners",
            "are",
            "Madison",
            "Keys",
            ",",
            "Madison",
            "Keys",
            "and",
            "Madison",
            "Keys"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT DISTINCT winner_name  FROM matches ORDER BY winner_age LIMIT 3",
        "query_w_results_blank_res": "SELECT DISTINCT winner_name  FROM matches ORDER BY winner_age LIMIT 3",
        "query_toks_w_results": [
            "select",
            "distinct",
            "winner_name",
            "from",
            "matches",
            "order",
            "by",
            "winner_age",
            "limit",
            "3"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "winner_name",
            "from",
            "matches",
            "order",
            "by",
            "winner_age",
            "limit",
            "3"
        ],
        "response_blank_res": "The winner name of 3 youngest winners are Madison Keys , Madison Keys and Madison Keys",
        "response_toks_blank_res": [
            "The",
            "winner",
            "name",
            "of",
            "3",
            "youngest",
            "winners",
            "are",
            "Madison",
            "Keys",
            ",",
            "Madison",
            "Keys",
            "and",
            "Madison",
            "Keys"
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT loser_rank_points FROM matches ORDER BY winner_age LIMIT 3",
        "query_toks": [
            "select",
            "loser_rank_points",
            "from",
            "matches",
            "order",
            "by",
            "winner_age",
            "limit",
            "3"
        ],
        "results_raw": [
            [
                "loser_rank_points"
            ],
            [
                2341
            ],
            [
                3540
            ],
            [
                2695
            ]
        ],
        "response": "Here are the points of the 3 youngest winners.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "points",
            "of",
            "the",
            "3",
            "youngest",
            "winners",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT loser_rank_points FROM matches ORDER BY winner_age LIMIT 3",
        "query_w_results_blank_res": "SELECT loser_rank_points FROM matches ORDER BY winner_age LIMIT 3",
        "query_toks_w_results": [
            "select",
            "loser_rank_points",
            "from",
            "matches",
            "order",
            "by",
            "winner_age",
            "limit",
            "3"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "loser_rank_points",
            "from",
            "matches",
            "order",
            "by",
            "winner_age",
            "limit",
            "3"
        ],
        "response_blank_res": "Here are the points of the 3 youngest winners .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "points",
            "of",
            "the",
            "3",
            "youngest",
            "winners",
            "."
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT winner_age FROM matches ORDER BY winner_age LIMIT 3",
        "query_toks": [
            "select",
            "winner_age",
            "from",
            "matches",
            "order",
            "by",
            "winner_age",
            "limit",
            "3"
        ],
        "results_raw": [
            [
                "winner_age"
            ],
            [
                20.917180013699998
            ],
            [
                21.0896646133
            ],
            [
                21.3196440794
            ]
        ],
        "response": "The ages of 3 youngest winners table are here.",
        "response_toks": [
            "The",
            "ages",
            "of",
            "3",
            "youngest",
            "winners",
            "table",
            "are",
            "here",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT winner_age FROM matches ORDER BY winner_age LIMIT 3",
        "query_w_results_blank_res": "SELECT winner_age FROM matches ORDER BY winner_age LIMIT 3",
        "query_toks_w_results": [
            "select",
            "winner_age",
            "from",
            "matches",
            "order",
            "by",
            "winner_age",
            "limit",
            "3"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "winner_age",
            "from",
            "matches",
            "order",
            "by",
            "winner_age",
            "limit",
            "3"
        ],
        "response_blank_res": "The ages of 3 youngest winners table are here .",
        "response_toks_blank_res": [
            "The",
            "ages",
            "of",
            "3",
            "youngest",
            "winners",
            "table",
            "are",
            "here",
            "."
        ]
    },
    {
        "database_id": "network_1",
        "query": "SELECT count ( * )  FROM Friend",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "friend"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                20
            ]
        ],
        "response": "There are 20 friends in the table.",
        "response_toks": [
            "There",
            "are",
            "20",
            "friends",
            "in",
            "the",
            "table",
            "."
        ],
        "results_map": {
            "result0": "20"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM Friend | 20 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM Friend | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "friend",
            "20"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "friend",
            "result0"
        ],
        "response_blank_res": "There are result0 friends in the table .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "friends",
            "in",
            "the",
            "table",
            "."
        ]
    },
    {
        "database_id": "network_1",
        "query": "SELECT avg ( grade )  FROM Highschooler",
        "query_toks": [
            "select",
            "avg",
            "(",
            "grade",
            ")",
            "from",
            "highschooler"
        ],
        "results_raw": [
            [
                "avg(grade)"
            ],
            [
                10.5
            ]
        ],
        "response": "The average grade of entries in the Highschooler table is 10.5.",
        "response_toks": [
            "The",
            "average",
            "grade",
            "of",
            "entries",
            "in",
            "the",
            "Highschooler",
            "table",
            "is",
            "10.5",
            "."
        ],
        "results_map": {
            "result0": "10.5"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT avg ( grade )  FROM Highschooler | 10.5 ",
        "query_w_results_blank_res": "SELECT avg ( grade )  FROM Highschooler | result0 ",
        "query_toks_w_results": [
            "select",
            "avg",
            "(",
            "grade",
            ")",
            "from",
            "highschooler",
            "10.5"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "avg",
            "(",
            "grade",
            ")",
            "from",
            "highschooler",
            "result0"
        ],
        "response_blank_res": "The average grade of entries in the Highschooler table is result0 .",
        "response_toks_blank_res": [
            "The",
            "average",
            "grade",
            "of",
            "entries",
            "in",
            "the",
            "Highschooler",
            "table",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "network_1",
        "query": "SELECT DISTINCT name  FROM Highschooler",
        "query_toks": [
            "select",
            "distinct",
            "name",
            "from",
            "highschooler"
        ],
        "results_raw": [
            [
                "name"
            ],
            [
                "Jordan"
            ],
            [
                "Gabriel"
            ],
            [
                "Tiffany"
            ]
        ],
        "response": "Here are all the distinct names of entries in the Highschooler table.",
        "response_toks": [
            "Here",
            "are",
            "all",
            "the",
            "distinct",
            "names",
            "of",
            "entries",
            "in",
            "the",
            "Highschooler",
            "table",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT DISTINCT name  FROM Highschooler",
        "query_w_results_blank_res": "SELECT DISTINCT name  FROM Highschooler",
        "query_toks_w_results": [
            "select",
            "distinct",
            "name",
            "from",
            "highschooler"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "name",
            "from",
            "highschooler"
        ],
        "response_blank_res": "Here are all the distinct names of entries in the Highschooler table .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "all",
            "the",
            "distinct",
            "names",
            "of",
            "entries",
            "in",
            "the",
            "Highschooler",
            "table",
            "."
        ]
    },
    {
        "database_id": "poker_player",
        "query": "select count ( * )  from poker_player",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "poker_player"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                5
            ]
        ],
        "response": "There are 5 poker players.",
        "response_toks": [
            "There",
            "are",
            "5",
            "poker",
            "players",
            "."
        ],
        "results_map": {
            "result0": "5"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "select count ( * )  from poker_player | 5 ",
        "query_w_results_blank_res": "select count ( * )  from poker_player | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "poker_player",
            "5"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "poker_player",
            "result0"
        ],
        "response_blank_res": "There are result0 poker players .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "poker",
            "players",
            "."
        ]
    },
    {
        "database_id": "poker_player",
        "query": "SELECT count ( * )  FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID WHERE T2.Earnings  >  300000",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "people",
            "as",
            "t1",
            "join",
            "poker_player",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "people_id",
            "=",
            "t2",
            ".",
            "people_id",
            "where",
            "t2",
            ".",
            "earnings",
            ">",
            "300000"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                2
            ]
        ],
        "response": "There are 2 poker players who have an earning more than 300000",
        "response_toks": [
            "There",
            "are",
            "2",
            "poker",
            "players",
            "who",
            "have",
            "an",
            "earning",
            "more",
            "than",
            "300000"
        ],
        "results_map": {
            "result0": "2"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID WHERE T2.Earnings  >  300000 | 2 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID WHERE T2.Earnings  >  300000 | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "people",
            "as",
            "t1",
            "join",
            "poker_player",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "people_id",
            "=",
            "t2",
            ".",
            "people_id",
            "where",
            "t2",
            ".",
            "earnings",
            ">",
            "300000",
            "2"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "people",
            "as",
            "t1",
            "join",
            "poker_player",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "people_id",
            "=",
            "t2",
            ".",
            "people_id",
            "where",
            "t2",
            ".",
            "earnings",
            ">",
            "300000",
            "result0"
        ],
        "response_blank_res": "There are result0 poker players who have an earning more than 300000",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "poker",
            "players",
            "who",
            "have",
            "an",
            "earning",
            "more",
            "than",
            "300000"
        ]
    },
    {
        "database_id": "poker_player",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID WHERE T2.Earnings  >  300000",
        "query_toks": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "people",
            "as",
            "t1",
            "join",
            "poker_player",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "people_id",
            "=",
            "t2",
            ".",
            "people_id",
            "where",
            "t2",
            ".",
            "earnings",
            ">",
            "300000"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Aleksey Ostapenko"
            ],
            [
                "Maksim Botin"
            ]
        ],
        "response": "Here are the names of poker players who have an earning more than 300000",
        "response_toks": [
            "Here",
            "are",
            "the",
            "names",
            "of",
            "poker",
            "players",
            "who",
            "have",
            "an",
            "earning",
            "more",
            "than",
            "300000"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID WHERE T2.Earnings  >  300000",
        "query_w_results_blank_res": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID WHERE T2.Earnings  >  300000",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "people",
            "as",
            "t1",
            "join",
            "poker_player",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "people_id",
            "=",
            "t2",
            ".",
            "people_id",
            "where",
            "t2",
            ".",
            "earnings",
            ">",
            "300000"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "people",
            "as",
            "t1",
            "join",
            "poker_player",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "people_id",
            "=",
            "t2",
            ".",
            "people_id",
            "where",
            "t2",
            ".",
            "earnings",
            ">",
            "300000"
        ],
        "response_blank_res": "Here are the names of poker players who have an earning more than 300000",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "names",
            "of",
            "poker",
            "players",
            "who",
            "have",
            "an",
            "earning",
            "more",
            "than",
            "300000"
        ]
    },
    {
        "database_id": "museum_visit",
        "query": "SELECT count ( * )  from museum",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "museum"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                8
            ]
        ],
        "response": "There are 8 museums.",
        "response_toks": [
            "There",
            "are",
            "8",
            "museums",
            "."
        ],
        "results_map": {
            "result0": "8"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  from museum | 8 ",
        "query_w_results_blank_res": "SELECT count ( * )  from museum | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "museum",
            "8"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "museum",
            "result0"
        ],
        "response_blank_res": "There are result0 museums .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "museums",
            "."
        ]
    },
    {
        "database_id": "museum_visit",
        "query": "SELECT Num_of_Staff from museum",
        "query_toks": [
            "select",
            "num_of_staff",
            "from",
            "museum"
        ],
        "results_raw": [
            [
                "Num_of_Staff"
            ],
            [
                62
            ],
            [
                25
            ],
            [
                18
            ]
        ],
        "response": "The number of staff members in each museum is listed in the table.",
        "response_toks": [
            "The",
            "number",
            "of",
            "staff",
            "members",
            "in",
            "each",
            "museum",
            "is",
            "listed",
            "in",
            "the",
            "table",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Num_of_Staff from museum",
        "query_w_results_blank_res": "SELECT Num_of_Staff from museum",
        "query_toks_w_results": [
            "select",
            "num_of_staff",
            "from",
            "museum"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "num_of_staff",
            "from",
            "museum"
        ],
        "response_blank_res": "The number of staff members in each museum is listed in the table .",
        "response_toks_blank_res": [
            "The",
            "number",
            "of",
            "staff",
            "members",
            "in",
            "each",
            "museum",
            "is",
            "listed",
            "in",
            "the",
            "table",
            "."
        ]
    },
    {
        "database_id": "museum_visit",
        "query": "SELECT Museum_ID, Name from museum order by Num_of_Staff desc limit 1",
        "query_toks": [
            "select",
            "museum_id",
            ",",
            "name",
            "from",
            "museum",
            "order",
            "by",
            "num_of_staff",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Museum_ID",
                "Name"
            ],
            [
                1,
                "Plaza Museum"
            ]
        ],
        "response": "The id and the name of the museum who has the most staff members is 1 and Plaza Museum.",
        "response_toks": [
            "The",
            "id",
            "and",
            "the",
            "name",
            "of",
            "the",
            "museum",
            "who",
            "has",
            "the",
            "most",
            "staff",
            "members",
            "is",
            "1",
            "and",
            "Plaza",
            "Museum",
            "."
        ],
        "results_map": {
            "result0": "1"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT Museum_ID, Name from museum order by Num_of_Staff desc limit 1 | 1 ",
        "query_w_results_blank_res": "SELECT Museum_ID, Name from museum order by Num_of_Staff desc limit 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "museum_id",
            ",",
            "name",
            "from",
            "museum",
            "order",
            "by",
            "num_of_staff",
            "desc",
            "limit",
            "1",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "museum_id",
            ",",
            "name",
            "from",
            "museum",
            "order",
            "by",
            "num_of_staff",
            "desc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "The id and the name of the museum who has the most staff members is result0 and Plaza Museum .",
        "response_toks_blank_res": [
            "The",
            "id",
            "and",
            "the",
            "name",
            "of",
            "the",
            "museum",
            "who",
            "has",
            "the",
            "most",
            "staff",
            "members",
            "is",
            "result0",
            "and",
            "Plaza",
            "Museum",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT count ( * )  FROM Students",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "students"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                15
            ]
        ],
        "response": "15 students in total there are on this list",
        "response_toks": [
            "15",
            "students",
            "in",
            "total",
            "there",
            "are",
            "on",
            "this",
            "list"
        ],
        "results_map": {
            "result0": "15"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM Students | 15 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM Students | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "students",
            "15"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "students",
            "result0"
        ],
        "response_blank_res": "result0 students in total there are on this list",
        "response_toks_blank_res": [
            "result0",
            "students",
            "in",
            "total",
            "there",
            "are",
            "on",
            "this",
            "list"
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT first_name,middle_name,last_name  FROM Students",
        "query_toks": [
            "select",
            "first_name",
            ",",
            "middle_name",
            ",",
            "last_name",
            "from",
            "students"
        ],
        "results_raw": [
            [
                "first_name",
                "middle_name",
                "last_name"
            ],
            [
                "Timmothy",
                "Anna",
                "Ward"
            ],
            [
                "Hobart",
                "Lorenz",
                "Balistreri"
            ],
            [
                "Warren",
                "Violet",
                "Gleichner"
            ]
        ],
        "response": "this shows the  first names, middle names of all 15 students",
        "response_toks": [
            "this",
            "shows",
            "the",
            "first",
            "names",
            ",",
            "middle",
            "names",
            "of",
            "all",
            "15",
            "students"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT first_name,middle_name,last_name  FROM Students",
        "query_w_results_blank_res": "SELECT first_name,middle_name,last_name  FROM Students",
        "query_toks_w_results": [
            "select",
            "first_name",
            ",",
            "middle_name",
            ",",
            "last_name",
            "from",
            "students"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "first_name",
            ",",
            "middle_name",
            ",",
            "last_name",
            "from",
            "students"
        ],
        "response_blank_res": "this shows the first names , middle names of all 15 students",
        "response_toks_blank_res": [
            "this",
            "shows",
            "the",
            "first",
            "names",
            ",",
            "middle",
            "names",
            "of",
            "all",
            "15",
            "students"
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT date_first_registered  FROM Students",
        "query_toks": [
            "select",
            "date_first_registered",
            "from",
            "students"
        ],
        "results_raw": [
            [
                "date_first_registered"
            ],
            [
                "1971-02-05 07:28:23"
            ],
            [
                "1976-10-26 02:33:06"
            ],
            [
                "2007-08-29 23:25:41"
            ]
        ],
        "response": "this shows the  \"date first registered\" information associated with each student",
        "response_toks": [
            "this",
            "shows",
            "the",
            "``",
            "date",
            "first",
            "registered",
            "''",
            "information",
            "associated",
            "with",
            "each",
            "student"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT date_first_registered  FROM Students",
        "query_w_results_blank_res": "SELECT date_first_registered  FROM Students",
        "query_toks_w_results": [
            "select",
            "date_first_registered",
            "from",
            "students"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "date_first_registered",
            "from",
            "students"
        ],
        "response_blank_res": "this shows the `` date first registered '' information associated with each student",
        "response_toks_blank_res": [
            "this",
            "shows",
            "the",
            "``",
            "date",
            "first",
            "registered",
            "''",
            "information",
            "associated",
            "with",
            "each",
            "student"
        ]
    },
    {
        "database_id": "pets_1",
        "query": "SELECT count ( StuID )  FROM student",
        "query_toks": [
            "select",
            "count",
            "(",
            "stuid",
            ")",
            "from",
            "student"
        ],
        "results_raw": [
            [
                "count(StuID)"
            ],
            [
                34
            ]
        ],
        "response": "there are 34 students in total",
        "response_toks": [
            "there",
            "are",
            "34",
            "students",
            "in",
            "total"
        ],
        "results_map": {
            "result0": "34"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( StuID )  FROM student | 34 ",
        "query_w_results_blank_res": "SELECT count ( StuID )  FROM student | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "stuid",
            ")",
            "from",
            "student",
            "34"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "stuid",
            ")",
            "from",
            "student",
            "result0"
        ],
        "response_blank_res": "there are result0 students in total",
        "response_toks_blank_res": [
            "there",
            "are",
            "result0",
            "students",
            "in",
            "total"
        ]
    },
    {
        "database_id": "pets_1",
        "query": "SELECT Age  FROM student where LName = 'Smith'",
        "query_toks": [
            "select",
            "age",
            "from",
            "student",
            "where",
            "lname",
            "=",
            "'smith'"
        ],
        "results_raw": [
            [
                "Age"
            ],
            [
                18
            ],
            [
                20
            ]
        ],
        "response": "there are two students' last name is 'Smith'\uff0cTheir age is 18 and 20",
        "response_toks": [
            "there",
            "are",
            "two",
            "students",
            "'",
            "last",
            "name",
            "is",
            "'Smith'\uff0cTheir",
            "age",
            "is",
            "18",
            "and",
            "20"
        ],
        "results_map": {
            "result0": "18",
            "result1": "20"
        },
        "results_blank_res": "result0 result1 ",
        "query_w_results": "SELECT Age  FROM student where LName = 'Smith' | 18 20 ",
        "query_w_results_blank_res": "SELECT Age  FROM student where LName = 'Smith' | result0 result1 ",
        "query_toks_w_results": [
            "select",
            "age",
            "from",
            "student",
            "where",
            "lname",
            "=",
            "'smith'",
            "18",
            "20"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "age",
            "from",
            "student",
            "where",
            "lname",
            "=",
            "'smith'",
            "result0",
            "result1"
        ],
        "response_blank_res": "there are two students ' last name is 'Smith'\uff0cTheir age is result0 and result1",
        "response_toks_blank_res": [
            "there",
            "are",
            "two",
            "students",
            "'",
            "last",
            "name",
            "is",
            "'Smith'\uff0cTheir",
            "age",
            "is",
            "result0",
            "and",
            "result1"
        ]
    },
    {
        "database_id": "pets_1",
        "query": "SELECT T2.petid ,age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid WHERE T1.Lname   =   'Smith'",
        "query_toks": [
            "select",
            "t2",
            ".",
            "petid",
            ",",
            "age",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "where",
            "t1",
            ".",
            "lname",
            "=",
            "'smith'"
        ],
        "results_raw": [
            [
                "PetID",
                "Age"
            ],
            [
                2001,
                18
            ]
        ],
        "response": "Here are the pet id and age of students whose last name are \"Smith'",
        "response_toks": [
            "Here",
            "are",
            "the",
            "pet",
            "id",
            "and",
            "age",
            "of",
            "students",
            "whose",
            "last",
            "name",
            "are",
            "``",
            "Smith",
            "'"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T2.petid ,age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid WHERE T1.Lname   =   'Smith'",
        "query_w_results_blank_res": "SELECT T2.petid ,age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid WHERE T1.Lname   =   'Smith'",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "petid",
            ",",
            "age",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "where",
            "t1",
            ".",
            "lname",
            "=",
            "'smith'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "petid",
            ",",
            "age",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "where",
            "t1",
            ".",
            "lname",
            "=",
            "'smith'"
        ],
        "response_blank_res": "Here are the pet id and age of students whose last name are `` Smith '",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "pet",
            "id",
            "and",
            "age",
            "of",
            "students",
            "whose",
            "last",
            "name",
            "are",
            "``",
            "Smith",
            "'"
        ]
    },
    {
        "database_id": "pets_1",
        "query": "SELECT distinct T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid",
        "query_toks": [
            "select",
            "distinct",
            "t1",
            ".",
            "stuid",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid"
        ],
        "results_raw": [
            [
                "StuID"
            ],
            [
                1001
            ],
            [
                1002
            ]
        ],
        "response": "The list of all distinct student ids for students who have pets is shown in the result table.",
        "response_toks": [
            "The",
            "list",
            "of",
            "all",
            "distinct",
            "student",
            "ids",
            "for",
            "students",
            "who",
            "have",
            "pets",
            "is",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT distinct T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid",
        "query_w_results_blank_res": "SELECT distinct T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid",
        "query_toks_w_results": [
            "select",
            "distinct",
            "t1",
            ".",
            "stuid",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "t1",
            ".",
            "stuid",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid"
        ],
        "response_blank_res": "The list of all distinct student ids for students who have pets is shown in the result table .",
        "response_toks_blank_res": [
            "The",
            "list",
            "of",
            "all",
            "distinct",
            "student",
            "ids",
            "for",
            "students",
            "who",
            "have",
            "pets",
            "is",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ]
    },
    {
        "database_id": "pets_1",
        "query": "SELECT distinct T1.Fname, T1.Lname, T1.major, T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid",
        "query_toks": [
            "select",
            "distinct",
            "t1",
            ".",
            "fname",
            ",",
            "t1",
            ".",
            "lname",
            ",",
            "t1",
            ".",
            "major",
            ",",
            "t1",
            ".",
            "age",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid"
        ],
        "results_raw": [
            [
                "Fname",
                "LName",
                "Major",
                "Age"
            ],
            [
                "Linda",
                "Smith",
                600,
                18
            ],
            [
                "Tracy",
                "Kim",
                600,
                19
            ]
        ],
        "response": "The first name, last name, major and age of the two students with pets is shown in the result table.",
        "response_toks": [
            "The",
            "first",
            "name",
            ",",
            "last",
            "name",
            ",",
            "major",
            "and",
            "age",
            "of",
            "the",
            "two",
            "students",
            "with",
            "pets",
            "is",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT distinct T1.Fname, T1.Lname, T1.major, T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid",
        "query_w_results_blank_res": "SELECT distinct T1.Fname, T1.Lname, T1.major, T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid",
        "query_toks_w_results": [
            "select",
            "distinct",
            "t1",
            ".",
            "fname",
            ",",
            "t1",
            ".",
            "lname",
            ",",
            "t1",
            ".",
            "major",
            ",",
            "t1",
            ".",
            "age",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "t1",
            ".",
            "fname",
            ",",
            "t1",
            ".",
            "lname",
            ",",
            "t1",
            ".",
            "major",
            ",",
            "t1",
            ".",
            "age",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid"
        ],
        "response_blank_res": "The first name , last name , major and age of the two students with pets is shown in the result table .",
        "response_toks_blank_res": [
            "The",
            "first",
            "name",
            ",",
            "last",
            "name",
            ",",
            "major",
            "and",
            "age",
            "of",
            "the",
            "two",
            "students",
            "with",
            "pets",
            "is",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ]
    },
    {
        "database_id": "pets_1",
        "query": "SELECT Fname, Lname, major, age FROM student WHERE stuid NOT IN  ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' ) ",
        "query_toks": [
            "select",
            "fname",
            ",",
            "lname",
            ",",
            "major",
            ",",
            "age",
            "from",
            "student",
            "where",
            "stuid",
            "not",
            "in",
            "(",
            "select",
            "t1",
            ".",
            "stuid",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "where",
            "t3",
            ".",
            "pettype",
            "=",
            "'cat'",
            ")"
        ],
        "results_raw": [
            [
                "Fname",
                "LName",
                "Major",
                "Age"
            ],
            [
                "Tracy",
                "Kim",
                600,
                19
            ],
            [
                "Shiela",
                "Jones",
                600,
                21
            ],
            [
                "Dinesh",
                "Kumar",
                600,
                20
            ]
        ],
        "response": "The first name, last name, major and age of the student(s) who do not have a cat are shown in the result table.",
        "response_toks": [
            "The",
            "first",
            "name",
            ",",
            "last",
            "name",
            ",",
            "major",
            "and",
            "age",
            "of",
            "the",
            "student",
            "(",
            "s",
            ")",
            "who",
            "do",
            "not",
            "have",
            "a",
            "cat",
            "are",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Fname, Lname, major, age FROM student WHERE stuid NOT IN  ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' ) ",
        "query_w_results_blank_res": "SELECT Fname, Lname, major, age FROM student WHERE stuid NOT IN  ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' ) ",
        "query_toks_w_results": [
            "select",
            "fname",
            ",",
            "lname",
            ",",
            "major",
            ",",
            "age",
            "from",
            "student",
            "where",
            "stuid",
            "not",
            "in",
            "(",
            "select",
            "t1",
            ".",
            "stuid",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "where",
            "t3",
            ".",
            "pettype",
            "=",
            "'cat'",
            ")"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "fname",
            ",",
            "lname",
            ",",
            "major",
            ",",
            "age",
            "from",
            "student",
            "where",
            "stuid",
            "not",
            "in",
            "(",
            "select",
            "t1",
            ".",
            "stuid",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "where",
            "t3",
            ".",
            "pettype",
            "=",
            "'cat'",
            ")"
        ],
        "response_blank_res": "The first name , last name , major and age of the student ( s ) who do not have a cat are shown in the result table .",
        "response_toks_blank_res": [
            "The",
            "first",
            "name",
            ",",
            "last",
            "name",
            ",",
            "major",
            "and",
            "age",
            "of",
            "the",
            "student",
            "(",
            "s",
            ")",
            "who",
            "do",
            "not",
            "have",
            "a",
            "cat",
            "are",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT count ( * )  FROM Dogs",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "dogs"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                15
            ]
        ],
        "response": "There are 15 dogs in total.",
        "response_toks": [
            "There",
            "are",
            "15",
            "dogs",
            "in",
            "total",
            "."
        ],
        "results_map": {
            "result0": "15"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM Dogs | 15 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM Dogs | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "dogs",
            "15"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "dogs",
            "result0"
        ],
        "response_blank_res": "There are result0 dogs in total .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "dogs",
            "in",
            "total",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT age FROM Dogs where name  =  \"Kacey\"",
        "query_toks": [
            "select",
            "age",
            "from",
            "dogs",
            "where",
            "name",
            "=",
            "\"kacey\""
        ],
        "results_raw": [
            [
                "age"
            ],
            [
                "6"
            ]
        ],
        "response": "The dog named Kacey has an age of 6",
        "response_toks": [
            "The",
            "dog",
            "named",
            "Kacey",
            "has",
            "an",
            "age",
            "of",
            "6"
        ],
        "results_map": {
            "result0": "6"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT age FROM Dogs where name  =  \"Kacey\" | 6 ",
        "query_w_results_blank_res": "SELECT age FROM Dogs where name  =  \"Kacey\" | result0 ",
        "query_toks_w_results": [
            "select",
            "age",
            "from",
            "dogs",
            "where",
            "name",
            "=",
            "\"kacey\"",
            "6"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "age",
            "from",
            "dogs",
            "where",
            "name",
            "=",
            "\"kacey\"",
            "result0"
        ],
        "response_blank_res": "The dog named Kacey has an age of result0",
        "response_toks_blank_res": [
            "The",
            "dog",
            "named",
            "Kacey",
            "has",
            "an",
            "age",
            "of",
            "result0"
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT name FROM Dogs order by weight desc limit 1",
        "query_toks": [
            "select",
            "name",
            "from",
            "dogs",
            "order",
            "by",
            "weight",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "name"
            ],
            [
                "Merritt"
            ]
        ],
        "response": "Merritt is the name of the dog with the highest weight",
        "response_toks": [
            "Merritt",
            "is",
            "the",
            "name",
            "of",
            "the",
            "dog",
            "with",
            "the",
            "highest",
            "weight"
        ],
        "results_map": {
            "result0": "Merritt"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT name FROM Dogs order by weight desc limit 1 | Merritt ",
        "query_w_results_blank_res": "SELECT name FROM Dogs order by weight desc limit 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "dogs",
            "order",
            "by",
            "weight",
            "desc",
            "limit",
            "1",
            "Merritt"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "dogs",
            "order",
            "by",
            "weight",
            "desc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "result0 is the name of the dog with the highest weight",
        "response_toks_blank_res": [
            "result0",
            "is",
            "the",
            "name",
            "of",
            "the",
            "dog",
            "with",
            "the",
            "highest",
            "weight"
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT size_code FROM Dogs where breed_code  =  \"BUL\"",
        "query_toks": [
            "select",
            "size_code",
            "from",
            "dogs",
            "where",
            "breed_code",
            "=",
            "\"bul\""
        ],
        "results_raw": [
            [
                "size_code"
            ],
            [
                "LGE"
            ],
            [
                "MED"
            ],
            [
                "MED"
            ]
        ],
        "response": "Here are the size codes of dogs with a breed code BUL",
        "response_toks": [
            "Here",
            "are",
            "the",
            "size",
            "codes",
            "of",
            "dogs",
            "with",
            "a",
            "breed",
            "code",
            "BUL"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT size_code FROM Dogs where breed_code  =  \"BUL\"",
        "query_w_results_blank_res": "SELECT size_code FROM Dogs where breed_code  =  \"BUL\"",
        "query_toks_w_results": [
            "select",
            "size_code",
            "from",
            "dogs",
            "where",
            "breed_code",
            "=",
            "\"bul\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "size_code",
            "from",
            "dogs",
            "where",
            "breed_code",
            "=",
            "\"bul\""
        ],
        "response_blank_res": "Here are the size codes of dogs with a breed code BUL",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "size",
            "codes",
            "of",
            "dogs",
            "with",
            "a",
            "breed",
            "code",
            "BUL"
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "query_toks": [
            "select",
            "name",
            "from",
            "country",
            "order",
            "by",
            "population",
            "asc",
            "limit",
            "3"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Antarctica"
            ],
            [
                "French Southern territories"
            ],
            [
                "Bouvet Island"
            ]
        ],
        "response": "The following table shows the names of the nations with the 3 lowest populations",
        "response_toks": [
            "The",
            "following",
            "table",
            "shows",
            "the",
            "names",
            "of",
            "the",
            "nations",
            "with",
            "the",
            "3",
            "lowest",
            "populations"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "query_w_results_blank_res": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "country",
            "order",
            "by",
            "population",
            "asc",
            "limit",
            "3"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "country",
            "order",
            "by",
            "population",
            "asc",
            "limit",
            "3"
        ],
        "response_blank_res": "The following table shows the names of the nations with the 3 lowest populations",
        "response_toks_blank_res": [
            "The",
            "following",
            "table",
            "shows",
            "the",
            "names",
            "of",
            "the",
            "nations",
            "with",
            "the",
            "3",
            "lowest",
            "populations"
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT Name FROM country ORDER BY surfacearea desc LIMIT 1",
        "query_toks": [
            "select",
            "name",
            "from",
            "country",
            "order",
            "by",
            "surfacearea",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Russian Federation"
            ]
        ],
        "response": "Russian Federation has the largest surface area.",
        "response_toks": [
            "Russian",
            "Federation",
            "has",
            "the",
            "largest",
            "surface",
            "area",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Name FROM country ORDER BY surfacearea desc LIMIT 1",
        "query_w_results_blank_res": "SELECT Name FROM country ORDER BY surfacearea desc LIMIT 1",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "country",
            "order",
            "by",
            "surfacearea",
            "desc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "country",
            "order",
            "by",
            "surfacearea",
            "desc",
            "limit",
            "1"
        ],
        "response_blank_res": "Russian Federation has the largest surface area .",
        "response_toks_blank_res": [
            "Russian",
            "Federation",
            "has",
            "the",
            "largest",
            "surface",
            "area",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT Name FROM  ( select * FROM country order by population asc limit 3 )  ORDER BY surfacearea desc LIMIT 1",
        "query_toks": [
            "select",
            "name",
            "from",
            "(",
            "select",
            "*",
            "from",
            "country",
            "order",
            "by",
            "population",
            "asc",
            "limit",
            "3",
            ")",
            "order",
            "by",
            "surfacearea",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Antarctica"
            ]
        ],
        "response": "Of the 3 nations with the lowest populations, Antarctica has the largest surface area",
        "response_toks": [
            "Of",
            "the",
            "3",
            "nations",
            "with",
            "the",
            "lowest",
            "populations",
            ",",
            "Antarctica",
            "has",
            "the",
            "largest",
            "surface",
            "area"
        ],
        "results_map": {
            "result0": "Antarctica"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT Name FROM  ( select * FROM country order by population asc limit 3 )  ORDER BY surfacearea desc LIMIT 1 | Antarctica ",
        "query_w_results_blank_res": "SELECT Name FROM  ( select * FROM country order by population asc limit 3 )  ORDER BY surfacearea desc LIMIT 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "(",
            "select",
            "*",
            "from",
            "country",
            "order",
            "by",
            "population",
            "asc",
            "limit",
            "3",
            ")",
            "order",
            "by",
            "surfacearea",
            "desc",
            "limit",
            "1",
            "Antarctica"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "(",
            "select",
            "*",
            "from",
            "country",
            "order",
            "by",
            "population",
            "asc",
            "limit",
            "3",
            ")",
            "order",
            "by",
            "surfacearea",
            "desc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "Of the 3 nations with the lowest populations , result0 has the largest surface area",
        "response_toks_blank_res": [
            "Of",
            "the",
            "3",
            "nations",
            "with",
            "the",
            "lowest",
            "populations",
            ",",
            "result0",
            "has",
            "the",
            "largest",
            "surface",
            "area"
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT population from country where name  =  \"Antarctica\"",
        "query_toks": [
            "select",
            "population",
            "from",
            "country",
            "where",
            "name",
            "=",
            "\"antarctica\""
        ],
        "results_raw": [
            [
                "Population"
            ],
            [
                0
            ]
        ],
        "response": "the total population of Antarctica is 0",
        "response_toks": [
            "the",
            "total",
            "population",
            "of",
            "Antarctica",
            "is",
            "0"
        ],
        "results_map": {
            "result0": "0"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT population from country where name  =  \"Antarctica\" | 0 ",
        "query_w_results_blank_res": "SELECT population from country where name  =  \"Antarctica\" | result0 ",
        "query_toks_w_results": [
            "select",
            "population",
            "from",
            "country",
            "where",
            "name",
            "=",
            "\"antarctica\"",
            "0"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "population",
            "from",
            "country",
            "where",
            "name",
            "=",
            "\"antarctica\"",
            "result0"
        ],
        "response_blank_res": "the total population of Antarctica is result0",
        "response_toks_blank_res": [
            "the",
            "total",
            "population",
            "of",
            "Antarctica",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT name, population FROM country ORDER BY Population ASC LIMIT 3",
        "query_toks": [
            "select",
            "name",
            ",",
            "population",
            "from",
            "country",
            "order",
            "by",
            "population",
            "asc",
            "limit",
            "3"
        ],
        "results_raw": [
            [
                "Name",
                "Population"
            ],
            [
                "Antarctica",
                0
            ],
            [
                "French Southern territories",
                0
            ],
            [
                "Bouvet Island",
                0
            ]
        ],
        "response": "The following table shows the name and population of 3 nations with the lowest population. The other two also have 0 population.",
        "response_toks": [
            "The",
            "following",
            "table",
            "shows",
            "the",
            "name",
            "and",
            "population",
            "of",
            "3",
            "nations",
            "with",
            "the",
            "lowest",
            "population",
            ".",
            "The",
            "other",
            "two",
            "also",
            "have",
            "0",
            "population",
            "."
        ],
        "results_map": {
            "result0": "0"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT name, population FROM country ORDER BY Population ASC LIMIT 3 | 0 ",
        "query_w_results_blank_res": "SELECT name, population FROM country ORDER BY Population ASC LIMIT 3 | result0 ",
        "query_toks_w_results": [
            "select",
            "name",
            ",",
            "population",
            "from",
            "country",
            "order",
            "by",
            "population",
            "asc",
            "limit",
            "3",
            "0"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            ",",
            "population",
            "from",
            "country",
            "order",
            "by",
            "population",
            "asc",
            "limit",
            "3",
            "result0"
        ],
        "response_blank_res": "The following table shows the name and population of 3 nations with the lowest population . The other two also have result0 population .",
        "response_toks_blank_res": [
            "The",
            "following",
            "table",
            "shows",
            "the",
            "name",
            "and",
            "population",
            "of",
            "3",
            "nations",
            "with",
            "the",
            "lowest",
            "population",
            ".",
            "The",
            "other",
            "two",
            "also",
            "have",
            "result0",
            "population",
            "."
        ]
    },
    {
        "database_id": "network_1",
        "query": "SELECT AVG ( friend_id )  FROM friend",
        "query_toks": [
            "select",
            "avg",
            "(",
            "friend_id",
            ")",
            "from",
            "friend"
        ],
        "results_raw": [
            [
                "AVG(friend_id)"
            ],
            [
                1514.85
            ]
        ],
        "response": "The average friend id is 1514.85.",
        "response_toks": [
            "The",
            "average",
            "friend",
            "id",
            "is",
            "1514.85",
            "."
        ],
        "results_map": {
            "result0": "1514.85"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT AVG ( friend_id )  FROM friend | 1514.85 ",
        "query_w_results_blank_res": "SELECT AVG ( friend_id )  FROM friend | result0 ",
        "query_toks_w_results": [
            "select",
            "avg",
            "(",
            "friend_id",
            ")",
            "from",
            "friend",
            "1514.85"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "avg",
            "(",
            "friend_id",
            ")",
            "from",
            "friend",
            "result0"
        ],
        "response_blank_res": "The average friend id is result0 .",
        "response_toks_blank_res": [
            "The",
            "average",
            "friend",
            "id",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "network_1",
        "query": "SELECT AVG ( grade )  FROM Highschooler",
        "query_toks": [
            "select",
            "avg",
            "(",
            "grade",
            ")",
            "from",
            "highschooler"
        ],
        "results_raw": [
            [
                "AVG(grade)"
            ],
            [
                10.5
            ]
        ],
        "response": "The average grade of all high schoolers is 10.5.",
        "response_toks": [
            "The",
            "average",
            "grade",
            "of",
            "all",
            "high",
            "schoolers",
            "is",
            "10.5",
            "."
        ],
        "results_map": {
            "result0": "10.5"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT AVG ( grade )  FROM Highschooler | 10.5 ",
        "query_w_results_blank_res": "SELECT AVG ( grade )  FROM Highschooler | result0 ",
        "query_toks_w_results": [
            "select",
            "avg",
            "(",
            "grade",
            ")",
            "from",
            "highschooler",
            "10.5"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "avg",
            "(",
            "grade",
            ")",
            "from",
            "highschooler",
            "result0"
        ],
        "response_blank_res": "The average grade of all high schoolers is result0 .",
        "response_toks_blank_res": [
            "The",
            "average",
            "grade",
            "of",
            "all",
            "high",
            "schoolers",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "network_1",
        "query": "SELECT MAX ( grade )  FROM Highschooler",
        "query_toks": [
            "select",
            "max",
            "(",
            "grade",
            ")",
            "from",
            "highschooler"
        ],
        "results_raw": [
            [
                "MAX(grade)"
            ],
            [
                12
            ]
        ],
        "response": "The highest grade of all high schoolers is 12.",
        "response_toks": [
            "The",
            "highest",
            "grade",
            "of",
            "all",
            "high",
            "schoolers",
            "is",
            "12",
            "."
        ],
        "results_map": {
            "result0": "12"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT MAX ( grade )  FROM Highschooler | 12 ",
        "query_w_results_blank_res": "SELECT MAX ( grade )  FROM Highschooler | result0 ",
        "query_toks_w_results": [
            "select",
            "max",
            "(",
            "grade",
            ")",
            "from",
            "highschooler",
            "12"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "max",
            "(",
            "grade",
            ")",
            "from",
            "highschooler",
            "result0"
        ],
        "response_blank_res": "The highest grade of all high schoolers is result0 .",
        "response_toks_blank_res": [
            "The",
            "highest",
            "grade",
            "of",
            "all",
            "high",
            "schoolers",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT count ( * )  FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id WHERE T3.degree_summary_name   =   'Bachelor'",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "student_id",
            "join",
            "degree_programs",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "degree_program_id",
            "=",
            "t3",
            ".",
            "degree_program_id",
            "where",
            "t3",
            ".",
            "degree_summary_name",
            "=",
            "'bachelor'"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                8
            ]
        ],
        "response": "The number of students enrolled in a bachelor degree program is 8.",
        "response_toks": [
            "The",
            "number",
            "of",
            "students",
            "enrolled",
            "in",
            "a",
            "bachelor",
            "degree",
            "program",
            "is",
            "8",
            "."
        ],
        "results_map": {
            "result0": "8"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id WHERE T3.degree_summary_name   =   'Bachelor' | 8 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id WHERE T3.degree_summary_name   =   'Bachelor' | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "student_id",
            "join",
            "degree_programs",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "degree_program_id",
            "=",
            "t3",
            ".",
            "degree_program_id",
            "where",
            "t3",
            ".",
            "degree_summary_name",
            "=",
            "'bachelor'",
            "8"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "student_id",
            "join",
            "degree_programs",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "degree_program_id",
            "=",
            "t3",
            ".",
            "degree_program_id",
            "where",
            "t3",
            ".",
            "degree_summary_name",
            "=",
            "'bachelor'",
            "result0"
        ],
        "response_blank_res": "The number of students enrolled in a bachelor degree program is result0 .",
        "response_toks_blank_res": [
            "The",
            "number",
            "of",
            "students",
            "enrolled",
            "in",
            "a",
            "bachelor",
            "degree",
            "program",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT t1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id WHERE T3.degree_summary_name   =   'Bachelor'",
        "query_toks": [
            "select",
            "t1",
            ".",
            "student_id",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "student_id",
            "join",
            "degree_programs",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "degree_program_id",
            "=",
            "t3",
            ".",
            "degree_program_id",
            "where",
            "t3",
            ".",
            "degree_summary_name",
            "=",
            "'bachelor'"
        ],
        "results_raw": [
            [
                "student_id"
            ],
            [
                9
            ],
            [
                7
            ],
            [
                9
            ]
        ],
        "response": "Here is a list of the student IDs enrolled in a bachelor degree program.",
        "response_toks": [
            "Here",
            "is",
            "a",
            "list",
            "of",
            "the",
            "student",
            "IDs",
            "enrolled",
            "in",
            "a",
            "bachelor",
            "degree",
            "program",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT t1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id WHERE T3.degree_summary_name   =   'Bachelor'",
        "query_w_results_blank_res": "SELECT t1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id WHERE T3.degree_summary_name   =   'Bachelor'",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "student_id",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "student_id",
            "join",
            "degree_programs",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "degree_program_id",
            "=",
            "t3",
            ".",
            "degree_program_id",
            "where",
            "t3",
            ".",
            "degree_summary_name",
            "=",
            "'bachelor'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "student_id",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "student_id",
            "join",
            "degree_programs",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "degree_program_id",
            "=",
            "t3",
            ".",
            "degree_program_id",
            "where",
            "t3",
            ".",
            "degree_summary_name",
            "=",
            "'bachelor'"
        ],
        "response_blank_res": "Here is a list of the student IDs enrolled in a bachelor degree program .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "a",
            "list",
            "of",
            "the",
            "student",
            "IDs",
            "enrolled",
            "in",
            "a",
            "bachelor",
            "degree",
            "program",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT DISTINCT t1.first_name, t1.middle_name, t1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id WHERE t1.student_id  =  9",
        "query_toks": [
            "select",
            "distinct",
            "t1",
            ".",
            "first_name",
            ",",
            "t1",
            ".",
            "middle_name",
            ",",
            "t1",
            ".",
            "last_name",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "student_id",
            "join",
            "degree_programs",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "degree_program_id",
            "=",
            "t3",
            ".",
            "degree_program_id",
            "where",
            "t1",
            ".",
            "student_id",
            "=",
            "9"
        ],
        "results_raw": [
            [
                "first_name",
                "middle_name",
                "last_name"
            ],
            [
                "Reva",
                "Golda",
                "Osinski"
            ]
        ],
        "response": "The first, middle, and last names of the student with ID 9 is Reva Golda Osinski.",
        "response_toks": [
            "The",
            "first",
            ",",
            "middle",
            ",",
            "and",
            "last",
            "names",
            "of",
            "the",
            "student",
            "with",
            "ID",
            "9",
            "is",
            "Reva",
            "Golda",
            "Osinski",
            "."
        ],
        "results_map": {
            "result0": "Reva",
            "result1": "Golda",
            "result2": "Osinski"
        },
        "results_blank_res": "result0 result1 result2 ",
        "query_w_results": "SELECT DISTINCT t1.first_name, t1.middle_name, t1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id WHERE t1.student_id  =  9 | Reva Golda Osinski ",
        "query_w_results_blank_res": "SELECT DISTINCT t1.first_name, t1.middle_name, t1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id WHERE t1.student_id  =  9 | result0 result1 result2 ",
        "query_toks_w_results": [
            "select",
            "distinct",
            "t1",
            ".",
            "first_name",
            ",",
            "t1",
            ".",
            "middle_name",
            ",",
            "t1",
            ".",
            "last_name",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "student_id",
            "join",
            "degree_programs",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "degree_program_id",
            "=",
            "t3",
            ".",
            "degree_program_id",
            "where",
            "t1",
            ".",
            "student_id",
            "=",
            "9",
            "Reva",
            "Golda",
            "Osinski"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "t1",
            ".",
            "first_name",
            ",",
            "t1",
            ".",
            "middle_name",
            ",",
            "t1",
            ".",
            "last_name",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "student_id",
            "join",
            "degree_programs",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "degree_program_id",
            "=",
            "t3",
            ".",
            "degree_program_id",
            "where",
            "t1",
            ".",
            "student_id",
            "=",
            "9",
            "result0",
            "result1",
            "result2"
        ],
        "response_blank_res": "The first , middle , and last names of the student with ID 9 is result0 result1 result2 .",
        "response_toks_blank_res": [
            "The",
            "first",
            ",",
            "middle",
            ",",
            "and",
            "last",
            "names",
            "of",
            "the",
            "student",
            "with",
            "ID",
            "9",
            "is",
            "result0",
            "result1",
            "result2",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT DISTINCT t1.first_name, t1.middle_name, t1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id WHERE t1.student_id  =  7",
        "query_toks": [
            "select",
            "distinct",
            "t1",
            ".",
            "first_name",
            ",",
            "t1",
            ".",
            "middle_name",
            ",",
            "t1",
            ".",
            "last_name",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "student_id",
            "join",
            "degree_programs",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "degree_program_id",
            "=",
            "t3",
            ".",
            "degree_program_id",
            "where",
            "t1",
            ".",
            "student_id",
            "=",
            "7"
        ],
        "results_raw": [
            [
                "first_name",
                "middle_name",
                "last_name"
            ],
            [
                "Frida",
                "Aisha",
                "Huel"
            ]
        ],
        "response": "The first, middle, and last names of the student with ID 7 is Frida Aisha Huel.",
        "response_toks": [
            "The",
            "first",
            ",",
            "middle",
            ",",
            "and",
            "last",
            "names",
            "of",
            "the",
            "student",
            "with",
            "ID",
            "7",
            "is",
            "Frida",
            "Aisha",
            "Huel",
            "."
        ],
        "results_map": {
            "result0": "Frida",
            "result1": "Aisha",
            "result2": "Huel"
        },
        "results_blank_res": "result0 result1 result2 ",
        "query_w_results": "SELECT DISTINCT t1.first_name, t1.middle_name, t1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id WHERE t1.student_id  =  7 | Frida Aisha Huel ",
        "query_w_results_blank_res": "SELECT DISTINCT t1.first_name, t1.middle_name, t1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id WHERE t1.student_id  =  7 | result0 result1 result2 ",
        "query_toks_w_results": [
            "select",
            "distinct",
            "t1",
            ".",
            "first_name",
            ",",
            "t1",
            ".",
            "middle_name",
            ",",
            "t1",
            ".",
            "last_name",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "student_id",
            "join",
            "degree_programs",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "degree_program_id",
            "=",
            "t3",
            ".",
            "degree_program_id",
            "where",
            "t1",
            ".",
            "student_id",
            "=",
            "7",
            "Frida",
            "Aisha",
            "Huel"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "t1",
            ".",
            "first_name",
            ",",
            "t1",
            ".",
            "middle_name",
            ",",
            "t1",
            ".",
            "last_name",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "student_id",
            "join",
            "degree_programs",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "degree_program_id",
            "=",
            "t3",
            ".",
            "degree_program_id",
            "where",
            "t1",
            ".",
            "student_id",
            "=",
            "7",
            "result0",
            "result1",
            "result2"
        ],
        "response_blank_res": "The first , middle , and last names of the student with ID 7 is result0 result1 result2 .",
        "response_toks_blank_res": [
            "The",
            "first",
            ",",
            "middle",
            ",",
            "and",
            "last",
            "names",
            "of",
            "the",
            "student",
            "with",
            "ID",
            "7",
            "is",
            "result0",
            "result1",
            "result2",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name, T3.degree_summary_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id WHERE T3.degree_summary_name   =   'Bachelor'",
        "query_toks": [
            "select",
            "distinct",
            "t1",
            ".",
            "first_name",
            ",",
            "t1",
            ".",
            "middle_name",
            ",",
            "t1",
            ".",
            "last_name",
            ",",
            "t3",
            ".",
            "degree_summary_name",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "student_id",
            "join",
            "degree_programs",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "degree_program_id",
            "=",
            "t3",
            ".",
            "degree_program_id",
            "where",
            "t3",
            ".",
            "degree_summary_name",
            "=",
            "'bachelor'"
        ],
        "results_raw": [
            [
                "first_name",
                "middle_name",
                "last_name",
                "degree_summary_name"
            ],
            [
                "Reva",
                "Golda",
                "Osinski",
                "Bachelor"
            ],
            [
                "Frida",
                "Aisha",
                "Huel",
                "Bachelor"
            ],
            [
                "Jarvis",
                "Aaliyah",
                "Carroll",
                "Bachelor"
            ]
        ],
        "response": "Here is a table of the first, middle, and last names and the degree of the students in the bachelor program. For example, Reva Golda Osinski has degree Bachelor.",
        "response_toks": [
            "Here",
            "is",
            "a",
            "table",
            "of",
            "the",
            "first",
            ",",
            "middle",
            ",",
            "and",
            "last",
            "names",
            "and",
            "the",
            "degree",
            "of",
            "the",
            "students",
            "in",
            "the",
            "bachelor",
            "program",
            ".",
            "For",
            "example",
            ",",
            "Reva",
            "Golda",
            "Osinski",
            "has",
            "degree",
            "Bachelor",
            "."
        ],
        "results_map": {
            "result0": "Reva",
            "result1": "Golda",
            "result2": "Osinski",
            "result3": "Bachelor"
        },
        "results_blank_res": "result0 result1 result2 result3 ",
        "query_w_results": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name, T3.degree_summary_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id WHERE T3.degree_summary_name   =   'Bachelor' | Reva Golda Osinski Bachelor ",
        "query_w_results_blank_res": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name, T3.degree_summary_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id WHERE T3.degree_summary_name   =   'Bachelor' | result0 result1 result2 result3 ",
        "query_toks_w_results": [
            "select",
            "distinct",
            "t1",
            ".",
            "first_name",
            ",",
            "t1",
            ".",
            "middle_name",
            ",",
            "t1",
            ".",
            "last_name",
            ",",
            "t3",
            ".",
            "degree_summary_name",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "student_id",
            "join",
            "degree_programs",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "degree_program_id",
            "=",
            "t3",
            ".",
            "degree_program_id",
            "where",
            "t3",
            ".",
            "degree_summary_name",
            "=",
            "'bachelor'",
            "Reva",
            "Golda",
            "Osinski",
            "Bachelor"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "t1",
            ".",
            "first_name",
            ",",
            "t1",
            ".",
            "middle_name",
            ",",
            "t1",
            ".",
            "last_name",
            ",",
            "t3",
            ".",
            "degree_summary_name",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "student_id",
            "join",
            "degree_programs",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "degree_program_id",
            "=",
            "t3",
            ".",
            "degree_program_id",
            "where",
            "t3",
            ".",
            "degree_summary_name",
            "=",
            "'bachelor'",
            "result0",
            "result1",
            "result2",
            "result3"
        ],
        "response_blank_res": "Here is a table of the first , middle , and last names and the degree of the students in the bachelor program . For example , result0 result1 result2 has degree result3 .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "a",
            "table",
            "of",
            "the",
            "first",
            ",",
            "middle",
            ",",
            "and",
            "last",
            "names",
            "and",
            "the",
            "degree",
            "of",
            "the",
            "students",
            "in",
            "the",
            "bachelor",
            "program",
            ".",
            "For",
            "example",
            ",",
            "result0",
            "result1",
            "result2",
            "has",
            "degree",
            "result3",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT DISTINCT T3.degree_summary_description FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id",
        "query_toks": [
            "select",
            "distinct",
            "t3",
            ".",
            "degree_summary_description",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "student_id",
            "join",
            "degree_programs",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "degree_program_id",
            "=",
            "t3",
            ".",
            "degree_program_id"
        ],
        "results_raw": [
            [
                "degree_summary_description"
            ],
            [
                "qui"
            ],
            [
                "unde"
            ],
            [
                "aut"
            ]
        ],
        "response": "Here is a list of the different degree summary descriptions.",
        "response_toks": [
            "Here",
            "is",
            "a",
            "list",
            "of",
            "the",
            "different",
            "degree",
            "summary",
            "descriptions",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT DISTINCT T3.degree_summary_description FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id",
        "query_w_results_blank_res": "SELECT DISTINCT T3.degree_summary_description FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id",
        "query_toks_w_results": [
            "select",
            "distinct",
            "t3",
            ".",
            "degree_summary_description",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "student_id",
            "join",
            "degree_programs",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "degree_program_id",
            "=",
            "t3",
            ".",
            "degree_program_id"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "t3",
            ".",
            "degree_summary_description",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "student_id",
            "join",
            "degree_programs",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "degree_program_id",
            "=",
            "t3",
            ".",
            "degree_program_id"
        ],
        "response_blank_res": "Here is a list of the different degree summary descriptions .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "a",
            "list",
            "of",
            "the",
            "different",
            "degree",
            "summary",
            "descriptions",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT DISTINCT T1.student_ID FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id WHERE T3.degree_summary_name   =   'Bachelor'",
        "query_toks": [
            "select",
            "distinct",
            "t1",
            ".",
            "student_id",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "student_id",
            "join",
            "degree_programs",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "degree_program_id",
            "=",
            "t3",
            ".",
            "degree_program_id",
            "where",
            "t3",
            ".",
            "degree_summary_name",
            "=",
            "'bachelor'"
        ],
        "results_raw": [
            [
                "student_id"
            ],
            [
                9
            ],
            [
                7
            ],
            [
                4
            ]
        ],
        "response": "Here is a list of the student IDs of the students in the bachelor program.",
        "response_toks": [
            "Here",
            "is",
            "a",
            "list",
            "of",
            "the",
            "student",
            "IDs",
            "of",
            "the",
            "students",
            "in",
            "the",
            "bachelor",
            "program",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT DISTINCT T1.student_ID FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id WHERE T3.degree_summary_name   =   'Bachelor'",
        "query_w_results_blank_res": "SELECT DISTINCT T1.student_ID FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id WHERE T3.degree_summary_name   =   'Bachelor'",
        "query_toks_w_results": [
            "select",
            "distinct",
            "t1",
            ".",
            "student_id",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "student_id",
            "join",
            "degree_programs",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "degree_program_id",
            "=",
            "t3",
            ".",
            "degree_program_id",
            "where",
            "t3",
            ".",
            "degree_summary_name",
            "=",
            "'bachelor'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "t1",
            ".",
            "student_id",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "student_id",
            "join",
            "degree_programs",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "degree_program_id",
            "=",
            "t3",
            ".",
            "degree_program_id",
            "where",
            "t3",
            ".",
            "degree_summary_name",
            "=",
            "'bachelor'"
        ],
        "response_blank_res": "Here is a list of the student IDs of the students in the bachelor program .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "a",
            "list",
            "of",
            "the",
            "student",
            "IDs",
            "of",
            "the",
            "students",
            "in",
            "the",
            "bachelor",
            "program",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id WHERE T3.degree_summary_name   =   'Bachelor'",
        "query_toks": [
            "select",
            "distinct",
            "t1",
            ".",
            "first_name",
            ",",
            "t1",
            ".",
            "middle_name",
            ",",
            "t1",
            ".",
            "last_name",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "student_id",
            "join",
            "degree_programs",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "degree_program_id",
            "=",
            "t3",
            ".",
            "degree_program_id",
            "where",
            "t3",
            ".",
            "degree_summary_name",
            "=",
            "'bachelor'"
        ],
        "results_raw": [
            [
                "first_name",
                "middle_name",
                "last_name"
            ],
            [
                "Reva",
                "Golda",
                "Osinski"
            ],
            [
                "Frida",
                "Aisha",
                "Huel"
            ],
            [
                "Jarvis",
                "Aaliyah",
                "Carroll"
            ]
        ],
        "response": "Here is a list of the first, middle, and last name of the students in the bachelor program.",
        "response_toks": [
            "Here",
            "is",
            "a",
            "list",
            "of",
            "the",
            "first",
            ",",
            "middle",
            ",",
            "and",
            "last",
            "name",
            "of",
            "the",
            "students",
            "in",
            "the",
            "bachelor",
            "program",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id WHERE T3.degree_summary_name   =   'Bachelor'",
        "query_w_results_blank_res": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id WHERE T3.degree_summary_name   =   'Bachelor'",
        "query_toks_w_results": [
            "select",
            "distinct",
            "t1",
            ".",
            "first_name",
            ",",
            "t1",
            ".",
            "middle_name",
            ",",
            "t1",
            ".",
            "last_name",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "student_id",
            "join",
            "degree_programs",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "degree_program_id",
            "=",
            "t3",
            ".",
            "degree_program_id",
            "where",
            "t3",
            ".",
            "degree_summary_name",
            "=",
            "'bachelor'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "t1",
            ".",
            "first_name",
            ",",
            "t1",
            ".",
            "middle_name",
            ",",
            "t1",
            ".",
            "last_name",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "student_id",
            "join",
            "degree_programs",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "degree_program_id",
            "=",
            "t3",
            ".",
            "degree_program_id",
            "where",
            "t3",
            ".",
            "degree_summary_name",
            "=",
            "'bachelor'"
        ],
        "response_blank_res": "Here is a list of the first , middle , and last name of the students in the bachelor program .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "a",
            "list",
            "of",
            "the",
            "first",
            ",",
            "middle",
            ",",
            "and",
            "last",
            "name",
            "of",
            "the",
            "students",
            "in",
            "the",
            "bachelor",
            "program",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT count ( DISTINCT Make )  FROM CAR_NAMES WHERE Model  =  'chevrolet'",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "make",
            ")",
            "from",
            "car_names",
            "where",
            "model",
            "=",
            "'chevrolet'"
        ],
        "results_raw": [
            [
                "count(DISTINCT Make)"
            ],
            [
                28
            ]
        ],
        "response": "There are 28 distinct makes listed with the model Chevrolet.",
        "response_toks": [
            "There",
            "are",
            "28",
            "distinct",
            "makes",
            "listed",
            "with",
            "the",
            "model",
            "Chevrolet",
            "."
        ],
        "results_map": {
            "result0": "28"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( DISTINCT Make )  FROM CAR_NAMES WHERE Model  =  'chevrolet' | 28 ",
        "query_w_results_blank_res": "SELECT count ( DISTINCT Make )  FROM CAR_NAMES WHERE Model  =  'chevrolet' | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "distinct",
            "make",
            ")",
            "from",
            "car_names",
            "where",
            "model",
            "=",
            "'chevrolet'",
            "28"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "distinct",
            "make",
            ")",
            "from",
            "car_names",
            "where",
            "model",
            "=",
            "'chevrolet'",
            "result0"
        ],
        "response_blank_res": "There are result0 distinct makes listed with the model Chevrolet .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "distinct",
            "makes",
            "listed",
            "with",
            "the",
            "model",
            "Chevrolet",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT count ( DISTINCT Model )  FROM CAR_NAMES",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "model",
            ")",
            "from",
            "car_names"
        ],
        "results_raw": [
            [
                "count(DISTINCT Model)"
            ],
            [
                33
            ]
        ],
        "response": "There are 33 distinct models listed in the table.",
        "response_toks": [
            "There",
            "are",
            "33",
            "distinct",
            "models",
            "listed",
            "in",
            "the",
            "table",
            "."
        ],
        "results_map": {
            "result0": "33"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( DISTINCT Model )  FROM CAR_NAMES | 33 ",
        "query_w_results_blank_res": "SELECT count ( DISTINCT Model )  FROM CAR_NAMES | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "distinct",
            "model",
            ")",
            "from",
            "car_names",
            "33"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "distinct",
            "model",
            ")",
            "from",
            "car_names",
            "result0"
        ],
        "response_blank_res": "There are result0 distinct models listed in the table .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "distinct",
            "models",
            "listed",
            "in",
            "the",
            "table",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count ( DISTINCT Make )  DESC LIMIT 1",
        "query_toks": [
            "select",
            "model",
            "from",
            "car_names",
            "group",
            "by",
            "model",
            "order",
            "by",
            "count",
            "(",
            "distinct",
            "make",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Model"
            ],
            [
                "ford"
            ]
        ],
        "response": "The model with the greatest number of distinct makes is Ford.",
        "response_toks": [
            "The",
            "model",
            "with",
            "the",
            "greatest",
            "number",
            "of",
            "distinct",
            "makes",
            "is",
            "Ford",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count ( DISTINCT Make )  DESC LIMIT 1",
        "query_w_results_blank_res": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count ( DISTINCT Make )  DESC LIMIT 1",
        "query_toks_w_results": [
            "select",
            "model",
            "from",
            "car_names",
            "group",
            "by",
            "model",
            "order",
            "by",
            "count",
            "(",
            "distinct",
            "make",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "model",
            "from",
            "car_names",
            "group",
            "by",
            "model",
            "order",
            "by",
            "count",
            "(",
            "distinct",
            "make",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "response_blank_res": "The model with the greatest number of distinct makes is Ford .",
        "response_toks_blank_res": [
            "The",
            "model",
            "with",
            "the",
            "greatest",
            "number",
            "of",
            "distinct",
            "makes",
            "is",
            "Ford",
            "."
        ]
    },
    {
        "database_id": "course_teach",
        "query": "SELECT T2.Name, T1.course_id FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID   =   T2.Teacher_ID",
        "query_toks": [
            "select",
            "t2",
            ".",
            "name",
            ",",
            "t1",
            ".",
            "course_id",
            "from",
            "course_arrange",
            "as",
            "t1",
            "join",
            "teacher",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "teacher_id",
            "=",
            "t2",
            ".",
            "teacher_id"
        ],
        "results_raw": [
            [
                "Name",
                "Course_ID"
            ],
            [
                "Kearsley Brown",
                2
            ],
            [
                "Vicente Carretero",
                2
            ],
            [
                "Gustaaf Deloor",
                3
            ]
        ],
        "response": "Here is a list of names of teachers with the id for courses they teach.",
        "response_toks": [
            "Here",
            "is",
            "a",
            "list",
            "of",
            "names",
            "of",
            "teachers",
            "with",
            "the",
            "id",
            "for",
            "courses",
            "they",
            "teach",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T2.Name, T1.course_id FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID   =   T2.Teacher_ID",
        "query_w_results_blank_res": "SELECT T2.Name, T1.course_id FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID   =   T2.Teacher_ID",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "name",
            ",",
            "t1",
            ".",
            "course_id",
            "from",
            "course_arrange",
            "as",
            "t1",
            "join",
            "teacher",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "teacher_id",
            "=",
            "t2",
            ".",
            "teacher_id"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "name",
            ",",
            "t1",
            ".",
            "course_id",
            "from",
            "course_arrange",
            "as",
            "t1",
            "join",
            "teacher",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "teacher_id",
            "=",
            "t2",
            ".",
            "teacher_id"
        ],
        "response_blank_res": "Here is a list of names of teachers with the id for courses they teach .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "a",
            "list",
            "of",
            "names",
            "of",
            "teachers",
            "with",
            "the",
            "id",
            "for",
            "courses",
            "they",
            "teach",
            "."
        ]
    },
    {
        "database_id": "course_teach",
        "query": "SELECT T2.Name ,  COUNT ( * )  FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID   =   T2.Teacher_ID GROUP BY T2.Name",
        "query_toks": [
            "select",
            "t2",
            ".",
            "name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "course_arrange",
            "as",
            "t1",
            "join",
            "teacher",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "teacher_id",
            "=",
            "t2",
            ".",
            "teacher_id",
            "group",
            "by",
            "t2",
            ".",
            "name"
        ],
        "results_raw": [
            [
                "Name",
                "COUNT(*)"
            ],
            [
                "Anne Walker",
                2
            ],
            [
                "Gustaaf Deloor",
                1
            ],
            [
                "Kearsley Brown",
                1
            ]
        ],
        "response": "Here is a list of names of teachers and the number of courses they teach.",
        "response_toks": [
            "Here",
            "is",
            "a",
            "list",
            "of",
            "names",
            "of",
            "teachers",
            "and",
            "the",
            "number",
            "of",
            "courses",
            "they",
            "teach",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T2.Name ,  COUNT ( * )  FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID   =   T2.Teacher_ID GROUP BY T2.Name",
        "query_w_results_blank_res": "SELECT T2.Name ,  COUNT ( * )  FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID   =   T2.Teacher_ID GROUP BY T2.Name",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "course_arrange",
            "as",
            "t1",
            "join",
            "teacher",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "teacher_id",
            "=",
            "t2",
            ".",
            "teacher_id",
            "group",
            "by",
            "t2",
            ".",
            "name"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "course_arrange",
            "as",
            "t1",
            "join",
            "teacher",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "teacher_id",
            "=",
            "t2",
            ".",
            "teacher_id",
            "group",
            "by",
            "t2",
            ".",
            "name"
        ],
        "response_blank_res": "Here is a list of names of teachers and the number of courses they teach .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "a",
            "list",
            "of",
            "names",
            "of",
            "teachers",
            "and",
            "the",
            "number",
            "of",
            "courses",
            "they",
            "teach",
            "."
        ]
    },
    {
        "database_id": "course_teach",
        "query": "SELECT name from teacher where age < 30",
        "query_toks": [
            "select",
            "name",
            "from",
            "teacher",
            "where",
            "age",
            "<",
            "30"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Gustaaf Deloor"
            ],
            [
                "Vicente Carretero"
            ]
        ],
        "response": "Here is a list of names of teachers below age 30.",
        "response_toks": [
            "Here",
            "is",
            "a",
            "list",
            "of",
            "names",
            "of",
            "teachers",
            "below",
            "age",
            "30",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT name from teacher where age < 30",
        "query_w_results_blank_res": "SELECT name from teacher where age < 30",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "teacher",
            "where",
            "age",
            "<",
            "30"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "teacher",
            "where",
            "age",
            "<",
            "30"
        ],
        "response_blank_res": "Here is a list of names of teachers below age 30 .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "a",
            "list",
            "of",
            "names",
            "of",
            "teachers",
            "below",
            "age",
            "30",
            "."
        ]
    },
    {
        "database_id": "orchestra",
        "query": "SELECT date FROM performance WHERE TYPE LIKE \"%audition%\"",
        "query_toks": [
            "select",
            "date",
            "from",
            "performance",
            "where",
            "type",
            "like",
            "\"%audition%\""
        ],
        "results_raw": [
            [
                "Date"
            ],
            [
                "9 June"
            ],
            [
                "10 June"
            ],
            [
                "11 June"
            ]
        ],
        "response": "Here is a list of dates for all performances with the type audition.",
        "response_toks": [
            "Here",
            "is",
            "a",
            "list",
            "of",
            "dates",
            "for",
            "all",
            "performances",
            "with",
            "the",
            "type",
            "audition",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT date FROM performance WHERE TYPE LIKE \"%audition%\"",
        "query_w_results_blank_res": "SELECT date FROM performance WHERE TYPE LIKE \"%audition%\"",
        "query_toks_w_results": [
            "select",
            "date",
            "from",
            "performance",
            "where",
            "type",
            "like",
            "\"%audition%\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "date",
            "from",
            "performance",
            "where",
            "type",
            "like",
            "\"%audition%\""
        ],
        "response_blank_res": "Here is a list of dates for all performances with the type audition .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "a",
            "list",
            "of",
            "dates",
            "for",
            "all",
            "performances",
            "with",
            "the",
            "type",
            "audition",
            "."
        ]
    },
    {
        "database_id": "orchestra",
        "query": "SELECT count ( DISTINCT Orchestra_ID )  FROM performance",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "orchestra_id",
            ")",
            "from",
            "performance"
        ],
        "results_raw": [
            [
                "count(DISTINCT Orchestra_ID)"
            ],
            [
                11
            ]
        ],
        "response": "Yes, there are more than 3 different orchestras listed in the table.",
        "response_toks": [
            "Yes",
            ",",
            "there",
            "are",
            "more",
            "than",
            "3",
            "different",
            "orchestras",
            "listed",
            "in",
            "the",
            "table",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT count ( DISTINCT Orchestra_ID )  FROM performance",
        "query_w_results_blank_res": "SELECT count ( DISTINCT Orchestra_ID )  FROM performance",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "distinct",
            "orchestra_id",
            ")",
            "from",
            "performance"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "distinct",
            "orchestra_id",
            ")",
            "from",
            "performance"
        ],
        "response_blank_res": "Yes , there are more than 3 different orchestras listed in the table .",
        "response_toks_blank_res": [
            "Yes",
            ",",
            "there",
            "are",
            "more",
            "than",
            "3",
            "different",
            "orchestras",
            "listed",
            "in",
            "the",
            "table",
            "."
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT birth_date FROM players where player_id = 200002",
        "query_toks": [
            "select",
            "birth_date",
            "from",
            "players",
            "where",
            "player_id",
            "=",
            "200002"
        ],
        "results_raw": [
            [
                "birth_date"
            ],
            [
                19820309
            ]
        ],
        "response": "The birth date of player id 200002  is\n19820309",
        "response_toks": [
            "The",
            "birth",
            "date",
            "of",
            "player",
            "id",
            "200002",
            "is",
            "19820309"
        ],
        "results_map": {
            "result0": "19820309"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT birth_date FROM players where player_id = 200002 | 19820309 ",
        "query_w_results_blank_res": "SELECT birth_date FROM players where player_id = 200002 | result0 ",
        "query_toks_w_results": [
            "select",
            "birth_date",
            "from",
            "players",
            "where",
            "player_id",
            "=",
            "200002",
            "19820309"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "birth_date",
            "from",
            "players",
            "where",
            "player_id",
            "=",
            "200002",
            "result0"
        ],
        "response_blank_res": "The birth date of player id 200002 is result0",
        "response_toks_blank_res": [
            "The",
            "birth",
            "date",
            "of",
            "player",
            "id",
            "200002",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT first_name FROM players where player_id = 200001",
        "query_toks": [
            "select",
            "first_name",
            "from",
            "players",
            "where",
            "player_id",
            "=",
            "200001"
        ],
        "results_raw": [
            [
                "first_name"
            ],
            [
                "Martina"
            ]
        ],
        "response": "The first name of player id 200001 is \nMartina",
        "response_toks": [
            "The",
            "first",
            "name",
            "of",
            "player",
            "id",
            "200001",
            "is",
            "Martina"
        ],
        "results_map": {
            "result0": "Martina"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT first_name FROM players where player_id = 200001 | Martina ",
        "query_w_results_blank_res": "SELECT first_name FROM players where player_id = 200001 | result0 ",
        "query_toks_w_results": [
            "select",
            "first_name",
            "from",
            "players",
            "where",
            "player_id",
            "=",
            "200001",
            "Martina"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "first_name",
            "from",
            "players",
            "where",
            "player_id",
            "=",
            "200001",
            "result0"
        ],
        "response_blank_res": "The first name of player id 200001 is result0",
        "response_toks_blank_res": [
            "The",
            "first",
            "name",
            "of",
            "player",
            "id",
            "200001",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT country_code FROM players GROUP BY country_code HAVING count ( * )  > 50",
        "query_toks": [
            "select",
            "country_code",
            "from",
            "players",
            "group",
            "by",
            "country_code",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "50"
        ],
        "results_raw": [
            [
                "country_code"
            ],
            [
                "ALG"
            ],
            [
                "ARG"
            ],
            [
                "AUS"
            ]
        ],
        "response": "The country codes of countries that have more than 50 players is  in the  table",
        "response_toks": [
            "The",
            "country",
            "codes",
            "of",
            "countries",
            "that",
            "have",
            "more",
            "than",
            "50",
            "players",
            "is",
            "in",
            "the",
            "table"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT country_code FROM players GROUP BY country_code HAVING count ( * )  > 50",
        "query_w_results_blank_res": "SELECT country_code FROM players GROUP BY country_code HAVING count ( * )  > 50",
        "query_toks_w_results": [
            "select",
            "country_code",
            "from",
            "players",
            "group",
            "by",
            "country_code",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "50"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "country_code",
            "from",
            "players",
            "group",
            "by",
            "country_code",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "50"
        ],
        "response_blank_res": "The country codes of countries that have more than 50 players is in the table",
        "response_toks_blank_res": [
            "The",
            "country",
            "codes",
            "of",
            "countries",
            "that",
            "have",
            "more",
            "than",
            "50",
            "players",
            "is",
            "in",
            "the",
            "table"
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Name   =   \"Kabul\"",
        "query_toks": [
            "select",
            "region",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "city",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "name",
            "=",
            "\"kabul\""
        ],
        "results_raw": [
            [
                "Region"
            ],
            [
                "Southern and Central Asia"
            ]
        ],
        "response": "the city Kabul is located in Southern and Central Asia region.",
        "response_toks": [
            "the",
            "city",
            "Kabul",
            "is",
            "located",
            "in",
            "Southern",
            "and",
            "Central",
            "Asia",
            "region",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Name   =   \"Kabul\"",
        "query_w_results_blank_res": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Name   =   \"Kabul\"",
        "query_toks_w_results": [
            "select",
            "region",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "city",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "name",
            "=",
            "\"kabul\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "region",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "city",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "name",
            "=",
            "\"kabul\""
        ],
        "response_blank_res": "the city Kabul is located in Southern and Central Asia region .",
        "response_toks_blank_res": [
            "the",
            "city",
            "Kabul",
            "is",
            "located",
            "in",
            "Southern",
            "and",
            "Central",
            "Asia",
            "region",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Name   =   \"Herat\"",
        "query_toks": [
            "select",
            "region",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "city",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "name",
            "=",
            "\"herat\""
        ],
        "results_raw": [
            [
                "Region"
            ],
            [
                "Southern and Central Asia"
            ]
        ],
        "response": "the city Herat is located in Southern and Central Asia region.",
        "response_toks": [
            "the",
            "city",
            "Herat",
            "is",
            "located",
            "in",
            "Southern",
            "and",
            "Central",
            "Asia",
            "region",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Name   =   \"Herat\"",
        "query_w_results_blank_res": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Name   =   \"Herat\"",
        "query_toks_w_results": [
            "select",
            "region",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "city",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "name",
            "=",
            "\"herat\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "region",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "city",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "name",
            "=",
            "\"herat\""
        ],
        "response_blank_res": "the city Herat is located in Southern and Central Asia region .",
        "response_toks_blank_res": [
            "the",
            "city",
            "Herat",
            "is",
            "located",
            "in",
            "Southern",
            "and",
            "Central",
            "Asia",
            "region",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Name   =   \"Qandahar\"",
        "query_toks": [
            "select",
            "region",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "city",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "name",
            "=",
            "\"qandahar\""
        ],
        "results_raw": [
            [
                "Region"
            ],
            [
                "Southern and Central Asia"
            ]
        ],
        "response": "the city Qandahar is located in Southern and Central Asia region.",
        "response_toks": [
            "the",
            "city",
            "Qandahar",
            "is",
            "located",
            "in",
            "Southern",
            "and",
            "Central",
            "Asia",
            "region",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Name   =   \"Qandahar\"",
        "query_w_results_blank_res": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Name   =   \"Qandahar\"",
        "query_toks_w_results": [
            "select",
            "region",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "city",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "name",
            "=",
            "\"qandahar\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "region",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "city",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "name",
            "=",
            "\"qandahar\""
        ],
        "response_blank_res": "the city Qandahar is located in Southern and Central Asia region .",
        "response_toks_blank_res": [
            "the",
            "city",
            "Qandahar",
            "is",
            "located",
            "in",
            "Southern",
            "and",
            "Central",
            "Asia",
            "region",
            "."
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count ( * )  DESC LIMIT 1",
        "query_toks": [
            "select",
            "year",
            "from",
            "matches",
            "group",
            "by",
            "year",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "year"
            ],
            [
                2016
            ]
        ],
        "response": "2016 is the year that has the most number of matches",
        "response_toks": [
            "2016",
            "is",
            "the",
            "year",
            "that",
            "has",
            "the",
            "most",
            "number",
            "of",
            "matches"
        ],
        "results_map": {
            "result0": "2016"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count ( * )  DESC LIMIT 1 | 2016 ",
        "query_w_results_blank_res": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count ( * )  DESC LIMIT 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "year",
            "from",
            "matches",
            "group",
            "by",
            "year",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1",
            "2016"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "year",
            "from",
            "matches",
            "group",
            "by",
            "year",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "result0 is the year that has the most number of matches",
        "response_toks_blank_res": [
            "result0",
            "is",
            "the",
            "year",
            "that",
            "has",
            "the",
            "most",
            "number",
            "of",
            "matches"
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count ( * )  LIMIT 1",
        "query_toks": [
            "select",
            "year",
            "from",
            "matches",
            "group",
            "by",
            "year",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "year"
            ],
            [
                2013
            ]
        ],
        "response": "2013 is the year that has the least number of matches",
        "response_toks": [
            "2013",
            "is",
            "the",
            "year",
            "that",
            "has",
            "the",
            "least",
            "number",
            "of",
            "matches"
        ],
        "results_map": {
            "result0": "2013"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count ( * )  LIMIT 1 | 2013 ",
        "query_w_results_blank_res": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count ( * )  LIMIT 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "year",
            "from",
            "matches",
            "group",
            "by",
            "year",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "limit",
            "1",
            "2013"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "year",
            "from",
            "matches",
            "group",
            "by",
            "year",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "result0 is the year that has the least number of matches",
        "response_toks_blank_res": [
            "result0",
            "is",
            "the",
            "year",
            "that",
            "has",
            "the",
            "least",
            "number",
            "of",
            "matches"
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT YEAR, count ( * )  FROM matches GROUP BY YEAR ORDER BY count ( * )  LIMIT 1",
        "query_toks": [
            "select",
            "year",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "matches",
            "group",
            "by",
            "year",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "year",
                "count(*)"
            ],
            [
                2013,
                12
            ]
        ],
        "response": "There were 12 matches in the year of 2013.",
        "response_toks": [
            "There",
            "were",
            "12",
            "matches",
            "in",
            "the",
            "year",
            "of",
            "2013",
            "."
        ],
        "results_map": {
            "result0": "12",
            "result1": "2013"
        },
        "results_blank_res": "result0 result1 ",
        "query_w_results": "SELECT YEAR, count ( * )  FROM matches GROUP BY YEAR ORDER BY count ( * )  LIMIT 1 | 12 2013 ",
        "query_w_results_blank_res": "SELECT YEAR, count ( * )  FROM matches GROUP BY YEAR ORDER BY count ( * )  LIMIT 1 | result0 result1 ",
        "query_toks_w_results": [
            "select",
            "year",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "matches",
            "group",
            "by",
            "year",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "limit",
            "1",
            "12",
            "2013"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "year",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "matches",
            "group",
            "by",
            "year",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "limit",
            "1",
            "result0",
            "result1"
        ],
        "response_blank_res": "There were result0 matches in the year of result1 .",
        "response_toks_blank_res": [
            "There",
            "were",
            "result0",
            "matches",
            "in",
            "the",
            "year",
            "of",
            "result1",
            "."
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT year, count ( * )  from matches where year  =  2016",
        "query_toks": [
            "select",
            "year",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "matches",
            "where",
            "year",
            "=",
            "2016"
        ],
        "results_raw": [
            [
                "year",
                "count(*)"
            ],
            [
                2016,
                158
            ]
        ],
        "response": "There were 158 matches in the year of 2016.",
        "response_toks": [
            "There",
            "were",
            "158",
            "matches",
            "in",
            "the",
            "year",
            "of",
            "2016",
            "."
        ],
        "results_map": {
            "result0": "158",
            "result1": "2016"
        },
        "results_blank_res": "result0 result1 ",
        "query_w_results": "SELECT year, count ( * )  from matches where year  =  2016 | 158 2016 ",
        "query_w_results_blank_res": "SELECT year, count ( * )  from matches where year  =  2016 | result0 result1 ",
        "query_toks_w_results": [
            "select",
            "year",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "matches",
            "where",
            "year",
            "=",
            "2016",
            "158",
            "2016"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "year",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "matches",
            "where",
            "year",
            "=",
            "2016",
            "result0",
            "result1"
        ],
        "response_blank_res": "There were result0 matches in the year of result1 .",
        "response_toks_blank_res": [
            "There",
            "were",
            "result0",
            "matches",
            "in",
            "the",
            "year",
            "of",
            "result1",
            "."
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT count ( * )  from matches where surface  =  \"Hard\"",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "matches",
            "where",
            "surface",
            "=",
            "\"hard\""
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                205
            ]
        ],
        "response": "There were 205 matches on a hard surface.",
        "response_toks": [
            "There",
            "were",
            "205",
            "matches",
            "on",
            "a",
            "hard",
            "surface",
            "."
        ],
        "results_map": {
            "result0": "205"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  from matches where surface  =  \"Hard\" | 205 ",
        "query_w_results_blank_res": "SELECT count ( * )  from matches where surface  =  \"Hard\" | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "matches",
            "where",
            "surface",
            "=",
            "\"hard\"",
            "205"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "matches",
            "where",
            "surface",
            "=",
            "\"hard\"",
            "result0"
        ],
        "response_blank_res": "There were result0 matches on a hard surface .",
        "response_toks_blank_res": [
            "There",
            "were",
            "result0",
            "matches",
            "on",
            "a",
            "hard",
            "surface",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT T1.FullName , count ( * )  FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker GROUP BY T1.Id",
        "query_toks": [
            "select",
            "t1",
            ".",
            "fullname",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "maker",
            "group",
            "by",
            "t1",
            ".",
            "id"
        ],
        "results_raw": [
            [
                "FullName",
                "count(*)"
            ],
            [
                "American Motor Company",
                1
            ],
            [
                "Volkswagen",
                2
            ],
            [
                "BMW",
                1
            ]
        ],
        "response": "Here is the result table of the full name of car makers and the number of models they made. For example, the car maker \"American Motor Company\" made 1 model.",
        "response_toks": [
            "Here",
            "is",
            "the",
            "result",
            "table",
            "of",
            "the",
            "full",
            "name",
            "of",
            "car",
            "makers",
            "and",
            "the",
            "number",
            "of",
            "models",
            "they",
            "made",
            ".",
            "For",
            "example",
            ",",
            "the",
            "car",
            "maker",
            "``",
            "American",
            "Motor",
            "Company",
            "''",
            "made",
            "1",
            "model",
            "."
        ],
        "results_map": {
            "result0": "1"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT T1.FullName , count ( * )  FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker GROUP BY T1.Id | 1 ",
        "query_w_results_blank_res": "SELECT T1.FullName , count ( * )  FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker GROUP BY T1.Id | result0 ",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "fullname",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "maker",
            "group",
            "by",
            "t1",
            ".",
            "id",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "fullname",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "maker",
            "group",
            "by",
            "t1",
            ".",
            "id",
            "result0"
        ],
        "response_blank_res": "Here is the result table of the full name of car makers and the number of models they made . For example , the car maker `` American Motor Company '' made result0 model .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "result",
            "table",
            "of",
            "the",
            "full",
            "name",
            "of",
            "car",
            "makers",
            "and",
            "the",
            "number",
            "of",
            "models",
            "they",
            "made",
            ".",
            "For",
            "example",
            ",",
            "the",
            "car",
            "maker",
            "``",
            "American",
            "Motor",
            "Company",
            "''",
            "made",
            "result0",
            "model",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT  Id  FROM CAR_MAKERS",
        "query_toks": [
            "select",
            "id",
            "from",
            "car_makers"
        ],
        "results_raw": [
            [
                "Id"
            ],
            [
                1
            ],
            [
                2
            ],
            [
                3
            ]
        ],
        "response": "Here is the result table of the ids of car makers.",
        "response_toks": [
            "Here",
            "is",
            "the",
            "result",
            "table",
            "of",
            "the",
            "ids",
            "of",
            "car",
            "makers",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT  Id  FROM CAR_MAKERS",
        "query_w_results_blank_res": "SELECT  Id  FROM CAR_MAKERS",
        "query_toks_w_results": [
            "select",
            "id",
            "from",
            "car_makers"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "id",
            "from",
            "car_makers"
        ],
        "response_blank_res": "Here is the result table of the ids of car makers .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "result",
            "table",
            "of",
            "the",
            "ids",
            "of",
            "car",
            "makers",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT  Country  FROM CAR_MAKERS",
        "query_toks": [
            "select",
            "country",
            "from",
            "car_makers"
        ],
        "results_raw": [
            [
                "Country"
            ],
            [
                "1"
            ],
            [
                "2"
            ],
            [
                "2"
            ]
        ],
        "response": "Here is the result table of the countries of all car makers.",
        "response_toks": [
            "Here",
            "is",
            "the",
            "result",
            "table",
            "of",
            "the",
            "countries",
            "of",
            "all",
            "car",
            "makers",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT  Country  FROM CAR_MAKERS",
        "query_w_results_blank_res": "SELECT  Country  FROM CAR_MAKERS",
        "query_toks_w_results": [
            "select",
            "country",
            "from",
            "car_makers"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "country",
            "from",
            "car_makers"
        ],
        "response_blank_res": "Here is the result table of the countries of all car makers .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "result",
            "table",
            "of",
            "the",
            "countries",
            "of",
            "all",
            "car",
            "makers",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "select avg ( percentage )  from countrylanguage",
        "query_toks": [
            "select",
            "avg",
            "(",
            "percentage",
            ")",
            "from",
            "countrylanguage"
        ],
        "results_raw": [
            [
                "avg(percentage)"
            ],
            [
                20.374390243902447
            ]
        ],
        "response": "The average percent of country languages is 20.374390243902447.",
        "response_toks": [
            "The",
            "average",
            "percent",
            "of",
            "country",
            "languages",
            "is",
            "20.374390243902447",
            "."
        ],
        "results_map": {
            "result0": "20.374390243902447"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "select avg ( percentage )  from countrylanguage | 20.374390243902447 ",
        "query_w_results_blank_res": "select avg ( percentage )  from countrylanguage | result0 ",
        "query_toks_w_results": [
            "select",
            "avg",
            "(",
            "percentage",
            ")",
            "from",
            "countrylanguage",
            "20.374390243902447"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "avg",
            "(",
            "percentage",
            ")",
            "from",
            "countrylanguage",
            "result0"
        ],
        "response_blank_res": "The average percent of country languages is result0 .",
        "response_toks_blank_res": [
            "The",
            "average",
            "percent",
            "of",
            "country",
            "languages",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "select countrycode from countrylanguage where language  =  \"Dutch\" order by percentage desc limit 1",
        "query_toks": [
            "select",
            "countrycode",
            "from",
            "countrylanguage",
            "where",
            "language",
            "=",
            "\"dutch\"",
            "order",
            "by",
            "percentage",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "CountryCode"
            ],
            [
                "NLD"
            ]
        ],
        "response": "The country with code NLD has the highest dutch speaking population by percentage.",
        "response_toks": [
            "The",
            "country",
            "with",
            "code",
            "NLD",
            "has",
            "the",
            "highest",
            "dutch",
            "speaking",
            "population",
            "by",
            "percentage",
            "."
        ],
        "results_map": {
            "result0": "NLD"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "select countrycode from countrylanguage where language  =  \"Dutch\" order by percentage desc limit 1 | NLD ",
        "query_w_results_blank_res": "select countrycode from countrylanguage where language  =  \"Dutch\" order by percentage desc limit 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "countrycode",
            "from",
            "countrylanguage",
            "where",
            "language",
            "=",
            "\"dutch\"",
            "order",
            "by",
            "percentage",
            "desc",
            "limit",
            "1",
            "NLD"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "countrycode",
            "from",
            "countrylanguage",
            "where",
            "language",
            "=",
            "\"dutch\"",
            "order",
            "by",
            "percentage",
            "desc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "The country with code result0 has the highest dutch speaking population by percentage .",
        "response_toks_blank_res": [
            "The",
            "country",
            "with",
            "code",
            "result0",
            "has",
            "the",
            "highest",
            "dutch",
            "speaking",
            "population",
            "by",
            "percentage",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "select avg ( percentage )  from countrylanguage where language  =  \"Papiamento\"",
        "query_toks": [
            "select",
            "avg",
            "(",
            "percentage",
            ")",
            "from",
            "countrylanguage",
            "where",
            "language",
            "=",
            "\"papiamento\""
        ],
        "results_raw": [
            [
                "avg(percentage)"
            ],
            [
                81.45
            ]
        ],
        "response": "the difference in average percent to Dutch speaking and Papiamento speaking countries is 49.33.",
        "response_toks": [
            "the",
            "difference",
            "in",
            "average",
            "percent",
            "to",
            "Dutch",
            "speaking",
            "and",
            "Papiamento",
            "speaking",
            "countries",
            "is",
            "49.33",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "select avg ( percentage )  from countrylanguage where language  =  \"Papiamento\"",
        "query_w_results_blank_res": "select avg ( percentage )  from countrylanguage where language  =  \"Papiamento\"",
        "query_toks_w_results": [
            "select",
            "avg",
            "(",
            "percentage",
            ")",
            "from",
            "countrylanguage",
            "where",
            "language",
            "=",
            "\"papiamento\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "avg",
            "(",
            "percentage",
            ")",
            "from",
            "countrylanguage",
            "where",
            "language",
            "=",
            "\"papiamento\""
        ],
        "response_blank_res": "the difference in average percent to Dutch speaking and Papiamento speaking countries is 49.33 .",
        "response_toks_blank_res": [
            "the",
            "difference",
            "in",
            "average",
            "percent",
            "to",
            "Dutch",
            "speaking",
            "and",
            "Papiamento",
            "speaking",
            "countries",
            "is",
            "49.33",
            "."
        ]
    },
    {
        "database_id": "museum_visit",
        "query": "SELECT Level_of_membership FROM visitor WHERE name  =   \"Gonzalo Higua\u00edn \"",
        "query_toks": [
            "select",
            "level_of_membership",
            "from",
            "visitor",
            "where",
            "name",
            "=",
            "\"gonzalo",
            "higua\u00edn",
            "\""
        ],
        "results_raw": [
            [
                "Level_of_membership"
            ],
            [
                8
            ]
        ],
        "response": "the membership level of Gonzalo Higua\u00edn is 8",
        "response_toks": [
            "the",
            "membership",
            "level",
            "of",
            "Gonzalo",
            "Higua\u00edn",
            "is",
            "8"
        ],
        "results_map": {
            "result0": "8"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT Level_of_membership FROM visitor WHERE name  =   \"Gonzalo Higua\u00edn \" | 8 ",
        "query_w_results_blank_res": "SELECT Level_of_membership FROM visitor WHERE name  =   \"Gonzalo Higua\u00edn \" | result0 ",
        "query_toks_w_results": [
            "select",
            "level_of_membership",
            "from",
            "visitor",
            "where",
            "name",
            "=",
            "\"gonzalo",
            "higua\u00edn",
            "\"",
            "8"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "level_of_membership",
            "from",
            "visitor",
            "where",
            "name",
            "=",
            "\"gonzalo",
            "higua\u00edn",
            "\"",
            "result0"
        ],
        "response_blank_res": "the membership level of Gonzalo Higua\u00edn is result0",
        "response_toks_blank_res": [
            "the",
            "membership",
            "level",
            "of",
            "Gonzalo",
            "Higua\u00edn",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "museum_visit",
        "query": "SELECT name FROM visitor WHERE Level_of_membership =  5",
        "query_toks": [
            "select",
            "name",
            "from",
            "visitor",
            "where",
            "level_of_membership",
            "=",
            "5"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Guti Midfielder"
            ]
        ],
        "response": "Guti Midfielder is the only visitor with membership Level 5",
        "response_toks": [
            "Guti",
            "Midfielder",
            "is",
            "the",
            "only",
            "visitor",
            "with",
            "membership",
            "Level",
            "5"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT name FROM visitor WHERE Level_of_membership =  5",
        "query_w_results_blank_res": "SELECT name FROM visitor WHERE Level_of_membership =  5",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "visitor",
            "where",
            "level_of_membership",
            "=",
            "5"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "visitor",
            "where",
            "level_of_membership",
            "=",
            "5"
        ],
        "response_blank_res": "Guti Midfielder is the only visitor with membership Level 5",
        "response_toks_blank_res": [
            "Guti",
            "Midfielder",
            "is",
            "the",
            "only",
            "visitor",
            "with",
            "membership",
            "Level",
            "5"
        ]
    },
    {
        "database_id": "museum_visit",
        "query": "SELECT count ( * )  FROM visitor WHERE Level_of_membership>5",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "visitor",
            "where",
            "level_of_membership",
            ">",
            "5"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                2
            ]
        ],
        "response": "2 people have membership level is greater than 5",
        "response_toks": [
            "2",
            "people",
            "have",
            "membership",
            "level",
            "is",
            "greater",
            "than",
            "5"
        ],
        "results_map": {
            "result0": "2"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM visitor WHERE Level_of_membership>5 | 2 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM visitor WHERE Level_of_membership>5 | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "visitor",
            "where",
            "level_of_membership",
            ">",
            "5",
            "2"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "visitor",
            "where",
            "level_of_membership",
            ">",
            "5",
            "result0"
        ],
        "response_blank_res": "result0 people have membership level is greater than 5",
        "response_toks_blank_res": [
            "result0",
            "people",
            "have",
            "membership",
            "level",
            "is",
            "greater",
            "than",
            "5"
        ]
    },
    {
        "database_id": "museum_visit",
        "query": "SELECT age FROM visitor WHERE Level_of_membership   = 8",
        "query_toks": [
            "select",
            "age",
            "from",
            "visitor",
            "where",
            "level_of_membership",
            "=",
            "8"
        ],
        "results_raw": [
            [
                "Age"
            ],
            [
                35
            ]
        ],
        "response": "the age of the visitor with membership level 8 is 35",
        "response_toks": [
            "the",
            "age",
            "of",
            "the",
            "visitor",
            "with",
            "membership",
            "level",
            "8",
            "is",
            "35"
        ],
        "results_map": {
            "result0": "35"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT age FROM visitor WHERE Level_of_membership   = 8 | 35 ",
        "query_w_results_blank_res": "SELECT age FROM visitor WHERE Level_of_membership   = 8 | result0 ",
        "query_toks_w_results": [
            "select",
            "age",
            "from",
            "visitor",
            "where",
            "level_of_membership",
            "=",
            "8",
            "35"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "age",
            "from",
            "visitor",
            "where",
            "level_of_membership",
            "=",
            "8",
            "result0"
        ],
        "response_blank_res": "the age of the visitor with membership level 8 is result0",
        "response_toks_blank_res": [
            "the",
            "age",
            "of",
            "the",
            "visitor",
            "with",
            "membership",
            "level",
            "8",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "museum_visit",
        "query": "SELECT count ( * )  FROM visitor WHERE Level_of_membership > 4",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "visitor",
            "where",
            "level_of_membership",
            ">",
            "4"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                3
            ]
        ],
        "response": "There are 3  persons who have membership level greater than 4",
        "response_toks": [
            "There",
            "are",
            "3",
            "persons",
            "who",
            "have",
            "membership",
            "level",
            "greater",
            "than",
            "4"
        ],
        "results_map": {
            "result0": "3"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM visitor WHERE Level_of_membership > 4 | 3 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM visitor WHERE Level_of_membership > 4 | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "visitor",
            "where",
            "level_of_membership",
            ">",
            "4",
            "3"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "visitor",
            "where",
            "level_of_membership",
            ">",
            "4",
            "result0"
        ],
        "response_blank_res": "There are result0 persons who have membership level greater than 4",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "persons",
            "who",
            "have",
            "membership",
            "level",
            "greater",
            "than",
            "4"
        ]
    },
    {
        "database_id": "museum_visit",
        "query": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC",
        "query_toks": [
            "select",
            "name",
            ",",
            "level_of_membership",
            "from",
            "visitor",
            "where",
            "level_of_membership",
            ">",
            "4",
            "order",
            "by",
            "age",
            "desc"
        ],
        "results_raw": [
            [
                "Name",
                "Level_of_membership"
            ],
            [
                "Fernando Gago",
                6
            ],
            [
                "Gonzalo Higua\u00edn ",
                8
            ],
            [
                "Guti Midfielder",
                5
            ]
        ],
        "response": "Here are  the names and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "names",
            "and",
            "membership",
            "level",
            "of",
            "the",
            "visitors",
            "whose",
            "membership",
            "level",
            "is",
            "higher",
            "than",
            "4",
            ",",
            "and",
            "sort",
            "by",
            "their",
            "age",
            "from",
            "old",
            "to",
            "young",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC",
        "query_w_results_blank_res": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC",
        "query_toks_w_results": [
            "select",
            "name",
            ",",
            "level_of_membership",
            "from",
            "visitor",
            "where",
            "level_of_membership",
            ">",
            "4",
            "order",
            "by",
            "age",
            "desc"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            ",",
            "level_of_membership",
            "from",
            "visitor",
            "where",
            "level_of_membership",
            ">",
            "4",
            "order",
            "by",
            "age",
            "desc"
        ],
        "response_blank_res": "Here are the names and membership level of the visitors whose membership level is higher than 4 , and sort by their age from old to young .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "names",
            "and",
            "membership",
            "level",
            "of",
            "the",
            "visitors",
            "whose",
            "membership",
            "level",
            "is",
            "higher",
            "than",
            "4",
            ",",
            "and",
            "sort",
            "by",
            "their",
            "age",
            "from",
            "old",
            "to",
            "young",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode GROUP BY T1.Name ORDER BY COUNT ( * )  DESC LIMIT 1",
        "query_toks": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "group",
            "by",
            "t1",
            ".",
            "name",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Canada"
            ]
        ],
        "response": "Canada is the name of the country that speaks the largest number of languages.",
        "response_toks": [
            "Canada",
            "is",
            "the",
            "name",
            "of",
            "the",
            "country",
            "that",
            "speaks",
            "the",
            "largest",
            "number",
            "of",
            "languages",
            "."
        ],
        "results_map": {
            "result0": "Canada"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode GROUP BY T1.Name ORDER BY COUNT ( * )  DESC LIMIT 1 | Canada ",
        "query_w_results_blank_res": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode GROUP BY T1.Name ORDER BY COUNT ( * )  DESC LIMIT 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "group",
            "by",
            "t1",
            ".",
            "name",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1",
            "Canada"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "group",
            "by",
            "t1",
            ".",
            "name",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "result0 is the name of the country that speaks the largest number of languages .",
        "response_toks_blank_res": [
            "result0",
            "is",
            "the",
            "name",
            "of",
            "the",
            "country",
            "that",
            "speaks",
            "the",
            "largest",
            "number",
            "of",
            "languages",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT count ( * )  FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode where T1.name  =  \"Canada\"",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t1",
            ".",
            "name",
            "=",
            "\"canada\""
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                12
            ]
        ],
        "response": "There are 12 languages spoken in Canada",
        "response_toks": [
            "There",
            "are",
            "12",
            "languages",
            "spoken",
            "in",
            "Canada"
        ],
        "results_map": {
            "result0": "12"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode where T1.name  =  \"Canada\" | 12 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode where T1.name  =  \"Canada\" | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t1",
            ".",
            "name",
            "=",
            "\"canada\"",
            "12"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t1",
            ".",
            "name",
            "=",
            "\"canada\"",
            "result0"
        ],
        "response_blank_res": "There are result0 languages spoken in Canada",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "languages",
            "spoken",
            "in",
            "Canada"
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT T2.language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode where T1.name  =  \"Canada\"",
        "query_toks": [
            "select",
            "t2",
            ".",
            "language",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t1",
            ".",
            "name",
            "=",
            "\"canada\""
        ],
        "results_raw": [
            [
                "Language"
            ],
            [
                "Chinese"
            ],
            [
                "Dutch"
            ],
            [
                "English"
            ]
        ],
        "response": "Here are the languages spoken by Canada.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "languages",
            "spoken",
            "by",
            "Canada",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T2.language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode where T1.name  =  \"Canada\"",
        "query_w_results_blank_res": "SELECT T2.language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode where T1.name  =  \"Canada\"",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "language",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t1",
            ".",
            "name",
            "=",
            "\"canada\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "language",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t1",
            ".",
            "name",
            "=",
            "\"canada\""
        ],
        "response_blank_res": "Here are the languages spoken by Canada .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "languages",
            "spoken",
            "by",
            "Canada",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT count ( distinct CountryCode )  FROM countrylanguage WHERE Language  =  \"Chinese\"",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "countrycode",
            ")",
            "from",
            "countrylanguage",
            "where",
            "language",
            "=",
            "\"chinese\""
        ],
        "results_raw": [
            [
                "count(distinct CountryCode)"
            ],
            [
                19
            ]
        ],
        "response": "There are 19 countries speaking Chinese.",
        "response_toks": [
            "There",
            "are",
            "19",
            "countries",
            "speaking",
            "Chinese",
            "."
        ],
        "results_map": {
            "result0": "19"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( distinct CountryCode )  FROM countrylanguage WHERE Language  =  \"Chinese\" | 19 ",
        "query_w_results_blank_res": "SELECT count ( distinct CountryCode )  FROM countrylanguage WHERE Language  =  \"Chinese\" | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "distinct",
            "countrycode",
            ")",
            "from",
            "countrylanguage",
            "where",
            "language",
            "=",
            "\"chinese\"",
            "19"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "distinct",
            "countrycode",
            ")",
            "from",
            "countrylanguage",
            "where",
            "language",
            "=",
            "\"chinese\"",
            "result0"
        ],
        "response_blank_res": "There are result0 countries speaking Chinese .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "countries",
            "speaking",
            "Chinese",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT NAME FROM country WHERE Continent  =  \"North America\"",
        "query_toks": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"north",
            "america\""
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Aruba"
            ],
            [
                "Anguilla"
            ],
            [
                "Netherlands Antilles"
            ]
        ],
        "response": "Here are the names of countries in North America.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "names",
            "of",
            "countries",
            "in",
            "North",
            "America",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT NAME FROM country WHERE Continent  =  \"North America\"",
        "query_w_results_blank_res": "SELECT NAME FROM country WHERE Continent  =  \"North America\"",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"north",
            "america\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"north",
            "america\""
        ],
        "response_blank_res": "Here are the names of countries in North America .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "names",
            "of",
            "countries",
            "in",
            "North",
            "America",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT LANGUAGE FROM countrylanguage WHERE countrycode in  ( SELECT Code FROM country WHERE Continent  =  \"North America\" )  and IsOfficial  =  \"T\"",
        "query_toks": [
            "select",
            "language",
            "from",
            "countrylanguage",
            "where",
            "countrycode",
            "in",
            "(",
            "select",
            "code",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"north",
            "america\"",
            ")",
            "and",
            "isofficial",
            "=",
            "\"t\""
        ],
        "results_raw": [
            [
                "Language"
            ],
            [
                "Dutch"
            ],
            [
                "English"
            ],
            [
                "Dutch"
            ]
        ],
        "response": "Here are the official languages of countries in North America.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "official",
            "languages",
            "of",
            "countries",
            "in",
            "North",
            "America",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT LANGUAGE FROM countrylanguage WHERE countrycode in  ( SELECT Code FROM country WHERE Continent  =  \"North America\" )  and IsOfficial  =  \"T\"",
        "query_w_results_blank_res": "SELECT LANGUAGE FROM countrylanguage WHERE countrycode in  ( SELECT Code FROM country WHERE Continent  =  \"North America\" )  and IsOfficial  =  \"T\"",
        "query_toks_w_results": [
            "select",
            "language",
            "from",
            "countrylanguage",
            "where",
            "countrycode",
            "in",
            "(",
            "select",
            "code",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"north",
            "america\"",
            ")",
            "and",
            "isofficial",
            "=",
            "\"t\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "language",
            "from",
            "countrylanguage",
            "where",
            "countrycode",
            "in",
            "(",
            "select",
            "code",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"north",
            "america\"",
            ")",
            "and",
            "isofficial",
            "=",
            "\"t\""
        ],
        "response_blank_res": "Here are the official languages of countries in North America .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "official",
            "languages",
            "of",
            "countries",
            "in",
            "North",
            "America",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT LifeExpectancy FROM country WHERE name  =  \"Canada\"",
        "query_toks": [
            "select",
            "lifeexpectancy",
            "from",
            "country",
            "where",
            "name",
            "=",
            "\"canada\""
        ],
        "results_raw": [
            [
                "LifeExpectancy"
            ],
            [
                79.4
            ]
        ],
        "response": "Life expectancy in Canada is 79.4.",
        "response_toks": [
            "Life",
            "expectancy",
            "in",
            "Canada",
            "is",
            "79.4",
            "."
        ],
        "results_map": {
            "result0": "79.4"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT LifeExpectancy FROM country WHERE name  =  \"Canada\" | 79.4 ",
        "query_w_results_blank_res": "SELECT LifeExpectancy FROM country WHERE name  =  \"Canada\" | result0 ",
        "query_toks_w_results": [
            "select",
            "lifeexpectancy",
            "from",
            "country",
            "where",
            "name",
            "=",
            "\"canada\"",
            "79.4"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "lifeexpectancy",
            "from",
            "country",
            "where",
            "name",
            "=",
            "\"canada\"",
            "result0"
        ],
        "response_blank_res": "Life expectancy in Canada is result0 .",
        "response_toks_blank_res": [
            "Life",
            "expectancy",
            "in",
            "Canada",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "pets_1",
        "query": "SELECT count ( * )  FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid GROUP BY T1.stuid HAVING count ( * )   >  1",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "group",
            "by",
            "t1",
            ".",
            "stuid",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                2
            ]
        ],
        "response": "There are 2 students who have more than one pet.",
        "response_toks": [
            "There",
            "are",
            "2",
            "students",
            "who",
            "have",
            "more",
            "than",
            "one",
            "pet",
            "."
        ],
        "results_map": {
            "result0": "2"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid GROUP BY T1.stuid HAVING count ( * )   >  1 | 2 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid GROUP BY T1.stuid HAVING count ( * )   >  1 | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "group",
            "by",
            "t1",
            ".",
            "stuid",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1",
            "2"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "group",
            "by",
            "t1",
            ".",
            "stuid",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1",
            "result0"
        ],
        "response_blank_res": "There are result0 students who have more than one pet .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "students",
            "who",
            "have",
            "more",
            "than",
            "one",
            "pet",
            "."
        ]
    },
    {
        "database_id": "pets_1",
        "query": "SELECT T1.lname, T1.fname  FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid GROUP BY T1.stuid HAVING count ( * )   >  1",
        "query_toks": [
            "select",
            "t1",
            ".",
            "lname",
            ",",
            "t1",
            ".",
            "fname",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "group",
            "by",
            "t1",
            ".",
            "stuid",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "results_raw": [
            [
                "LName",
                "Fname"
            ],
            [
                "Kim",
                "Tracy"
            ]
        ],
        "response": "Kim Tracy is the name of the student who has more than one pet.",
        "response_toks": [
            "Kim",
            "Tracy",
            "is",
            "the",
            "name",
            "of",
            "the",
            "student",
            "who",
            "has",
            "more",
            "than",
            "one",
            "pet",
            "."
        ],
        "results_map": {
            "result0": "Kim",
            "result1": "Tracy"
        },
        "results_blank_res": "result0 result1 ",
        "query_w_results": "SELECT T1.lname, T1.fname  FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid GROUP BY T1.stuid HAVING count ( * )   >  1 | Kim Tracy ",
        "query_w_results_blank_res": "SELECT T1.lname, T1.fname  FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid GROUP BY T1.stuid HAVING count ( * )   >  1 | result0 result1 ",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "lname",
            ",",
            "t1",
            ".",
            "fname",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "group",
            "by",
            "t1",
            ".",
            "stuid",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1",
            "Kim",
            "Tracy"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "lname",
            ",",
            "t1",
            ".",
            "fname",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "group",
            "by",
            "t1",
            ".",
            "stuid",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1",
            "result0",
            "result1"
        ],
        "response_blank_res": "result0 result1 is the name of the student who has more than one pet .",
        "response_toks_blank_res": [
            "result0",
            "result1",
            "is",
            "the",
            "name",
            "of",
            "the",
            "student",
            "who",
            "has",
            "more",
            "than",
            "one",
            "pet",
            "."
        ]
    },
    {
        "database_id": "pets_1",
        "query": "SELECT T1.lname, T1.fname, T1.sex  FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid GROUP BY T1.stuid HAVING count ( * )   >  1",
        "query_toks": [
            "select",
            "t1",
            ".",
            "lname",
            ",",
            "t1",
            ".",
            "fname",
            ",",
            "t1",
            ".",
            "sex",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "group",
            "by",
            "t1",
            ".",
            "stuid",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "results_raw": [
            [
                "LName",
                "Fname",
                "Sex"
            ],
            [
                "Kim",
                "Tracy",
                "F"
            ]
        ],
        "response": "Kim Tracy is female.",
        "response_toks": [
            "Kim",
            "Tracy",
            "is",
            "female",
            "."
        ],
        "results_map": {
            "result0": "Kim",
            "result1": "Tracy"
        },
        "results_blank_res": "result0 result1 ",
        "query_w_results": "SELECT T1.lname, T1.fname, T1.sex  FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid GROUP BY T1.stuid HAVING count ( * )   >  1 | Kim Tracy ",
        "query_w_results_blank_res": "SELECT T1.lname, T1.fname, T1.sex  FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid GROUP BY T1.stuid HAVING count ( * )   >  1 | result0 result1 ",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "lname",
            ",",
            "t1",
            ".",
            "fname",
            ",",
            "t1",
            ".",
            "sex",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "group",
            "by",
            "t1",
            ".",
            "stuid",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1",
            "Kim",
            "Tracy"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "lname",
            ",",
            "t1",
            ".",
            "fname",
            ",",
            "t1",
            ".",
            "sex",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "group",
            "by",
            "t1",
            ".",
            "stuid",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1",
            "result0",
            "result1"
        ],
        "response_blank_res": "result0 result1 is female .",
        "response_toks_blank_res": [
            "result0",
            "result1",
            "is",
            "female",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "select count ( * )  from  ( SELECT region FROM country WHERE Continent   =   \"Asia\" group by region ) ",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "(",
            "select",
            "region",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"asia\"",
            "group",
            "by",
            "region",
            ")"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                4
            ]
        ],
        "response": "There are 4 regions in Asia.",
        "response_toks": [
            "There",
            "are",
            "4",
            "regions",
            "in",
            "Asia",
            "."
        ],
        "results_map": {
            "result0": "4"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "select count ( * )  from  ( SELECT region FROM country WHERE Continent   =   \"Asia\" group by region )  | 4 ",
        "query_w_results_blank_res": "select count ( * )  from  ( SELECT region FROM country WHERE Continent   =   \"Asia\" group by region )  | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "(",
            "select",
            "region",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"asia\"",
            "group",
            "by",
            "region",
            ")",
            "4"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "(",
            "select",
            "region",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"asia\"",
            "group",
            "by",
            "region",
            ")",
            "result0"
        ],
        "response_blank_res": "There are result0 regions in Asia .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "regions",
            "in",
            "Asia",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "select count ( * )  from  ( SELECT region FROM country WHERE Continent   =   \"Europe\" group by region ) ",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "(",
            "select",
            "region",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"europe\"",
            "group",
            "by",
            "region",
            ")"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                6
            ]
        ],
        "response": "There are 6 regions in Europe.",
        "response_toks": [
            "There",
            "are",
            "6",
            "regions",
            "in",
            "Europe",
            "."
        ],
        "results_map": {
            "result0": "6"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "select count ( * )  from  ( SELECT region FROM country WHERE Continent   =   \"Europe\" group by region )  | 6 ",
        "query_w_results_blank_res": "select count ( * )  from  ( SELECT region FROM country WHERE Continent   =   \"Europe\" group by region )  | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "(",
            "select",
            "region",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"europe\"",
            "group",
            "by",
            "region",
            ")",
            "6"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "(",
            "select",
            "region",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"europe\"",
            "group",
            "by",
            "region",
            ")",
            "result0"
        ],
        "response_blank_res": "There are result0 regions in Europe .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "regions",
            "in",
            "Europe",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT sum ( SurfaceArea )  FROM country WHERE Continent   =   \"Asia\" OR Continent   =   \"Europe\"",
        "query_toks": [
            "select",
            "sum",
            "(",
            "surfacearea",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"asia\"",
            "or",
            "continent",
            "=",
            "\"europe\""
        ],
        "results_raw": [
            [
                "sum(SurfaceArea)"
            ],
            [
                54930138.9
            ]
        ],
        "response": "The total surface area of continents Asia and Europe are 54930138.9.",
        "response_toks": [
            "The",
            "total",
            "surface",
            "area",
            "of",
            "continents",
            "Asia",
            "and",
            "Europe",
            "are",
            "54930138.9",
            "."
        ],
        "results_map": {
            "result0": "54930138.9"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT sum ( SurfaceArea )  FROM country WHERE Continent   =   \"Asia\" OR Continent   =   \"Europe\" | 54930138.9 ",
        "query_w_results_blank_res": "SELECT sum ( SurfaceArea )  FROM country WHERE Continent   =   \"Asia\" OR Continent   =   \"Europe\" | result0 ",
        "query_toks_w_results": [
            "select",
            "sum",
            "(",
            "surfacearea",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"asia\"",
            "or",
            "continent",
            "=",
            "\"europe\"",
            "54930138.9"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "sum",
            "(",
            "surfacearea",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"asia\"",
            "or",
            "continent",
            "=",
            "\"europe\"",
            "result0"
        ],
        "response_blank_res": "The total surface area of continents Asia and Europe are result0 .",
        "response_toks_blank_res": [
            "The",
            "total",
            "surface",
            "area",
            "of",
            "continents",
            "Asia",
            "and",
            "Europe",
            "are",
            "result0",
            "."
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count ( * )  FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code   =  T2.template_type_code WHERE T1.template_type_description   =   \"Presentation\"",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "ref_template_types",
            "as",
            "t1",
            "join",
            "templates",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "template_type_code",
            "=",
            "t2",
            ".",
            "template_type_code",
            "where",
            "t1",
            ".",
            "template_type_description",
            "=",
            "\"presentation\""
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                3
            ]
        ],
        "response": "There are 3 templates that have the template type description \"Presentation\"",
        "response_toks": [
            "There",
            "are",
            "3",
            "templates",
            "that",
            "have",
            "the",
            "template",
            "type",
            "description",
            "``",
            "Presentation",
            "''"
        ],
        "results_map": {
            "result0": "3"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code   =  T2.template_type_code WHERE T1.template_type_description   =   \"Presentation\" | 3 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code   =  T2.template_type_code WHERE T1.template_type_description   =   \"Presentation\" | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "ref_template_types",
            "as",
            "t1",
            "join",
            "templates",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "template_type_code",
            "=",
            "t2",
            ".",
            "template_type_code",
            "where",
            "t1",
            ".",
            "template_type_description",
            "=",
            "\"presentation\"",
            "3"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "ref_template_types",
            "as",
            "t1",
            "join",
            "templates",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "template_type_code",
            "=",
            "t2",
            ".",
            "template_type_code",
            "where",
            "t1",
            ".",
            "template_type_description",
            "=",
            "\"presentation\"",
            "result0"
        ],
        "response_blank_res": "There are result0 templates that have the template type description `` Presentation ''",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "templates",
            "that",
            "have",
            "the",
            "template",
            "type",
            "description",
            "``",
            "Presentation",
            "''"
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code   =  T2.template_type_code WHERE T1.template_type_description   =   \"Presentation\"",
        "query_toks": [
            "select",
            "t2",
            ".",
            "template_id",
            "from",
            "ref_template_types",
            "as",
            "t1",
            "join",
            "templates",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "template_type_code",
            "=",
            "t2",
            ".",
            "template_type_code",
            "where",
            "t1",
            ".",
            "template_type_description",
            "=",
            "\"presentation\""
        ],
        "results_raw": [
            [
                "Template_ID"
            ],
            [
                6
            ],
            [
                7
            ],
            [
                10
            ]
        ],
        "response": "Here are the template ids with template type description \"Presentation\"",
        "response_toks": [
            "Here",
            "are",
            "the",
            "template",
            "ids",
            "with",
            "template",
            "type",
            "description",
            "``",
            "Presentation",
            "''"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code   =  T2.template_type_code WHERE T1.template_type_description   =   \"Presentation\"",
        "query_w_results_blank_res": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code   =  T2.template_type_code WHERE T1.template_type_description   =   \"Presentation\"",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "template_id",
            "from",
            "ref_template_types",
            "as",
            "t1",
            "join",
            "templates",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "template_type_code",
            "=",
            "t2",
            ".",
            "template_type_code",
            "where",
            "t1",
            ".",
            "template_type_description",
            "=",
            "\"presentation\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "template_id",
            "from",
            "ref_template_types",
            "as",
            "t1",
            "join",
            "templates",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "template_type_code",
            "=",
            "t2",
            ".",
            "template_type_code",
            "where",
            "t1",
            ".",
            "template_type_description",
            "=",
            "\"presentation\""
        ],
        "response_blank_res": "Here are the template ids with template type description `` Presentation ''",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "template",
            "ids",
            "with",
            "template",
            "type",
            "description",
            "``",
            "Presentation",
            "''"
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T2.template_id, T2.Template_Type_Code FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code   =  T2.template_type_code WHERE T1.template_type_description   =   \"Presentation\"",
        "query_toks": [
            "select",
            "t2",
            ".",
            "template_id",
            ",",
            "t2",
            ".",
            "template_type_code",
            "from",
            "ref_template_types",
            "as",
            "t1",
            "join",
            "templates",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "template_type_code",
            "=",
            "t2",
            ".",
            "template_type_code",
            "where",
            "t1",
            ".",
            "template_type_description",
            "=",
            "\"presentation\""
        ],
        "results_raw": [
            [
                "Template_ID",
                "Template_Type_Code"
            ],
            [
                6,
                "PPT"
            ],
            [
                7,
                "PPT"
            ],
            [
                10,
                "PPT"
            ]
        ],
        "response": "Here are the ids and type codes of templates with type description \"Presentation\"",
        "response_toks": [
            "Here",
            "are",
            "the",
            "ids",
            "and",
            "type",
            "codes",
            "of",
            "templates",
            "with",
            "type",
            "description",
            "``",
            "Presentation",
            "''"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T2.template_id, T2.Template_Type_Code FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code   =  T2.template_type_code WHERE T1.template_type_description   =   \"Presentation\"",
        "query_w_results_blank_res": "SELECT T2.template_id, T2.Template_Type_Code FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code   =  T2.template_type_code WHERE T1.template_type_description   =   \"Presentation\"",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "template_id",
            ",",
            "t2",
            ".",
            "template_type_code",
            "from",
            "ref_template_types",
            "as",
            "t1",
            "join",
            "templates",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "template_type_code",
            "=",
            "t2",
            ".",
            "template_type_code",
            "where",
            "t1",
            ".",
            "template_type_description",
            "=",
            "\"presentation\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "template_id",
            ",",
            "t2",
            ".",
            "template_type_code",
            "from",
            "ref_template_types",
            "as",
            "t1",
            "join",
            "templates",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "template_type_code",
            "=",
            "t2",
            ".",
            "template_type_code",
            "where",
            "t1",
            ".",
            "template_type_description",
            "=",
            "\"presentation\""
        ],
        "response_blank_res": "Here are the ids and type codes of templates with type description `` Presentation ''",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "ids",
            "and",
            "type",
            "codes",
            "of",
            "templates",
            "with",
            "type",
            "description",
            "``",
            "Presentation",
            "''"
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT count ( * )   FROM Transcript_Contents GROUP BY student_course_id ORDER BY count ( * )  DESC LIMIT 1",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "transcript_contents",
            "group",
            "by",
            "student_course_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                4
            ]
        ],
        "response": "The most number times of a course enrollment result show in different transcripts is 4.",
        "response_toks": [
            "The",
            "most",
            "number",
            "times",
            "of",
            "a",
            "course",
            "enrollment",
            "result",
            "show",
            "in",
            "different",
            "transcripts",
            "is",
            "4",
            "."
        ],
        "results_map": {
            "result0": "4"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )   FROM Transcript_Contents GROUP BY student_course_id ORDER BY count ( * )  DESC LIMIT 1 | 4 ",
        "query_w_results_blank_res": "SELECT count ( * )   FROM Transcript_Contents GROUP BY student_course_id ORDER BY count ( * )  DESC LIMIT 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "transcript_contents",
            "group",
            "by",
            "student_course_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1",
            "4"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "transcript_contents",
            "group",
            "by",
            "student_course_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "The most number times of a course enrollment result show in different transcripts is result0 .",
        "response_toks_blank_res": [
            "The",
            "most",
            "number",
            "times",
            "of",
            "a",
            "course",
            "enrollment",
            "result",
            "show",
            "in",
            "different",
            "transcripts",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count ( * )  DESC LIMIT 1",
        "query_toks": [
            "select",
            "student_course_id",
            "from",
            "transcript_contents",
            "group",
            "by",
            "student_course_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "student_course_id"
            ],
            [
                0
            ]
        ],
        "response": "0 is the student course id of the course whose enrollment result shows the most number times in different transcripts.",
        "response_toks": [
            "0",
            "is",
            "the",
            "student",
            "course",
            "id",
            "of",
            "the",
            "course",
            "whose",
            "enrollment",
            "result",
            "shows",
            "the",
            "most",
            "number",
            "times",
            "in",
            "different",
            "transcripts",
            "."
        ],
        "results_map": {
            "result0": "0"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count ( * )  DESC LIMIT 1 | 0 ",
        "query_w_results_blank_res": "SELECT student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count ( * )  DESC LIMIT 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "student_course_id",
            "from",
            "transcript_contents",
            "group",
            "by",
            "student_course_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1",
            "0"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "student_course_id",
            "from",
            "transcript_contents",
            "group",
            "by",
            "student_course_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "result0 is the student course id of the course whose enrollment result shows the most number times in different transcripts .",
        "response_toks_blank_res": [
            "result0",
            "is",
            "the",
            "student",
            "course",
            "id",
            "of",
            "the",
            "course",
            "whose",
            "enrollment",
            "result",
            "shows",
            "the",
            "most",
            "number",
            "times",
            "in",
            "different",
            "transcripts",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT count ( * )  FROM Transcript_Contents GROUP BY student_course_id ORDER BY count ( * )  LIMIT 1",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "transcript_contents",
            "group",
            "by",
            "student_course_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                1
            ]
        ],
        "response": "the least number of times of a course enrollment result shows in different transcripts is 1.",
        "response_toks": [
            "the",
            "least",
            "number",
            "of",
            "times",
            "of",
            "a",
            "course",
            "enrollment",
            "result",
            "shows",
            "in",
            "different",
            "transcripts",
            "is",
            "1",
            "."
        ],
        "results_map": {
            "result0": "1"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM Transcript_Contents GROUP BY student_course_id ORDER BY count ( * )  LIMIT 1 | 1 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM Transcript_Contents GROUP BY student_course_id ORDER BY count ( * )  LIMIT 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "transcript_contents",
            "group",
            "by",
            "student_course_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "limit",
            "1",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "transcript_contents",
            "group",
            "by",
            "student_course_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "the least number of times of a course enrollment result shows in different transcripts is result0 .",
        "response_toks_blank_res": [
            "the",
            "least",
            "number",
            "of",
            "times",
            "of",
            "a",
            "course",
            "enrollment",
            "result",
            "shows",
            "in",
            "different",
            "transcripts",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count ( * )  LIMIT 1",
        "query_toks": [
            "select",
            "student_course_id",
            "from",
            "transcript_contents",
            "group",
            "by",
            "student_course_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "student_course_id"
            ],
            [
                2
            ]
        ],
        "response": "2 is the student course id of the course whose enrollment result shows the least number times in different transcripts.",
        "response_toks": [
            "2",
            "is",
            "the",
            "student",
            "course",
            "id",
            "of",
            "the",
            "course",
            "whose",
            "enrollment",
            "result",
            "shows",
            "the",
            "least",
            "number",
            "times",
            "in",
            "different",
            "transcripts",
            "."
        ],
        "results_map": {
            "result0": "2"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count ( * )  LIMIT 1 | 2 ",
        "query_w_results_blank_res": "SELECT  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count ( * )  LIMIT 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "student_course_id",
            "from",
            "transcript_contents",
            "group",
            "by",
            "student_course_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "limit",
            "1",
            "2"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "student_course_id",
            "from",
            "transcript_contents",
            "group",
            "by",
            "student_course_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "result0 is the student course id of the course whose enrollment result shows the least number times in different transcripts .",
        "response_toks_blank_res": [
            "result0",
            "is",
            "the",
            "student",
            "course",
            "id",
            "of",
            "the",
            "course",
            "whose",
            "enrollment",
            "result",
            "shows",
            "the",
            "least",
            "number",
            "times",
            "in",
            "different",
            "transcripts",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT avg ( student_course_id )  FROM Transcript_Contents",
        "query_toks": [
            "select",
            "avg",
            "(",
            "student_course_id",
            ")",
            "from",
            "transcript_contents"
        ],
        "results_raw": [
            [
                "avg(student_course_id)"
            ],
            [
                9664788.666666666
            ]
        ],
        "response": "The average of student course ids is 9664788.666666666.",
        "response_toks": [
            "The",
            "average",
            "of",
            "student",
            "course",
            "ids",
            "is",
            "9664788.666666666",
            "."
        ],
        "results_map": {
            "result0": "9664788.666666666"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT avg ( student_course_id )  FROM Transcript_Contents | 9664788.666666666 ",
        "query_w_results_blank_res": "SELECT avg ( student_course_id )  FROM Transcript_Contents | result0 ",
        "query_toks_w_results": [
            "select",
            "avg",
            "(",
            "student_course_id",
            ")",
            "from",
            "transcript_contents",
            "9664788.666666666"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "avg",
            "(",
            "student_course_id",
            ")",
            "from",
            "transcript_contents",
            "result0"
        ],
        "response_blank_res": "The average of student course ids is result0 .",
        "response_toks_blank_res": [
            "The",
            "average",
            "of",
            "student",
            "course",
            "ids",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "real_estate_properties",
        "query": "SELECT property_name FROM Properties WHERE room_count  >  1",
        "query_toks": [
            "select",
            "property_name",
            "from",
            "properties",
            "where",
            "room_count",
            ">",
            "1"
        ],
        "results_raw": [
            [
                "property_name"
            ],
            [
                "park"
            ],
            [
                "prism"
            ],
            [
                "riverside"
            ]
        ],
        "response": "Here are the names of the properties with more than 1 room",
        "response_toks": [
            "Here",
            "are",
            "the",
            "names",
            "of",
            "the",
            "properties",
            "with",
            "more",
            "than",
            "1",
            "room"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT property_name FROM Properties WHERE room_count  >  1",
        "query_w_results_blank_res": "SELECT property_name FROM Properties WHERE room_count  >  1",
        "query_toks_w_results": [
            "select",
            "property_name",
            "from",
            "properties",
            "where",
            "room_count",
            ">",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "property_name",
            "from",
            "properties",
            "where",
            "room_count",
            ">",
            "1"
        ],
        "response_blank_res": "Here are the names of the properties with more than 1 room",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "names",
            "of",
            "the",
            "properties",
            "with",
            "more",
            "than",
            "1",
            "room"
        ]
    },
    {
        "database_id": "real_estate_properties",
        "query": "SELECT property_name FROM Properties WHERE property_type_code   =   \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code   =   \"Apartment\" AND room_count  >  1",
        "query_toks": [
            "select",
            "property_name",
            "from",
            "properties",
            "where",
            "property_type_code",
            "=",
            "\"house\"",
            "union",
            "select",
            "property_name",
            "from",
            "properties",
            "where",
            "property_type_code",
            "=",
            "\"apartment\"",
            "and",
            "room_count",
            ">",
            "1"
        ],
        "results_raw": [
            [
                "property_name"
            ],
            [
                "longacre"
            ],
            [
                "parc coliseum"
            ],
            [
                "parc east"
            ]
        ],
        "response": "Here are the names of the properties that are either houses or apartments with more than one room",
        "response_toks": [
            "Here",
            "are",
            "the",
            "names",
            "of",
            "the",
            "properties",
            "that",
            "are",
            "either",
            "houses",
            "or",
            "apartments",
            "with",
            "more",
            "than",
            "one",
            "room"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT property_name FROM Properties WHERE property_type_code   =   \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code   =   \"Apartment\" AND room_count  >  1",
        "query_w_results_blank_res": "SELECT property_name FROM Properties WHERE property_type_code   =   \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code   =   \"Apartment\" AND room_count  >  1",
        "query_toks_w_results": [
            "select",
            "property_name",
            "from",
            "properties",
            "where",
            "property_type_code",
            "=",
            "\"house\"",
            "union",
            "select",
            "property_name",
            "from",
            "properties",
            "where",
            "property_type_code",
            "=",
            "\"apartment\"",
            "and",
            "room_count",
            ">",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "property_name",
            "from",
            "properties",
            "where",
            "property_type_code",
            "=",
            "\"house\"",
            "union",
            "select",
            "property_name",
            "from",
            "properties",
            "where",
            "property_type_code",
            "=",
            "\"apartment\"",
            "and",
            "room_count",
            ">",
            "1"
        ],
        "response_blank_res": "Here are the names of the properties that are either houses or apartments with more than one room",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "names",
            "of",
            "the",
            "properties",
            "that",
            "are",
            "either",
            "houses",
            "or",
            "apartments",
            "with",
            "more",
            "than",
            "one",
            "room"
        ]
    },
    {
        "database_id": "real_estate_properties",
        "query": "SELECT property_name, room_count FROM Properties WHERE property_type_code   =   \"House\" UNION SELECT property_name, room_count FROM Properties WHERE property_type_code   =   \"Apartment\" AND room_count  >  1",
        "query_toks": [
            "select",
            "property_name",
            ",",
            "room_count",
            "from",
            "properties",
            "where",
            "property_type_code",
            "=",
            "\"house\"",
            "union",
            "select",
            "property_name",
            ",",
            "room_count",
            "from",
            "properties",
            "where",
            "property_type_code",
            "=",
            "\"apartment\"",
            "and",
            "room_count",
            ">",
            "1"
        ],
        "results_raw": [
            [
                "property_name",
                "room_count"
            ],
            [
                "longacre",
                5
            ],
            [
                "parc coliseum",
                3
            ],
            [
                "parc east",
                5
            ]
        ],
        "response": "Here are the names and number of rooms of the properties that are either houses or apartments with more than one room",
        "response_toks": [
            "Here",
            "are",
            "the",
            "names",
            "and",
            "number",
            "of",
            "rooms",
            "of",
            "the",
            "properties",
            "that",
            "are",
            "either",
            "houses",
            "or",
            "apartments",
            "with",
            "more",
            "than",
            "one",
            "room"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT property_name, room_count FROM Properties WHERE property_type_code   =   \"House\" UNION SELECT property_name, room_count FROM Properties WHERE property_type_code   =   \"Apartment\" AND room_count  >  1",
        "query_w_results_blank_res": "SELECT property_name, room_count FROM Properties WHERE property_type_code   =   \"House\" UNION SELECT property_name, room_count FROM Properties WHERE property_type_code   =   \"Apartment\" AND room_count  >  1",
        "query_toks_w_results": [
            "select",
            "property_name",
            ",",
            "room_count",
            "from",
            "properties",
            "where",
            "property_type_code",
            "=",
            "\"house\"",
            "union",
            "select",
            "property_name",
            ",",
            "room_count",
            "from",
            "properties",
            "where",
            "property_type_code",
            "=",
            "\"apartment\"",
            "and",
            "room_count",
            ">",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "property_name",
            ",",
            "room_count",
            "from",
            "properties",
            "where",
            "property_type_code",
            "=",
            "\"house\"",
            "union",
            "select",
            "property_name",
            ",",
            "room_count",
            "from",
            "properties",
            "where",
            "property_type_code",
            "=",
            "\"apartment\"",
            "and",
            "room_count",
            ">",
            "1"
        ],
        "response_blank_res": "Here are the names and number of rooms of the properties that are either houses or apartments with more than one room",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "names",
            "and",
            "number",
            "of",
            "rooms",
            "of",
            "the",
            "properties",
            "that",
            "are",
            "either",
            "houses",
            "or",
            "apartments",
            "with",
            "more",
            "than",
            "one",
            "room"
        ]
    },
    {
        "database_id": "real_estate_properties",
        "query": "SELECT count ( * )  FROM Properties WHERE property_type_code   =   \"Apartment\" AND room_count   =   1",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "properties",
            "where",
            "property_type_code",
            "=",
            "\"apartment\"",
            "and",
            "room_count",
            "=",
            "1"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                0
            ]
        ],
        "response": "No. There is no apartment with only 1 room.",
        "response_toks": [
            "No",
            ".",
            "There",
            "is",
            "no",
            "apartment",
            "with",
            "only",
            "1",
            "room",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT count ( * )  FROM Properties WHERE property_type_code   =   \"Apartment\" AND room_count   =   1",
        "query_w_results_blank_res": "SELECT count ( * )  FROM Properties WHERE property_type_code   =   \"Apartment\" AND room_count   =   1",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "properties",
            "where",
            "property_type_code",
            "=",
            "\"apartment\"",
            "and",
            "room_count",
            "=",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "properties",
            "where",
            "property_type_code",
            "=",
            "\"apartment\"",
            "and",
            "room_count",
            "=",
            "1"
        ],
        "response_blank_res": "No . There is no apartment with only 1 room .",
        "response_toks_blank_res": [
            "No",
            ".",
            "There",
            "is",
            "no",
            "apartment",
            "with",
            "only",
            "1",
            "room",
            "."
        ]
    },
    {
        "database_id": "real_estate_properties",
        "query": "SELECT avg ( agreed_selling_price )  FROM Properties WHERE property_type_code   =   \"House\" AND room_count  >  1",
        "query_toks": [
            "select",
            "avg",
            "(",
            "agreed_selling_price",
            ")",
            "from",
            "properties",
            "where",
            "property_type_code",
            "=",
            "\"house\"",
            "and",
            "room_count",
            ">",
            "1"
        ],
        "results_raw": [
            [
                "avg(agreed_selling_price)"
            ],
            [
                4201.8
            ]
        ],
        "response": "4201.8 is the average agreed selling price of all houses with more than one room",
        "response_toks": [
            "4201.8",
            "is",
            "the",
            "average",
            "agreed",
            "selling",
            "price",
            "of",
            "all",
            "houses",
            "with",
            "more",
            "than",
            "one",
            "room"
        ],
        "results_map": {
            "result0": "4201.8"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT avg ( agreed_selling_price )  FROM Properties WHERE property_type_code   =   \"House\" AND room_count  >  1 | 4201.8 ",
        "query_w_results_blank_res": "SELECT avg ( agreed_selling_price )  FROM Properties WHERE property_type_code   =   \"House\" AND room_count  >  1 | result0 ",
        "query_toks_w_results": [
            "select",
            "avg",
            "(",
            "agreed_selling_price",
            ")",
            "from",
            "properties",
            "where",
            "property_type_code",
            "=",
            "\"house\"",
            "and",
            "room_count",
            ">",
            "1",
            "4201.8"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "avg",
            "(",
            "agreed_selling_price",
            ")",
            "from",
            "properties",
            "where",
            "property_type_code",
            "=",
            "\"house\"",
            "and",
            "room_count",
            ">",
            "1",
            "result0"
        ],
        "response_blank_res": "result0 is the average agreed selling price of all houses with more than one room",
        "response_toks_blank_res": [
            "result0",
            "is",
            "the",
            "average",
            "agreed",
            "selling",
            "price",
            "of",
            "all",
            "houses",
            "with",
            "more",
            "than",
            "one",
            "room"
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT count ( * )  from airports",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "airports"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                100
            ]
        ],
        "response": "There are 100 airports",
        "response_toks": [
            "There",
            "are",
            "100",
            "airports"
        ],
        "results_map": {
            "result0": "100"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  from airports | 100 ",
        "query_w_results_blank_res": "SELECT count ( * )  from airports | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "airports",
            "100"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "airports",
            "result0"
        ],
        "response_blank_res": "There are result0 airports",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "airports"
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT count ( distinct sourceairport )  from flights",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "sourceairport",
            ")",
            "from",
            "flights"
        ],
        "results_raw": [
            [
                "count(distinct sourceairport)"
            ],
            [
                100
            ]
        ],
        "response": "There are 100 airports that have flights depart from",
        "response_toks": [
            "There",
            "are",
            "100",
            "airports",
            "that",
            "have",
            "flights",
            "depart",
            "from"
        ],
        "results_map": {
            "result0": "100"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( distinct sourceairport )  from flights | 100 ",
        "query_w_results_blank_res": "SELECT count ( distinct sourceairport )  from flights | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "distinct",
            "sourceairport",
            ")",
            "from",
            "flights",
            "100"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "distinct",
            "sourceairport",
            ")",
            "from",
            "flights",
            "result0"
        ],
        "response_blank_res": "There are result0 airports that have flights depart from",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "airports",
            "that",
            "have",
            "flights",
            "depart",
            "from"
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT count ( * )  from flights where destairport like \"%ASY%\"",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "where",
            "destairport",
            "like",
            "\"%asy%\""
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                19
            ]
        ],
        "response": "There are 19 flights having ASY as its destination airport",
        "response_toks": [
            "There",
            "are",
            "19",
            "flights",
            "having",
            "ASY",
            "as",
            "its",
            "destination",
            "airport"
        ],
        "results_map": {
            "result0": "19"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  from flights where destairport like \"%ASY%\" | 19 ",
        "query_w_results_blank_res": "SELECT count ( * )  from flights where destairport like \"%ASY%\" | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "where",
            "destairport",
            "like",
            "\"%asy%\"",
            "19"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "where",
            "destairport",
            "like",
            "\"%asy%\"",
            "result0"
        ],
        "response_blank_res": "There are result0 flights having ASY as its destination airport",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "flights",
            "having",
            "ASY",
            "as",
            "its",
            "destination",
            "airport"
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT count ( * )  from flights where destairport like \"%ASY%\" and sourceairport like \"%APG%\" UNION SELECT count ( * )  from flights where destairport like \"%ASY%\" and sourceairport like \"%ABR%\"",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "where",
            "destairport",
            "like",
            "\"%asy%\"",
            "and",
            "sourceairport",
            "like",
            "\"%apg%\"",
            "union",
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "where",
            "destairport",
            "like",
            "\"%asy%\"",
            "and",
            "sourceairport",
            "like",
            "\"%abr%\""
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                2
            ]
        ],
        "response": "There are 2 flights having ASY as its destination airport and having APG or ABR as its source airport",
        "response_toks": [
            "There",
            "are",
            "2",
            "flights",
            "having",
            "ASY",
            "as",
            "its",
            "destination",
            "airport",
            "and",
            "having",
            "APG",
            "or",
            "ABR",
            "as",
            "its",
            "source",
            "airport"
        ],
        "results_map": {
            "result0": "2"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  from flights where destairport like \"%ASY%\" and sourceairport like \"%APG%\" UNION SELECT count ( * )  from flights where destairport like \"%ASY%\" and sourceairport like \"%ABR%\" | 2 ",
        "query_w_results_blank_res": "SELECT count ( * )  from flights where destairport like \"%ASY%\" and sourceairport like \"%APG%\" UNION SELECT count ( * )  from flights where destairport like \"%ASY%\" and sourceairport like \"%ABR%\" | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "where",
            "destairport",
            "like",
            "\"%asy%\"",
            "and",
            "sourceairport",
            "like",
            "\"%apg%\"",
            "union",
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "where",
            "destairport",
            "like",
            "\"%asy%\"",
            "and",
            "sourceairport",
            "like",
            "\"%abr%\"",
            "2"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "where",
            "destairport",
            "like",
            "\"%asy%\"",
            "and",
            "sourceairport",
            "like",
            "\"%apg%\"",
            "union",
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "where",
            "destairport",
            "like",
            "\"%asy%\"",
            "and",
            "sourceairport",
            "like",
            "\"%abr%\"",
            "result0"
        ],
        "response_blank_res": "There are result0 flights having ASY as its destination airport and having APG or ABR as its source airport",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "flights",
            "having",
            "ASY",
            "as",
            "its",
            "destination",
            "airport",
            "and",
            "having",
            "APG",
            "or",
            "ABR",
            "as",
            "its",
            "source",
            "airport"
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT flightno from flights where  ( sourceairport like \"%APG%\" or sourceairport like \"%ABR%\" )  and destairport not like \"%ASY%\"",
        "query_toks": [
            "select",
            "flightno",
            "from",
            "flights",
            "where",
            "(",
            "sourceairport",
            "like",
            "\"%apg%\"",
            "or",
            "sourceairport",
            "like",
            "\"%abr%\"",
            ")",
            "and",
            "destairport",
            "not",
            "like",
            "\"%asy%\""
        ],
        "results_raw": [
            [
                "FlightNo"
            ],
            [
                91
            ],
            [
                1275
            ],
            [
                489
            ]
        ],
        "response": "Yes. Here are the flight nos of the flights having APG or ABR as its source airport and don't have ASY as their destination airport.",
        "response_toks": [
            "Yes",
            ".",
            "Here",
            "are",
            "the",
            "flight",
            "nos",
            "of",
            "the",
            "flights",
            "having",
            "APG",
            "or",
            "ABR",
            "as",
            "its",
            "source",
            "airport",
            "and",
            "do",
            "n't",
            "have",
            "ASY",
            "as",
            "their",
            "destination",
            "airport",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT flightno from flights where  ( sourceairport like \"%APG%\" or sourceairport like \"%ABR%\" )  and destairport not like \"%ASY%\"",
        "query_w_results_blank_res": "SELECT flightno from flights where  ( sourceairport like \"%APG%\" or sourceairport like \"%ABR%\" )  and destairport not like \"%ASY%\"",
        "query_toks_w_results": [
            "select",
            "flightno",
            "from",
            "flights",
            "where",
            "(",
            "sourceairport",
            "like",
            "\"%apg%\"",
            "or",
            "sourceairport",
            "like",
            "\"%abr%\"",
            ")",
            "and",
            "destairport",
            "not",
            "like",
            "\"%asy%\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "flightno",
            "from",
            "flights",
            "where",
            "(",
            "sourceairport",
            "like",
            "\"%apg%\"",
            "or",
            "sourceairport",
            "like",
            "\"%abr%\"",
            ")",
            "and",
            "destairport",
            "not",
            "like",
            "\"%asy%\""
        ],
        "response_blank_res": "Yes . Here are the flight nos of the flights having APG or ABR as its source airport and do n't have ASY as their destination airport .",
        "response_toks_blank_res": [
            "Yes",
            ".",
            "Here",
            "are",
            "the",
            "flight",
            "nos",
            "of",
            "the",
            "flights",
            "having",
            "APG",
            "or",
            "ABR",
            "as",
            "its",
            "source",
            "airport",
            "and",
            "do",
            "n't",
            "have",
            "ASY",
            "as",
            "their",
            "destination",
            "airport",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT count ( * )  FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country   =   T2.CountryId WHERE T2.CountryName   =   'germany'",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "countries",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "country",
            "=",
            "t2",
            ".",
            "countryid",
            "where",
            "t2",
            ".",
            "countryname",
            "=",
            "'germany'"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                4
            ]
        ],
        "response": "There are 4 car makers in germany.",
        "response_toks": [
            "There",
            "are",
            "4",
            "car",
            "makers",
            "in",
            "germany",
            "."
        ],
        "results_map": {
            "result0": "4"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country   =   T2.CountryId WHERE T2.CountryName   =   'germany' | 4 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country   =   T2.CountryId WHERE T2.CountryName   =   'germany' | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "countries",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "country",
            "=",
            "t2",
            ".",
            "countryid",
            "where",
            "t2",
            ".",
            "countryname",
            "=",
            "'germany'",
            "4"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "countries",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "country",
            "=",
            "t2",
            ".",
            "countryid",
            "where",
            "t2",
            ".",
            "countryname",
            "=",
            "'germany'",
            "result0"
        ],
        "response_blank_res": "There are result0 car makers in germany .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "car",
            "makers",
            "in",
            "germany",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECt T1.maker FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country   =   T2.CountryId WHERE T2.CountryName   =   'germany'",
        "query_toks": [
            "select",
            "t1",
            ".",
            "maker",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "countries",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "country",
            "=",
            "t2",
            ".",
            "countryid",
            "where",
            "t2",
            ".",
            "countryname",
            "=",
            "'germany'"
        ],
        "results_raw": [
            [
                "Maker"
            ],
            [
                "volkswagen"
            ],
            [
                "bmw"
            ],
            [
                "daimler benz"
            ]
        ],
        "response": "The names of the car makers in germany are shown in the result table.",
        "response_toks": [
            "The",
            "names",
            "of",
            "the",
            "car",
            "makers",
            "in",
            "germany",
            "are",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECt T1.maker FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country   =   T2.CountryId WHERE T2.CountryName   =   'germany'",
        "query_w_results_blank_res": "SELECt T1.maker FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country   =   T2.CountryId WHERE T2.CountryName   =   'germany'",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "maker",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "countries",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "country",
            "=",
            "t2",
            ".",
            "countryid",
            "where",
            "t2",
            ".",
            "countryname",
            "=",
            "'germany'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "maker",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "countries",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "country",
            "=",
            "t2",
            ".",
            "countryid",
            "where",
            "t2",
            ".",
            "countryname",
            "=",
            "'germany'"
        ],
        "response_blank_res": "The names of the car makers in germany are shown in the result table .",
        "response_toks_blank_res": [
            "The",
            "names",
            "of",
            "the",
            "car",
            "makers",
            "in",
            "germany",
            "are",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECt count ( T1.maker )  FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country   =   T2.CountryId WHERE T2.CountryName   =   'usa'",
        "query_toks": [
            "select",
            "count",
            "(",
            "t1",
            ".",
            "maker",
            ")",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "countries",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "country",
            "=",
            "t2",
            ".",
            "countryid",
            "where",
            "t2",
            ".",
            "countryname",
            "=",
            "'usa'"
        ],
        "results_raw": [
            [
                "count(T1.maker)"
            ],
            [
                4
            ]
        ],
        "response": "There are 4 car makers in the USA.",
        "response_toks": [
            "There",
            "are",
            "4",
            "car",
            "makers",
            "in",
            "the",
            "USA",
            "."
        ],
        "results_map": {
            "result0": "4"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECt count ( T1.maker )  FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country   =   T2.CountryId WHERE T2.CountryName   =   'usa' | 4 ",
        "query_w_results_blank_res": "SELECt count ( T1.maker )  FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country   =   T2.CountryId WHERE T2.CountryName   =   'usa' | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "t1",
            ".",
            "maker",
            ")",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "countries",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "country",
            "=",
            "t2",
            ".",
            "countryid",
            "where",
            "t2",
            ".",
            "countryname",
            "=",
            "'usa'",
            "4"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "t1",
            ".",
            "maker",
            ")",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "countries",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "country",
            "=",
            "t2",
            ".",
            "countryid",
            "where",
            "t2",
            ".",
            "countryname",
            "=",
            "'usa'",
            "result0"
        ],
        "response_blank_res": "There are result0 car makers in the USA .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "car",
            "makers",
            "in",
            "the",
            "USA",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECt T1.maker FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country   =   T2.CountryId WHERE T2.CountryName   =   'usa'",
        "query_toks": [
            "select",
            "t1",
            ".",
            "maker",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "countries",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "country",
            "=",
            "t2",
            ".",
            "countryid",
            "where",
            "t2",
            ".",
            "countryname",
            "=",
            "'usa'"
        ],
        "results_raw": [
            [
                "Maker"
            ],
            [
                "amc"
            ],
            [
                "gm"
            ],
            [
                "ford"
            ]
        ],
        "response": "The names of the car makers in the USA are shown in the result table.",
        "response_toks": [
            "The",
            "names",
            "of",
            "the",
            "car",
            "makers",
            "in",
            "the",
            "USA",
            "are",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECt T1.maker FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country   =   T2.CountryId WHERE T2.CountryName   =   'usa'",
        "query_w_results_blank_res": "SELECt T1.maker FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country   =   T2.CountryId WHERE T2.CountryName   =   'usa'",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "maker",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "countries",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "country",
            "=",
            "t2",
            ".",
            "countryid",
            "where",
            "t2",
            ".",
            "countryname",
            "=",
            "'usa'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "maker",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "countries",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "country",
            "=",
            "t2",
            ".",
            "countryid",
            "where",
            "t2",
            ".",
            "countryname",
            "=",
            "'usa'"
        ],
        "response_blank_res": "The names of the car makers in the USA are shown in the result table .",
        "response_toks_blank_res": [
            "The",
            "names",
            "of",
            "the",
            "car",
            "makers",
            "in",
            "the",
            "USA",
            "are",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT first_name ,  last_name, state FROM Owners",
        "query_toks": [
            "select",
            "first_name",
            ",",
            "last_name",
            ",",
            "state",
            "from",
            "owners"
        ],
        "results_raw": [
            [
                "first_name",
                "last_name",
                "state"
            ],
            [
                "Nora",
                "Haley",
                "Wisconsin"
            ],
            [
                "Melisa",
                "DuBuque",
                "Virginia"
            ],
            [
                "Jaclyn",
                "Stoltenberg",
                "Vermont"
            ]
        ],
        "response": "Here are the first and last names of all owners and the states they live in.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "first",
            "and",
            "last",
            "names",
            "of",
            "all",
            "owners",
            "and",
            "the",
            "states",
            "they",
            "live",
            "in",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT first_name ,  last_name, state FROM Owners",
        "query_w_results_blank_res": "SELECT first_name ,  last_name, state FROM Owners",
        "query_toks_w_results": [
            "select",
            "first_name",
            ",",
            "last_name",
            ",",
            "state",
            "from",
            "owners"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "first_name",
            ",",
            "last_name",
            ",",
            "state",
            "from",
            "owners"
        ],
        "response_blank_res": "Here are the first and last names of all owners and the states they live in .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "first",
            "and",
            "last",
            "names",
            "of",
            "all",
            "owners",
            "and",
            "the",
            "states",
            "they",
            "live",
            "in",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT first_name ,  last_name, email_address FROM Owners",
        "query_toks": [
            "select",
            "first_name",
            ",",
            "last_name",
            ",",
            "email_address",
            "from",
            "owners"
        ],
        "results_raw": [
            [
                "first_name",
                "last_name",
                "email_address"
            ],
            [
                "Nora",
                "Haley",
                "lynn81@example.org"
            ],
            [
                "Melisa",
                "DuBuque",
                "ykris@example.com"
            ],
            [
                "Jaclyn",
                "Stoltenberg",
                "hudson.favian@example.com"
            ]
        ],
        "response": "Here are the first and last names and email addresses of all owners",
        "response_toks": [
            "Here",
            "are",
            "the",
            "first",
            "and",
            "last",
            "names",
            "and",
            "email",
            "addresses",
            "of",
            "all",
            "owners"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT first_name ,  last_name, email_address FROM Owners",
        "query_w_results_blank_res": "SELECT first_name ,  last_name, email_address FROM Owners",
        "query_toks_w_results": [
            "select",
            "first_name",
            ",",
            "last_name",
            ",",
            "email_address",
            "from",
            "owners"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "first_name",
            ",",
            "last_name",
            ",",
            "email_address",
            "from",
            "owners"
        ],
        "response_blank_res": "Here are the first and last names and email addresses of all owners",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "first",
            "and",
            "last",
            "names",
            "and",
            "email",
            "addresses",
            "of",
            "all",
            "owners"
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
        "query_toks": [
            "select",
            "first_name",
            ",",
            "last_name",
            ",",
            "email_address",
            "from",
            "owners",
            "where",
            "state",
            "like",
            "'%north%'"
        ],
        "results_raw": [
            [
                "first_name",
                "last_name",
                "email_address"
            ],
            [
                "Johann",
                "Fisher",
                "zboncak.madonna@example.net"
            ],
            [
                "Cindy",
                "Schmitt",
                "wpfeffer@example.net"
            ]
        ],
        "response": "Here are the first and last names with emails of owners living in the state whose name contains the substring \"North\"",
        "response_toks": [
            "Here",
            "are",
            "the",
            "first",
            "and",
            "last",
            "names",
            "with",
            "emails",
            "of",
            "owners",
            "living",
            "in",
            "the",
            "state",
            "whose",
            "name",
            "contains",
            "the",
            "substring",
            "``",
            "North",
            "''"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
        "query_w_results_blank_res": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
        "query_toks_w_results": [
            "select",
            "first_name",
            ",",
            "last_name",
            ",",
            "email_address",
            "from",
            "owners",
            "where",
            "state",
            "like",
            "'%north%'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "first_name",
            ",",
            "last_name",
            ",",
            "email_address",
            "from",
            "owners",
            "where",
            "state",
            "like",
            "'%north%'"
        ],
        "response_blank_res": "Here are the first and last names with emails of owners living in the state whose name contains the substring `` North ''",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "first",
            "and",
            "last",
            "names",
            "with",
            "emails",
            "of",
            "owners",
            "living",
            "in",
            "the",
            "state",
            "whose",
            "name",
            "contains",
            "the",
            "substring",
            "``",
            "North",
            "''"
        ]
    },
    {
        "database_id": "employee_hire_evaluation",
        "query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count ( * )   >  1",
        "query_toks": [
            "select",
            "city",
            "from",
            "employee",
            "where",
            "age",
            "<",
            "30",
            "group",
            "by",
            "city",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "results_raw": [
            [
                "City"
            ],
            [
                "Bath"
            ]
        ],
        "response": "Bath has more than one employee under age 30.",
        "response_toks": [
            "Bath",
            "has",
            "more",
            "than",
            "one",
            "employee",
            "under",
            "age",
            "30",
            "."
        ],
        "results_map": {
            "result0": "Bath"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count ( * )   >  1 | Bath ",
        "query_w_results_blank_res": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count ( * )   >  1 | result0 ",
        "query_toks_w_results": [
            "select",
            "city",
            "from",
            "employee",
            "where",
            "age",
            "<",
            "30",
            "group",
            "by",
            "city",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1",
            "Bath"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "city",
            "from",
            "employee",
            "where",
            "age",
            "<",
            "30",
            "group",
            "by",
            "city",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1",
            "result0"
        ],
        "response_blank_res": "result0 has more than one employee under age 30 .",
        "response_toks_blank_res": [
            "result0",
            "has",
            "more",
            "than",
            "one",
            "employee",
            "under",
            "age",
            "30",
            "."
        ]
    },
    {
        "database_id": "employee_hire_evaluation",
        "query": "SELECT city FROM employee WHERE age  >  30 GROUP BY city HAVING count ( * )   >  1",
        "query_toks": [
            "select",
            "city",
            "from",
            "employee",
            "where",
            "age",
            ">",
            "30",
            "group",
            "by",
            "city",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "results_raw": [
            [
                "City"
            ]
        ],
        "response": "None has more than one employee under age 30.",
        "response_toks": [
            "None",
            "has",
            "more",
            "than",
            "one",
            "employee",
            "under",
            "age",
            "30",
            "."
        ],
        "results_map": null,
        "results_blank_res": null,
        "query_w_results": null,
        "query_w_results_blank_res": null,
        "query_toks_w_results": null,
        "query_toks_w_results_blank_res": null,
        "response_blank_res": null,
        "response_toks_blank_res": null
    },
    {
        "database_id": "employee_hire_evaluation",
        "query": "SELECT Name, Age FROM employee WHERE age  >  30",
        "query_toks": [
            "select",
            "name",
            ",",
            "age",
            "from",
            "employee",
            "where",
            "age",
            ">",
            "30"
        ],
        "results_raw": [
            [
                "Name",
                "Age"
            ],
            [
                "Mark Regan",
                43
            ],
            [
                "Phil Vickery",
                40
            ],
            [
                "Steve Borthwick",
                32
            ]
        ],
        "response": "Here is the table of the name and ages of all employee over age 30. For example,  Mark Regan\tis 43 years old.",
        "response_toks": [
            "Here",
            "is",
            "the",
            "table",
            "of",
            "the",
            "name",
            "and",
            "ages",
            "of",
            "all",
            "employee",
            "over",
            "age",
            "30",
            ".",
            "For",
            "example",
            ",",
            "Mark",
            "Regan",
            "is",
            "43",
            "years",
            "old",
            "."
        ],
        "results_map": {
            "result0": "43"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT Name, Age FROM employee WHERE age  >  30 | 43 ",
        "query_w_results_blank_res": "SELECT Name, Age FROM employee WHERE age  >  30 | result0 ",
        "query_toks_w_results": [
            "select",
            "name",
            ",",
            "age",
            "from",
            "employee",
            "where",
            "age",
            ">",
            "30",
            "43"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            ",",
            "age",
            "from",
            "employee",
            "where",
            "age",
            ">",
            "30",
            "result0"
        ],
        "response_blank_res": "Here is the table of the name and ages of all employee over age 30 . For example , Mark Regan is result0 years old .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "table",
            "of",
            "the",
            "name",
            "and",
            "ages",
            "of",
            "all",
            "employee",
            "over",
            "age",
            "30",
            ".",
            "For",
            "example",
            ",",
            "Mark",
            "Regan",
            "is",
            "result0",
            "years",
            "old",
            "."
        ]
    },
    {
        "database_id": "employee_hire_evaluation",
        "query": "SELECT Name, Age FROM employee WHERE age  <  30",
        "query_toks": [
            "select",
            "name",
            ",",
            "age",
            "from",
            "employee",
            "where",
            "age",
            "<",
            "30"
        ],
        "results_raw": [
            [
                "Name",
                "Age"
            ],
            [
                "George Chuter",
                23
            ],
            [
                "Lee Mears",
                29
            ],
            [
                "Tim Payne",
                29
            ]
        ],
        "response": "Here is the table of the name  and ages of all employees under age 30 . For example,   George Chuter is 23 years old.",
        "response_toks": [
            "Here",
            "is",
            "the",
            "table",
            "of",
            "the",
            "name",
            "and",
            "ages",
            "of",
            "all",
            "employees",
            "under",
            "age",
            "30",
            ".",
            "For",
            "example",
            ",",
            "George",
            "Chuter",
            "is",
            "23",
            "years",
            "old",
            "."
        ],
        "results_map": {
            "result0": "23"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT Name, Age FROM employee WHERE age  <  30 | 23 ",
        "query_w_results_blank_res": "SELECT Name, Age FROM employee WHERE age  <  30 | result0 ",
        "query_toks_w_results": [
            "select",
            "name",
            ",",
            "age",
            "from",
            "employee",
            "where",
            "age",
            "<",
            "30",
            "23"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            ",",
            "age",
            "from",
            "employee",
            "where",
            "age",
            "<",
            "30",
            "result0"
        ],
        "response_blank_res": "Here is the table of the name and ages of all employees under age 30 . For example , George Chuter is result0 years old .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "table",
            "of",
            "the",
            "name",
            "and",
            "ages",
            "of",
            "all",
            "employees",
            "under",
            "age",
            "30",
            ".",
            "For",
            "example",
            ",",
            "George",
            "Chuter",
            "is",
            "result0",
            "years",
            "old",
            "."
        ]
    },
    {
        "database_id": "employee_hire_evaluation",
        "query": "SELECT City FROM employee WHERE age  <  29",
        "query_toks": [
            "select",
            "city",
            "from",
            "employee",
            "where",
            "age",
            "<",
            "29"
        ],
        "results_raw": [
            [
                "City"
            ],
            [
                "Bristol"
            ],
            [
                "Sale"
            ]
        ],
        "response": "Here is the table of cities of employees with an age under 29.",
        "response_toks": [
            "Here",
            "is",
            "the",
            "table",
            "of",
            "cities",
            "of",
            "employees",
            "with",
            "an",
            "age",
            "under",
            "29",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT City FROM employee WHERE age  <  29",
        "query_w_results_blank_res": "SELECT City FROM employee WHERE age  <  29",
        "query_toks_w_results": [
            "select",
            "city",
            "from",
            "employee",
            "where",
            "age",
            "<",
            "29"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "city",
            "from",
            "employee",
            "where",
            "age",
            "<",
            "29"
        ],
        "response_blank_res": "Here is the table of cities of employees with an age under 29 .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "table",
            "of",
            "cities",
            "of",
            "employees",
            "with",
            "an",
            "age",
            "under",
            "29",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT count ( * )  FROM Owners",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "owners"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                15
            ]
        ],
        "response": "The number of owners is 15.",
        "response_toks": [
            "The",
            "number",
            "of",
            "owners",
            "is",
            "15",
            "."
        ],
        "results_map": {
            "result0": "15"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM Owners | 15 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM Owners | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "owners",
            "15"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "owners",
            "result0"
        ],
        "response_blank_res": "The number of owners is result0 .",
        "response_toks_blank_res": [
            "The",
            "number",
            "of",
            "owners",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT age FROM Dogs ORDER BY age ASC LIMIT 1",
        "query_toks": [
            "select",
            "age",
            "from",
            "dogs",
            "order",
            "by",
            "age",
            "asc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "age"
            ],
            [
                "1"
            ]
        ],
        "response": "The age of the youngest dog is 1.",
        "response_toks": [
            "The",
            "age",
            "of",
            "the",
            "youngest",
            "dog",
            "is",
            "1",
            "."
        ],
        "results_map": {
            "result0": "1"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT age FROM Dogs ORDER BY age ASC LIMIT 1 | 1 ",
        "query_w_results_blank_res": "SELECT age FROM Dogs ORDER BY age ASC LIMIT 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "age",
            "from",
            "dogs",
            "order",
            "by",
            "age",
            "asc",
            "limit",
            "1",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "age",
            "from",
            "dogs",
            "order",
            "by",
            "age",
            "asc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "The age of the youngest dog is result0 .",
        "response_toks_blank_res": [
            "The",
            "age",
            "of",
            "the",
            "youngest",
            "dog",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT name FROM Dogs ORDER BY age ASC LIMIT 1",
        "query_toks": [
            "select",
            "name",
            "from",
            "dogs",
            "order",
            "by",
            "age",
            "asc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "name"
            ],
            [
                "Evangeline"
            ]
        ],
        "response": "The name of the youngest dog is Evangeline.",
        "response_toks": [
            "The",
            "name",
            "of",
            "the",
            "youngest",
            "dog",
            "is",
            "Evangeline",
            "."
        ],
        "results_map": {
            "result0": "Evangeline"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT name FROM Dogs ORDER BY age ASC LIMIT 1 | Evangeline ",
        "query_w_results_blank_res": "SELECT name FROM Dogs ORDER BY age ASC LIMIT 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "dogs",
            "order",
            "by",
            "age",
            "asc",
            "limit",
            "1",
            "Evangeline"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "dogs",
            "order",
            "by",
            "age",
            "asc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "The name of the youngest dog is result0 .",
        "response_toks_blank_res": [
            "The",
            "name",
            "of",
            "the",
            "youngest",
            "dog",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT T1.first_name, T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T2.name  =  \"Evangeline\"",
        "query_toks": [
            "select",
            "t1",
            ".",
            "first_name",
            ",",
            "t1",
            ".",
            "last_name",
            "from",
            "owners",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "owner_id",
            "=",
            "t2",
            ".",
            "owner_id",
            "where",
            "t2",
            ".",
            "name",
            "=",
            "\"evangeline\""
        ],
        "results_raw": [
            [
                "first_name",
                "last_name"
            ],
            [
                "Lorenz",
                "Nicolas"
            ]
        ],
        "response": "The first and last name of the owner of Evangeline is Lorenz Nicolas.",
        "response_toks": [
            "The",
            "first",
            "and",
            "last",
            "name",
            "of",
            "the",
            "owner",
            "of",
            "Evangeline",
            "is",
            "Lorenz",
            "Nicolas",
            "."
        ],
        "results_map": {
            "result0": "Lorenz",
            "result1": "Nicolas"
        },
        "results_blank_res": "result0 result1 ",
        "query_w_results": "SELECT T1.first_name, T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T2.name  =  \"Evangeline\" | Lorenz Nicolas ",
        "query_w_results_blank_res": "SELECT T1.first_name, T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T2.name  =  \"Evangeline\" | result0 result1 ",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "first_name",
            ",",
            "t1",
            ".",
            "last_name",
            "from",
            "owners",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "owner_id",
            "=",
            "t2",
            ".",
            "owner_id",
            "where",
            "t2",
            ".",
            "name",
            "=",
            "\"evangeline\"",
            "Lorenz",
            "Nicolas"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "first_name",
            ",",
            "t1",
            ".",
            "last_name",
            "from",
            "owners",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "owner_id",
            "=",
            "t2",
            ".",
            "owner_id",
            "where",
            "t2",
            ".",
            "name",
            "=",
            "\"evangeline\"",
            "result0",
            "result1"
        ],
        "response_blank_res": "The first and last name of the owner of Evangeline is result0 result1 .",
        "response_toks_blank_res": [
            "The",
            "first",
            "and",
            "last",
            "name",
            "of",
            "the",
            "owner",
            "of",
            "Evangeline",
            "is",
            "result0",
            "result1",
            "."
        ]
    },
    {
        "database_id": "singer",
        "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN  ( SELECT Singer_ID FROM song ) ",
        "query_toks": [
            "select",
            "name",
            "from",
            "singer",
            "where",
            "singer_id",
            "not",
            "in",
            "(",
            "select",
            "singer_id",
            "from",
            "song",
            ")"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Alice Walton"
            ],
            [
                "Abigail Johnson"
            ]
        ],
        "response": "Alice Walton and Abigail Johnson are not in the song table.",
        "response_toks": [
            "Alice",
            "Walton",
            "and",
            "Abigail",
            "Johnson",
            "are",
            "not",
            "in",
            "the",
            "song",
            "table",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Name FROM singer WHERE Singer_ID NOT IN  ( SELECT Singer_ID FROM song ) ",
        "query_w_results_blank_res": "SELECT Name FROM singer WHERE Singer_ID NOT IN  ( SELECT Singer_ID FROM song ) ",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "singer",
            "where",
            "singer_id",
            "not",
            "in",
            "(",
            "select",
            "singer_id",
            "from",
            "song",
            ")"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "singer",
            "where",
            "singer_id",
            "not",
            "in",
            "(",
            "select",
            "singer_id",
            "from",
            "song",
            ")"
        ],
        "response_blank_res": "Alice Walton and Abigail Johnson are not in the song table .",
        "response_toks_blank_res": [
            "Alice",
            "Walton",
            "and",
            "Abigail",
            "Johnson",
            "are",
            "not",
            "in",
            "the",
            "song",
            "table",
            "."
        ]
    },
    {
        "database_id": "singer",
        "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN  ( SELECT Singer_ID FROM song ) ",
        "query_toks": [
            "select",
            "name",
            "from",
            "singer",
            "where",
            "singer_id",
            "not",
            "in",
            "(",
            "select",
            "singer_id",
            "from",
            "song",
            ")"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Alice Walton"
            ],
            [
                "Abigail Johnson"
            ]
        ],
        "response": "No. Just these two",
        "response_toks": [
            "No",
            ".",
            "Just",
            "these",
            "two"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Name FROM singer WHERE Singer_ID NOT IN  ( SELECT Singer_ID FROM song ) ",
        "query_w_results_blank_res": "SELECT Name FROM singer WHERE Singer_ID NOT IN  ( SELECT Singer_ID FROM song ) ",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "singer",
            "where",
            "singer_id",
            "not",
            "in",
            "(",
            "select",
            "singer_id",
            "from",
            "song",
            ")"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "singer",
            "where",
            "singer_id",
            "not",
            "in",
            "(",
            "select",
            "singer_id",
            "from",
            "song",
            ")"
        ],
        "response_blank_res": "No . Just these two",
        "response_toks_blank_res": [
            "No",
            ".",
            "Just",
            "these",
            "two"
        ]
    },
    {
        "database_id": "singer",
        "query": "SELECT Name FROM singer WHERE Birth_Year   =   1948 OR Birth_Year   =   1949",
        "query_toks": [
            "select",
            "name",
            "from",
            "singer",
            "where",
            "birth_year",
            "=",
            "1948",
            "or",
            "birth_year",
            "=",
            "1949"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Christy Walton"
            ],
            [
                "Alice Walton"
            ]
        ],
        "response": "The names of the singers born in either 1948 or 1948 are Christy Walton and Alice Walton",
        "response_toks": [
            "The",
            "names",
            "of",
            "the",
            "singers",
            "born",
            "in",
            "either",
            "1948",
            "or",
            "1948",
            "are",
            "Christy",
            "Walton",
            "and",
            "Alice",
            "Walton"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Name FROM singer WHERE Birth_Year   =   1948 OR Birth_Year   =   1949",
        "query_w_results_blank_res": "SELECT Name FROM singer WHERE Birth_Year   =   1948 OR Birth_Year   =   1949",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "singer",
            "where",
            "birth_year",
            "=",
            "1948",
            "or",
            "birth_year",
            "=",
            "1949"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "singer",
            "where",
            "birth_year",
            "=",
            "1948",
            "or",
            "birth_year",
            "=",
            "1949"
        ],
        "response_blank_res": "The names of the singers born in either 1948 or 1948 are Christy Walton and Alice Walton",
        "response_toks_blank_res": [
            "The",
            "names",
            "of",
            "the",
            "singers",
            "born",
            "in",
            "either",
            "1948",
            "or",
            "1948",
            "are",
            "Christy",
            "Walton",
            "and",
            "Alice",
            "Walton"
        ]
    },
    {
        "database_id": "singer",
        "query": "SELECT Citizenship FROM singer WHERE Birth_Year   =   1948 OR Birth_Year   =   1949",
        "query_toks": [
            "select",
            "citizenship",
            "from",
            "singer",
            "where",
            "birth_year",
            "=",
            "1948",
            "or",
            "birth_year",
            "=",
            "1949"
        ],
        "results_raw": [
            [
                "Citizenship"
            ],
            [
                "United States"
            ],
            [
                "United States"
            ]
        ],
        "response": "Both of them have citizenship United States",
        "response_toks": [
            "Both",
            "of",
            "them",
            "have",
            "citizenship",
            "United",
            "States"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Citizenship FROM singer WHERE Birth_Year   =   1948 OR Birth_Year   =   1949",
        "query_w_results_blank_res": "SELECT Citizenship FROM singer WHERE Birth_Year   =   1948 OR Birth_Year   =   1949",
        "query_toks_w_results": [
            "select",
            "citizenship",
            "from",
            "singer",
            "where",
            "birth_year",
            "=",
            "1948",
            "or",
            "birth_year",
            "=",
            "1949"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "citizenship",
            "from",
            "singer",
            "where",
            "birth_year",
            "=",
            "1948",
            "or",
            "birth_year",
            "=",
            "1949"
        ],
        "response_blank_res": "Both of them have citizenship United States",
        "response_toks_blank_res": [
            "Both",
            "of",
            "them",
            "have",
            "citizenship",
            "United",
            "States"
        ]
    },
    {
        "database_id": "singer",
        "query": "SELECT name FROM singer WHERE Birth_Year   =   1948 OR Birth_Year   =   1949 order by Net_Worth_Millions desc limit 1",
        "query_toks": [
            "select",
            "name",
            "from",
            "singer",
            "where",
            "birth_year",
            "=",
            "1948",
            "or",
            "birth_year",
            "=",
            "1949",
            "order",
            "by",
            "net_worth_millions",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Christy Walton"
            ]
        ],
        "response": "Christy Walton has the highest net worth among the singers that were born in 1948 or 1949",
        "response_toks": [
            "Christy",
            "Walton",
            "has",
            "the",
            "highest",
            "net",
            "worth",
            "among",
            "the",
            "singers",
            "that",
            "were",
            "born",
            "in",
            "1948",
            "or",
            "1949"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT name FROM singer WHERE Birth_Year   =   1948 OR Birth_Year   =   1949 order by Net_Worth_Millions desc limit 1",
        "query_w_results_blank_res": "SELECT name FROM singer WHERE Birth_Year   =   1948 OR Birth_Year   =   1949 order by Net_Worth_Millions desc limit 1",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "singer",
            "where",
            "birth_year",
            "=",
            "1948",
            "or",
            "birth_year",
            "=",
            "1949",
            "order",
            "by",
            "net_worth_millions",
            "desc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "singer",
            "where",
            "birth_year",
            "=",
            "1948",
            "or",
            "birth_year",
            "=",
            "1949",
            "order",
            "by",
            "net_worth_millions",
            "desc",
            "limit",
            "1"
        ],
        "response_blank_res": "Christy Walton has the highest net worth among the singers that were born in 1948 or 1949",
        "response_toks_blank_res": [
            "Christy",
            "Walton",
            "has",
            "the",
            "highest",
            "net",
            "worth",
            "among",
            "the",
            "singers",
            "that",
            "were",
            "born",
            "in",
            "1948",
            "or",
            "1949"
        ]
    },
    {
        "database_id": "singer",
        "query": "SELECT name,Net_Worth_Millions FROM singer WHERE Birth_Year   =   1948 OR Birth_Year   =   1949 order by Net_Worth_Millions desc limit 1",
        "query_toks": [
            "select",
            "name",
            ",",
            "net_worth_millions",
            "from",
            "singer",
            "where",
            "birth_year",
            "=",
            "1948",
            "or",
            "birth_year",
            "=",
            "1949",
            "order",
            "by",
            "net_worth_millions",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Name",
                "Net_Worth_Millions"
            ],
            [
                "Christy Walton",
                28.8
            ]
        ],
        "response": "No, she does not. Her net worth is 28.8 millions.",
        "response_toks": [
            "No",
            ",",
            "she",
            "does",
            "not",
            ".",
            "Her",
            "net",
            "worth",
            "is",
            "28.8",
            "millions",
            "."
        ],
        "results_map": {
            "result0": "28.8"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT name,Net_Worth_Millions FROM singer WHERE Birth_Year   =   1948 OR Birth_Year   =   1949 order by Net_Worth_Millions desc limit 1 | 28.8 ",
        "query_w_results_blank_res": "SELECT name,Net_Worth_Millions FROM singer WHERE Birth_Year   =   1948 OR Birth_Year   =   1949 order by Net_Worth_Millions desc limit 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "name",
            ",",
            "net_worth_millions",
            "from",
            "singer",
            "where",
            "birth_year",
            "=",
            "1948",
            "or",
            "birth_year",
            "=",
            "1949",
            "order",
            "by",
            "net_worth_millions",
            "desc",
            "limit",
            "1",
            "28.8"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            ",",
            "net_worth_millions",
            "from",
            "singer",
            "where",
            "birth_year",
            "=",
            "1948",
            "or",
            "birth_year",
            "=",
            "1949",
            "order",
            "by",
            "net_worth_millions",
            "desc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "No , she does not . Her net worth is result0 millions .",
        "response_toks_blank_res": [
            "No",
            ",",
            "she",
            "does",
            "not",
            ".",
            "Her",
            "net",
            "worth",
            "is",
            "result0",
            "millions",
            "."
        ]
    },
    {
        "database_id": "singer",
        "query": "SELECT name FROM singer WHERE Birth_Year   =   1948 OR Birth_Year   =   1949 order by Net_Worth_Millions limit 1",
        "query_toks": [
            "select",
            "name",
            "from",
            "singer",
            "where",
            "birth_year",
            "=",
            "1948",
            "or",
            "birth_year",
            "=",
            "1949",
            "order",
            "by",
            "net_worth_millions",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Alice Walton"
            ]
        ],
        "response": "Alice Walton has the lowest net worth of singers born between 1948 and 1949.",
        "response_toks": [
            "Alice",
            "Walton",
            "has",
            "the",
            "lowest",
            "net",
            "worth",
            "of",
            "singers",
            "born",
            "between",
            "1948",
            "and",
            "1949",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT name FROM singer WHERE Birth_Year   =   1948 OR Birth_Year   =   1949 order by Net_Worth_Millions limit 1",
        "query_w_results_blank_res": "SELECT name FROM singer WHERE Birth_Year   =   1948 OR Birth_Year   =   1949 order by Net_Worth_Millions limit 1",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "singer",
            "where",
            "birth_year",
            "=",
            "1948",
            "or",
            "birth_year",
            "=",
            "1949",
            "order",
            "by",
            "net_worth_millions",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "singer",
            "where",
            "birth_year",
            "=",
            "1948",
            "or",
            "birth_year",
            "=",
            "1949",
            "order",
            "by",
            "net_worth_millions",
            "limit",
            "1"
        ],
        "response_blank_res": "Alice Walton has the lowest net worth of singers born between 1948 and 1949 .",
        "response_toks_blank_res": [
            "Alice",
            "Walton",
            "has",
            "the",
            "lowest",
            "net",
            "worth",
            "of",
            "singers",
            "born",
            "between",
            "1948",
            "and",
            "1949",
            "."
        ]
    },
    {
        "database_id": "battle_death",
        "query": "SELECT count ( * )  FROM battle WHERE id NOT IN  (  SELECT lost_in_battle FROM ship WHERE tonnage   =   '225'  ) ",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "battle",
            "where",
            "id",
            "not",
            "in",
            "(",
            "select",
            "lost_in_battle",
            "from",
            "ship",
            "where",
            "tonnage",
            "=",
            "'225'",
            ")"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                7
            ]
        ],
        "response": "7 battles did not lose any ship with tonnage 225",
        "response_toks": [
            "7",
            "battles",
            "did",
            "not",
            "lose",
            "any",
            "ship",
            "with",
            "tonnage",
            "225"
        ],
        "results_map": {
            "result0": "7"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM battle WHERE id NOT IN  (  SELECT lost_in_battle FROM ship WHERE tonnage   =   '225'  )  | 7 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM battle WHERE id NOT IN  (  SELECT lost_in_battle FROM ship WHERE tonnage   =   '225'  )  | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "battle",
            "where",
            "id",
            "not",
            "in",
            "(",
            "select",
            "lost_in_battle",
            "from",
            "ship",
            "where",
            "tonnage",
            "=",
            "'225'",
            ")",
            "7"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "battle",
            "where",
            "id",
            "not",
            "in",
            "(",
            "select",
            "lost_in_battle",
            "from",
            "ship",
            "where",
            "tonnage",
            "=",
            "'225'",
            ")",
            "result0"
        ],
        "response_blank_res": "result0 battles did not lose any ship with tonnage 225",
        "response_toks_blank_res": [
            "result0",
            "battles",
            "did",
            "not",
            "lose",
            "any",
            "ship",
            "with",
            "tonnage",
            "225"
        ]
    },
    {
        "database_id": "battle_death",
        "query": "SELECT count ( * )  FROM battle WHERE id IN  (  SELECT lost_in_battle FROM ship WHERE tonnage   =   '225'  ) ",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "battle",
            "where",
            "id",
            "in",
            "(",
            "select",
            "lost_in_battle",
            "from",
            "ship",
            "where",
            "tonnage",
            "=",
            "'225'",
            ")"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                1
            ]
        ],
        "response": "1 battle lose a ship with tonnage 225",
        "response_toks": [
            "1",
            "battle",
            "lose",
            "a",
            "ship",
            "with",
            "tonnage",
            "225"
        ],
        "results_map": {
            "result0": "1"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM battle WHERE id IN  (  SELECT lost_in_battle FROM ship WHERE tonnage   =   '225'  )  | 1 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM battle WHERE id IN  (  SELECT lost_in_battle FROM ship WHERE tonnage   =   '225'  )  | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "battle",
            "where",
            "id",
            "in",
            "(",
            "select",
            "lost_in_battle",
            "from",
            "ship",
            "where",
            "tonnage",
            "=",
            "'225'",
            ")",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "battle",
            "where",
            "id",
            "in",
            "(",
            "select",
            "lost_in_battle",
            "from",
            "ship",
            "where",
            "tonnage",
            "=",
            "'225'",
            ")",
            "result0"
        ],
        "response_blank_res": "result0 battle lose a ship with tonnage 225",
        "response_toks_blank_res": [
            "result0",
            "battle",
            "lose",
            "a",
            "ship",
            "with",
            "tonnage",
            "225"
        ]
    },
    {
        "database_id": "battle_death",
        "query": "SELECT count ( * )  FROM ship WHERE tonnage   =   '225'",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "ship",
            "where",
            "tonnage",
            "=",
            "'225'"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                1
            ]
        ],
        "response": "1 ship has a tonnage of 225.",
        "response_toks": [
            "1",
            "ship",
            "has",
            "a",
            "tonnage",
            "of",
            "225",
            "."
        ],
        "results_map": {
            "result0": "1"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM ship WHERE tonnage   =   '225' | 1 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM ship WHERE tonnage   =   '225' | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "ship",
            "where",
            "tonnage",
            "=",
            "'225'",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "ship",
            "where",
            "tonnage",
            "=",
            "'225'",
            "result0"
        ],
        "response_blank_res": "result0 ship has a tonnage of 225 .",
        "response_toks_blank_res": [
            "result0",
            "ship",
            "has",
            "a",
            "tonnage",
            "of",
            "225",
            "."
        ]
    },
    {
        "database_id": "battle_death",
        "query": "SELECT count ( * )  FROM ship WHERE tonnage  >  '225'",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "ship",
            "where",
            "tonnage",
            ">",
            "'225'"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                6
            ]
        ],
        "response": "6 ships have a tonnage above 225, so yes.",
        "response_toks": [
            "6",
            "ships",
            "have",
            "a",
            "tonnage",
            "above",
            "225",
            ",",
            "so",
            "yes",
            "."
        ],
        "results_map": {
            "result0": "6"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM ship WHERE tonnage  >  '225' | 6 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM ship WHERE tonnage  >  '225' | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "ship",
            "where",
            "tonnage",
            ">",
            "'225'",
            "6"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "ship",
            "where",
            "tonnage",
            ">",
            "'225'",
            "result0"
        ],
        "response_blank_res": "result0 ships have a tonnage above 225 , so yes .",
        "response_toks_blank_res": [
            "result0",
            "ships",
            "have",
            "a",
            "tonnage",
            "above",
            "225",
            ",",
            "so",
            "yes",
            "."
        ]
    },
    {
        "database_id": "battle_death",
        "query": "SELECT result FROM battle WHERE id IN  (  SELECT lost_in_battle FROM ship WHERE tonnage   =   '225'  ) ",
        "query_toks": [
            "select",
            "result",
            "from",
            "battle",
            "where",
            "id",
            "in",
            "(",
            "select",
            "lost_in_battle",
            "from",
            "ship",
            "where",
            "tonnage",
            "=",
            "'225'",
            ")"
        ],
        "results_raw": [
            [
                "result"
            ],
            [
                "Two Year Truce"
            ]
        ],
        "response": "The result of the battle when the ship with a tonnage of 225 was sunk is \"Two Year Truce\"",
        "response_toks": [
            "The",
            "result",
            "of",
            "the",
            "battle",
            "when",
            "the",
            "ship",
            "with",
            "a",
            "tonnage",
            "of",
            "225",
            "was",
            "sunk",
            "is",
            "``",
            "Two",
            "Year",
            "Truce",
            "''"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT result FROM battle WHERE id IN  (  SELECT lost_in_battle FROM ship WHERE tonnage   =   '225'  ) ",
        "query_w_results_blank_res": "SELECT result FROM battle WHERE id IN  (  SELECT lost_in_battle FROM ship WHERE tonnage   =   '225'  ) ",
        "query_toks_w_results": [
            "select",
            "result",
            "from",
            "battle",
            "where",
            "id",
            "in",
            "(",
            "select",
            "lost_in_battle",
            "from",
            "ship",
            "where",
            "tonnage",
            "=",
            "'225'",
            ")"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "result",
            "from",
            "battle",
            "where",
            "id",
            "in",
            "(",
            "select",
            "lost_in_battle",
            "from",
            "ship",
            "where",
            "tonnage",
            "=",
            "'225'",
            ")"
        ],
        "response_blank_res": "The result of the battle when the ship with a tonnage of 225 was sunk is `` Two Year Truce ''",
        "response_toks_blank_res": [
            "The",
            "result",
            "of",
            "the",
            "battle",
            "when",
            "the",
            "ship",
            "with",
            "a",
            "tonnage",
            "of",
            "225",
            "was",
            "sunk",
            "is",
            "``",
            "Two",
            "Year",
            "Truce",
            "''"
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT Fullname FROM car_makers WHERE maker  =  \"amc\"",
        "query_toks": [
            "select",
            "fullname",
            "from",
            "car_makers",
            "where",
            "maker",
            "=",
            "\"amc\""
        ],
        "results_raw": [
            [
                "FullName"
            ],
            [
                "American Motor Company"
            ]
        ],
        "response": "The fullname of  maker amc is American Motor Company.",
        "response_toks": [
            "The",
            "fullname",
            "of",
            "maker",
            "amc",
            "is",
            "American",
            "Motor",
            "Company",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Fullname FROM car_makers WHERE maker  =  \"amc\"",
        "query_w_results_blank_res": "SELECT Fullname FROM car_makers WHERE maker  =  \"amc\"",
        "query_toks_w_results": [
            "select",
            "fullname",
            "from",
            "car_makers",
            "where",
            "maker",
            "=",
            "\"amc\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "fullname",
            "from",
            "car_makers",
            "where",
            "maker",
            "=",
            "\"amc\""
        ],
        "response_blank_res": "The fullname of maker amc is American Motor Company .",
        "response_toks_blank_res": [
            "The",
            "fullname",
            "of",
            "maker",
            "amc",
            "is",
            "American",
            "Motor",
            "Company",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT countryname FROM countries WHERE countryid = 1 or countryid = 2 or countryid = 3 ) ",
        "query_toks": [
            "select",
            "countryname",
            "from",
            "countries",
            "where",
            "countryid",
            "=",
            "1",
            "or",
            "countryid",
            "=",
            "2",
            "or",
            "countryid",
            "=",
            "3",
            ")"
        ],
        "results_raw": [
            [
                "CountryName"
            ],
            [
                "usa"
            ],
            [
                "germany"
            ],
            [
                "france"
            ]
        ],
        "response": "There countrynames for countryid 1, 2, 3 are usa, germany, and france",
        "response_toks": [
            "There",
            "countrynames",
            "for",
            "countryid",
            "1",
            ",",
            "2",
            ",",
            "3",
            "are",
            "usa",
            ",",
            "germany",
            ",",
            "and",
            "france"
        ],
        "results_map": {
            "result0": "usa",
            "result1": "germany",
            "result2": "france"
        },
        "results_blank_res": "result0 result1 result2 ",
        "query_w_results": "SELECT countryname FROM countries WHERE countryid = 1 or countryid = 2 or countryid = 3 )  | usa germany france ",
        "query_w_results_blank_res": "SELECT countryname FROM countries WHERE countryid = 1 or countryid = 2 or countryid = 3 )  | result0 result1 result2 ",
        "query_toks_w_results": [
            "select",
            "countryname",
            "from",
            "countries",
            "where",
            "countryid",
            "=",
            "1",
            "or",
            "countryid",
            "=",
            "2",
            "or",
            "countryid",
            "=",
            "3",
            ")",
            "usa",
            "germany",
            "france"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "countryname",
            "from",
            "countries",
            "where",
            "countryid",
            "=",
            "1",
            "or",
            "countryid",
            "=",
            "2",
            "or",
            "countryid",
            "=",
            "3",
            ")",
            "result0",
            "result1",
            "result2"
        ],
        "response_blank_res": "There countrynames for countryid 1 , 2 , 3 are result0 , result1 , and result2",
        "response_toks_blank_res": [
            "There",
            "countrynames",
            "for",
            "countryid",
            "1",
            ",",
            "2",
            ",",
            "3",
            "are",
            "result0",
            ",",
            "result1",
            ",",
            "and",
            "result2"
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT modelid FROM model_list WHERE model  =  \"amc\"",
        "query_toks": [
            "select",
            "modelid",
            "from",
            "model_list",
            "where",
            "model",
            "=",
            "\"amc\""
        ],
        "results_raw": [
            [
                "ModelId"
            ],
            [
                1
            ]
        ],
        "response": "The model id for model amc is 1.",
        "response_toks": [
            "The",
            "model",
            "id",
            "for",
            "model",
            "amc",
            "is",
            "1",
            "."
        ],
        "results_map": {
            "result0": "1"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT modelid FROM model_list WHERE model  =  \"amc\" | 1 ",
        "query_w_results_blank_res": "SELECT modelid FROM model_list WHERE model  =  \"amc\" | result0 ",
        "query_toks_w_results": [
            "select",
            "modelid",
            "from",
            "model_list",
            "where",
            "model",
            "=",
            "\"amc\"",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "modelid",
            "from",
            "model_list",
            "where",
            "model",
            "=",
            "\"amc\"",
            "result0"
        ],
        "response_blank_res": "The model id for model amc is result0 .",
        "response_toks_blank_res": [
            "The",
            "model",
            "id",
            "for",
            "model",
            "amc",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId   =   T2.Country GROUP BY T1.countryId HAVING count ( * )   >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId   =   T2.Country JOIN MODEL_LIST AS T3 ON T2.Id   =   T3.Maker WHERE T3.Model   =   'fiat'",
        "query_toks": [
            "select",
            "t1",
            ".",
            "countryid",
            ",",
            "t1",
            ".",
            "countryname",
            "from",
            "countries",
            "as",
            "t1",
            "join",
            "car_makers",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "countryid",
            "=",
            "t2",
            ".",
            "country",
            "group",
            "by",
            "t1",
            ".",
            "countryid",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "3",
            "union",
            "select",
            "t1",
            ".",
            "countryid",
            ",",
            "t1",
            ".",
            "countryname",
            "from",
            "countries",
            "as",
            "t1",
            "join",
            "car_makers",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "countryid",
            "=",
            "t2",
            ".",
            "country",
            "join",
            "model_list",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "id",
            "=",
            "t3",
            ".",
            "maker",
            "where",
            "t3",
            ".",
            "model",
            "=",
            "'fiat'"
        ],
        "results_raw": [
            [
                "CountryId",
                "CountryName"
            ],
            [
                1,
                "usa"
            ],
            [
                2,
                "germany"
            ],
            [
                4,
                "japan"
            ]
        ],
        "response": "The ids and names  of the countries which have more than 3 car makers or produce the 'fiat' model are listed in the result table. One of them is countryid 1 with countryname usa",
        "response_toks": [
            "The",
            "ids",
            "and",
            "names",
            "of",
            "the",
            "countries",
            "which",
            "have",
            "more",
            "than",
            "3",
            "car",
            "makers",
            "or",
            "produce",
            "the",
            "'fiat",
            "'",
            "model",
            "are",
            "listed",
            "in",
            "the",
            "result",
            "table",
            ".",
            "One",
            "of",
            "them",
            "is",
            "countryid",
            "1",
            "with",
            "countryname",
            "usa"
        ],
        "results_map": {
            "result0": "1",
            "result1": "usa"
        },
        "results_blank_res": "result0 result1 ",
        "query_w_results": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId   =   T2.Country GROUP BY T1.countryId HAVING count ( * )   >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId   =   T2.Country JOIN MODEL_LIST AS T3 ON T2.Id   =   T3.Maker WHERE T3.Model   =   'fiat' | 1 usa ",
        "query_w_results_blank_res": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId   =   T2.Country GROUP BY T1.countryId HAVING count ( * )   >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId   =   T2.Country JOIN MODEL_LIST AS T3 ON T2.Id   =   T3.Maker WHERE T3.Model   =   'fiat' | result0 result1 ",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "countryid",
            ",",
            "t1",
            ".",
            "countryname",
            "from",
            "countries",
            "as",
            "t1",
            "join",
            "car_makers",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "countryid",
            "=",
            "t2",
            ".",
            "country",
            "group",
            "by",
            "t1",
            ".",
            "countryid",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "3",
            "union",
            "select",
            "t1",
            ".",
            "countryid",
            ",",
            "t1",
            ".",
            "countryname",
            "from",
            "countries",
            "as",
            "t1",
            "join",
            "car_makers",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "countryid",
            "=",
            "t2",
            ".",
            "country",
            "join",
            "model_list",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "id",
            "=",
            "t3",
            ".",
            "maker",
            "where",
            "t3",
            ".",
            "model",
            "=",
            "'fiat'",
            "1",
            "usa"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "countryid",
            ",",
            "t1",
            ".",
            "countryname",
            "from",
            "countries",
            "as",
            "t1",
            "join",
            "car_makers",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "countryid",
            "=",
            "t2",
            ".",
            "country",
            "group",
            "by",
            "t1",
            ".",
            "countryid",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "3",
            "union",
            "select",
            "t1",
            ".",
            "countryid",
            ",",
            "t1",
            ".",
            "countryname",
            "from",
            "countries",
            "as",
            "t1",
            "join",
            "car_makers",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "countryid",
            "=",
            "t2",
            ".",
            "country",
            "join",
            "model_list",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "id",
            "=",
            "t3",
            ".",
            "maker",
            "where",
            "t3",
            ".",
            "model",
            "=",
            "'fiat'",
            "result0",
            "result1"
        ],
        "response_blank_res": "The ids and names of the countries which have more than 3 car makers or produce the 'fiat ' model are listed in the result table . One of them is countryid result0 with countryname result1",
        "response_toks_blank_res": [
            "The",
            "ids",
            "and",
            "names",
            "of",
            "the",
            "countries",
            "which",
            "have",
            "more",
            "than",
            "3",
            "car",
            "makers",
            "or",
            "produce",
            "the",
            "'fiat",
            "'",
            "model",
            "are",
            "listed",
            "in",
            "the",
            "result",
            "table",
            ".",
            "One",
            "of",
            "them",
            "is",
            "countryid",
            "result0",
            "with",
            "countryname",
            "result1"
        ]
    },
    {
        "database_id": "poker_player",
        "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
        "query_toks": [
            "select",
            "money_rank",
            "from",
            "poker_player",
            "order",
            "by",
            "earnings",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Money_Rank"
            ],
            [
                58.0
            ]
        ],
        "response": "The money rank of the poker player with the highest earnings is 58.0",
        "response_toks": [
            "The",
            "money",
            "rank",
            "of",
            "the",
            "poker",
            "player",
            "with",
            "the",
            "highest",
            "earnings",
            "is",
            "58.0"
        ],
        "results_map": {
            "result0": "58.0"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1 | 58.0 ",
        "query_w_results_blank_res": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "money_rank",
            "from",
            "poker_player",
            "order",
            "by",
            "earnings",
            "desc",
            "limit",
            "1",
            "58.0"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "money_rank",
            "from",
            "poker_player",
            "order",
            "by",
            "earnings",
            "desc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "The money rank of the poker player with the highest earnings is result0",
        "response_toks_blank_res": [
            "The",
            "money",
            "rank",
            "of",
            "the",
            "poker",
            "player",
            "with",
            "the",
            "highest",
            "earnings",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "poker_player",
        "query": "SELECT avg ( Money_Rank )  FROM poker_player",
        "query_toks": [
            "select",
            "avg",
            "(",
            "money_rank",
            ")",
            "from",
            "poker_player"
        ],
        "results_raw": [
            [
                "avg(Money_Rank)"
            ],
            [
                117.4
            ]
        ],
        "response": "The average money rank of all poker players is 117.4. So it is higher.",
        "response_toks": [
            "The",
            "average",
            "money",
            "rank",
            "of",
            "all",
            "poker",
            "players",
            "is",
            "117.4",
            ".",
            "So",
            "it",
            "is",
            "higher",
            "."
        ],
        "results_map": {
            "result0": "117.4"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT avg ( Money_Rank )  FROM poker_player | 117.4 ",
        "query_w_results_blank_res": "SELECT avg ( Money_Rank )  FROM poker_player | result0 ",
        "query_toks_w_results": [
            "select",
            "avg",
            "(",
            "money_rank",
            ")",
            "from",
            "poker_player",
            "117.4"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "avg",
            "(",
            "money_rank",
            ")",
            "from",
            "poker_player",
            "result0"
        ],
        "response_blank_res": "The average money rank of all poker players is result0 . So it is higher .",
        "response_toks_blank_res": [
            "The",
            "average",
            "money",
            "rank",
            "of",
            "all",
            "poker",
            "players",
            "is",
            "result0",
            ".",
            "So",
            "it",
            "is",
            "higher",
            "."
        ]
    },
    {
        "database_id": "poker_player",
        "query": "SELECT People_ID FROM poker_player ORDER BY Earnings DESC LIMIT 1",
        "query_toks": [
            "select",
            "people_id",
            "from",
            "poker_player",
            "order",
            "by",
            "earnings",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "People_ID"
            ],
            [
                6
            ]
        ],
        "response": "The poker player with the highest earning has a people ID of 6",
        "response_toks": [
            "The",
            "poker",
            "player",
            "with",
            "the",
            "highest",
            "earning",
            "has",
            "a",
            "people",
            "ID",
            "of",
            "6"
        ],
        "results_map": {
            "result0": "6"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT People_ID FROM poker_player ORDER BY Earnings DESC LIMIT 1 | 6 ",
        "query_w_results_blank_res": "SELECT People_ID FROM poker_player ORDER BY Earnings DESC LIMIT 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "people_id",
            "from",
            "poker_player",
            "order",
            "by",
            "earnings",
            "desc",
            "limit",
            "1",
            "6"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "people_id",
            "from",
            "poker_player",
            "order",
            "by",
            "earnings",
            "desc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "The poker player with the highest earning has a people ID of result0",
        "response_toks_blank_res": [
            "The",
            "poker",
            "player",
            "with",
            "the",
            "highest",
            "earning",
            "has",
            "a",
            "people",
            "ID",
            "of",
            "result0"
        ]
    },
    {
        "database_id": "poker_player",
        "query": "SELECT Best_Finish FROM poker_player ORDER BY Earnings DESC LIMIT 1",
        "query_toks": [
            "select",
            "best_finish",
            "from",
            "poker_player",
            "order",
            "by",
            "earnings",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Best_Finish"
            ],
            [
                2.0
            ]
        ],
        "response": "The poker player with the highest earning has a best finish of 2.0.",
        "response_toks": [
            "The",
            "poker",
            "player",
            "with",
            "the",
            "highest",
            "earning",
            "has",
            "a",
            "best",
            "finish",
            "of",
            "2.0",
            "."
        ],
        "results_map": {
            "result0": "2.0"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT Best_Finish FROM poker_player ORDER BY Earnings DESC LIMIT 1 | 2.0 ",
        "query_w_results_blank_res": "SELECT Best_Finish FROM poker_player ORDER BY Earnings DESC LIMIT 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "best_finish",
            "from",
            "poker_player",
            "order",
            "by",
            "earnings",
            "desc",
            "limit",
            "1",
            "2.0"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "best_finish",
            "from",
            "poker_player",
            "order",
            "by",
            "earnings",
            "desc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "The poker player with the highest earning has a best finish of result0 .",
        "response_toks_blank_res": [
            "The",
            "poker",
            "player",
            "with",
            "the",
            "highest",
            "earning",
            "has",
            "a",
            "best",
            "finish",
            "of",
            "result0",
            "."
        ]
    },
    {
        "database_id": "poker_player",
        "query": "SELECT avg ( Earnings )  as earning FROM poker_player union select max ( earnings )  as earning from poker_player",
        "query_toks": [
            "select",
            "avg",
            "(",
            "earnings",
            ")",
            "as",
            "earning",
            "from",
            "poker_player",
            "union",
            "select",
            "max",
            "(",
            "earnings",
            ")",
            "as",
            "earning",
            "from",
            "poker_player"
        ],
        "results_raw": [
            [
                "earning"
            ],
            [
                301891.2
            ],
            [
                596462.0
            ]
        ],
        "response": "294570.8 is the difference between the highest earning and average earning. Here are the highest and average earning of all poker players.",
        "response_toks": [
            "294570.8",
            "is",
            "the",
            "difference",
            "between",
            "the",
            "highest",
            "earning",
            "and",
            "average",
            "earning",
            ".",
            "Here",
            "are",
            "the",
            "highest",
            "and",
            "average",
            "earning",
            "of",
            "all",
            "poker",
            "players",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT avg ( Earnings )  as earning FROM poker_player union select max ( earnings )  as earning from poker_player",
        "query_w_results_blank_res": "SELECT avg ( Earnings )  as earning FROM poker_player union select max ( earnings )  as earning from poker_player",
        "query_toks_w_results": [
            "select",
            "avg",
            "(",
            "earnings",
            ")",
            "as",
            "earning",
            "from",
            "poker_player",
            "union",
            "select",
            "max",
            "(",
            "earnings",
            ")",
            "as",
            "earning",
            "from",
            "poker_player"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "avg",
            "(",
            "earnings",
            ")",
            "as",
            "earning",
            "from",
            "poker_player",
            "union",
            "select",
            "max",
            "(",
            "earnings",
            ")",
            "as",
            "earning",
            "from",
            "poker_player"
        ],
        "response_blank_res": "294570.8 is the difference between the highest earning and average earning . Here are the highest and average earning of all poker players .",
        "response_toks_blank_res": [
            "294570.8",
            "is",
            "the",
            "difference",
            "between",
            "the",
            "highest",
            "earning",
            "and",
            "average",
            "earning",
            ".",
            "Here",
            "are",
            "the",
            "highest",
            "and",
            "average",
            "earning",
            "of",
            "all",
            "poker",
            "players",
            "."
        ]
    },
    {
        "database_id": "poker_player",
        "query": "SELECT Earnings FROM poker_player order by Earnings desc limit 1",
        "query_toks": [
            "select",
            "earnings",
            "from",
            "poker_player",
            "order",
            "by",
            "earnings",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Earnings"
            ],
            [
                596462.0
            ]
        ],
        "response": "The highest earning is 596462.0.",
        "response_toks": [
            "The",
            "highest",
            "earning",
            "is",
            "596462.0",
            "."
        ],
        "results_map": {
            "result0": "596462.0"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT Earnings FROM poker_player order by Earnings desc limit 1 | 596462.0 ",
        "query_w_results_blank_res": "SELECT Earnings FROM poker_player order by Earnings desc limit 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "earnings",
            "from",
            "poker_player",
            "order",
            "by",
            "earnings",
            "desc",
            "limit",
            "1",
            "596462.0"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "earnings",
            "from",
            "poker_player",
            "order",
            "by",
            "earnings",
            "desc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "The highest earning is result0 .",
        "response_toks_blank_res": [
            "The",
            "highest",
            "earning",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "orchestra",
        "query": "SELECT COUNT ( DISTINCT Orchestra )  FROM orchestra",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "orchestra",
            ")",
            "from",
            "orchestra"
        ],
        "results_raw": [
            [
                "COUNT(DISTINCT Orchestra)"
            ],
            [
                12
            ]
        ],
        "response": "There are 12 distinct orchestras.",
        "response_toks": [
            "There",
            "are",
            "12",
            "distinct",
            "orchestras",
            "."
        ],
        "results_map": {
            "result0": "12"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT COUNT ( DISTINCT Orchestra )  FROM orchestra | 12 ",
        "query_w_results_blank_res": "SELECT COUNT ( DISTINCT Orchestra )  FROM orchestra | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "distinct",
            "orchestra",
            ")",
            "from",
            "orchestra",
            "12"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "distinct",
            "orchestra",
            ")",
            "from",
            "orchestra",
            "result0"
        ],
        "response_blank_res": "There are result0 distinct orchestras .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "distinct",
            "orchestras",
            "."
        ]
    },
    {
        "database_id": "orchestra",
        "query": "SELECT COUNT ( Orchestra )  FROM orchestra WHERE Orchestra_ID NOT IN  ( SELECT Orchestra_ID FROM performance ) ",
        "query_toks": [
            "select",
            "count",
            "(",
            "orchestra",
            ")",
            "from",
            "orchestra",
            "where",
            "orchestra_id",
            "not",
            "in",
            "(",
            "select",
            "orchestra_id",
            "from",
            "performance",
            ")"
        ],
        "results_raw": [
            [
                "COUNT(Orchestra)"
            ],
            [
                1
            ]
        ],
        "response": "1 orchestra has no performance.",
        "response_toks": [
            "1",
            "orchestra",
            "has",
            "no",
            "performance",
            "."
        ],
        "results_map": {
            "result0": "1"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT COUNT ( Orchestra )  FROM orchestra WHERE Orchestra_ID NOT IN  ( SELECT Orchestra_ID FROM performance )  | 1 ",
        "query_w_results_blank_res": "SELECT COUNT ( Orchestra )  FROM orchestra WHERE Orchestra_ID NOT IN  ( SELECT Orchestra_ID FROM performance )  | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "orchestra",
            ")",
            "from",
            "orchestra",
            "where",
            "orchestra_id",
            "not",
            "in",
            "(",
            "select",
            "orchestra_id",
            "from",
            "performance",
            ")",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "orchestra",
            ")",
            "from",
            "orchestra",
            "where",
            "orchestra_id",
            "not",
            "in",
            "(",
            "select",
            "orchestra_id",
            "from",
            "performance",
            ")",
            "result0"
        ],
        "response_blank_res": "result0 orchestra has no performance .",
        "response_toks_blank_res": [
            "result0",
            "orchestra",
            "has",
            "no",
            "performance",
            "."
        ]
    },
    {
        "database_id": "orchestra",
        "query": "SELECT Orchestra_ID, Orchestra FROM orchestra WHERE Orchestra_ID NOT IN  ( SELECT Orchestra_ID FROM performance ) ",
        "query_toks": [
            "select",
            "orchestra_id",
            ",",
            "orchestra",
            "from",
            "orchestra",
            "where",
            "orchestra_id",
            "not",
            "in",
            "(",
            "select",
            "orchestra_id",
            "from",
            "performance",
            ")"
        ],
        "results_raw": [
            [
                "Orchestra_ID",
                "Orchestra"
            ],
            [
                12,
                "San Francisco Symphony Orchestra"
            ]
        ],
        "response": "The orchestra with no performance is named San Francisco Symphony Orchestra and has orchestra id 12.",
        "response_toks": [
            "The",
            "orchestra",
            "with",
            "no",
            "performance",
            "is",
            "named",
            "San",
            "Francisco",
            "Symphony",
            "Orchestra",
            "and",
            "has",
            "orchestra",
            "id",
            "12",
            "."
        ],
        "results_map": {
            "result0": "12"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT Orchestra_ID, Orchestra FROM orchestra WHERE Orchestra_ID NOT IN  ( SELECT Orchestra_ID FROM performance )  | 12 ",
        "query_w_results_blank_res": "SELECT Orchestra_ID, Orchestra FROM orchestra WHERE Orchestra_ID NOT IN  ( SELECT Orchestra_ID FROM performance )  | result0 ",
        "query_toks_w_results": [
            "select",
            "orchestra_id",
            ",",
            "orchestra",
            "from",
            "orchestra",
            "where",
            "orchestra_id",
            "not",
            "in",
            "(",
            "select",
            "orchestra_id",
            "from",
            "performance",
            ")",
            "12"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "orchestra_id",
            ",",
            "orchestra",
            "from",
            "orchestra",
            "where",
            "orchestra_id",
            "not",
            "in",
            "(",
            "select",
            "orchestra_id",
            "from",
            "performance",
            ")",
            "result0"
        ],
        "response_blank_res": "The orchestra with no performance is named San Francisco Symphony Orchestra and has orchestra id result0 .",
        "response_toks_blank_res": [
            "The",
            "orchestra",
            "with",
            "no",
            "performance",
            "is",
            "named",
            "San",
            "Francisco",
            "Symphony",
            "Orchestra",
            "and",
            "has",
            "orchestra",
            "id",
            "result0",
            "."
        ]
    },
    {
        "database_id": "concert_singer",
        "query": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id   =   T2.stadium_id WHERE T1.Year   =   2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id   =   T2.stadium_id WHERE T1.Year   =   2015",
        "query_toks": [
            "select",
            "t2",
            ".",
            "name",
            ",",
            "t2",
            ".",
            "location",
            "from",
            "concert",
            "as",
            "t1",
            "join",
            "stadium",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stadium_id",
            "=",
            "t2",
            ".",
            "stadium_id",
            "where",
            "t1",
            ".",
            "year",
            "=",
            "2014",
            "intersect",
            "select",
            "t2",
            ".",
            "name",
            ",",
            "t2",
            ".",
            "location",
            "from",
            "concert",
            "as",
            "t1",
            "join",
            "stadium",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stadium_id",
            "=",
            "t2",
            ".",
            "stadium_id",
            "where",
            "t1",
            ".",
            "year",
            "=",
            "2015"
        ],
        "results_raw": [
            [
                "Name",
                "Location"
            ],
            [
                "Somerset Park",
                "Ayr United"
            ]
        ],
        "response": "Here are the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015",
        "response_toks": [
            "Here",
            "are",
            "the",
            "name",
            "and",
            "location",
            "of",
            "the",
            "stadiums",
            "which",
            "some",
            "concerts",
            "happened",
            "in",
            "the",
            "years",
            "of",
            "both",
            "2014",
            "and",
            "2015"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id   =   T2.stadium_id WHERE T1.Year   =   2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id   =   T2.stadium_id WHERE T1.Year   =   2015",
        "query_w_results_blank_res": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id   =   T2.stadium_id WHERE T1.Year   =   2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id   =   T2.stadium_id WHERE T1.Year   =   2015",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "name",
            ",",
            "t2",
            ".",
            "location",
            "from",
            "concert",
            "as",
            "t1",
            "join",
            "stadium",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stadium_id",
            "=",
            "t2",
            ".",
            "stadium_id",
            "where",
            "t1",
            ".",
            "year",
            "=",
            "2014",
            "intersect",
            "select",
            "t2",
            ".",
            "name",
            ",",
            "t2",
            ".",
            "location",
            "from",
            "concert",
            "as",
            "t1",
            "join",
            "stadium",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stadium_id",
            "=",
            "t2",
            ".",
            "stadium_id",
            "where",
            "t1",
            ".",
            "year",
            "=",
            "2015"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "name",
            ",",
            "t2",
            ".",
            "location",
            "from",
            "concert",
            "as",
            "t1",
            "join",
            "stadium",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stadium_id",
            "=",
            "t2",
            ".",
            "stadium_id",
            "where",
            "t1",
            ".",
            "year",
            "=",
            "2014",
            "intersect",
            "select",
            "t2",
            ".",
            "name",
            ",",
            "t2",
            ".",
            "location",
            "from",
            "concert",
            "as",
            "t1",
            "join",
            "stadium",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stadium_id",
            "=",
            "t2",
            ".",
            "stadium_id",
            "where",
            "t1",
            ".",
            "year",
            "=",
            "2015"
        ],
        "response_blank_res": "Here are the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "name",
            "and",
            "location",
            "of",
            "the",
            "stadiums",
            "which",
            "some",
            "concerts",
            "happened",
            "in",
            "the",
            "years",
            "of",
            "both",
            "2014",
            "and",
            "2015"
        ]
    },
    {
        "database_id": "concert_singer",
        "query": "SELECT year from concert where concert_name like \"%Super bootcamp%\"",
        "query_toks": [
            "select",
            "year",
            "from",
            "concert",
            "where",
            "concert_name",
            "like",
            "\"%super",
            "bootcamp%\""
        ],
        "results_raw": [
            [
                "Year"
            ],
            [
                "2014"
            ]
        ],
        "response": "the concert with name Super bootcamp happened in the year of 2014",
        "response_toks": [
            "the",
            "concert",
            "with",
            "name",
            "Super",
            "bootcamp",
            "happened",
            "in",
            "the",
            "year",
            "of",
            "2014"
        ],
        "results_map": {
            "result0": "2014"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT year from concert where concert_name like \"%Super bootcamp%\" | 2014 ",
        "query_w_results_blank_res": "SELECT year from concert where concert_name like \"%Super bootcamp%\" | result0 ",
        "query_toks_w_results": [
            "select",
            "year",
            "from",
            "concert",
            "where",
            "concert_name",
            "like",
            "\"%super",
            "bootcamp%\"",
            "2014"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "year",
            "from",
            "concert",
            "where",
            "concert_name",
            "like",
            "\"%super",
            "bootcamp%\"",
            "result0"
        ],
        "response_blank_res": "the concert with name Super bootcamp happened in the year of result0",
        "response_toks_blank_res": [
            "the",
            "concert",
            "with",
            "name",
            "Super",
            "bootcamp",
            "happened",
            "in",
            "the",
            "year",
            "of",
            "result0"
        ]
    },
    {
        "database_id": "concert_singer",
        "query": "SELECT year from concert where concert_name like \"%Auditions%\"",
        "query_toks": [
            "select",
            "year",
            "from",
            "concert",
            "where",
            "concert_name",
            "like",
            "\"%auditions%\""
        ],
        "results_raw": [
            [
                "Year"
            ],
            [
                "2014"
            ]
        ],
        "response": "The concert named Auditions happened in the year of 2014",
        "response_toks": [
            "The",
            "concert",
            "named",
            "Auditions",
            "happened",
            "in",
            "the",
            "year",
            "of",
            "2014"
        ],
        "results_map": {
            "result0": "2014"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT year from concert where concert_name like \"%Auditions%\" | 2014 ",
        "query_w_results_blank_res": "SELECT year from concert where concert_name like \"%Auditions%\" | result0 ",
        "query_toks_w_results": [
            "select",
            "year",
            "from",
            "concert",
            "where",
            "concert_name",
            "like",
            "\"%auditions%\"",
            "2014"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "year",
            "from",
            "concert",
            "where",
            "concert_name",
            "like",
            "\"%auditions%\"",
            "result0"
        ],
        "response_blank_res": "The concert named Auditions happened in the year of result0",
        "response_toks_blank_res": [
            "The",
            "concert",
            "named",
            "Auditions",
            "happened",
            "in",
            "the",
            "year",
            "of",
            "result0"
        ]
    },
    {
        "database_id": "concert_singer",
        "query": "SELECT T1.name from stadium as T1 join  concert as T2 on T1.stadium_id  =  T2.stadium_id where T2.concert_name like \"%Auditions%\"",
        "query_toks": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "stadium",
            "as",
            "t1",
            "join",
            "concert",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stadium_id",
            "=",
            "t2",
            ".",
            "stadium_id",
            "where",
            "t2",
            ".",
            "concert_name",
            "like",
            "\"%auditions%\""
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Stark's Park"
            ]
        ],
        "response": "The concert named Auditions happened in the stadium with name Stark's Park",
        "response_toks": [
            "The",
            "concert",
            "named",
            "Auditions",
            "happened",
            "in",
            "the",
            "stadium",
            "with",
            "name",
            "Stark",
            "'s",
            "Park"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.name from stadium as T1 join  concert as T2 on T1.stadium_id  =  T2.stadium_id where T2.concert_name like \"%Auditions%\"",
        "query_w_results_blank_res": "SELECT T1.name from stadium as T1 join  concert as T2 on T1.stadium_id  =  T2.stadium_id where T2.concert_name like \"%Auditions%\"",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "stadium",
            "as",
            "t1",
            "join",
            "concert",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stadium_id",
            "=",
            "t2",
            ".",
            "stadium_id",
            "where",
            "t2",
            ".",
            "concert_name",
            "like",
            "\"%auditions%\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "stadium",
            "as",
            "t1",
            "join",
            "concert",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stadium_id",
            "=",
            "t2",
            ".",
            "stadium_id",
            "where",
            "t2",
            ".",
            "concert_name",
            "like",
            "\"%auditions%\""
        ],
        "response_blank_res": "The concert named Auditions happened in the stadium with name Stark 's Park",
        "response_toks_blank_res": [
            "The",
            "concert",
            "named",
            "Auditions",
            "happened",
            "in",
            "the",
            "stadium",
            "with",
            "name",
            "Stark",
            "'s",
            "Park"
        ]
    },
    {
        "database_id": "concert_singer",
        "query": "SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 or T1.Year  =  2015",
        "query_toks": [
            "select",
            "t2",
            ".",
            "name",
            ",",
            "t2",
            ".",
            "location",
            "from",
            "concert",
            "as",
            "t1",
            "join",
            "stadium",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stadium_id",
            "=",
            "t2",
            ".",
            "stadium_id",
            "where",
            "t1",
            ".",
            "year",
            "=",
            "2014",
            "or",
            "t1",
            ".",
            "year",
            "=",
            "2015"
        ],
        "results_raw": [
            [
                "Name",
                "Location"
            ],
            [
                "Stark's Park",
                "Raith Rovers"
            ],
            [
                "Somerset Park",
                "Ayr United"
            ],
            [
                "Somerset Park",
                "Ayr United"
            ]
        ],
        "response": "Here are the names and locations of stadiums which had some concerts in either 2014 or 2015",
        "response_toks": [
            "Here",
            "are",
            "the",
            "names",
            "and",
            "locations",
            "of",
            "stadiums",
            "which",
            "had",
            "some",
            "concerts",
            "in",
            "either",
            "2014",
            "or",
            "2015"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 or T1.Year  =  2015",
        "query_w_results_blank_res": "SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 or T1.Year  =  2015",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "name",
            ",",
            "t2",
            ".",
            "location",
            "from",
            "concert",
            "as",
            "t1",
            "join",
            "stadium",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stadium_id",
            "=",
            "t2",
            ".",
            "stadium_id",
            "where",
            "t1",
            ".",
            "year",
            "=",
            "2014",
            "or",
            "t1",
            ".",
            "year",
            "=",
            "2015"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "name",
            ",",
            "t2",
            ".",
            "location",
            "from",
            "concert",
            "as",
            "t1",
            "join",
            "stadium",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stadium_id",
            "=",
            "t2",
            ".",
            "stadium_id",
            "where",
            "t1",
            ".",
            "year",
            "=",
            "2014",
            "or",
            "t1",
            ".",
            "year",
            "=",
            "2015"
        ],
        "response_blank_res": "Here are the names and locations of stadiums which had some concerts in either 2014 or 2015",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "names",
            "and",
            "locations",
            "of",
            "stadiums",
            "which",
            "had",
            "some",
            "concerts",
            "in",
            "either",
            "2014",
            "or",
            "2015"
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT count ( * )  FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline   =   T1.uid WHERE T1.Airline   =   \"United Airlines\"",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "airlines",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t2",
            ".",
            "airline",
            "=",
            "t1",
            ".",
            "uid",
            "where",
            "t1",
            ".",
            "airline",
            "=",
            "\"united",
            "airlines\""
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                100
            ]
        ],
        "response": "There are 100  flights operated by United Airlines",
        "response_toks": [
            "There",
            "are",
            "100",
            "flights",
            "operated",
            "by",
            "United",
            "Airlines"
        ],
        "results_map": {
            "result0": "100"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline   =   T1.uid WHERE T1.Airline   =   \"United Airlines\" | 100 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline   =   T1.uid WHERE T1.Airline   =   \"United Airlines\" | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "airlines",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t2",
            ".",
            "airline",
            "=",
            "t1",
            ".",
            "uid",
            "where",
            "t1",
            ".",
            "airline",
            "=",
            "\"united",
            "airlines\"",
            "100"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "airlines",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t2",
            ".",
            "airline",
            "=",
            "t1",
            ".",
            "uid",
            "where",
            "t1",
            ".",
            "airline",
            "=",
            "\"united",
            "airlines\"",
            "result0"
        ],
        "response_blank_res": "There are result0 flights operated by United Airlines",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "flights",
            "operated",
            "by",
            "United",
            "Airlines"
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT count ( distinct T2.DestAirport )  FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline   =   T1.uid WHERE T1.Airline   =   \"United Airlines\"",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "t2",
            ".",
            "destairport",
            ")",
            "from",
            "airlines",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t2",
            ".",
            "airline",
            "=",
            "t1",
            ".",
            "uid",
            "where",
            "t1",
            ".",
            "airline",
            "=",
            "\"united",
            "airlines\""
        ],
        "results_raw": [
            [
                "count(distinct T2.DestAirport)"
            ],
            [
                62
            ]
        ],
        "response": "United Airlines flights have 62 different destination airports",
        "response_toks": [
            "United",
            "Airlines",
            "flights",
            "have",
            "62",
            "different",
            "destination",
            "airports"
        ],
        "results_map": {
            "result0": "62"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( distinct T2.DestAirport )  FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline   =   T1.uid WHERE T1.Airline   =   \"United Airlines\" | 62 ",
        "query_w_results_blank_res": "SELECT count ( distinct T2.DestAirport )  FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline   =   T1.uid WHERE T1.Airline   =   \"United Airlines\" | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "distinct",
            "t2",
            ".",
            "destairport",
            ")",
            "from",
            "airlines",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t2",
            ".",
            "airline",
            "=",
            "t1",
            ".",
            "uid",
            "where",
            "t1",
            ".",
            "airline",
            "=",
            "\"united",
            "airlines\"",
            "62"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "distinct",
            "t2",
            ".",
            "destairport",
            ")",
            "from",
            "airlines",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t2",
            ".",
            "airline",
            "=",
            "t1",
            ".",
            "uid",
            "where",
            "t1",
            ".",
            "airline",
            "=",
            "\"united",
            "airlines\"",
            "result0"
        ],
        "response_blank_res": "United Airlines flights have result0 different destination airports",
        "response_toks_blank_res": [
            "United",
            "Airlines",
            "flights",
            "have",
            "result0",
            "different",
            "destination",
            "airports"
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT count ( * )  FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline   =   T1.uid WHERE T1.Airline   =   \"United Airlines\" AND T2.DestAirport   =   \"ASY\"",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "airlines",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t2",
            ".",
            "airline",
            "=",
            "t1",
            ".",
            "uid",
            "where",
            "t1",
            ".",
            "airline",
            "=",
            "\"united",
            "airlines\"",
            "and",
            "t2",
            ".",
            "destairport",
            "=",
            "\"asy\""
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                0
            ]
        ],
        "response": "The number of 'United Airlines' flights with  destination  Airport 'ASY' is 0",
        "response_toks": [
            "The",
            "number",
            "of",
            "'United",
            "Airlines",
            "'",
            "flights",
            "with",
            "destination",
            "Airport",
            "'ASY",
            "'",
            "is",
            "0"
        ],
        "results_map": {
            "result0": "0"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline   =   T1.uid WHERE T1.Airline   =   \"United Airlines\" AND T2.DestAirport   =   \"ASY\" | 0 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline   =   T1.uid WHERE T1.Airline   =   \"United Airlines\" AND T2.DestAirport   =   \"ASY\" | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "airlines",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t2",
            ".",
            "airline",
            "=",
            "t1",
            ".",
            "uid",
            "where",
            "t1",
            ".",
            "airline",
            "=",
            "\"united",
            "airlines\"",
            "and",
            "t2",
            ".",
            "destairport",
            "=",
            "\"asy\"",
            "0"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "airlines",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t2",
            ".",
            "airline",
            "=",
            "t1",
            ".",
            "uid",
            "where",
            "t1",
            ".",
            "airline",
            "=",
            "\"united",
            "airlines\"",
            "and",
            "t2",
            ".",
            "destairport",
            "=",
            "\"asy\"",
            "result0"
        ],
        "response_blank_res": "The number of 'United Airlines ' flights with destination Airport 'ASY ' is result0",
        "response_toks_blank_res": [
            "The",
            "number",
            "of",
            "'United",
            "Airlines",
            "'",
            "flights",
            "with",
            "destination",
            "Airport",
            "'ASY",
            "'",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT count ( * )  FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline   =   T1.uid WHERE T1.Airline   =   \"United Airlines\" AND T2.DestAirport   =   \"ASY\"",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "airlines",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t2",
            ".",
            "airline",
            "=",
            "t1",
            ".",
            "uid",
            "where",
            "t1",
            ".",
            "airline",
            "=",
            "\"united",
            "airlines\"",
            "and",
            "t2",
            ".",
            "destairport",
            "=",
            "\"asy\""
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                0
            ]
        ],
        "response": "yes",
        "response_toks": [
            "yes"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT count ( * )  FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline   =   T1.uid WHERE T1.Airline   =   \"United Airlines\" AND T2.DestAirport   =   \"ASY\"",
        "query_w_results_blank_res": "SELECT count ( * )  FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline   =   T1.uid WHERE T1.Airline   =   \"United Airlines\" AND T2.DestAirport   =   \"ASY\"",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "airlines",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t2",
            ".",
            "airline",
            "=",
            "t1",
            ".",
            "uid",
            "where",
            "t1",
            ".",
            "airline",
            "=",
            "\"united",
            "airlines\"",
            "and",
            "t2",
            ".",
            "destairport",
            "=",
            "\"asy\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "airlines",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t2",
            ".",
            "airline",
            "=",
            "t1",
            ".",
            "uid",
            "where",
            "t1",
            ".",
            "airline",
            "=",
            "\"united",
            "airlines\"",
            "and",
            "t2",
            ".",
            "destairport",
            "=",
            "\"asy\""
        ],
        "response_blank_res": "yes",
        "response_toks_blank_res": [
            "yes"
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT degree_program_id from Student_Enrolment",
        "query_toks": [
            "select",
            "degree_program_id",
            "from",
            "student_enrolment"
        ],
        "results_raw": [
            [
                "degree_program_id"
            ],
            [
                12
            ],
            [
                4
            ],
            [
                10
            ]
        ],
        "response": "The degree program ids are shown in the result table.",
        "response_toks": [
            "The",
            "degree",
            "program",
            "ids",
            "are",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT degree_program_id from Student_Enrolment",
        "query_w_results_blank_res": "SELECT degree_program_id from Student_Enrolment",
        "query_toks_w_results": [
            "select",
            "degree_program_id",
            "from",
            "student_enrolment"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "degree_program_id",
            "from",
            "student_enrolment"
        ],
        "response_blank_res": "The degree program ids are shown in the result table .",
        "response_toks_blank_res": [
            "The",
            "degree",
            "program",
            "ids",
            "are",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT semester_id from Student_Enrolment",
        "query_toks": [
            "select",
            "semester_id",
            "from",
            "student_enrolment"
        ],
        "results_raw": [
            [
                "semester_id"
            ],
            [
                13
            ],
            [
                2
            ],
            [
                2
            ]
        ],
        "response": "All the semester ids are shown in the result table.",
        "response_toks": [
            "All",
            "the",
            "semester",
            "ids",
            "are",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT semester_id from Student_Enrolment",
        "query_w_results_blank_res": "SELECT semester_id from Student_Enrolment",
        "query_toks_w_results": [
            "select",
            "semester_id",
            "from",
            "student_enrolment"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "semester_id",
            "from",
            "student_enrolment"
        ],
        "response_blank_res": "All the semester ids are shown in the result table .",
        "response_toks_blank_res": [
            "All",
            "the",
            "semester",
            "ids",
            "are",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT semester_name from semesters",
        "query_toks": [
            "select",
            "semester_name",
            "from",
            "semesters"
        ],
        "results_raw": [
            [
                "semester_name"
            ],
            [
                "spring 2010"
            ],
            [
                "summer 2010"
            ],
            [
                "fall 2010"
            ]
        ],
        "response": "The semester names are shown in the result table.",
        "response_toks": [
            "The",
            "semester",
            "names",
            "are",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT semester_name from semesters",
        "query_w_results_blank_res": "SELECT semester_name from semesters",
        "query_toks_w_results": [
            "select",
            "semester_name",
            "from",
            "semesters"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "semester_name",
            "from",
            "semesters"
        ],
        "response_blank_res": "The semester names are shown in the result table .",
        "response_toks_blank_res": [
            "The",
            "semester",
            "names",
            "are",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id   =   T2.semester_id GROUP BY T1.semester_id ORDER BY count ( * )  DESC LIMIT 1",
        "query_toks": [
            "select",
            "t1",
            ".",
            "semester_name",
            ",",
            "t1",
            ".",
            "semester_id",
            "from",
            "semesters",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "semester_id",
            "=",
            "t2",
            ".",
            "semester_id",
            "group",
            "by",
            "t1",
            ".",
            "semester_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "semester_name",
                "semester_id"
            ],
            [
                "summer 2010",
                2
            ]
        ],
        "response": "The semester that most students registered in was the semester summer 2010 with id 2.",
        "response_toks": [
            "The",
            "semester",
            "that",
            "most",
            "students",
            "registered",
            "in",
            "was",
            "the",
            "semester",
            "summer",
            "2010",
            "with",
            "id",
            "2",
            "."
        ],
        "results_map": {
            "result0": "2"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id   =   T2.semester_id GROUP BY T1.semester_id ORDER BY count ( * )  DESC LIMIT 1 | 2 ",
        "query_w_results_blank_res": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id   =   T2.semester_id GROUP BY T1.semester_id ORDER BY count ( * )  DESC LIMIT 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "semester_name",
            ",",
            "t1",
            ".",
            "semester_id",
            "from",
            "semesters",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "semester_id",
            "=",
            "t2",
            ".",
            "semester_id",
            "group",
            "by",
            "t1",
            ".",
            "semester_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1",
            "2"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "semester_name",
            ",",
            "t1",
            ".",
            "semester_id",
            "from",
            "semesters",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "semester_id",
            "=",
            "t2",
            ".",
            "semester_id",
            "group",
            "by",
            "t1",
            ".",
            "semester_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "The semester that most students registered in was the semester summer 2010 with id result0 .",
        "response_toks_blank_res": [
            "The",
            "semester",
            "that",
            "most",
            "students",
            "registered",
            "in",
            "was",
            "the",
            "semester",
            "summer",
            "2010",
            "with",
            "id",
            "result0",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT GovernmentForm, avg ( LifeExpectancy )  FROM country GROUP BY GovernmentForm",
        "query_toks": [
            "select",
            "governmentform",
            ",",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            "from",
            "country",
            "group",
            "by",
            "governmentform"
        ],
        "results_raw": [
            [
                "GovernmentForm",
                "avg(LifeExpectancy)"
            ],
            [
                "Administrated by the UN",
                46.0
            ],
            [
                "Autonomous Area",
                71.4
            ],
            [
                "Co-administrated",
                null
            ]
        ],
        "response": "Here is the result table of the average life expectancy for each government form. For example, Administrated by the UN has an average life expectancy of 46.0",
        "response_toks": [
            "Here",
            "is",
            "the",
            "result",
            "table",
            "of",
            "the",
            "average",
            "life",
            "expectancy",
            "for",
            "each",
            "government",
            "form",
            ".",
            "For",
            "example",
            ",",
            "Administrated",
            "by",
            "the",
            "UN",
            "has",
            "an",
            "average",
            "life",
            "expectancy",
            "of",
            "46.0"
        ],
        "results_map": {
            "result0": "46.0"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT GovernmentForm, avg ( LifeExpectancy )  FROM country GROUP BY GovernmentForm | 46.0 ",
        "query_w_results_blank_res": "SELECT GovernmentForm, avg ( LifeExpectancy )  FROM country GROUP BY GovernmentForm | result0 ",
        "query_toks_w_results": [
            "select",
            "governmentform",
            ",",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            "from",
            "country",
            "group",
            "by",
            "governmentform",
            "46.0"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "governmentform",
            ",",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            "from",
            "country",
            "group",
            "by",
            "governmentform",
            "result0"
        ],
        "response_blank_res": "Here is the result table of the average life expectancy for each government form . For example , Administrated by the UN has an average life expectancy of result0",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "result",
            "table",
            "of",
            "the",
            "average",
            "life",
            "expectancy",
            "for",
            "each",
            "government",
            "form",
            ".",
            "For",
            "example",
            ",",
            "Administrated",
            "by",
            "the",
            "UN",
            "has",
            "an",
            "average",
            "life",
            "expectancy",
            "of",
            "result0"
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg ( LifeExpectancy )   >  72",
        "query_toks": [
            "select",
            "governmentform",
            "from",
            "country",
            "group",
            "by",
            "governmentform",
            "having",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            ">",
            "72"
        ],
        "results_raw": [
            [
                "GovernmentForm"
            ],
            [
                "Commonwealth of the US"
            ],
            [
                "Constitutional Monarchy (Emirate)"
            ],
            [
                "Constitutional Monarchy, Federation"
            ]
        ],
        "response": "Here is the result table of the government forms whose average life expectancy is greater than 72. For example, one of them is Commonwealth of the US.",
        "response_toks": [
            "Here",
            "is",
            "the",
            "result",
            "table",
            "of",
            "the",
            "government",
            "forms",
            "whose",
            "average",
            "life",
            "expectancy",
            "is",
            "greater",
            "than",
            "72",
            ".",
            "For",
            "example",
            ",",
            "one",
            "of",
            "them",
            "is",
            "Commonwealth",
            "of",
            "the",
            "US",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg ( LifeExpectancy )   >  72",
        "query_w_results_blank_res": "SELECT GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg ( LifeExpectancy )   >  72",
        "query_toks_w_results": [
            "select",
            "governmentform",
            "from",
            "country",
            "group",
            "by",
            "governmentform",
            "having",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            ">",
            "72"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "governmentform",
            "from",
            "country",
            "group",
            "by",
            "governmentform",
            "having",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            ">",
            "72"
        ],
        "response_blank_res": "Here is the result table of the government forms whose average life expectancy is greater than 72 . For example , one of them is Commonwealth of the US .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "result",
            "table",
            "of",
            "the",
            "government",
            "forms",
            "whose",
            "average",
            "life",
            "expectancy",
            "is",
            "greater",
            "than",
            "72",
            ".",
            "For",
            "example",
            ",",
            "one",
            "of",
            "them",
            "is",
            "Commonwealth",
            "of",
            "the",
            "US",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT sum ( Population )  ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg ( LifeExpectancy )   >  72",
        "query_toks": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "governmentform",
            "from",
            "country",
            "group",
            "by",
            "governmentform",
            "having",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            ">",
            "72"
        ],
        "results_raw": [
            [
                "sum(Population)",
                "GovernmentForm"
            ],
            [
                3947000,
                "Commonwealth of the US"
            ],
            [
                1972000,
                "Constitutional Monarchy (Emirate)"
            ],
            [
                82516000,
                "Constitutional Monarchy, Federation"
            ]
        ],
        "response": "Here is the result table of the government forms and their populations whose average life expectancy is greater than 72. For example, one of them is Commonwealth of the US with a population of 3947000.",
        "response_toks": [
            "Here",
            "is",
            "the",
            "result",
            "table",
            "of",
            "the",
            "government",
            "forms",
            "and",
            "their",
            "populations",
            "whose",
            "average",
            "life",
            "expectancy",
            "is",
            "greater",
            "than",
            "72",
            ".",
            "For",
            "example",
            ",",
            "one",
            "of",
            "them",
            "is",
            "Commonwealth",
            "of",
            "the",
            "US",
            "with",
            "a",
            "population",
            "of",
            "3947000",
            "."
        ],
        "results_map": {
            "result0": "3947000"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT sum ( Population )  ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg ( LifeExpectancy )   >  72 | 3947000 ",
        "query_w_results_blank_res": "SELECT sum ( Population )  ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg ( LifeExpectancy )   >  72 | result0 ",
        "query_toks_w_results": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "governmentform",
            "from",
            "country",
            "group",
            "by",
            "governmentform",
            "having",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            ">",
            "72",
            "3947000"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "governmentform",
            "from",
            "country",
            "group",
            "by",
            "governmentform",
            "having",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            ">",
            "72",
            "result0"
        ],
        "response_blank_res": "Here is the result table of the government forms and their populations whose average life expectancy is greater than 72 . For example , one of them is Commonwealth of the US with a population of result0 .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "result",
            "table",
            "of",
            "the",
            "government",
            "forms",
            "and",
            "their",
            "populations",
            "whose",
            "average",
            "life",
            "expectancy",
            "is",
            "greater",
            "than",
            "72",
            ".",
            "For",
            "example",
            ",",
            "one",
            "of",
            "them",
            "is",
            "Commonwealth",
            "of",
            "the",
            "US",
            "with",
            "a",
            "population",
            "of",
            "result0",
            "."
        ]
    },
    {
        "database_id": "tvshow",
        "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by   =   'Ben Jones'",
        "query_toks": [
            "select",
            "id",
            "from",
            "tv_channel",
            "except",
            "select",
            "channel",
            "from",
            "cartoon",
            "where",
            "directed_by",
            "=",
            "'ben",
            "jones'"
        ],
        "results_raw": [
            [
                "id"
            ],
            [
                "701"
            ],
            [
                "703"
            ],
            [
                "705"
            ]
        ],
        "response": "Here are ids of the TV channels that don't play any cartoons by Ben Jones.",
        "response_toks": [
            "Here",
            "are",
            "ids",
            "of",
            "the",
            "TV",
            "channels",
            "that",
            "do",
            "n't",
            "play",
            "any",
            "cartoons",
            "by",
            "Ben",
            "Jones",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by   =   'Ben Jones'",
        "query_w_results_blank_res": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by   =   'Ben Jones'",
        "query_toks_w_results": [
            "select",
            "id",
            "from",
            "tv_channel",
            "except",
            "select",
            "channel",
            "from",
            "cartoon",
            "where",
            "directed_by",
            "=",
            "'ben",
            "jones'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "id",
            "from",
            "tv_channel",
            "except",
            "select",
            "channel",
            "from",
            "cartoon",
            "where",
            "directed_by",
            "=",
            "'ben",
            "jones'"
        ],
        "response_blank_res": "Here are ids of the TV channels that do n't play any cartoons by Ben Jones .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "ids",
            "of",
            "the",
            "TV",
            "channels",
            "that",
            "do",
            "n't",
            "play",
            "any",
            "cartoons",
            "by",
            "Ben",
            "Jones",
            "."
        ]
    },
    {
        "database_id": "tvshow",
        "query": "SELECT id FROM TV_Channel where id in  ( SELECT channel FROM cartoon WHERE directed_by   =   'Ben Jones' ) ",
        "query_toks": [
            "select",
            "id",
            "from",
            "tv_channel",
            "where",
            "id",
            "in",
            "(",
            "select",
            "channel",
            "from",
            "cartoon",
            "where",
            "directed_by",
            "=",
            "'ben",
            "jones'",
            ")"
        ],
        "results_raw": [
            [
                "id"
            ],
            [
                "700"
            ],
            [
                "704"
            ],
            [
                "707"
            ]
        ],
        "response": "Here are ids of the TV channels play any cartoons by Ben Jones.",
        "response_toks": [
            "Here",
            "are",
            "ids",
            "of",
            "the",
            "TV",
            "channels",
            "play",
            "any",
            "cartoons",
            "by",
            "Ben",
            "Jones",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT id FROM TV_Channel where id in  ( SELECT channel FROM cartoon WHERE directed_by   =   'Ben Jones' ) ",
        "query_w_results_blank_res": "SELECT id FROM TV_Channel where id in  ( SELECT channel FROM cartoon WHERE directed_by   =   'Ben Jones' ) ",
        "query_toks_w_results": [
            "select",
            "id",
            "from",
            "tv_channel",
            "where",
            "id",
            "in",
            "(",
            "select",
            "channel",
            "from",
            "cartoon",
            "where",
            "directed_by",
            "=",
            "'ben",
            "jones'",
            ")"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "id",
            "from",
            "tv_channel",
            "where",
            "id",
            "in",
            "(",
            "select",
            "channel",
            "from",
            "cartoon",
            "where",
            "directed_by",
            "=",
            "'ben",
            "jones'",
            ")"
        ],
        "response_blank_res": "Here are ids of the TV channels play any cartoons by Ben Jones .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "ids",
            "of",
            "the",
            "TV",
            "channels",
            "play",
            "any",
            "cartoons",
            "by",
            "Ben",
            "Jones",
            "."
        ]
    },
    {
        "database_id": "tvshow",
        "query": "SELECT Title FROM Cartoon where directed_by   =   'Ben Jones'",
        "query_toks": [
            "select",
            "title",
            "from",
            "cartoon",
            "where",
            "directed_by",
            "=",
            "'ben",
            "jones'"
        ],
        "results_raw": [
            [
                "Title"
            ],
            [
                "The Rise of the Blue Beetle!"
            ],
            [
                "Day of the Dark Knight!"
            ],
            [
                "Dawn of the Dead Man!"
            ]
        ],
        "response": "Here are titles of the cartoons dircted by \"Ben Jose\". For example, one is \"The Rise of the Blue Beetle!\".",
        "response_toks": [
            "Here",
            "are",
            "titles",
            "of",
            "the",
            "cartoons",
            "dircted",
            "by",
            "``",
            "Ben",
            "Jose",
            "''",
            ".",
            "For",
            "example",
            ",",
            "one",
            "is",
            "``",
            "The",
            "Rise",
            "of",
            "the",
            "Blue",
            "Beetle",
            "!",
            "``",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Title FROM Cartoon where directed_by   =   'Ben Jones'",
        "query_w_results_blank_res": "SELECT Title FROM Cartoon where directed_by   =   'Ben Jones'",
        "query_toks_w_results": [
            "select",
            "title",
            "from",
            "cartoon",
            "where",
            "directed_by",
            "=",
            "'ben",
            "jones'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "title",
            "from",
            "cartoon",
            "where",
            "directed_by",
            "=",
            "'ben",
            "jones'"
        ],
        "response_blank_res": "Here are titles of the cartoons dircted by `` Ben Jose '' . For example , one is `` The Rise of the Blue Beetle ! `` .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "titles",
            "of",
            "the",
            "cartoons",
            "dircted",
            "by",
            "``",
            "Ben",
            "Jose",
            "''",
            ".",
            "For",
            "example",
            ",",
            "one",
            "is",
            "``",
            "The",
            "Rise",
            "of",
            "the",
            "Blue",
            "Beetle",
            "!",
            "``",
            "."
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_id FROM Paragraphs",
        "query_toks": [
            "select",
            "document_id",
            "from",
            "paragraphs"
        ],
        "results_raw": [
            [
                "Document_ID"
            ],
            [
                2394
            ],
            [
                3
            ],
            [
                50123
            ]
        ],
        "response": "There are all document ids",
        "response_toks": [
            "There",
            "are",
            "all",
            "document",
            "ids"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT document_id FROM Paragraphs",
        "query_w_results_blank_res": "SELECT document_id FROM Paragraphs",
        "query_toks_w_results": [
            "select",
            "document_id",
            "from",
            "paragraphs"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "document_id",
            "from",
            "paragraphs"
        ],
        "response_blank_res": "There are all document ids",
        "response_toks_blank_res": [
            "There",
            "are",
            "all",
            "document",
            "ids"
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_id ,  count ( * )  FROM Paragraphs GROUP BY document_id",
        "query_toks": [
            "select",
            "document_id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "paragraphs",
            "group",
            "by",
            "document_id"
        ],
        "results_raw": [
            [
                "Document_ID",
                "count(*)"
            ],
            [
                3,
                1
            ],
            [
                80,
                2
            ],
            [
                2394,
                3
            ]
        ],
        "response": "The table shows the number of paragraphs in each document.",
        "response_toks": [
            "The",
            "table",
            "shows",
            "the",
            "number",
            "of",
            "paragraphs",
            "in",
            "each",
            "document",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT document_id ,  count ( * )  FROM Paragraphs GROUP BY document_id",
        "query_w_results_blank_res": "SELECT document_id ,  count ( * )  FROM Paragraphs GROUP BY document_id",
        "query_toks_w_results": [
            "select",
            "document_id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "paragraphs",
            "group",
            "by",
            "document_id"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "document_id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "paragraphs",
            "group",
            "by",
            "document_id"
        ],
        "response_blank_res": "The table shows the number of paragraphs in each document .",
        "response_toks_blank_res": [
            "The",
            "table",
            "shows",
            "the",
            "number",
            "of",
            "paragraphs",
            "in",
            "each",
            "document",
            "."
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_id ,  count ( * )  FROM Paragraphs GROUP BY document_id ORDER BY document_id",
        "query_toks": [
            "select",
            "document_id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "paragraphs",
            "group",
            "by",
            "document_id",
            "order",
            "by",
            "document_id"
        ],
        "results_raw": [
            [
                "Document_ID",
                "count(*)"
            ],
            [
                3,
                1
            ],
            [
                80,
                2
            ],
            [
                2394,
                3
            ]
        ],
        "response": "The table shows all document ids and the number of paragraphs in each document ordered by document id.",
        "response_toks": [
            "The",
            "table",
            "shows",
            "all",
            "document",
            "ids",
            "and",
            "the",
            "number",
            "of",
            "paragraphs",
            "in",
            "each",
            "document",
            "ordered",
            "by",
            "document",
            "id",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT document_id ,  count ( * )  FROM Paragraphs GROUP BY document_id ORDER BY document_id",
        "query_w_results_blank_res": "SELECT document_id ,  count ( * )  FROM Paragraphs GROUP BY document_id ORDER BY document_id",
        "query_toks_w_results": [
            "select",
            "document_id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "paragraphs",
            "group",
            "by",
            "document_id",
            "order",
            "by",
            "document_id"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "document_id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "paragraphs",
            "group",
            "by",
            "document_id",
            "order",
            "by",
            "document_id"
        ],
        "response_blank_res": "The table shows all document ids and the number of paragraphs in each document ordered by document id .",
        "response_toks_blank_res": [
            "The",
            "table",
            "shows",
            "all",
            "document",
            "ids",
            "and",
            "the",
            "number",
            "of",
            "paragraphs",
            "in",
            "each",
            "document",
            "ordered",
            "by",
            "document",
            "id",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT  \nowner_id,zip_code from Owners",
        "query_toks": [
            "select",
            "owner_id",
            ",",
            "zip_code",
            "from",
            "owners"
        ],
        "results_raw": [
            [
                "owner_id",
                "zip_code"
            ],
            [
                1,
                "93165"
            ],
            [
                2,
                "45244"
            ],
            [
                3,
                "02647"
            ]
        ],
        "response": "the owner ids and zip codes from the table are  shown   in the table .",
        "response_toks": [
            "the",
            "owner",
            "ids",
            "and",
            "zip",
            "codes",
            "from",
            "the",
            "table",
            "are",
            "shown",
            "in",
            "the",
            "table",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT  \nowner_id,zip_code from Owners",
        "query_w_results_blank_res": "SELECT  \nowner_id,zip_code from Owners",
        "query_toks_w_results": [
            "select",
            "owner_id",
            ",",
            "zip_code",
            "from",
            "owners"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "owner_id",
            ",",
            "zip_code",
            "from",
            "owners"
        ],
        "response_blank_res": "the owner ids and zip codes from the table are shown in the table .",
        "response_toks_blank_res": [
            "the",
            "owner",
            "ids",
            "and",
            "zip",
            "codes",
            "from",
            "the",
            "table",
            "are",
            "shown",
            "in",
            "the",
            "table",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT T1.owner_id , T2.dog_id ,T3.cost_of_treatment  FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id",
        "query_toks": [
            "select",
            "t1",
            ".",
            "owner_id",
            ",",
            "t2",
            ".",
            "dog_id",
            ",",
            "t3",
            ".",
            "cost_of_treatment",
            "from",
            "owners",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "owner_id",
            "=",
            "t2",
            ".",
            "owner_id",
            "join",
            "treatments",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "dog_id",
            "=",
            "t3",
            ".",
            "dog_id"
        ],
        "results_raw": [
            [
                "owner_id",
                "dog_id",
                "cost_of_treatment"
            ],
            [
                14,
                14,
                567
            ],
            [
                14,
                4,
                147
            ],
            [
                14,
                14,
                429
            ]
        ],
        "response": "the owner ids, dog ids and the cost of treatment   are  shown  in the table",
        "response_toks": [
            "the",
            "owner",
            "ids",
            ",",
            "dog",
            "ids",
            "and",
            "the",
            "cost",
            "of",
            "treatment",
            "are",
            "shown",
            "in",
            "the",
            "table"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.owner_id , T2.dog_id ,T3.cost_of_treatment  FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id",
        "query_w_results_blank_res": "SELECT T1.owner_id , T2.dog_id ,T3.cost_of_treatment  FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "owner_id",
            ",",
            "t2",
            ".",
            "dog_id",
            ",",
            "t3",
            ".",
            "cost_of_treatment",
            "from",
            "owners",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "owner_id",
            "=",
            "t2",
            ".",
            "owner_id",
            "join",
            "treatments",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "dog_id",
            "=",
            "t3",
            ".",
            "dog_id"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "owner_id",
            ",",
            "t2",
            ".",
            "dog_id",
            ",",
            "t3",
            ".",
            "cost_of_treatment",
            "from",
            "owners",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "owner_id",
            "=",
            "t2",
            ".",
            "owner_id",
            "join",
            "treatments",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "dog_id",
            "=",
            "t3",
            ".",
            "dog_id"
        ],
        "response_blank_res": "the owner ids , dog ids and the cost of treatment are shown in the table",
        "response_toks_blank_res": [
            "the",
            "owner",
            "ids",
            ",",
            "dog",
            "ids",
            "and",
            "the",
            "cost",
            "of",
            "treatment",
            "are",
            "shown",
            "in",
            "the",
            "table"
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT  T1.first_name,T1.owner_id  FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum ( T3.cost_of_treatment )  DESC LIMIT 1",
        "query_toks": [
            "select",
            "t1",
            ".",
            "first_name",
            ",",
            "t1",
            ".",
            "owner_id",
            "from",
            "owners",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "owner_id",
            "=",
            "t2",
            ".",
            "owner_id",
            "join",
            "treatments",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "dog_id",
            "=",
            "t3",
            ".",
            "dog_id",
            "group",
            "by",
            "t1",
            ".",
            "owner_id",
            "order",
            "by",
            "sum",
            "(",
            "t3",
            ".",
            "cost_of_treatment",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "first_name",
                "owner_id"
            ],
            [
                "Jaclyn",
                3
            ]
        ],
        "response": "Here are the first name and id of the owner who has paid the largest amount of money in total for dogs.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "first",
            "name",
            "and",
            "id",
            "of",
            "the",
            "owner",
            "who",
            "has",
            "paid",
            "the",
            "largest",
            "amount",
            "of",
            "money",
            "in",
            "total",
            "for",
            "dogs",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT  T1.first_name,T1.owner_id  FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum ( T3.cost_of_treatment )  DESC LIMIT 1",
        "query_w_results_blank_res": "SELECT  T1.first_name,T1.owner_id  FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum ( T3.cost_of_treatment )  DESC LIMIT 1",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "first_name",
            ",",
            "t1",
            ".",
            "owner_id",
            "from",
            "owners",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "owner_id",
            "=",
            "t2",
            ".",
            "owner_id",
            "join",
            "treatments",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "dog_id",
            "=",
            "t3",
            ".",
            "dog_id",
            "group",
            "by",
            "t1",
            ".",
            "owner_id",
            "order",
            "by",
            "sum",
            "(",
            "t3",
            ".",
            "cost_of_treatment",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "first_name",
            ",",
            "t1",
            ".",
            "owner_id",
            "from",
            "owners",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "owner_id",
            "=",
            "t2",
            ".",
            "owner_id",
            "join",
            "treatments",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "dog_id",
            "=",
            "t3",
            ".",
            "dog_id",
            "group",
            "by",
            "t1",
            ".",
            "owner_id",
            "order",
            "by",
            "sum",
            "(",
            "t3",
            ".",
            "cost_of_treatment",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "response_blank_res": "Here are the first name and id of the owner who has paid the largest amount of money in total for dogs .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "first",
            "name",
            "and",
            "id",
            "of",
            "the",
            "owner",
            "who",
            "has",
            "paid",
            "the",
            "largest",
            "amount",
            "of",
            "money",
            "in",
            "total",
            "for",
            "dogs",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT last_name  from Owners where first_name = \"Jaclyn\"",
        "query_toks": [
            "select",
            "last_name",
            "from",
            "owners",
            "where",
            "first_name",
            "=",
            "\"jaclyn\""
        ],
        "results_raw": [
            [
                "last_name"
            ],
            [
                "Stoltenberg"
            ]
        ],
        "response": "The last name of the owner with a first name Jaclyn is Stoltenberg.",
        "response_toks": [
            "The",
            "last",
            "name",
            "of",
            "the",
            "owner",
            "with",
            "a",
            "first",
            "name",
            "Jaclyn",
            "is",
            "Stoltenberg",
            "."
        ],
        "results_map": {
            "result0": "Stoltenberg"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT last_name  from Owners where first_name = \"Jaclyn\" | Stoltenberg ",
        "query_w_results_blank_res": "SELECT last_name  from Owners where first_name = \"Jaclyn\" | result0 ",
        "query_toks_w_results": [
            "select",
            "last_name",
            "from",
            "owners",
            "where",
            "first_name",
            "=",
            "\"jaclyn\"",
            "Stoltenberg"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "last_name",
            "from",
            "owners",
            "where",
            "first_name",
            "=",
            "\"jaclyn\"",
            "result0"
        ],
        "response_blank_res": "The last name of the owner with a first name Jaclyn is result0 .",
        "response_toks_blank_res": [
            "The",
            "last",
            "name",
            "of",
            "the",
            "owner",
            "with",
            "a",
            "first",
            "name",
            "Jaclyn",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum ( T3.cost_of_treatment )  DESC LIMIT 1",
        "query_toks": [
            "select",
            "t1",
            ".",
            "owner_id",
            ",",
            "t1",
            ".",
            "zip_code",
            "from",
            "owners",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "owner_id",
            "=",
            "t2",
            ".",
            "owner_id",
            "join",
            "treatments",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "dog_id",
            "=",
            "t3",
            ".",
            "dog_id",
            "group",
            "by",
            "t1",
            ".",
            "owner_id",
            "order",
            "by",
            "sum",
            "(",
            "t3",
            ".",
            "cost_of_treatment",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "owner_id",
                "zip_code"
            ],
            [
                3,
                "02647"
            ]
        ],
        "response": "The  owner id and zip code of this owner who has paid the largest amount of money in total for their dogs  are shown  in the table",
        "response_toks": [
            "The",
            "owner",
            "id",
            "and",
            "zip",
            "code",
            "of",
            "this",
            "owner",
            "who",
            "has",
            "paid",
            "the",
            "largest",
            "amount",
            "of",
            "money",
            "in",
            "total",
            "for",
            "their",
            "dogs",
            "are",
            "shown",
            "in",
            "the",
            "table"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum ( T3.cost_of_treatment )  DESC LIMIT 1",
        "query_w_results_blank_res": "SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum ( T3.cost_of_treatment )  DESC LIMIT 1",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "owner_id",
            ",",
            "t1",
            ".",
            "zip_code",
            "from",
            "owners",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "owner_id",
            "=",
            "t2",
            ".",
            "owner_id",
            "join",
            "treatments",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "dog_id",
            "=",
            "t3",
            ".",
            "dog_id",
            "group",
            "by",
            "t1",
            ".",
            "owner_id",
            "order",
            "by",
            "sum",
            "(",
            "t3",
            ".",
            "cost_of_treatment",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "owner_id",
            ",",
            "t1",
            ".",
            "zip_code",
            "from",
            "owners",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "owner_id",
            "=",
            "t2",
            ".",
            "owner_id",
            "join",
            "treatments",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "dog_id",
            "=",
            "t3",
            ".",
            "dog_id",
            "group",
            "by",
            "t1",
            ".",
            "owner_id",
            "order",
            "by",
            "sum",
            "(",
            "t3",
            ".",
            "cost_of_treatment",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "response_blank_res": "The owner id and zip code of this owner who has paid the largest amount of money in total for their dogs are shown in the table",
        "response_toks_blank_res": [
            "The",
            "owner",
            "id",
            "and",
            "zip",
            "code",
            "of",
            "this",
            "owner",
            "who",
            "has",
            "paid",
            "the",
            "largest",
            "amount",
            "of",
            "money",
            "in",
            "total",
            "for",
            "their",
            "dogs",
            "are",
            "shown",
            "in",
            "the",
            "table"
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT FlightNo FROM Flights",
        "query_toks": [
            "select",
            "flightno",
            "from",
            "flights"
        ],
        "results_raw": [
            [
                "FlightNo"
            ],
            [
                28
            ],
            [
                29
            ],
            [
                44
            ]
        ],
        "response": "Here is the result table of all flight numbers. For example, one of them is 28.",
        "response_toks": [
            "Here",
            "is",
            "the",
            "result",
            "table",
            "of",
            "all",
            "flight",
            "numbers",
            ".",
            "For",
            "example",
            ",",
            "one",
            "of",
            "them",
            "is",
            "28",
            "."
        ],
        "results_map": {
            "result0": "28"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT FlightNo FROM Flights | 28 ",
        "query_w_results_blank_res": "SELECT FlightNo FROM Flights | result0 ",
        "query_toks_w_results": [
            "select",
            "flightno",
            "from",
            "flights",
            "28"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "flightno",
            "from",
            "flights",
            "result0"
        ],
        "response_blank_res": "Here is the result table of all flight numbers . For example , one of them is result0 .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "result",
            "table",
            "of",
            "all",
            "flight",
            "numbers",
            ".",
            "For",
            "example",
            ",",
            "one",
            "of",
            "them",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT FlightNo,DestAirport FROM Flights",
        "query_toks": [
            "select",
            "flightno",
            ",",
            "destairport",
            "from",
            "flights"
        ],
        "results_raw": [
            [
                "FlightNo",
                "DestAirport"
            ],
            [
                28,
                " ASY"
            ],
            [
                29,
                " APG"
            ],
            [
                44,
                " ACV"
            ]
        ],
        "response": "Here is the result table of all flight numbers and their destination airport code. For example, one of them is 28 with the destination ASY.",
        "response_toks": [
            "Here",
            "is",
            "the",
            "result",
            "table",
            "of",
            "all",
            "flight",
            "numbers",
            "and",
            "their",
            "destination",
            "airport",
            "code",
            ".",
            "For",
            "example",
            ",",
            "one",
            "of",
            "them",
            "is",
            "28",
            "with",
            "the",
            "destination",
            "ASY",
            "."
        ],
        "results_map": {
            "result0": "28"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT FlightNo,DestAirport FROM Flights | 28 ",
        "query_w_results_blank_res": "SELECT FlightNo,DestAirport FROM Flights | result0 ",
        "query_toks_w_results": [
            "select",
            "flightno",
            ",",
            "destairport",
            "from",
            "flights",
            "28"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "flightno",
            ",",
            "destairport",
            "from",
            "flights",
            "result0"
        ],
        "response_blank_res": "Here is the result table of all flight numbers and their destination airport code . For example , one of them is result0 with the destination ASY .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "result",
            "table",
            "of",
            "all",
            "flight",
            "numbers",
            "and",
            "their",
            "destination",
            "airport",
            "code",
            ".",
            "For",
            "example",
            ",",
            "one",
            "of",
            "them",
            "is",
            "result0",
            "with",
            "the",
            "destination",
            "ASY",
            "."
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT count ( * )  FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport   =   T2.AirportCode WHERE T2.city   =   \"Aberdeen\" OR T2.city   =   \"Abilene\"",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "as",
            "t1",
            "join",
            "airports",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "destairport",
            "=",
            "t2",
            ".",
            "airportcode",
            "where",
            "t2",
            ".",
            "city",
            "=",
            "\"aberdeen\"",
            "or",
            "t2",
            ".",
            "city",
            "=",
            "\"abilene\""
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                0
            ]
        ],
        "response": "the quantity of flights that had Aberdeen or Abilene as their destination cities is 0.",
        "response_toks": [
            "the",
            "quantity",
            "of",
            "flights",
            "that",
            "had",
            "Aberdeen",
            "or",
            "Abilene",
            "as",
            "their",
            "destination",
            "cities",
            "is",
            "0",
            "."
        ],
        "results_map": {
            "result0": "0"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport   =   T2.AirportCode WHERE T2.city   =   \"Aberdeen\" OR T2.city   =   \"Abilene\" | 0 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport   =   T2.AirportCode WHERE T2.city   =   \"Aberdeen\" OR T2.city   =   \"Abilene\" | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "as",
            "t1",
            "join",
            "airports",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "destairport",
            "=",
            "t2",
            ".",
            "airportcode",
            "where",
            "t2",
            ".",
            "city",
            "=",
            "\"aberdeen\"",
            "or",
            "t2",
            ".",
            "city",
            "=",
            "\"abilene\"",
            "0"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "as",
            "t1",
            "join",
            "airports",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "destairport",
            "=",
            "t2",
            ".",
            "airportcode",
            "where",
            "t2",
            ".",
            "city",
            "=",
            "\"aberdeen\"",
            "or",
            "t2",
            ".",
            "city",
            "=",
            "\"abilene\"",
            "result0"
        ],
        "response_blank_res": "the quantity of flights that had Aberdeen or Abilene as their destination cities is result0 .",
        "response_toks_blank_res": [
            "the",
            "quantity",
            "of",
            "flights",
            "that",
            "had",
            "Aberdeen",
            "or",
            "Abilene",
            "as",
            "their",
            "destination",
            "cities",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT count ( * )  FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport   =   T2.AirportCode WHERE T2.city   =   \"Aberdeen\" OR T2.city   =   \"Abilene\"",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "as",
            "t1",
            "join",
            "airports",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "destairport",
            "=",
            "t2",
            ".",
            "airportcode",
            "where",
            "t2",
            ".",
            "city",
            "=",
            "\"aberdeen\"",
            "or",
            "t2",
            ".",
            "city",
            "=",
            "\"abilene\""
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                0
            ]
        ],
        "response": "Yes.",
        "response_toks": [
            "Yes",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT count ( * )  FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport   =   T2.AirportCode WHERE T2.city   =   \"Aberdeen\" OR T2.city   =   \"Abilene\"",
        "query_w_results_blank_res": "SELECT count ( * )  FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport   =   T2.AirportCode WHERE T2.city   =   \"Aberdeen\" OR T2.city   =   \"Abilene\"",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "as",
            "t1",
            "join",
            "airports",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "destairport",
            "=",
            "t2",
            ".",
            "airportcode",
            "where",
            "t2",
            ".",
            "city",
            "=",
            "\"aberdeen\"",
            "or",
            "t2",
            ".",
            "city",
            "=",
            "\"abilene\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "as",
            "t1",
            "join",
            "airports",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "destairport",
            "=",
            "t2",
            ".",
            "airportcode",
            "where",
            "t2",
            ".",
            "city",
            "=",
            "\"aberdeen\"",
            "or",
            "t2",
            ".",
            "city",
            "=",
            "\"abilene\""
        ],
        "response_blank_res": "Yes .",
        "response_toks_blank_res": [
            "Yes",
            "."
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT DESTAIRPORT FROM Flights GROUP BY DESTAIRPORT order by count ( * )  desc limit 1",
        "query_toks": [
            "select",
            "destairport",
            "from",
            "flights",
            "group",
            "by",
            "destairport",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "DestAirport"
            ],
            [
                " AAF"
            ]
        ],
        "response": "the airport city that has the most flights landing in it is AAF",
        "response_toks": [
            "the",
            "airport",
            "city",
            "that",
            "has",
            "the",
            "most",
            "flights",
            "landing",
            "in",
            "it",
            "is",
            "AAF"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT DESTAIRPORT FROM Flights GROUP BY DESTAIRPORT order by count ( * )  desc limit 1",
        "query_w_results_blank_res": "SELECT DESTAIRPORT FROM Flights GROUP BY DESTAIRPORT order by count ( * )  desc limit 1",
        "query_toks_w_results": [
            "select",
            "destairport",
            "from",
            "flights",
            "group",
            "by",
            "destairport",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "destairport",
            "from",
            "flights",
            "group",
            "by",
            "destairport",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "response_blank_res": "the airport city that has the most flights landing in it is AAF",
        "response_toks_blank_res": [
            "the",
            "airport",
            "city",
            "that",
            "has",
            "the",
            "most",
            "flights",
            "landing",
            "in",
            "it",
            "is",
            "AAF"
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT countrycode FROM  ( SELECT max ( percentage ) , language, countrycode FROM countrylanguage  GROUP BY countrycode )  WHERE language  =  \"Spanish\"",
        "query_toks": [
            "select",
            "countrycode",
            "from",
            "(",
            "select",
            "max",
            "(",
            "percentage",
            ")",
            ",",
            "language",
            ",",
            "countrycode",
            "from",
            "countrylanguage",
            "group",
            "by",
            "countrycode",
            ")",
            "where",
            "language",
            "=",
            "\"spanish\""
        ],
        "results_raw": [
            [
                "countrycode"
            ],
            [
                "AND"
            ],
            [
                "ARG"
            ],
            [
                "BOL"
            ]
        ],
        "response": "Here are the country codes of countries where Spanish is spoken by the largest percentage of people",
        "response_toks": [
            "Here",
            "are",
            "the",
            "country",
            "codes",
            "of",
            "countries",
            "where",
            "Spanish",
            "is",
            "spoken",
            "by",
            "the",
            "largest",
            "percentage",
            "of",
            "people"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT countrycode FROM  ( SELECT max ( percentage ) , language, countrycode FROM countrylanguage  GROUP BY countrycode )  WHERE language  =  \"Spanish\"",
        "query_w_results_blank_res": "SELECT countrycode FROM  ( SELECT max ( percentage ) , language, countrycode FROM countrylanguage  GROUP BY countrycode )  WHERE language  =  \"Spanish\"",
        "query_toks_w_results": [
            "select",
            "countrycode",
            "from",
            "(",
            "select",
            "max",
            "(",
            "percentage",
            ")",
            ",",
            "language",
            ",",
            "countrycode",
            "from",
            "countrylanguage",
            "group",
            "by",
            "countrycode",
            ")",
            "where",
            "language",
            "=",
            "\"spanish\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "countrycode",
            "from",
            "(",
            "select",
            "max",
            "(",
            "percentage",
            ")",
            ",",
            "language",
            ",",
            "countrycode",
            "from",
            "countrylanguage",
            "group",
            "by",
            "countrycode",
            ")",
            "where",
            "language",
            "=",
            "\"spanish\""
        ],
        "response_blank_res": "Here are the country codes of countries where Spanish is spoken by the largest percentage of people",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "country",
            "codes",
            "of",
            "countries",
            "where",
            "Spanish",
            "is",
            "spoken",
            "by",
            "the",
            "largest",
            "percentage",
            "of",
            "people"
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT count ( countrycode )  FROM  ( SELECT max ( percentage ) , language, countrycode FROM countrylanguage  GROUP BY countrycode )  WHERE language  =  \"Spanish\"",
        "query_toks": [
            "select",
            "count",
            "(",
            "countrycode",
            ")",
            "from",
            "(",
            "select",
            "max",
            "(",
            "percentage",
            ")",
            ",",
            "language",
            ",",
            "countrycode",
            "from",
            "countrylanguage",
            "group",
            "by",
            "countrycode",
            ")",
            "where",
            "language",
            "=",
            "\"spanish\""
        ],
        "results_raw": [
            [
                "count(countrycode)"
            ],
            [
                21
            ]
        ],
        "response": "the total number of  countries with a Spanish speaking majority is 21",
        "response_toks": [
            "the",
            "total",
            "number",
            "of",
            "countries",
            "with",
            "a",
            "Spanish",
            "speaking",
            "majority",
            "is",
            "21"
        ],
        "results_map": {
            "result0": "21"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( countrycode )  FROM  ( SELECT max ( percentage ) , language, countrycode FROM countrylanguage  GROUP BY countrycode )  WHERE language  =  \"Spanish\" | 21 ",
        "query_w_results_blank_res": "SELECT count ( countrycode )  FROM  ( SELECT max ( percentage ) , language, countrycode FROM countrylanguage  GROUP BY countrycode )  WHERE language  =  \"Spanish\" | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "countrycode",
            ")",
            "from",
            "(",
            "select",
            "max",
            "(",
            "percentage",
            ")",
            ",",
            "language",
            ",",
            "countrycode",
            "from",
            "countrylanguage",
            "group",
            "by",
            "countrycode",
            ")",
            "where",
            "language",
            "=",
            "\"spanish\"",
            "21"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "countrycode",
            ")",
            "from",
            "(",
            "select",
            "max",
            "(",
            "percentage",
            ")",
            ",",
            "language",
            ",",
            "countrycode",
            "from",
            "countrylanguage",
            "group",
            "by",
            "countrycode",
            ")",
            "where",
            "language",
            "=",
            "\"spanish\"",
            "result0"
        ],
        "response_blank_res": "the total number of countries with a Spanish speaking majority is result0",
        "response_toks_blank_res": [
            "the",
            "total",
            "number",
            "of",
            "countries",
            "with",
            "a",
            "Spanish",
            "speaking",
            "majority",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT count ( countrycode )  FROM  ( SELECT max ( percentage ) , language, countrycode, isOfficial FROM countrylanguage  GROUP BY countrycode )  WHERE language  =  \"Spanish\" AND isOfficial  =  \"T\"",
        "query_toks": [
            "select",
            "count",
            "(",
            "countrycode",
            ")",
            "from",
            "(",
            "select",
            "max",
            "(",
            "percentage",
            ")",
            ",",
            "language",
            ",",
            "countrycode",
            ",",
            "isofficial",
            "from",
            "countrylanguage",
            "group",
            "by",
            "countrycode",
            ")",
            "where",
            "language",
            "=",
            "\"spanish\"",
            "and",
            "isofficial",
            "=",
            "\"t\""
        ],
        "results_raw": [
            [
                "count(countrycode)"
            ],
            [
                20
            ]
        ],
        "response": "Among  countries with a Spanish speaking majority, 20 countries have Spanish as the official language spoken",
        "response_toks": [
            "Among",
            "countries",
            "with",
            "a",
            "Spanish",
            "speaking",
            "majority",
            ",",
            "20",
            "countries",
            "have",
            "Spanish",
            "as",
            "the",
            "official",
            "language",
            "spoken"
        ],
        "results_map": {
            "result0": "20"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( countrycode )  FROM  ( SELECT max ( percentage ) , language, countrycode, isOfficial FROM countrylanguage  GROUP BY countrycode )  WHERE language  =  \"Spanish\" AND isOfficial  =  \"T\" | 20 ",
        "query_w_results_blank_res": "SELECT count ( countrycode )  FROM  ( SELECT max ( percentage ) , language, countrycode, isOfficial FROM countrylanguage  GROUP BY countrycode )  WHERE language  =  \"Spanish\" AND isOfficial  =  \"T\" | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "countrycode",
            ")",
            "from",
            "(",
            "select",
            "max",
            "(",
            "percentage",
            ")",
            ",",
            "language",
            ",",
            "countrycode",
            ",",
            "isofficial",
            "from",
            "countrylanguage",
            "group",
            "by",
            "countrycode",
            ")",
            "where",
            "language",
            "=",
            "\"spanish\"",
            "and",
            "isofficial",
            "=",
            "\"t\"",
            "20"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "countrycode",
            ")",
            "from",
            "(",
            "select",
            "max",
            "(",
            "percentage",
            ")",
            ",",
            "language",
            ",",
            "countrycode",
            ",",
            "isofficial",
            "from",
            "countrylanguage",
            "group",
            "by",
            "countrycode",
            ")",
            "where",
            "language",
            "=",
            "\"spanish\"",
            "and",
            "isofficial",
            "=",
            "\"t\"",
            "result0"
        ],
        "response_blank_res": "Among countries with a Spanish speaking majority , result0 countries have Spanish as the official language spoken",
        "response_toks_blank_res": [
            "Among",
            "countries",
            "with",
            "a",
            "Spanish",
            "speaking",
            "majority",
            ",",
            "result0",
            "countries",
            "have",
            "Spanish",
            "as",
            "the",
            "official",
            "language",
            "spoken"
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT count ( * )  FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =   T2.AirportCode WHERE T2.City   =   \"Aberdeen\"",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "as",
            "t1",
            "join",
            "airports",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "destairport",
            "=",
            "t2",
            ".",
            "airportcode",
            "where",
            "t2",
            ".",
            "city",
            "=",
            "\"aberdeen\""
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                0
            ]
        ],
        "response": "The number of flights that arrive in the city called Aberdeen is 0",
        "response_toks": [
            "The",
            "number",
            "of",
            "flights",
            "that",
            "arrive",
            "in",
            "the",
            "city",
            "called",
            "Aberdeen",
            "is",
            "0"
        ],
        "results_map": {
            "result0": "0"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =   T2.AirportCode WHERE T2.City   =   \"Aberdeen\" | 0 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =   T2.AirportCode WHERE T2.City   =   \"Aberdeen\" | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "as",
            "t1",
            "join",
            "airports",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "destairport",
            "=",
            "t2",
            ".",
            "airportcode",
            "where",
            "t2",
            ".",
            "city",
            "=",
            "\"aberdeen\"",
            "0"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "as",
            "t1",
            "join",
            "airports",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "destairport",
            "=",
            "t2",
            ".",
            "airportcode",
            "where",
            "t2",
            ".",
            "city",
            "=",
            "\"aberdeen\"",
            "result0"
        ],
        "response_blank_res": "The number of flights that arrive in the city called Aberdeen is result0",
        "response_toks_blank_res": [
            "The",
            "number",
            "of",
            "flights",
            "that",
            "arrive",
            "in",
            "the",
            "city",
            "called",
            "Aberdeen",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT count ( * )  FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.sourceAirport   =   T2.AirportCode WHERE T2.City   =   \"Aberdeen\"",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "as",
            "t1",
            "join",
            "airports",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "sourceairport",
            "=",
            "t2",
            ".",
            "airportcode",
            "where",
            "t2",
            ".",
            "city",
            "=",
            "\"aberdeen\""
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                0
            ]
        ],
        "response": "The number of flights that depart in the city called Aberdeen is 0",
        "response_toks": [
            "The",
            "number",
            "of",
            "flights",
            "that",
            "depart",
            "in",
            "the",
            "city",
            "called",
            "Aberdeen",
            "is",
            "0"
        ],
        "results_map": {
            "result0": "0"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.sourceAirport   =   T2.AirportCode WHERE T2.City   =   \"Aberdeen\" | 0 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.sourceAirport   =   T2.AirportCode WHERE T2.City   =   \"Aberdeen\" | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "as",
            "t1",
            "join",
            "airports",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "sourceairport",
            "=",
            "t2",
            ".",
            "airportcode",
            "where",
            "t2",
            ".",
            "city",
            "=",
            "\"aberdeen\"",
            "0"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "as",
            "t1",
            "join",
            "airports",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "sourceairport",
            "=",
            "t2",
            ".",
            "airportcode",
            "where",
            "t2",
            ".",
            "city",
            "=",
            "\"aberdeen\"",
            "result0"
        ],
        "response_blank_res": "The number of flights that depart in the city called Aberdeen is result0",
        "response_toks_blank_res": [
            "The",
            "number",
            "of",
            "flights",
            "that",
            "depart",
            "in",
            "the",
            "city",
            "called",
            "Aberdeen",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT Name FROM country WHERE Continent   =   \"Africa\"  AND population  <   ( SELECT max ( population )  FROM country WHERE Continent   =   \"Asia\" ) ",
        "query_toks": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"africa\"",
            "and",
            "population",
            "<",
            "(",
            "select",
            "max",
            "(",
            "population",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"asia\"",
            ")"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Angola"
            ],
            [
                "Burundi"
            ],
            [
                "Benin"
            ]
        ],
        "response": "The following table shows  THE AFRICAN COUNTRIES THAT HAVE POPULATION LESS THAN ANY COUNTRY IN ASIA",
        "response_toks": [
            "The",
            "following",
            "table",
            "shows",
            "THE",
            "AFRICAN",
            "COUNTRIES",
            "THAT",
            "HAVE",
            "POPULATION",
            "LESS",
            "THAN",
            "ANY",
            "COUNTRY",
            "IN",
            "ASIA"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Name FROM country WHERE Continent   =   \"Africa\"  AND population  <   ( SELECT max ( population )  FROM country WHERE Continent   =   \"Asia\" ) ",
        "query_w_results_blank_res": "SELECT Name FROM country WHERE Continent   =   \"Africa\"  AND population  <   ( SELECT max ( population )  FROM country WHERE Continent   =   \"Asia\" ) ",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"africa\"",
            "and",
            "population",
            "<",
            "(",
            "select",
            "max",
            "(",
            "population",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"asia\"",
            ")"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"africa\"",
            "and",
            "population",
            "<",
            "(",
            "select",
            "max",
            "(",
            "population",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"asia\"",
            ")"
        ],
        "response_blank_res": "The following table shows THE AFRICAN COUNTRIES THAT HAVE POPULATION LESS THAN ANY COUNTRY IN ASIA",
        "response_toks_blank_res": [
            "The",
            "following",
            "table",
            "shows",
            "THE",
            "AFRICAN",
            "COUNTRIES",
            "THAT",
            "HAVE",
            "POPULATION",
            "LESS",
            "THAN",
            "ANY",
            "COUNTRY",
            "IN",
            "ASIA"
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT continent FROM country WHERE name  =  \"Aruba\"",
        "query_toks": [
            "select",
            "continent",
            "from",
            "country",
            "where",
            "name",
            "=",
            "\"aruba\""
        ],
        "results_raw": [
            [
                "Continent"
            ],
            [
                "North America"
            ]
        ],
        "response": "Aruba is in North America continent.",
        "response_toks": [
            "Aruba",
            "is",
            "in",
            "North",
            "America",
            "continent",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT continent FROM country WHERE name  =  \"Aruba\"",
        "query_w_results_blank_res": "SELECT continent FROM country WHERE name  =  \"Aruba\"",
        "query_toks_w_results": [
            "select",
            "continent",
            "from",
            "country",
            "where",
            "name",
            "=",
            "\"aruba\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "continent",
            "from",
            "country",
            "where",
            "name",
            "=",
            "\"aruba\""
        ],
        "response_blank_res": "Aruba is in North America continent .",
        "response_toks_blank_res": [
            "Aruba",
            "is",
            "in",
            "North",
            "America",
            "continent",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT localname FROM country WHERE name  =  \"Angola\"",
        "query_toks": [
            "select",
            "localname",
            "from",
            "country",
            "where",
            "name",
            "=",
            "\"angola\""
        ],
        "results_raw": [
            [
                "LocalName"
            ],
            [
                "Angola"
            ]
        ],
        "response": "Angola IS THE LOCAL NAME OF ANGOLA .",
        "response_toks": [
            "Angola",
            "IS",
            "THE",
            "LOCAL",
            "NAME",
            "OF",
            "ANGOLA",
            "."
        ],
        "results_map": {
            "result0": "Angola"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT localname FROM country WHERE name  =  \"Angola\" | Angola ",
        "query_w_results_blank_res": "SELECT localname FROM country WHERE name  =  \"Angola\" | result0 ",
        "query_toks_w_results": [
            "select",
            "localname",
            "from",
            "country",
            "where",
            "name",
            "=",
            "\"angola\"",
            "Angola"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "localname",
            "from",
            "country",
            "where",
            "name",
            "=",
            "\"angola\"",
            "result0"
        ],
        "response_blank_res": "result0 IS THE LOCAL NAME OF ANGOLA .",
        "response_toks_blank_res": [
            "result0",
            "IS",
            "THE",
            "LOCAL",
            "NAME",
            "OF",
            "ANGOLA",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT SurfaceArea FROM country WHERE name  =  \"Afghanistan\"",
        "query_toks": [
            "select",
            "surfacearea",
            "from",
            "country",
            "where",
            "name",
            "=",
            "\"afghanistan\""
        ],
        "results_raw": [
            [
                "SurfaceArea"
            ],
            [
                652090.0
            ]
        ],
        "response": "652090.0 is the SURFACE AREA OF AFGHANISTAN",
        "response_toks": [
            "652090.0",
            "is",
            "the",
            "SURFACE",
            "AREA",
            "OF",
            "AFGHANISTAN"
        ],
        "results_map": {
            "result0": "652090.0"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT SurfaceArea FROM country WHERE name  =  \"Afghanistan\" | 652090.0 ",
        "query_w_results_blank_res": "SELECT SurfaceArea FROM country WHERE name  =  \"Afghanistan\" | result0 ",
        "query_toks_w_results": [
            "select",
            "surfacearea",
            "from",
            "country",
            "where",
            "name",
            "=",
            "\"afghanistan\"",
            "652090.0"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "surfacearea",
            "from",
            "country",
            "where",
            "name",
            "=",
            "\"afghanistan\"",
            "result0"
        ],
        "response_blank_res": "result0 is the SURFACE AREA OF AFGHANISTAN",
        "response_toks_blank_res": [
            "result0",
            "is",
            "the",
            "SURFACE",
            "AREA",
            "OF",
            "AFGHANISTAN"
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT Code FROM country WHERE name  =  \"Aruba\"",
        "query_toks": [
            "select",
            "code",
            "from",
            "country",
            "where",
            "name",
            "=",
            "\"aruba\""
        ],
        "results_raw": [
            [
                "Code"
            ],
            [
                "ABW"
            ]
        ],
        "response": "ABW is tHE CODE OF ARUBA.",
        "response_toks": [
            "ABW",
            "is",
            "tHE",
            "CODE",
            "OF",
            "ARUBA",
            "."
        ],
        "results_map": {
            "result0": "ABW"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT Code FROM country WHERE name  =  \"Aruba\" | ABW ",
        "query_w_results_blank_res": "SELECT Code FROM country WHERE name  =  \"Aruba\" | result0 ",
        "query_toks_w_results": [
            "select",
            "code",
            "from",
            "country",
            "where",
            "name",
            "=",
            "\"aruba\"",
            "ABW"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "code",
            "from",
            "country",
            "where",
            "name",
            "=",
            "\"aruba\"",
            "result0"
        ],
        "response_blank_res": "result0 is tHE CODE OF ARUBA .",
        "response_toks_blank_res": [
            "result0",
            "is",
            "tHE",
            "CODE",
            "OF",
            "ARUBA",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
        "query_toks": [
            "select",
            "first_name",
            "from",
            "professionals",
            "union",
            "select",
            "first_name",
            "from",
            "owners",
            "except",
            "select",
            "name",
            "from",
            "dogs"
        ],
        "results_raw": [
            [
                "first_name"
            ],
            [
                "Adelle"
            ],
            [
                "Brady"
            ],
            [
                "Cindy"
            ]
        ],
        "response": "Here is the list of first names from professionals or owners except those found as dog names.",
        "response_toks": [
            "Here",
            "is",
            "the",
            "list",
            "of",
            "first",
            "names",
            "from",
            "professionals",
            "or",
            "owners",
            "except",
            "those",
            "found",
            "as",
            "dog",
            "names",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
        "query_w_results_blank_res": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
        "query_toks_w_results": [
            "select",
            "first_name",
            "from",
            "professionals",
            "union",
            "select",
            "first_name",
            "from",
            "owners",
            "except",
            "select",
            "name",
            "from",
            "dogs"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "first_name",
            "from",
            "professionals",
            "union",
            "select",
            "first_name",
            "from",
            "owners",
            "except",
            "select",
            "name",
            "from",
            "dogs"
        ],
        "response_blank_res": "Here is the list of first names from professionals or owners except those found as dog names .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "list",
            "of",
            "first",
            "names",
            "from",
            "professionals",
            "or",
            "owners",
            "except",
            "those",
            "found",
            "as",
            "dog",
            "names",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT email_address FROM Professionals WHERE First_Name  =  \"Taryn\"",
        "query_toks": [
            "select",
            "email_address",
            "from",
            "professionals",
            "where",
            "first_name",
            "=",
            "\"taryn\""
        ],
        "results_raw": [
            [
                "email_address"
            ],
            [
                "deanna.schuster@example.com"
            ]
        ],
        "response": "The email address matching the professional with name Taryn is deanna.schuster@example.com.",
        "response_toks": [
            "The",
            "email",
            "address",
            "matching",
            "the",
            "professional",
            "with",
            "name",
            "Taryn",
            "is",
            "deanna.schuster",
            "@",
            "example.com",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT email_address FROM Professionals WHERE First_Name  =  \"Taryn\"",
        "query_w_results_blank_res": "SELECT email_address FROM Professionals WHERE First_Name  =  \"Taryn\"",
        "query_toks_w_results": [
            "select",
            "email_address",
            "from",
            "professionals",
            "where",
            "first_name",
            "=",
            "\"taryn\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "email_address",
            "from",
            "professionals",
            "where",
            "first_name",
            "=",
            "\"taryn\""
        ],
        "response_blank_res": "The email address matching the professional with name Taryn is deanna.schuster @ example.com .",
        "response_toks_blank_res": [
            "The",
            "email",
            "address",
            "matching",
            "the",
            "professional",
            "with",
            "name",
            "Taryn",
            "is",
            "deanna.schuster",
            "@",
            "example.com",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT state FROM Professionals WHERE First_Name  =  \"Jayson\"",
        "query_toks": [
            "select",
            "state",
            "from",
            "professionals",
            "where",
            "first_name",
            "=",
            "\"jayson\""
        ],
        "results_raw": [
            [
                "state"
            ],
            [
                "Connecticut"
            ]
        ],
        "response": "The state corresponding to the professional named Jayson is Connecticut.",
        "response_toks": [
            "The",
            "state",
            "corresponding",
            "to",
            "the",
            "professional",
            "named",
            "Jayson",
            "is",
            "Connecticut",
            "."
        ],
        "results_map": {
            "result0": "Connecticut"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT state FROM Professionals WHERE First_Name  =  \"Jayson\" | Connecticut ",
        "query_w_results_blank_res": "SELECT state FROM Professionals WHERE First_Name  =  \"Jayson\" | result0 ",
        "query_toks_w_results": [
            "select",
            "state",
            "from",
            "professionals",
            "where",
            "first_name",
            "=",
            "\"jayson\"",
            "Connecticut"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "state",
            "from",
            "professionals",
            "where",
            "first_name",
            "=",
            "\"jayson\"",
            "result0"
        ],
        "response_blank_res": "The state corresponding to the professional named Jayson is result0 .",
        "response_toks_blank_res": [
            "The",
            "state",
            "corresponding",
            "to",
            "the",
            "professional",
            "named",
            "Jayson",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker JOIN CAR_NAMES AS T3 ON T2.model   =   T3.model JOIN CARS_DATA AS T4 ON T3.MakeId   =   T4.id WHERE T4.year   =   '1970'",
        "query_toks": [
            "select",
            "distinct",
            "t1",
            ".",
            "maker",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "maker",
            "join",
            "car_names",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "model",
            "=",
            "t3",
            ".",
            "model",
            "join",
            "cars_data",
            "as",
            "t4",
            "on",
            "t3",
            ".",
            "makeid",
            "=",
            "t4",
            ".",
            "id",
            "where",
            "t4",
            ".",
            "year",
            "=",
            "'1970'"
        ],
        "results_raw": [
            [
                "Maker"
            ],
            [
                "gm"
            ],
            [
                "chrysler"
            ],
            [
                "amc"
            ]
        ],
        "response": "Here are the  names of the makers who produced some cars in the year 1970",
        "response_toks": [
            "Here",
            "are",
            "the",
            "names",
            "of",
            "the",
            "makers",
            "who",
            "produced",
            "some",
            "cars",
            "in",
            "the",
            "year",
            "1970"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker JOIN CAR_NAMES AS T3 ON T2.model   =   T3.model JOIN CARS_DATA AS T4 ON T3.MakeId   =   T4.id WHERE T4.year   =   '1970'",
        "query_w_results_blank_res": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker JOIN CAR_NAMES AS T3 ON T2.model   =   T3.model JOIN CARS_DATA AS T4 ON T3.MakeId   =   T4.id WHERE T4.year   =   '1970'",
        "query_toks_w_results": [
            "select",
            "distinct",
            "t1",
            ".",
            "maker",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "maker",
            "join",
            "car_names",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "model",
            "=",
            "t3",
            ".",
            "model",
            "join",
            "cars_data",
            "as",
            "t4",
            "on",
            "t3",
            ".",
            "makeid",
            "=",
            "t4",
            ".",
            "id",
            "where",
            "t4",
            ".",
            "year",
            "=",
            "'1970'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "t1",
            ".",
            "maker",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "maker",
            "join",
            "car_names",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "model",
            "=",
            "t3",
            ".",
            "model",
            "join",
            "cars_data",
            "as",
            "t4",
            "on",
            "t3",
            ".",
            "makeid",
            "=",
            "t4",
            ".",
            "id",
            "where",
            "t4",
            ".",
            "year",
            "=",
            "'1970'"
        ],
        "response_blank_res": "Here are the names of the makers who produced some cars in the year 1970",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "names",
            "of",
            "the",
            "makers",
            "who",
            "produced",
            "some",
            "cars",
            "in",
            "the",
            "year",
            "1970"
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT T3.model, T3.make FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker JOIN CAR_NAMES AS T3 ON T2.model   =   T3.model JOIN CARS_DATA AS T4 ON T3.MakeId   =   T4.id WHERE T4.year   =   '1970'",
        "query_toks": [
            "select",
            "t3",
            ".",
            "model",
            ",",
            "t3",
            ".",
            "make",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "maker",
            "join",
            "car_names",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "model",
            "=",
            "t3",
            ".",
            "model",
            "join",
            "cars_data",
            "as",
            "t4",
            "on",
            "t3",
            ".",
            "makeid",
            "=",
            "t4",
            ".",
            "id",
            "where",
            "t4",
            ".",
            "year",
            "=",
            "'1970'"
        ],
        "results_raw": [
            [
                "Model",
                "Make"
            ],
            [
                "chevrolet",
                "chevrolet chevelle malibu"
            ],
            [
                "buick",
                "buick skylark 320"
            ],
            [
                "plymouth",
                "plymouth satellite"
            ]
        ],
        "response": "Here are the models and makes of the cars produced in the year 1970",
        "response_toks": [
            "Here",
            "are",
            "the",
            "models",
            "and",
            "makes",
            "of",
            "the",
            "cars",
            "produced",
            "in",
            "the",
            "year",
            "1970"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T3.model, T3.make FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker JOIN CAR_NAMES AS T3 ON T2.model   =   T3.model JOIN CARS_DATA AS T4 ON T3.MakeId   =   T4.id WHERE T4.year   =   '1970'",
        "query_w_results_blank_res": "SELECT T3.model, T3.make FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker JOIN CAR_NAMES AS T3 ON T2.model   =   T3.model JOIN CARS_DATA AS T4 ON T3.MakeId   =   T4.id WHERE T4.year   =   '1970'",
        "query_toks_w_results": [
            "select",
            "t3",
            ".",
            "model",
            ",",
            "t3",
            ".",
            "make",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "maker",
            "join",
            "car_names",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "model",
            "=",
            "t3",
            ".",
            "model",
            "join",
            "cars_data",
            "as",
            "t4",
            "on",
            "t3",
            ".",
            "makeid",
            "=",
            "t4",
            ".",
            "id",
            "where",
            "t4",
            ".",
            "year",
            "=",
            "'1970'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t3",
            ".",
            "model",
            ",",
            "t3",
            ".",
            "make",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "maker",
            "join",
            "car_names",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "model",
            "=",
            "t3",
            ".",
            "model",
            "join",
            "cars_data",
            "as",
            "t4",
            "on",
            "t3",
            ".",
            "makeid",
            "=",
            "t4",
            ".",
            "id",
            "where",
            "t4",
            ".",
            "year",
            "=",
            "'1970'"
        ],
        "response_blank_res": "Here are the models and makes of the cars produced in the year 1970",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "models",
            "and",
            "makes",
            "of",
            "the",
            "cars",
            "produced",
            "in",
            "the",
            "year",
            "1970"
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT T1.Fullname FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970' ORDER BY T4.weight DESC limit 1",
        "query_toks": [
            "select",
            "t1",
            ".",
            "fullname",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "maker",
            "join",
            "car_names",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "model",
            "=",
            "t3",
            ".",
            "model",
            "join",
            "cars_data",
            "as",
            "t4",
            "on",
            "t3",
            ".",
            "makeid",
            "=",
            "t4",
            ".",
            "id",
            "where",
            "t4",
            ".",
            "year",
            "=",
            "'1970'",
            "order",
            "by",
            "t4",
            ".",
            "weight",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "FullName"
            ],
            [
                "Ford Motor Company"
            ]
        ],
        "response": "the full name of the maker that produced the heaviest car in the year 1970 is Ford Motor Company",
        "response_toks": [
            "the",
            "full",
            "name",
            "of",
            "the",
            "maker",
            "that",
            "produced",
            "the",
            "heaviest",
            "car",
            "in",
            "the",
            "year",
            "1970",
            "is",
            "Ford",
            "Motor",
            "Company"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.Fullname FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970' ORDER BY T4.weight DESC limit 1",
        "query_w_results_blank_res": "SELECT T1.Fullname FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970' ORDER BY T4.weight DESC limit 1",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "fullname",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "maker",
            "join",
            "car_names",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "model",
            "=",
            "t3",
            ".",
            "model",
            "join",
            "cars_data",
            "as",
            "t4",
            "on",
            "t3",
            ".",
            "makeid",
            "=",
            "t4",
            ".",
            "id",
            "where",
            "t4",
            ".",
            "year",
            "=",
            "'1970'",
            "order",
            "by",
            "t4",
            ".",
            "weight",
            "desc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "fullname",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "maker",
            "join",
            "car_names",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "model",
            "=",
            "t3",
            ".",
            "model",
            "join",
            "cars_data",
            "as",
            "t4",
            "on",
            "t3",
            ".",
            "makeid",
            "=",
            "t4",
            ".",
            "id",
            "where",
            "t4",
            ".",
            "year",
            "=",
            "'1970'",
            "order",
            "by",
            "t4",
            ".",
            "weight",
            "desc",
            "limit",
            "1"
        ],
        "response_blank_res": "the full name of the maker that produced the heaviest car in the year 1970 is Ford Motor Company",
        "response_toks_blank_res": [
            "the",
            "full",
            "name",
            "of",
            "the",
            "maker",
            "that",
            "produced",
            "the",
            "heaviest",
            "car",
            "in",
            "the",
            "year",
            "1970",
            "is",
            "Ford",
            "Motor",
            "Company"
        ]
    },
    {
        "database_id": "tvshow",
        "query": "SELECT title FROM cartoon WHERE directed_by   =   'Ben Jones'",
        "query_toks": [
            "select",
            "title",
            "from",
            "cartoon",
            "where",
            "directed_by",
            "=",
            "'ben",
            "jones'"
        ],
        "results_raw": [
            [
                "Title"
            ],
            [
                "The Rise of the Blue Beetle!"
            ],
            [
                "Day of the Dark Knight!"
            ],
            [
                "Dawn of the Dead Man!"
            ]
        ],
        "response": "Here are the titles of cartoons that are directed by Ben Jones",
        "response_toks": [
            "Here",
            "are",
            "the",
            "titles",
            "of",
            "cartoons",
            "that",
            "are",
            "directed",
            "by",
            "Ben",
            "Jones"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT title FROM cartoon WHERE directed_by   =   'Ben Jones'",
        "query_w_results_blank_res": "SELECT title FROM cartoon WHERE directed_by   =   'Ben Jones'",
        "query_toks_w_results": [
            "select",
            "title",
            "from",
            "cartoon",
            "where",
            "directed_by",
            "=",
            "'ben",
            "jones'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "title",
            "from",
            "cartoon",
            "where",
            "directed_by",
            "=",
            "'ben",
            "jones'"
        ],
        "response_blank_res": "Here are the titles of cartoons that are directed by Ben Jones",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "titles",
            "of",
            "cartoons",
            "that",
            "are",
            "directed",
            "by",
            "Ben",
            "Jones"
        ]
    },
    {
        "database_id": "tvshow",
        "query": "SELECT channel, id FROM cartoon",
        "query_toks": [
            "select",
            "channel",
            ",",
            "id",
            "from",
            "cartoon"
        ],
        "results_raw": [
            [
                "Channel",
                "id"
            ],
            [
                "700",
                1.0
            ],
            [
                "701",
                2.0
            ],
            [
                "703",
                3.0
            ]
        ],
        "response": "Here are the channels and ids of the cartoons",
        "response_toks": [
            "Here",
            "are",
            "the",
            "channels",
            "and",
            "ids",
            "of",
            "the",
            "cartoons"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT channel, id FROM cartoon",
        "query_w_results_blank_res": "SELECT channel, id FROM cartoon",
        "query_toks_w_results": [
            "select",
            "channel",
            ",",
            "id",
            "from",
            "cartoon"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "channel",
            ",",
            "id",
            "from",
            "cartoon"
        ],
        "response_blank_res": "Here are the channels and ids of the cartoons",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "channels",
            "and",
            "ids",
            "of",
            "the",
            "cartoons"
        ]
    },
    {
        "database_id": "tvshow",
        "query": "SELECT series_name FROM TV_Channel EXCEPT SELECT series_name FROM TV_channel WHERE language  =  'Italian'",
        "query_toks": [
            "select",
            "series_name",
            "from",
            "tv_channel",
            "except",
            "select",
            "series_name",
            "from",
            "tv_channel",
            "where",
            "language",
            "=",
            "'italian'"
        ],
        "results_raw": [
            [
                "series_name"
            ],
            [
                "MTV Dance"
            ],
            [
                "MTV Live HD"
            ],
            [
                "MTV Rocks"
            ]
        ],
        "response": "Here are all the series name of tv channels which don't use language Italian",
        "response_toks": [
            "Here",
            "are",
            "all",
            "the",
            "series",
            "name",
            "of",
            "tv",
            "channels",
            "which",
            "do",
            "n't",
            "use",
            "language",
            "Italian"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT series_name FROM TV_Channel EXCEPT SELECT series_name FROM TV_channel WHERE language  =  'Italian'",
        "query_w_results_blank_res": "SELECT series_name FROM TV_Channel EXCEPT SELECT series_name FROM TV_channel WHERE language  =  'Italian'",
        "query_toks_w_results": [
            "select",
            "series_name",
            "from",
            "tv_channel",
            "except",
            "select",
            "series_name",
            "from",
            "tv_channel",
            "where",
            "language",
            "=",
            "'italian'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "series_name",
            "from",
            "tv_channel",
            "except",
            "select",
            "series_name",
            "from",
            "tv_channel",
            "where",
            "language",
            "=",
            "'italian'"
        ],
        "response_blank_res": "Here are all the series name of tv channels which do n't use language Italian",
        "response_toks_blank_res": [
            "Here",
            "are",
            "all",
            "the",
            "series",
            "name",
            "of",
            "tv",
            "channels",
            "which",
            "do",
            "n't",
            "use",
            "language",
            "Italian"
        ]
    },
    {
        "database_id": "tvshow",
        "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
        "query_toks": [
            "select",
            "id",
            "from",
            "tv_channel",
            "except",
            "select",
            "channel",
            "from",
            "cartoon",
            "where",
            "directed_by",
            "=",
            "'ben",
            "jones'"
        ],
        "results_raw": [
            [
                "id"
            ],
            [
                "701"
            ],
            [
                "703"
            ],
            [
                "705"
            ]
        ],
        "response": "Here are all the ids of tv channels that do not play any cartoon directed by Ben Jones",
        "response_toks": [
            "Here",
            "are",
            "all",
            "the",
            "ids",
            "of",
            "tv",
            "channels",
            "that",
            "do",
            "not",
            "play",
            "any",
            "cartoon",
            "directed",
            "by",
            "Ben",
            "Jones"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
        "query_w_results_blank_res": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
        "query_toks_w_results": [
            "select",
            "id",
            "from",
            "tv_channel",
            "except",
            "select",
            "channel",
            "from",
            "cartoon",
            "where",
            "directed_by",
            "=",
            "'ben",
            "jones'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "id",
            "from",
            "tv_channel",
            "except",
            "select",
            "channel",
            "from",
            "cartoon",
            "where",
            "directed_by",
            "=",
            "'ben",
            "jones'"
        ],
        "response_blank_res": "Here are all the ids of tv channels that do not play any cartoon directed by Ben Jones",
        "response_toks_blank_res": [
            "Here",
            "are",
            "all",
            "the",
            "ids",
            "of",
            "tv",
            "channels",
            "that",
            "do",
            "not",
            "play",
            "any",
            "cartoon",
            "directed",
            "by",
            "Ben",
            "Jones"
        ]
    },
    {
        "database_id": "employee_hire_evaluation",
        "query": "select avg ( Number_products )  from shop",
        "query_toks": [
            "select",
            "avg",
            "(",
            "number_products",
            ")",
            "from",
            "shop"
        ],
        "results_raw": [
            [
                "avg(Number_products)"
            ],
            [
                6685.111111111111
            ]
        ],
        "response": "the average number of products of all stores is 6685.111111111111",
        "response_toks": [
            "the",
            "average",
            "number",
            "of",
            "products",
            "of",
            "all",
            "stores",
            "is",
            "6685.111111111111"
        ],
        "results_map": {
            "result0": "6685.111111111111"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "select avg ( Number_products )  from shop | 6685.111111111111 ",
        "query_w_results_blank_res": "select avg ( Number_products )  from shop | result0 ",
        "query_toks_w_results": [
            "select",
            "avg",
            "(",
            "number_products",
            ")",
            "from",
            "shop",
            "6685.111111111111"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "avg",
            "(",
            "number_products",
            ")",
            "from",
            "shop",
            "result0"
        ],
        "response_blank_res": "the average number of products of all stores is result0",
        "response_toks_blank_res": [
            "the",
            "average",
            "number",
            "of",
            "products",
            "of",
            "all",
            "stores",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "employee_hire_evaluation",
        "query": "select Name from shop where Number_products > 6685",
        "query_toks": [
            "select",
            "name",
            "from",
            "shop",
            "where",
            "number_products",
            ">",
            "6685"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "HJK"
            ],
            [
                "FC Inter"
            ],
            [
                "FC Lahti"
            ]
        ],
        "response": "here are  the names of stores whose number of products is bigger than 6685",
        "response_toks": [
            "here",
            "are",
            "the",
            "names",
            "of",
            "stores",
            "whose",
            "number",
            "of",
            "products",
            "is",
            "bigger",
            "than",
            "6685"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "select Name from shop where Number_products > 6685",
        "query_w_results_blank_res": "select Name from shop where Number_products > 6685",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "shop",
            "where",
            "number_products",
            ">",
            "6685"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "shop",
            "where",
            "number_products",
            ">",
            "6685"
        ],
        "response_blank_res": "here are the names of stores whose number of products is bigger than 6685",
        "response_toks_blank_res": [
            "here",
            "are",
            "the",
            "names",
            "of",
            "stores",
            "whose",
            "number",
            "of",
            "products",
            "is",
            "bigger",
            "than",
            "6685"
        ]
    },
    {
        "database_id": "employee_hire_evaluation",
        "query": "select count ( * )  from shop",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "shop"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                9
            ]
        ],
        "response": "there are 9 shops in total",
        "response_toks": [
            "there",
            "are",
            "9",
            "shops",
            "in",
            "total"
        ],
        "results_map": {
            "result0": "9"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "select count ( * )  from shop | 9 ",
        "query_w_results_blank_res": "select count ( * )  from shop | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "shop",
            "9"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "shop",
            "result0"
        ],
        "response_blank_res": "there are result0 shops in total",
        "response_toks_blank_res": [
            "there",
            "are",
            "result0",
            "shops",
            "in",
            "total"
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT count ( * )  FROM flights",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                1200
            ]
        ],
        "response": "There are 1200 flights in the table.",
        "response_toks": [
            "There",
            "are",
            "1200",
            "flights",
            "in",
            "the",
            "table",
            "."
        ],
        "results_map": {
            "result0": "1200"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM flights | 1200 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM flights | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "1200"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "result0"
        ],
        "response_blank_res": "There are result0 flights in the table .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "flights",
            "in",
            "the",
            "table",
            "."
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode   =   T2.SourceAirport GROUP BY T1.City ORDER BY count ( * )  ASC LIMIT 1",
        "query_toks": [
            "select",
            "t1",
            ".",
            "city",
            "from",
            "airports",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "airportcode",
            "=",
            "t2",
            ".",
            "sourceairport",
            "group",
            "by",
            "t1",
            ".",
            "city",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "asc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "City"
            ]
        ],
        "response": "This is the city with least number of departing flights.",
        "response_toks": [
            "This",
            "is",
            "the",
            "city",
            "with",
            "least",
            "number",
            "of",
            "departing",
            "flights",
            "."
        ],
        "results_map": null,
        "results_blank_res": null,
        "query_w_results": null,
        "query_w_results_blank_res": null,
        "query_toks_w_results": null,
        "query_toks_w_results_blank_res": null,
        "response_blank_res": null,
        "response_toks_blank_res": null
    },
    {
        "database_id": "flight_2",
        "query": "SELECT FlightNo FROM flights WHERE SourceAirport = \"APG\"",
        "query_toks": [
            "select",
            "flightno",
            "from",
            "flights",
            "where",
            "sourceairport",
            "=",
            "\"apg\""
        ],
        "results_raw": [
            [
                "FlightNo"
            ]
        ],
        "response": "The flight number of APG is 28.",
        "response_toks": [
            "The",
            "flight",
            "number",
            "of",
            "APG",
            "is",
            "28",
            "."
        ],
        "results_map": null,
        "results_blank_res": null,
        "query_w_results": null,
        "query_w_results_blank_res": null,
        "query_toks_w_results": null,
        "query_toks_w_results_blank_res": null,
        "response_blank_res": null,
        "response_toks_blank_res": null
    },
    {
        "database_id": "flight_2",
        "query": "SELECT AirportName FROM airports WHERE AirportCode = \"DYS\"",
        "query_toks": [
            "select",
            "airportname",
            "from",
            "airports",
            "where",
            "airportcode",
            "=",
            "\"dys\""
        ],
        "results_raw": [
            [
                "AirportName"
            ],
            [
                "Dyess AFB "
            ]
        ],
        "response": "This is the name of the airport with code DYS.",
        "response_toks": [
            "This",
            "is",
            "the",
            "name",
            "of",
            "the",
            "airport",
            "with",
            "code",
            "DYS",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT AirportName FROM airports WHERE AirportCode = \"DYS\"",
        "query_w_results_blank_res": "SELECT AirportName FROM airports WHERE AirportCode = \"DYS\"",
        "query_toks_w_results": [
            "select",
            "airportname",
            "from",
            "airports",
            "where",
            "airportcode",
            "=",
            "\"dys\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "airportname",
            "from",
            "airports",
            "where",
            "airportcode",
            "=",
            "\"dys\""
        ],
        "response_blank_res": "This is the name of the airport with code DYS .",
        "response_toks_blank_res": [
            "This",
            "is",
            "the",
            "name",
            "of",
            "the",
            "airport",
            "with",
            "code",
            "DYS",
            "."
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT CITY FROM airports WHERE AirportCode = \"ABR\"",
        "query_toks": [
            "select",
            "city",
            "from",
            "airports",
            "where",
            "airportcode",
            "=",
            "\"abr\""
        ],
        "results_raw": [
            [
                "City"
            ],
            [
                "Aberdeen "
            ]
        ],
        "response": "This is the city of ABR.",
        "response_toks": [
            "This",
            "is",
            "the",
            "city",
            "of",
            "ABR",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT CITY FROM airports WHERE AirportCode = \"ABR\"",
        "query_w_results_blank_res": "SELECT CITY FROM airports WHERE AirportCode = \"ABR\"",
        "query_toks_w_results": [
            "select",
            "city",
            "from",
            "airports",
            "where",
            "airportcode",
            "=",
            "\"abr\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "city",
            "from",
            "airports",
            "where",
            "airportcode",
            "=",
            "\"abr\""
        ],
        "response_blank_res": "This is the city of ABR .",
        "response_toks_blank_res": [
            "This",
            "is",
            "the",
            "city",
            "of",
            "ABR",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   \"English\" AND IsOfficial   =   \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   \"Dutch\" AND IsOfficial   =   \"T\"",
        "query_toks": [
            "select",
            "*",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "language",
            "=",
            "\"english\"",
            "and",
            "isofficial",
            "=",
            "\"t\"",
            "union",
            "select",
            "*",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "language",
            "=",
            "\"dutch\"",
            "and",
            "isofficial",
            "=",
            "\"t\""
        ],
        "results_raw": [
            [
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ],
            [
                "ABW",
                "Aruba",
                "North America",
                "Caribbean",
                193.0,
                null,
                103000,
                78.4,
                828.0,
                793.0,
                "Aruba",
                "Nonmetropolitan Territory of The Netherlands",
                "Beatrix",
                129,
                "AW",
                "ABW",
                "Dutch",
                "T",
                5.3
            ],
            [
                "AIA",
                "Anguilla",
                "North America",
                "Caribbean",
                96.0,
                null,
                8000,
                76.1,
                63.2,
                null,
                "Anguilla",
                "Dependent Territory of the UK",
                "Elisabeth II",
                62,
                "AI",
                "AIA",
                "English",
                "T",
                0.0
            ],
            [
                "ANT",
                "Netherlands Antilles",
                "North America",
                "Caribbean",
                800.0,
                null,
                217000,
                74.7,
                1941.0,
                null,
                "Nederlandse Antillen",
                "Nonmetropolitan Territory of The Netherlands",
                "Beatrix",
                33,
                "AN",
                "ANT",
                "Dutch",
                "T",
                0.0
            ]
        ],
        "response": "The countries where either English or Dutch is the official language are shown in the result table.",
        "response_toks": [
            "The",
            "countries",
            "where",
            "either",
            "English",
            "or",
            "Dutch",
            "is",
            "the",
            "official",
            "language",
            "are",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ],
        "results_map": {
            "result0": "English",
            "result1": "Dutch"
        },
        "results_blank_res": "result0 result1 ",
        "query_w_results": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   \"English\" AND IsOfficial   =   \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   \"Dutch\" AND IsOfficial   =   \"T\" | English Dutch ",
        "query_w_results_blank_res": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   \"English\" AND IsOfficial   =   \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   \"Dutch\" AND IsOfficial   =   \"T\" | result0 result1 ",
        "query_toks_w_results": [
            "select",
            "*",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "language",
            "=",
            "\"english\"",
            "and",
            "isofficial",
            "=",
            "\"t\"",
            "union",
            "select",
            "*",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "language",
            "=",
            "\"dutch\"",
            "and",
            "isofficial",
            "=",
            "\"t\"",
            "English",
            "Dutch"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "*",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "language",
            "=",
            "\"english\"",
            "and",
            "isofficial",
            "=",
            "\"t\"",
            "union",
            "select",
            "*",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "language",
            "=",
            "\"dutch\"",
            "and",
            "isofficial",
            "=",
            "\"t\"",
            "result0",
            "result1"
        ],
        "response_blank_res": "The countries where either result0 or result1 is the official language are shown in the result table .",
        "response_toks_blank_res": [
            "The",
            "countries",
            "where",
            "either",
            "result0",
            "or",
            "result1",
            "is",
            "the",
            "official",
            "language",
            "are",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT T2.language FROM country as T1 join countrylanguage as T2 on T1.code  =  T2.countrycode where T1.name  =  \"Belgium\" and T2.isofficial  =  \"T\"",
        "query_toks": [
            "select",
            "t2",
            ".",
            "language",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t1",
            ".",
            "name",
            "=",
            "\"belgium\"",
            "and",
            "t2",
            ".",
            "isofficial",
            "=",
            "\"t\""
        ],
        "results_raw": [
            [
                "Language"
            ],
            [
                "Dutch"
            ],
            [
                "French"
            ],
            [
                "German"
            ]
        ],
        "response": "The official languages of the country named Belgium are shown in the result table.",
        "response_toks": [
            "The",
            "official",
            "languages",
            "of",
            "the",
            "country",
            "named",
            "Belgium",
            "are",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T2.language FROM country as T1 join countrylanguage as T2 on T1.code  =  T2.countrycode where T1.name  =  \"Belgium\" and T2.isofficial  =  \"T\"",
        "query_w_results_blank_res": "SELECT T2.language FROM country as T1 join countrylanguage as T2 on T1.code  =  T2.countrycode where T1.name  =  \"Belgium\" and T2.isofficial  =  \"T\"",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "language",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t1",
            ".",
            "name",
            "=",
            "\"belgium\"",
            "and",
            "t2",
            ".",
            "isofficial",
            "=",
            "\"t\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "language",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t1",
            ".",
            "name",
            "=",
            "\"belgium\"",
            "and",
            "t2",
            ".",
            "isofficial",
            "=",
            "\"t\""
        ],
        "response_blank_res": "The official languages of the country named Belgium are shown in the result table .",
        "response_toks_blank_res": [
            "The",
            "official",
            "languages",
            "of",
            "the",
            "country",
            "named",
            "Belgium",
            "are",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT T1.name FROM country as T1 join countrylanguage as T2 on T1.code  =  T2.countrycode where T2.language  =  \"Arabic\"",
        "query_toks": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "language",
            "=",
            "\"arabic\""
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "United Arab Emirates"
            ],
            [
                "Australia"
            ],
            [
                "Belgium"
            ]
        ],
        "response": "The countries where arabic language is spoken are shown in the result table.",
        "response_toks": [
            "The",
            "countries",
            "where",
            "arabic",
            "language",
            "is",
            "spoken",
            "are",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.name FROM country as T1 join countrylanguage as T2 on T1.code  =  T2.countrycode where T2.language  =  \"Arabic\"",
        "query_w_results_blank_res": "SELECT T1.name FROM country as T1 join countrylanguage as T2 on T1.code  =  T2.countrycode where T2.language  =  \"Arabic\"",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "language",
            "=",
            "\"arabic\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "language",
            "=",
            "\"arabic\""
        ],
        "response_blank_res": "The countries where arabic language is spoken are shown in the result table .",
        "response_toks_blank_res": [
            "The",
            "countries",
            "where",
            "arabic",
            "language",
            "is",
            "spoken",
            "are",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT T2.language FROM country as T1 join countrylanguage as T2 on T1.code  =  T2.countrycode where T1.name  =  \"Egypt\"",
        "query_toks": [
            "select",
            "t2",
            ".",
            "language",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t1",
            ".",
            "name",
            "=",
            "\"egypt\""
        ],
        "results_raw": [
            [
                "Language"
            ],
            [
                "Arabic"
            ],
            [
                "Sinaberberi"
            ]
        ],
        "response": "Th languages spoken in Egypt are shown in the result table.",
        "response_toks": [
            "Th",
            "languages",
            "spoken",
            "in",
            "Egypt",
            "are",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T2.language FROM country as T1 join countrylanguage as T2 on T1.code  =  T2.countrycode where T1.name  =  \"Egypt\"",
        "query_w_results_blank_res": "SELECT T2.language FROM country as T1 join countrylanguage as T2 on T1.code  =  T2.countrycode where T1.name  =  \"Egypt\"",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "language",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t1",
            ".",
            "name",
            "=",
            "\"egypt\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "language",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t1",
            ".",
            "name",
            "=",
            "\"egypt\""
        ],
        "response_blank_res": "Th languages spoken in Egypt are shown in the result table .",
        "response_toks_blank_res": [
            "Th",
            "languages",
            "spoken",
            "in",
            "Egypt",
            "are",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT count ( T1.name )  FROM country as T1 join countrylanguage as T2 on T1.code  =  T2.countrycode where T2.Language  =  \"Arabic\" and T2.isOfficial  =  \"T\"",
        "query_toks": [
            "select",
            "count",
            "(",
            "t1",
            ".",
            "name",
            ")",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "language",
            "=",
            "\"arabic\"",
            "and",
            "t2",
            ".",
            "isofficial",
            "=",
            "\"t\""
        ],
        "results_raw": [
            [
                "count(T1.name)"
            ],
            [
                22
            ]
        ],
        "response": "The number of countries where Arabic is the official language is 22.",
        "response_toks": [
            "The",
            "number",
            "of",
            "countries",
            "where",
            "Arabic",
            "is",
            "the",
            "official",
            "language",
            "is",
            "22",
            "."
        ],
        "results_map": {
            "result0": "22"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( T1.name )  FROM country as T1 join countrylanguage as T2 on T1.code  =  T2.countrycode where T2.Language  =  \"Arabic\" and T2.isOfficial  =  \"T\" | 22 ",
        "query_w_results_blank_res": "SELECT count ( T1.name )  FROM country as T1 join countrylanguage as T2 on T1.code  =  T2.countrycode where T2.Language  =  \"Arabic\" and T2.isOfficial  =  \"T\" | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "t1",
            ".",
            "name",
            ")",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "language",
            "=",
            "\"arabic\"",
            "and",
            "t2",
            ".",
            "isofficial",
            "=",
            "\"t\"",
            "22"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "t1",
            ".",
            "name",
            ")",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "language",
            "=",
            "\"arabic\"",
            "and",
            "t2",
            ".",
            "isofficial",
            "=",
            "\"t\"",
            "result0"
        ],
        "response_blank_res": "The number of countries where Arabic is the official language is result0 .",
        "response_toks_blank_res": [
            "The",
            "number",
            "of",
            "countries",
            "where",
            "Arabic",
            "is",
            "the",
            "official",
            "language",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT T1.name FROM country as T1 join countrylanguage as T2 on T1.code  =  T2.countrycode where T2.Language  =  \"Arabic\" and T2.isOfficial  =  \"T\"",
        "query_toks": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "language",
            "=",
            "\"arabic\"",
            "and",
            "t2",
            ".",
            "isofficial",
            "=",
            "\"t\""
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "United Arab Emirates"
            ],
            [
                "Bahrain"
            ],
            [
                "Djibouti"
            ]
        ],
        "response": "The names of the countries with Arabic as the official language are shown in the result table.",
        "response_toks": [
            "The",
            "names",
            "of",
            "the",
            "countries",
            "with",
            "Arabic",
            "as",
            "the",
            "official",
            "language",
            "are",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.name FROM country as T1 join countrylanguage as T2 on T1.code  =  T2.countrycode where T2.Language  =  \"Arabic\" and T2.isOfficial  =  \"T\"",
        "query_w_results_blank_res": "SELECT T1.name FROM country as T1 join countrylanguage as T2 on T1.code  =  T2.countrycode where T2.Language  =  \"Arabic\" and T2.isOfficial  =  \"T\"",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "language",
            "=",
            "\"arabic\"",
            "and",
            "t2",
            ".",
            "isofficial",
            "=",
            "\"t\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "language",
            "=",
            "\"arabic\"",
            "and",
            "t2",
            ".",
            "isofficial",
            "=",
            "\"t\""
        ],
        "response_blank_res": "The names of the countries with Arabic as the official language are shown in the result table .",
        "response_toks_blank_res": [
            "The",
            "names",
            "of",
            "the",
            "countries",
            "with",
            "Arabic",
            "as",
            "the",
            "official",
            "language",
            "are",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT name,population FROM country WHERE Continent   =   \"Africa\"",
        "query_toks": [
            "select",
            "name",
            ",",
            "population",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"africa\""
        ],
        "results_raw": [
            [
                "Name",
                "Population"
            ],
            [
                "Angola",
                12878000
            ],
            [
                "Burundi",
                6695000
            ],
            [
                "Benin",
                6097000
            ]
        ],
        "response": "Here are the names and populations of countries in continent Africa",
        "response_toks": [
            "Here",
            "are",
            "the",
            "names",
            "and",
            "populations",
            "of",
            "countries",
            "in",
            "continent",
            "Africa"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT name,population FROM country WHERE Continent   =   \"Africa\"",
        "query_w_results_blank_res": "SELECT name,population FROM country WHERE Continent   =   \"Africa\"",
        "query_toks_w_results": [
            "select",
            "name",
            ",",
            "population",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"africa\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            ",",
            "population",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"africa\""
        ],
        "response_blank_res": "Here are the names and populations of countries in continent Africa",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "names",
            "and",
            "populations",
            "of",
            "countries",
            "in",
            "continent",
            "Africa"
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT name,population FROM country WHERE Continent   =   \"Asia\"",
        "query_toks": [
            "select",
            "name",
            ",",
            "population",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"asia\""
        ],
        "results_raw": [
            [
                "Name",
                "Population"
            ],
            [
                "Afghanistan",
                22720000
            ],
            [
                "United Arab Emirates",
                2441000
            ],
            [
                "Armenia",
                3520000
            ]
        ],
        "response": "Here are the names and populations of countries in continent Asia.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "names",
            "and",
            "populations",
            "of",
            "countries",
            "in",
            "continent",
            "Asia",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT name,population FROM country WHERE Continent   =   \"Asia\"",
        "query_w_results_blank_res": "SELECT name,population FROM country WHERE Continent   =   \"Asia\"",
        "query_toks_w_results": [
            "select",
            "name",
            ",",
            "population",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"asia\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            ",",
            "population",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"asia\""
        ],
        "response_blank_res": "Here are the names and populations of countries in continent Asia .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "names",
            "and",
            "populations",
            "of",
            "countries",
            "in",
            "continent",
            "Asia",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT Name FROM country WHERE Continent   =   \"Asia\"  AND population  >   ( SELECT min ( population )  FROM country WHERE Continent   =   \"Africa\" ) ",
        "query_toks": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"asia\"",
            "and",
            "population",
            ">",
            "(",
            "select",
            "min",
            "(",
            "population",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"africa\"",
            ")"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Afghanistan"
            ],
            [
                "United Arab Emirates"
            ],
            [
                "Armenia"
            ]
        ],
        "response": "Here are the names of the Asian countries that have a larger population than that of any country in Africa.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "names",
            "of",
            "the",
            "Asian",
            "countries",
            "that",
            "have",
            "a",
            "larger",
            "population",
            "than",
            "that",
            "of",
            "any",
            "country",
            "in",
            "Africa",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Name FROM country WHERE Continent   =   \"Asia\"  AND population  >   ( SELECT min ( population )  FROM country WHERE Continent   =   \"Africa\" ) ",
        "query_w_results_blank_res": "SELECT Name FROM country WHERE Continent   =   \"Asia\"  AND population  >   ( SELECT min ( population )  FROM country WHERE Continent   =   \"Africa\" ) ",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"asia\"",
            "and",
            "population",
            ">",
            "(",
            "select",
            "min",
            "(",
            "population",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"africa\"",
            ")"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"asia\"",
            "and",
            "population",
            ">",
            "(",
            "select",
            "min",
            "(",
            "population",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"africa\"",
            ")"
        ],
        "response_blank_res": "Here are the names of the Asian countries that have a larger population than that of any country in Africa .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "names",
            "of",
            "the",
            "Asian",
            "countries",
            "that",
            "have",
            "a",
            "larger",
            "population",
            "than",
            "that",
            "of",
            "any",
            "country",
            "in",
            "Africa",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT Name,population FROM country WHERE Continent   =   \"Asia\"  AND population  >   ( SELECT min ( population )  FROM country WHERE Continent   =   \"Africa\" ) ",
        "query_toks": [
            "select",
            "name",
            ",",
            "population",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"asia\"",
            "and",
            "population",
            ">",
            "(",
            "select",
            "min",
            "(",
            "population",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"africa\"",
            ")"
        ],
        "results_raw": [
            [
                "Name",
                "Population"
            ],
            [
                "Afghanistan",
                22720000
            ],
            [
                "United Arab Emirates",
                2441000
            ],
            [
                "Armenia",
                3520000
            ]
        ],
        "response": "Here are the names and populations of the Asian countries that have a larger population than that of any country in Africa.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "names",
            "and",
            "populations",
            "of",
            "the",
            "Asian",
            "countries",
            "that",
            "have",
            "a",
            "larger",
            "population",
            "than",
            "that",
            "of",
            "any",
            "country",
            "in",
            "Africa",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Name,population FROM country WHERE Continent   =   \"Asia\"  AND population  >   ( SELECT min ( population )  FROM country WHERE Continent   =   \"Africa\" ) ",
        "query_w_results_blank_res": "SELECT Name,population FROM country WHERE Continent   =   \"Asia\"  AND population  >   ( SELECT min ( population )  FROM country WHERE Continent   =   \"Africa\" ) ",
        "query_toks_w_results": [
            "select",
            "name",
            ",",
            "population",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"asia\"",
            "and",
            "population",
            ">",
            "(",
            "select",
            "min",
            "(",
            "population",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"africa\"",
            ")"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            ",",
            "population",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"asia\"",
            "and",
            "population",
            ">",
            "(",
            "select",
            "min",
            "(",
            "population",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"africa\"",
            ")"
        ],
        "response_blank_res": "Here are the names and populations of the Asian countries that have a larger population than that of any country in Africa .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "names",
            "and",
            "populations",
            "of",
            "the",
            "Asian",
            "countries",
            "that",
            "have",
            "a",
            "larger",
            "population",
            "than",
            "that",
            "of",
            "any",
            "country",
            "in",
            "Africa",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT Name,GovernmentForm FROM country WHERE Continent   =   \"Asia\"  AND population  >   ( SELECT min ( population )  FROM country WHERE Continent   =   \"Africa\" ) ",
        "query_toks": [
            "select",
            "name",
            ",",
            "governmentform",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"asia\"",
            "and",
            "population",
            ">",
            "(",
            "select",
            "min",
            "(",
            "population",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"africa\"",
            ")"
        ],
        "results_raw": [
            [
                "Name",
                "GovernmentForm"
            ],
            [
                "Afghanistan",
                "Islamic Emirate"
            ],
            [
                "United Arab Emirates",
                "Emirate Federation"
            ],
            [
                "Armenia",
                "Republic"
            ]
        ],
        "response": "Here are the names and government forms of the Asian countries that have a larger population than that of any country in Africa",
        "response_toks": [
            "Here",
            "are",
            "the",
            "names",
            "and",
            "government",
            "forms",
            "of",
            "the",
            "Asian",
            "countries",
            "that",
            "have",
            "a",
            "larger",
            "population",
            "than",
            "that",
            "of",
            "any",
            "country",
            "in",
            "Africa"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Name,GovernmentForm FROM country WHERE Continent   =   \"Asia\"  AND population  >   ( SELECT min ( population )  FROM country WHERE Continent   =   \"Africa\" ) ",
        "query_w_results_blank_res": "SELECT Name,GovernmentForm FROM country WHERE Continent   =   \"Asia\"  AND population  >   ( SELECT min ( population )  FROM country WHERE Continent   =   \"Africa\" ) ",
        "query_toks_w_results": [
            "select",
            "name",
            ",",
            "governmentform",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"asia\"",
            "and",
            "population",
            ">",
            "(",
            "select",
            "min",
            "(",
            "population",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"africa\"",
            ")"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            ",",
            "governmentform",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"asia\"",
            "and",
            "population",
            ">",
            "(",
            "select",
            "min",
            "(",
            "population",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"africa\"",
            ")"
        ],
        "response_blank_res": "Here are the names and government forms of the Asian countries that have a larger population than that of any country in Africa",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "names",
            "and",
            "government",
            "forms",
            "of",
            "the",
            "Asian",
            "countries",
            "that",
            "have",
            "a",
            "larger",
            "population",
            "than",
            "that",
            "of",
            "any",
            "country",
            "in",
            "Africa"
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT Name FROM country WHERE Continent   =   \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
        "query_toks": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"asia\"",
            "order",
            "by",
            "lifeexpectancy",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Afghanistan"
            ]
        ],
        "response": "Afghanistan is the  country with the shortest life expectancy in Asia",
        "response_toks": [
            "Afghanistan",
            "is",
            "the",
            "country",
            "with",
            "the",
            "shortest",
            "life",
            "expectancy",
            "in",
            "Asia"
        ],
        "results_map": {
            "result0": "Afghanistan"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT Name FROM country WHERE Continent   =   \"Asia\" ORDER BY LifeExpectancy LIMIT 1 | Afghanistan ",
        "query_w_results_blank_res": "SELECT Name FROM country WHERE Continent   =   \"Asia\" ORDER BY LifeExpectancy LIMIT 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"asia\"",
            "order",
            "by",
            "lifeexpectancy",
            "limit",
            "1",
            "Afghanistan"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"asia\"",
            "order",
            "by",
            "lifeexpectancy",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "result0 is the country with the shortest life expectancy in Asia",
        "response_toks_blank_res": [
            "result0",
            "is",
            "the",
            "country",
            "with",
            "the",
            "shortest",
            "life",
            "expectancy",
            "in",
            "Asia"
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT Name FROM country WHERE Continent   =   \"Africa\" ORDER BY LifeExpectancy LIMIT 1",
        "query_toks": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"africa\"",
            "order",
            "by",
            "lifeexpectancy",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "British Indian Ocean Territory"
            ]
        ],
        "response": "British Indian Ocean Territory  is the country with the shortest life expectancy in Arfica.",
        "response_toks": [
            "British",
            "Indian",
            "Ocean",
            "Territory",
            "is",
            "the",
            "country",
            "with",
            "the",
            "shortest",
            "life",
            "expectancy",
            "in",
            "Arfica",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Name FROM country WHERE Continent   =   \"Africa\" ORDER BY LifeExpectancy LIMIT 1",
        "query_w_results_blank_res": "SELECT Name FROM country WHERE Continent   =   \"Africa\" ORDER BY LifeExpectancy LIMIT 1",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"africa\"",
            "order",
            "by",
            "lifeexpectancy",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"africa\"",
            "order",
            "by",
            "lifeexpectancy",
            "limit",
            "1"
        ],
        "response_blank_res": "British Indian Ocean Territory is the country with the shortest life expectancy in Arfica .",
        "response_toks_blank_res": [
            "British",
            "Indian",
            "Ocean",
            "Territory",
            "is",
            "the",
            "country",
            "with",
            "the",
            "shortest",
            "life",
            "expectancy",
            "in",
            "Arfica",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT GNP FROM country WHERE name = \"Afghanistan\"",
        "query_toks": [
            "select",
            "gnp",
            "from",
            "country",
            "where",
            "name",
            "=",
            "\"afghanistan\""
        ],
        "results_raw": [
            [
                "GNP"
            ],
            [
                5976.0
            ]
        ],
        "response": "The GNP of Afghanistan is 5976.0",
        "response_toks": [
            "The",
            "GNP",
            "of",
            "Afghanistan",
            "is",
            "5976.0"
        ],
        "results_map": {
            "result0": "5976.0"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT GNP FROM country WHERE name = \"Afghanistan\" | 5976.0 ",
        "query_w_results_blank_res": "SELECT GNP FROM country WHERE name = \"Afghanistan\" | result0 ",
        "query_toks_w_results": [
            "select",
            "gnp",
            "from",
            "country",
            "where",
            "name",
            "=",
            "\"afghanistan\"",
            "5976.0"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "gnp",
            "from",
            "country",
            "where",
            "name",
            "=",
            "\"afghanistan\"",
            "result0"
        ],
        "response_blank_res": "The GNP of Afghanistan is result0",
        "response_toks_blank_res": [
            "The",
            "GNP",
            "of",
            "Afghanistan",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT Population FROM country WHERE name = \"Afghanistan\"",
        "query_toks": [
            "select",
            "population",
            "from",
            "country",
            "where",
            "name",
            "=",
            "\"afghanistan\""
        ],
        "results_raw": [
            [
                "Population"
            ],
            [
                22720000
            ]
        ],
        "response": "the population of Afghanistan is 22720000.",
        "response_toks": [
            "the",
            "population",
            "of",
            "Afghanistan",
            "is",
            "22720000",
            "."
        ],
        "results_map": {
            "result0": "22720000"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT Population FROM country WHERE name = \"Afghanistan\" | 22720000 ",
        "query_w_results_blank_res": "SELECT Population FROM country WHERE name = \"Afghanistan\" | result0 ",
        "query_toks_w_results": [
            "select",
            "population",
            "from",
            "country",
            "where",
            "name",
            "=",
            "\"afghanistan\"",
            "22720000"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "population",
            "from",
            "country",
            "where",
            "name",
            "=",
            "\"afghanistan\"",
            "result0"
        ],
        "response_blank_res": "the population of Afghanistan is result0 .",
        "response_toks_blank_res": [
            "the",
            "population",
            "of",
            "Afghanistan",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "poker_player",
        "query": "SELECT Earnings FROM poker_player",
        "query_toks": [
            "select",
            "earnings",
            "from",
            "poker_player"
        ],
        "results_raw": [
            [
                "Earnings"
            ],
            [
                476090.0
            ],
            [
                189233.0
            ],
            [
                104871.0
            ]
        ],
        "response": "The following table shows the earnings of all poker players.",
        "response_toks": [
            "The",
            "following",
            "table",
            "shows",
            "the",
            "earnings",
            "of",
            "all",
            "poker",
            "players",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Earnings FROM poker_player",
        "query_w_results_blank_res": "SELECT Earnings FROM poker_player",
        "query_toks_w_results": [
            "select",
            "earnings",
            "from",
            "poker_player"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "earnings",
            "from",
            "poker_player"
        ],
        "response_blank_res": "The following table shows the earnings of all poker players .",
        "response_toks_blank_res": [
            "The",
            "following",
            "table",
            "shows",
            "the",
            "earnings",
            "of",
            "all",
            "poker",
            "players",
            "."
        ]
    },
    {
        "database_id": "poker_player",
        "query": "SELECT Earnings FROM poker_player order by Earnings desc",
        "query_toks": [
            "select",
            "earnings",
            "from",
            "poker_player",
            "order",
            "by",
            "earnings",
            "desc"
        ],
        "results_raw": [
            [
                "Earnings"
            ],
            [
                596462.0
            ],
            [
                476090.0
            ],
            [
                189233.0
            ]
        ],
        "response": "The following table shows the earnings of all poker players ranked from highest to lowest.",
        "response_toks": [
            "The",
            "following",
            "table",
            "shows",
            "the",
            "earnings",
            "of",
            "all",
            "poker",
            "players",
            "ranked",
            "from",
            "highest",
            "to",
            "lowest",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Earnings FROM poker_player order by Earnings desc",
        "query_w_results_blank_res": "SELECT Earnings FROM poker_player order by Earnings desc",
        "query_toks_w_results": [
            "select",
            "earnings",
            "from",
            "poker_player",
            "order",
            "by",
            "earnings",
            "desc"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "earnings",
            "from",
            "poker_player",
            "order",
            "by",
            "earnings",
            "desc"
        ],
        "response_blank_res": "The following table shows the earnings of all poker players ranked from highest to lowest .",
        "response_toks_blank_res": [
            "The",
            "following",
            "table",
            "shows",
            "the",
            "earnings",
            "of",
            "all",
            "poker",
            "players",
            "ranked",
            "from",
            "highest",
            "to",
            "lowest",
            "."
        ]
    },
    {
        "database_id": "poker_player",
        "query": "SELECT Final_Table_Made FROM poker_player order by Earnings asc limit 1",
        "query_toks": [
            "select",
            "final_table_made",
            "from",
            "poker_player",
            "order",
            "by",
            "earnings",
            "asc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Final_Table_Made"
            ],
            [
                21.0
            ]
        ],
        "response": "The poker player with the least amount of earnings made 21 final tables.",
        "response_toks": [
            "The",
            "poker",
            "player",
            "with",
            "the",
            "least",
            "amount",
            "of",
            "earnings",
            "made",
            "21",
            "final",
            "tables",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Final_Table_Made FROM poker_player order by Earnings asc limit 1",
        "query_w_results_blank_res": "SELECT Final_Table_Made FROM poker_player order by Earnings asc limit 1",
        "query_toks_w_results": [
            "select",
            "final_table_made",
            "from",
            "poker_player",
            "order",
            "by",
            "earnings",
            "asc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "final_table_made",
            "from",
            "poker_player",
            "order",
            "by",
            "earnings",
            "asc",
            "limit",
            "1"
        ],
        "response_blank_res": "The poker player with the least amount of earnings made 21 final tables .",
        "response_toks_blank_res": [
            "The",
            "poker",
            "player",
            "with",
            "the",
            "least",
            "amount",
            "of",
            "earnings",
            "made",
            "21",
            "final",
            "tables",
            "."
        ]
    },
    {
        "database_id": "poker_player",
        "query": "SELECT Final_Table_Made FROM poker_player order by Earnings desc limit 1",
        "query_toks": [
            "select",
            "final_table_made",
            "from",
            "poker_player",
            "order",
            "by",
            "earnings",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Final_Table_Made"
            ],
            [
                19.0
            ]
        ],
        "response": "The poker player with the most amount of earnings made 19 final tables.",
        "response_toks": [
            "The",
            "poker",
            "player",
            "with",
            "the",
            "most",
            "amount",
            "of",
            "earnings",
            "made",
            "19",
            "final",
            "tables",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Final_Table_Made FROM poker_player order by Earnings desc limit 1",
        "query_w_results_blank_res": "SELECT Final_Table_Made FROM poker_player order by Earnings desc limit 1",
        "query_toks_w_results": [
            "select",
            "final_table_made",
            "from",
            "poker_player",
            "order",
            "by",
            "earnings",
            "desc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "final_table_made",
            "from",
            "poker_player",
            "order",
            "by",
            "earnings",
            "desc",
            "limit",
            "1"
        ],
        "response_blank_res": "The poker player with the most amount of earnings made 19 final tables .",
        "response_toks_blank_res": [
            "The",
            "poker",
            "player",
            "with",
            "the",
            "most",
            "amount",
            "of",
            "earnings",
            "made",
            "19",
            "final",
            "tables",
            "."
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_id FROM Documents",
        "query_toks": [
            "select",
            "template_id",
            "from",
            "documents"
        ],
        "results_raw": [
            [
                "Template_ID"
            ],
            [
                7
            ],
            [
                25
            ],
            [
                6
            ]
        ],
        "response": "here is the list all the template IDs and which document IDs they are associated with",
        "response_toks": [
            "here",
            "is",
            "the",
            "list",
            "all",
            "the",
            "template",
            "IDs",
            "and",
            "which",
            "document",
            "IDs",
            "they",
            "are",
            "associated",
            "with"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT template_id FROM Documents",
        "query_w_results_blank_res": "SELECT template_id FROM Documents",
        "query_toks_w_results": [
            "select",
            "template_id",
            "from",
            "documents"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "template_id",
            "from",
            "documents"
        ],
        "response_blank_res": "here is the list all the template IDs and which document IDs they are associated with",
        "response_toks_blank_res": [
            "here",
            "is",
            "the",
            "list",
            "all",
            "the",
            "template",
            "IDs",
            "and",
            "which",
            "document",
            "IDs",
            "they",
            "are",
            "associated",
            "with"
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_id ,Document_ID FROM Documents",
        "query_toks": [
            "select",
            "template_id",
            ",",
            "document_id",
            "from",
            "documents"
        ],
        "results_raw": [
            [
                "Template_ID",
                "Document_ID"
            ],
            [
                7,
                0
            ],
            [
                25,
                1
            ],
            [
                6,
                3
            ]
        ],
        "response": "here is the list all the template IDs and  the Template_IDs",
        "response_toks": [
            "here",
            "is",
            "the",
            "list",
            "all",
            "the",
            "template",
            "IDs",
            "and",
            "the",
            "Template_IDs"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT template_id ,Document_ID FROM Documents",
        "query_w_results_blank_res": "SELECT template_id ,Document_ID FROM Documents",
        "query_toks_w_results": [
            "select",
            "template_id",
            ",",
            "document_id",
            "from",
            "documents"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "template_id",
            ",",
            "document_id",
            "from",
            "documents"
        ],
        "response_blank_res": "here is the list all the template IDs and the Template_IDs",
        "response_toks_blank_res": [
            "here",
            "is",
            "the",
            "list",
            "all",
            "the",
            "template",
            "IDs",
            "and",
            "the",
            "Template_IDs"
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
        "query_toks": [
            "select",
            "template_id",
            "from",
            "templates",
            "except",
            "select",
            "template_id",
            "from",
            "documents"
        ],
        "results_raw": [
            [
                "Template_ID"
            ],
            [
                0
            ],
            [
                9
            ],
            [
                15
            ]
        ],
        "response": "yes. Here are template ids not associated with any document id",
        "response_toks": [
            "yes",
            ".",
            "Here",
            "are",
            "template",
            "ids",
            "not",
            "associated",
            "with",
            "any",
            "document",
            "id"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
        "query_w_results_blank_res": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
        "query_toks_w_results": [
            "select",
            "template_id",
            "from",
            "templates",
            "except",
            "select",
            "template_id",
            "from",
            "documents"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "template_id",
            "from",
            "templates",
            "except",
            "select",
            "template_id",
            "from",
            "documents"
        ],
        "response_blank_res": "yes . Here are template ids not associated with any document id",
        "response_toks_blank_res": [
            "yes",
            ".",
            "Here",
            "are",
            "template",
            "ids",
            "not",
            "associated",
            "with",
            "any",
            "document",
            "id"
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
        "query_toks": [
            "select",
            "template_id",
            "from",
            "templates",
            "except",
            "select",
            "template_id",
            "from",
            "documents"
        ],
        "results_raw": [
            [
                "Template_ID"
            ],
            [
                0
            ],
            [
                9
            ],
            [
                15
            ]
        ],
        "response": "here are the  list of the Template_IDs for each template that is not associated with a Document_ID",
        "response_toks": [
            "here",
            "are",
            "the",
            "list",
            "of",
            "the",
            "Template_IDs",
            "for",
            "each",
            "template",
            "that",
            "is",
            "not",
            "associated",
            "with",
            "a",
            "Document_ID"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
        "query_w_results_blank_res": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
        "query_toks_w_results": [
            "select",
            "template_id",
            "from",
            "templates",
            "except",
            "select",
            "template_id",
            "from",
            "documents"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "template_id",
            "from",
            "templates",
            "except",
            "select",
            "template_id",
            "from",
            "documents"
        ],
        "response_blank_res": "here are the list of the Template_IDs for each template that is not associated with a Document_ID",
        "response_toks_blank_res": [
            "here",
            "are",
            "the",
            "list",
            "of",
            "the",
            "Template_IDs",
            "for",
            "each",
            "template",
            "that",
            "is",
            "not",
            "associated",
            "with",
            "a",
            "Document_ID"
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.template_id ,T1.Template_Type_Code FROM Templates as T1 join Documents as T2 on T1.Template_ID = T2.Template_ID",
        "query_toks": [
            "select",
            "t1",
            ".",
            "template_id",
            ",",
            "t1",
            ".",
            "template_type_code",
            "from",
            "templates",
            "as",
            "t1",
            "join",
            "documents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "template_id",
            "=",
            "t2",
            ".",
            "template_id"
        ],
        "results_raw": [
            [
                "Template_ID",
                "Template_Type_Code"
            ],
            [
                7,
                "PPT"
            ],
            [
                25,
                "PP"
            ],
            [
                6,
                "PPT"
            ]
        ],
        "response": "here are the list of the Template_IDs for each template that is associated with a Document_ID",
        "response_toks": [
            "here",
            "are",
            "the",
            "list",
            "of",
            "the",
            "Template_IDs",
            "for",
            "each",
            "template",
            "that",
            "is",
            "associated",
            "with",
            "a",
            "Document_ID"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.template_id ,T1.Template_Type_Code FROM Templates as T1 join Documents as T2 on T1.Template_ID = T2.Template_ID",
        "query_w_results_blank_res": "SELECT T1.template_id ,T1.Template_Type_Code FROM Templates as T1 join Documents as T2 on T1.Template_ID = T2.Template_ID",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "template_id",
            ",",
            "t1",
            ".",
            "template_type_code",
            "from",
            "templates",
            "as",
            "t1",
            "join",
            "documents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "template_id",
            "=",
            "t2",
            ".",
            "template_id"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "template_id",
            ",",
            "t1",
            ".",
            "template_type_code",
            "from",
            "templates",
            "as",
            "t1",
            "join",
            "documents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "template_id",
            "=",
            "t2",
            ".",
            "template_id"
        ],
        "response_blank_res": "here are the list of the Template_IDs for each template that is associated with a Document_ID",
        "response_toks_blank_res": [
            "here",
            "are",
            "the",
            "list",
            "of",
            "the",
            "Template_IDs",
            "for",
            "each",
            "template",
            "that",
            "is",
            "associated",
            "with",
            "a",
            "Document_ID"
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT count ( * )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  ) ",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "dogs",
            "where",
            "dog_id",
            "in",
            "(",
            "select",
            "dog_id",
            "from",
            "treatments",
            ")"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                9
            ]
        ],
        "response": "There are 9 dogs that have gone through any treatment.",
        "response_toks": [
            "There",
            "are",
            "9",
            "dogs",
            "that",
            "have",
            "gone",
            "through",
            "any",
            "treatment",
            "."
        ],
        "results_map": {
            "result0": "9"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  )  | 9 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  )  | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "dogs",
            "where",
            "dog_id",
            "in",
            "(",
            "select",
            "dog_id",
            "from",
            "treatments",
            ")",
            "9"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "dogs",
            "where",
            "dog_id",
            "in",
            "(",
            "select",
            "dog_id",
            "from",
            "treatments",
            ")",
            "result0"
        ],
        "response_blank_res": "There are result0 dogs that have gone through any treatment .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "dogs",
            "that",
            "have",
            "gone",
            "through",
            "any",
            "treatment",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT min ( age )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  ) ",
        "query_toks": [
            "select",
            "min",
            "(",
            "age",
            ")",
            "from",
            "dogs",
            "where",
            "dog_id",
            "in",
            "(",
            "select",
            "dog_id",
            "from",
            "treatments",
            ")"
        ],
        "results_raw": [
            [
                "min(age)"
            ],
            [
                "1"
            ]
        ],
        "response": "The youngest dog that has gone through any treatment has an age of 1.",
        "response_toks": [
            "The",
            "youngest",
            "dog",
            "that",
            "has",
            "gone",
            "through",
            "any",
            "treatment",
            "has",
            "an",
            "age",
            "of",
            "1",
            "."
        ],
        "results_map": {
            "result0": "1"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT min ( age )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  )  | 1 ",
        "query_w_results_blank_res": "SELECT min ( age )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  )  | result0 ",
        "query_toks_w_results": [
            "select",
            "min",
            "(",
            "age",
            ")",
            "from",
            "dogs",
            "where",
            "dog_id",
            "in",
            "(",
            "select",
            "dog_id",
            "from",
            "treatments",
            ")",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "min",
            "(",
            "age",
            ")",
            "from",
            "dogs",
            "where",
            "dog_id",
            "in",
            "(",
            "select",
            "dog_id",
            "from",
            "treatments",
            ")",
            "result0"
        ],
        "response_blank_res": "The youngest dog that has gone through any treatment has an age of result0 .",
        "response_toks_blank_res": [
            "The",
            "youngest",
            "dog",
            "that",
            "has",
            "gone",
            "through",
            "any",
            "treatment",
            "has",
            "an",
            "age",
            "of",
            "result0",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT max ( age )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  ) ",
        "query_toks": [
            "select",
            "max",
            "(",
            "age",
            ")",
            "from",
            "dogs",
            "where",
            "dog_id",
            "in",
            "(",
            "select",
            "dog_id",
            "from",
            "treatments",
            ")"
        ],
        "results_raw": [
            [
                "max(age)"
            ],
            [
                "9"
            ]
        ],
        "response": "The oldest dog that has gone through any treatment has an age of 9",
        "response_toks": [
            "The",
            "oldest",
            "dog",
            "that",
            "has",
            "gone",
            "through",
            "any",
            "treatment",
            "has",
            "an",
            "age",
            "of",
            "9"
        ],
        "results_map": {
            "result0": "9"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT max ( age )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  )  | 9 ",
        "query_w_results_blank_res": "SELECT max ( age )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  )  | result0 ",
        "query_toks_w_results": [
            "select",
            "max",
            "(",
            "age",
            ")",
            "from",
            "dogs",
            "where",
            "dog_id",
            "in",
            "(",
            "select",
            "dog_id",
            "from",
            "treatments",
            ")",
            "9"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "max",
            "(",
            "age",
            ")",
            "from",
            "dogs",
            "where",
            "dog_id",
            "in",
            "(",
            "select",
            "dog_id",
            "from",
            "treatments",
            ")",
            "result0"
        ],
        "response_blank_res": "The oldest dog that has gone through any treatment has an age of result0",
        "response_toks_blank_res": [
            "The",
            "oldest",
            "dog",
            "that",
            "has",
            "gone",
            "through",
            "any",
            "treatment",
            "has",
            "an",
            "age",
            "of",
            "result0"
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT avg ( age )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  ) ",
        "query_toks": [
            "select",
            "avg",
            "(",
            "age",
            ")",
            "from",
            "dogs",
            "where",
            "dog_id",
            "in",
            "(",
            "select",
            "dog_id",
            "from",
            "treatments",
            ")"
        ],
        "results_raw": [
            [
                "avg(age)"
            ],
            [
                5.111111111111111
            ]
        ],
        "response": "5.111111111111111 is the average age of dogs who have gone through any treatment.",
        "response_toks": [
            "5.111111111111111",
            "is",
            "the",
            "average",
            "age",
            "of",
            "dogs",
            "who",
            "have",
            "gone",
            "through",
            "any",
            "treatment",
            "."
        ],
        "results_map": {
            "result0": "5.111111111111111"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT avg ( age )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  )  | 5.111111111111111 ",
        "query_w_results_blank_res": "SELECT avg ( age )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  )  | result0 ",
        "query_toks_w_results": [
            "select",
            "avg",
            "(",
            "age",
            ")",
            "from",
            "dogs",
            "where",
            "dog_id",
            "in",
            "(",
            "select",
            "dog_id",
            "from",
            "treatments",
            ")",
            "5.111111111111111"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "avg",
            "(",
            "age",
            ")",
            "from",
            "dogs",
            "where",
            "dog_id",
            "in",
            "(",
            "select",
            "dog_id",
            "from",
            "treatments",
            ")",
            "result0"
        ],
        "response_blank_res": "result0 is the average age of dogs who have gone through any treatment .",
        "response_toks_blank_res": [
            "result0",
            "is",
            "the",
            "average",
            "age",
            "of",
            "dogs",
            "who",
            "have",
            "gone",
            "through",
            "any",
            "treatment",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT distinct semester_name FROM Semesters",
        "query_toks": [
            "select",
            "distinct",
            "semester_name",
            "from",
            "semesters"
        ],
        "results_raw": [
            [
                "semester_name"
            ],
            [
                "spring 2010"
            ],
            [
                "summer 2010"
            ],
            [
                "fall 2010"
            ]
        ],
        "response": "The different semester  names  are shown   in the table.",
        "response_toks": [
            "The",
            "different",
            "semester",
            "names",
            "are",
            "shown",
            "in",
            "the",
            "table",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT distinct semester_name FROM Semesters",
        "query_w_results_blank_res": "SELECT distinct semester_name FROM Semesters",
        "query_toks_w_results": [
            "select",
            "distinct",
            "semester_name",
            "from",
            "semesters"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "semester_name",
            "from",
            "semesters"
        ],
        "response_blank_res": "The different semester names are shown in the table .",
        "response_toks_blank_res": [
            "The",
            "different",
            "semester",
            "names",
            "are",
            "shown",
            "in",
            "the",
            "table",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN (  SELECT semester_id FROM Student_Enrolment  ) ",
        "query_toks": [
            "select",
            "semester_name",
            "from",
            "semesters",
            "where",
            "semester_id",
            "not",
            "in",
            "(",
            "select",
            "semester_id",
            "from",
            "student_enrolment",
            ")"
        ],
        "results_raw": [
            [
                "semester_name"
            ],
            [
                "fall 2010"
            ],
            [
                "spring 2013"
            ],
            [
                "spring 2014"
            ]
        ],
        "response": "The  semester  name which  not  have  any  student  enrolled   are shown   in the table.",
        "response_toks": [
            "The",
            "semester",
            "name",
            "which",
            "not",
            "have",
            "any",
            "student",
            "enrolled",
            "are",
            "shown",
            "in",
            "the",
            "table",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN (  SELECT semester_id FROM Student_Enrolment  ) ",
        "query_w_results_blank_res": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN (  SELECT semester_id FROM Student_Enrolment  ) ",
        "query_toks_w_results": [
            "select",
            "semester_name",
            "from",
            "semesters",
            "where",
            "semester_id",
            "not",
            "in",
            "(",
            "select",
            "semester_id",
            "from",
            "student_enrolment",
            ")"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "semester_name",
            "from",
            "semesters",
            "where",
            "semester_id",
            "not",
            "in",
            "(",
            "select",
            "semester_id",
            "from",
            "student_enrolment",
            ")"
        ],
        "response_blank_res": "The semester name which not have any student enrolled are shown in the table .",
        "response_toks_blank_res": [
            "The",
            "semester",
            "name",
            "which",
            "not",
            "have",
            "any",
            "student",
            "enrolled",
            "are",
            "shown",
            "in",
            "the",
            "table",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT semester_id,semester_name,semester_description FROM Semesters WHERE semester_id NOT IN (  SELECT semester_id FROM Student_Enrolment  ) ",
        "query_toks": [
            "select",
            "semester_id",
            ",",
            "semester_name",
            ",",
            "semester_description",
            "from",
            "semesters",
            "where",
            "semester_id",
            "not",
            "in",
            "(",
            "select",
            "semester_id",
            "from",
            "student_enrolment",
            ")"
        ],
        "results_raw": [
            [
                "semester_id",
                "semester_name",
                "semester_description"
            ],
            [
                3,
                "fall 2010",
                "w"
            ],
            [
                7,
                "spring 2013",
                "y"
            ],
            [
                8,
                "spring 2014",
                "x"
            ]
        ],
        "response": "The  id, name, and descriptions of the semesters which do not have any student enrolled are shown in the table.",
        "response_toks": [
            "The",
            "id",
            ",",
            "name",
            ",",
            "and",
            "descriptions",
            "of",
            "the",
            "semesters",
            "which",
            "do",
            "not",
            "have",
            "any",
            "student",
            "enrolled",
            "are",
            "shown",
            "in",
            "the",
            "table",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT semester_id,semester_name,semester_description FROM Semesters WHERE semester_id NOT IN (  SELECT semester_id FROM Student_Enrolment  ) ",
        "query_w_results_blank_res": "SELECT semester_id,semester_name,semester_description FROM Semesters WHERE semester_id NOT IN (  SELECT semester_id FROM Student_Enrolment  ) ",
        "query_toks_w_results": [
            "select",
            "semester_id",
            ",",
            "semester_name",
            ",",
            "semester_description",
            "from",
            "semesters",
            "where",
            "semester_id",
            "not",
            "in",
            "(",
            "select",
            "semester_id",
            "from",
            "student_enrolment",
            ")"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "semester_id",
            ",",
            "semester_name",
            ",",
            "semester_description",
            "from",
            "semesters",
            "where",
            "semester_id",
            "not",
            "in",
            "(",
            "select",
            "semester_id",
            "from",
            "student_enrolment",
            ")"
        ],
        "response_blank_res": "The id , name , and descriptions of the semesters which do not have any student enrolled are shown in the table .",
        "response_toks_blank_res": [
            "The",
            "id",
            ",",
            "name",
            ",",
            "and",
            "descriptions",
            "of",
            "the",
            "semesters",
            "which",
            "do",
            "not",
            "have",
            "any",
            "student",
            "enrolled",
            "are",
            "shown",
            "in",
            "the",
            "table",
            "."
        ]
    },
    {
        "database_id": "pets_1",
        "query": "SELECT count ( * ) FROM student WHERE Sex = \"F\"",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "student",
            "where",
            "sex",
            "=",
            "\"f\""
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                10
            ]
        ],
        "response": "The  count  of female students  is  10.",
        "response_toks": [
            "The",
            "count",
            "of",
            "female",
            "students",
            "is",
            "10",
            "."
        ],
        "results_map": {
            "result0": "10"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * ) FROM student WHERE Sex = \"F\" | 10 ",
        "query_w_results_blank_res": "SELECT count ( * ) FROM student WHERE Sex = \"F\" | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "student",
            "where",
            "sex",
            "=",
            "\"f\"",
            "10"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "student",
            "where",
            "sex",
            "=",
            "\"f\"",
            "result0"
        ],
        "response_blank_res": "The count of female students is result0 .",
        "response_toks_blank_res": [
            "The",
            "count",
            "of",
            "female",
            "students",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "pets_1",
        "query": "SELECT LName,Fname  FROM student order  by  Age  limit 1",
        "query_toks": [
            "select",
            "lname",
            ",",
            "fname",
            "from",
            "student",
            "order",
            "by",
            "age",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "LName",
                "Fname"
            ],
            [
                "Lee",
                "Susan"
            ]
        ],
        "response": "The first name and last Name of the youngest student on the list are Susan Lee.",
        "response_toks": [
            "The",
            "first",
            "name",
            "and",
            "last",
            "Name",
            "of",
            "the",
            "youngest",
            "student",
            "on",
            "the",
            "list",
            "are",
            "Susan",
            "Lee",
            "."
        ],
        "results_map": {
            "result0": "Susan",
            "result1": "Lee"
        },
        "results_blank_res": "result0 result1 ",
        "query_w_results": "SELECT LName,Fname  FROM student order  by  Age  limit 1 | Susan Lee ",
        "query_w_results_blank_res": "SELECT LName,Fname  FROM student order  by  Age  limit 1 | result0 result1 ",
        "query_toks_w_results": [
            "select",
            "lname",
            ",",
            "fname",
            "from",
            "student",
            "order",
            "by",
            "age",
            "limit",
            "1",
            "Susan",
            "Lee"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "lname",
            ",",
            "fname",
            "from",
            "student",
            "order",
            "by",
            "age",
            "limit",
            "1",
            "result0",
            "result1"
        ],
        "response_blank_res": "The first name and last Name of the youngest student on the list are result0 result1 .",
        "response_toks_blank_res": [
            "The",
            "first",
            "name",
            "and",
            "last",
            "Name",
            "of",
            "the",
            "youngest",
            "student",
            "on",
            "the",
            "list",
            "are",
            "result0",
            "result1",
            "."
        ]
    },
    {
        "database_id": "pets_1",
        "query": "SELECT avg ( age )  FROM student WHERE stuid NOT IN  ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid ) ",
        "query_toks": [
            "select",
            "avg",
            "(",
            "age",
            ")",
            "from",
            "student",
            "where",
            "stuid",
            "not",
            "in",
            "(",
            "select",
            "t1",
            ".",
            "stuid",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            ")"
        ],
        "results_raw": [
            [
                "avg(age)"
            ],
            [
                19.625
            ]
        ],
        "response": "The average age of students who do not have any pet is 19.625",
        "response_toks": [
            "The",
            "average",
            "age",
            "of",
            "students",
            "who",
            "do",
            "not",
            "have",
            "any",
            "pet",
            "is",
            "19.625"
        ],
        "results_map": {
            "result0": "19.625"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT avg ( age )  FROM student WHERE stuid NOT IN  ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid )  | 19.625 ",
        "query_w_results_blank_res": "SELECT avg ( age )  FROM student WHERE stuid NOT IN  ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid )  | result0 ",
        "query_toks_w_results": [
            "select",
            "avg",
            "(",
            "age",
            ")",
            "from",
            "student",
            "where",
            "stuid",
            "not",
            "in",
            "(",
            "select",
            "t1",
            ".",
            "stuid",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            ")",
            "19.625"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "avg",
            "(",
            "age",
            ")",
            "from",
            "student",
            "where",
            "stuid",
            "not",
            "in",
            "(",
            "select",
            "t1",
            ".",
            "stuid",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            ")",
            "result0"
        ],
        "response_blank_res": "The average age of students who do not have any pet is result0",
        "response_toks_blank_res": [
            "The",
            "average",
            "age",
            "of",
            "students",
            "who",
            "do",
            "not",
            "have",
            "any",
            "pet",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "pets_1",
        "query": "SELECT city_code  FROM student WHERE \nStuID = 1003",
        "query_toks": [
            "select",
            "city_code",
            "from",
            "student",
            "where",
            "stuid",
            "=",
            "1003"
        ],
        "results_raw": [
            [
                "city_code"
            ],
            [
                "WAS"
            ]
        ],
        "response": "The  city code of  student id 1003 is WAS",
        "response_toks": [
            "The",
            "city",
            "code",
            "of",
            "student",
            "id",
            "1003",
            "is",
            "WAS"
        ],
        "results_map": {
            "result0": "WAS"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT city_code  FROM student WHERE \nStuID = 1003 | WAS ",
        "query_w_results_blank_res": "SELECT city_code  FROM student WHERE \nStuID = 1003 | result0 ",
        "query_toks_w_results": [
            "select",
            "city_code",
            "from",
            "student",
            "where",
            "stuid",
            "=",
            "1003",
            "WAS"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "city_code",
            "from",
            "student",
            "where",
            "stuid",
            "=",
            "1003",
            "result0"
        ],
        "response_blank_res": "The city code of student id 1003 is result0",
        "response_toks_blank_res": [
            "The",
            "city",
            "code",
            "of",
            "student",
            "id",
            "1003",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "tvshow",
        "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.written_by   =   'Todd Casey'",
        "query_toks": [
            "select",
            "t1",
            ".",
            "country",
            "from",
            "tv_channel",
            "as",
            "t1",
            "join",
            "cartoon",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "channel",
            "where",
            "t2",
            ".",
            "written_by",
            "=",
            "'todd",
            "casey'"
        ],
        "results_raw": [
            [
                "Country"
            ],
            [
                "United Kingdom"
            ],
            [
                "Italy"
            ]
        ],
        "response": "some cartoons written by Todd Casey are playing in some tv channels in countries of The United Kingdom and Italy.",
        "response_toks": [
            "some",
            "cartoons",
            "written",
            "by",
            "Todd",
            "Casey",
            "are",
            "playing",
            "in",
            "some",
            "tv",
            "channels",
            "in",
            "countries",
            "of",
            "The",
            "United",
            "Kingdom",
            "and",
            "Italy",
            "."
        ],
        "results_map": {
            "result0": "Italy"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.written_by   =   'Todd Casey' | Italy ",
        "query_w_results_blank_res": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.written_by   =   'Todd Casey' | result0 ",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "country",
            "from",
            "tv_channel",
            "as",
            "t1",
            "join",
            "cartoon",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "channel",
            "where",
            "t2",
            ".",
            "written_by",
            "=",
            "'todd",
            "casey'",
            "Italy"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "country",
            "from",
            "tv_channel",
            "as",
            "t1",
            "join",
            "cartoon",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "channel",
            "where",
            "t2",
            ".",
            "written_by",
            "=",
            "'todd",
            "casey'",
            "result0"
        ],
        "response_blank_res": "some cartoons written by Todd Casey are playing in some tv channels in countries of The United Kingdom and result0 .",
        "response_toks_blank_res": [
            "some",
            "cartoons",
            "written",
            "by",
            "Todd",
            "Casey",
            "are",
            "playing",
            "in",
            "some",
            "tv",
            "channels",
            "in",
            "countries",
            "of",
            "The",
            "United",
            "Kingdom",
            "and",
            "result0",
            "."
        ]
    },
    {
        "database_id": "tvshow",
        "query": "SELECT title FROM cartoon  WHERE written_by   =   'Todd Casey'",
        "query_toks": [
            "select",
            "title",
            "from",
            "cartoon",
            "where",
            "written_by",
            "=",
            "'todd",
            "casey'"
        ],
        "results_raw": [
            [
                "Title"
            ],
            [
                "Enter the Outsiders!"
            ],
            [
                "Return of the Fearsome Fangs!"
            ]
        ],
        "response": "The tiles of cartoons written by Todd Casey is Enter the Outsiders! and Return of the Fearsome Fangs!",
        "response_toks": [
            "The",
            "tiles",
            "of",
            "cartoons",
            "written",
            "by",
            "Todd",
            "Casey",
            "is",
            "Enter",
            "the",
            "Outsiders",
            "!",
            "and",
            "Return",
            "of",
            "the",
            "Fearsome",
            "Fangs",
            "!"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT title FROM cartoon  WHERE written_by   =   'Todd Casey'",
        "query_w_results_blank_res": "SELECT title FROM cartoon  WHERE written_by   =   'Todd Casey'",
        "query_toks_w_results": [
            "select",
            "title",
            "from",
            "cartoon",
            "where",
            "written_by",
            "=",
            "'todd",
            "casey'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "title",
            "from",
            "cartoon",
            "where",
            "written_by",
            "=",
            "'todd",
            "casey'"
        ],
        "response_blank_res": "The tiles of cartoons written by Todd Casey is Enter the Outsiders ! and Return of the Fearsome Fangs !",
        "response_toks_blank_res": [
            "The",
            "tiles",
            "of",
            "cartoons",
            "written",
            "by",
            "Todd",
            "Casey",
            "is",
            "Enter",
            "the",
            "Outsiders",
            "!",
            "and",
            "Return",
            "of",
            "the",
            "Fearsome",
            "Fangs",
            "!"
        ]
    },
    {
        "database_id": "tvshow",
        "query": "SELECT directed_by FROM cartoon WHERE title  =  \"Enter the Outsiders!\"",
        "query_toks": [
            "select",
            "directed_by",
            "from",
            "cartoon",
            "where",
            "title",
            "=",
            "\"enter",
            "the",
            "outsiders!\""
        ],
        "results_raw": [
            [
                "Directed_by"
            ],
            [
                "Michael Chang"
            ]
        ],
        "response": "Michael Chang directed the cartoon titled Enter the Outsiders!.",
        "response_toks": [
            "Michael",
            "Chang",
            "directed",
            "the",
            "cartoon",
            "titled",
            "Enter",
            "the",
            "Outsiders",
            "!",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT directed_by FROM cartoon WHERE title  =  \"Enter the Outsiders!\"",
        "query_w_results_blank_res": "SELECT directed_by FROM cartoon WHERE title  =  \"Enter the Outsiders!\"",
        "query_toks_w_results": [
            "select",
            "directed_by",
            "from",
            "cartoon",
            "where",
            "title",
            "=",
            "\"enter",
            "the",
            "outsiders!\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "directed_by",
            "from",
            "cartoon",
            "where",
            "title",
            "=",
            "\"enter",
            "the",
            "outsiders!\""
        ],
        "response_blank_res": "Michael Chang directed the cartoon titled Enter the Outsiders ! .",
        "response_toks_blank_res": [
            "Michael",
            "Chang",
            "directed",
            "the",
            "cartoon",
            "titled",
            "Enter",
            "the",
            "Outsiders",
            "!",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT count ( distinct language )  from countrylanguage",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "language",
            ")",
            "from",
            "countrylanguage"
        ],
        "results_raw": [
            [
                "count(distinct language)"
            ],
            [
                457
            ]
        ],
        "response": "There are 457 different kinds of languages",
        "response_toks": [
            "There",
            "are",
            "457",
            "different",
            "kinds",
            "of",
            "languages"
        ],
        "results_map": {
            "result0": "457"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( distinct language )  from countrylanguage | 457 ",
        "query_w_results_blank_res": "SELECT count ( distinct language )  from countrylanguage | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "distinct",
            "language",
            ")",
            "from",
            "countrylanguage",
            "457"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "distinct",
            "language",
            ")",
            "from",
            "countrylanguage",
            "result0"
        ],
        "response_blank_res": "There are result0 different kinds of languages",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "different",
            "kinds",
            "of",
            "languages"
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT population from country where name  =  \"Aruba\"",
        "query_toks": [
            "select",
            "population",
            "from",
            "country",
            "where",
            "name",
            "=",
            "\"aruba\""
        ],
        "results_raw": [
            [
                "Population"
            ],
            [
                103000
            ]
        ],
        "response": "The population of the country with name Aruba is 103000",
        "response_toks": [
            "The",
            "population",
            "of",
            "the",
            "country",
            "with",
            "name",
            "Aruba",
            "is",
            "103000"
        ],
        "results_map": {
            "result0": "103000"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT population from country where name  =  \"Aruba\" | 103000 ",
        "query_w_results_blank_res": "SELECT population from country where name  =  \"Aruba\" | result0 ",
        "query_toks_w_results": [
            "select",
            "population",
            "from",
            "country",
            "where",
            "name",
            "=",
            "\"aruba\"",
            "103000"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "population",
            "from",
            "country",
            "where",
            "name",
            "=",
            "\"aruba\"",
            "result0"
        ],
        "response_blank_res": "The population of the country with name Aruba is result0",
        "response_toks_blank_res": [
            "The",
            "population",
            "of",
            "the",
            "country",
            "with",
            "name",
            "Aruba",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT GNPOLD from country where name  =  \"Afghanistan\"",
        "query_toks": [
            "select",
            "gnpold",
            "from",
            "country",
            "where",
            "name",
            "=",
            "\"afghanistan\""
        ],
        "results_raw": [
            [
                "GNPOld"
            ],
            [
                null
            ]
        ],
        "response": "The GNPOld of the country Afghanistan is NULL",
        "response_toks": [
            "The",
            "GNPOld",
            "of",
            "the",
            "country",
            "Afghanistan",
            "is",
            "NULL"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT GNPOLD from country where name  =  \"Afghanistan\"",
        "query_w_results_blank_res": "SELECT GNPOLD from country where name  =  \"Afghanistan\"",
        "query_toks_w_results": [
            "select",
            "gnpold",
            "from",
            "country",
            "where",
            "name",
            "=",
            "\"afghanistan\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "gnpold",
            "from",
            "country",
            "where",
            "name",
            "=",
            "\"afghanistan\""
        ],
        "response_blank_res": "The GNPOld of the country Afghanistan is NULL",
        "response_toks_blank_res": [
            "The",
            "GNPOld",
            "of",
            "the",
            "country",
            "Afghanistan",
            "is",
            "NULL"
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT country_code FROM players GROUP BY country_code HAVING count ( * )   >  50",
        "query_toks": [
            "select",
            "country_code",
            "from",
            "players",
            "group",
            "by",
            "country_code",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "50"
        ],
        "results_raw": [
            [
                "country_code"
            ],
            [
                "ALG"
            ],
            [
                "ARG"
            ],
            [
                "AUS"
            ]
        ],
        "response": "Here are the codes  of countries with more than 50 players",
        "response_toks": [
            "Here",
            "are",
            "the",
            "codes",
            "of",
            "countries",
            "with",
            "more",
            "than",
            "50",
            "players"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT country_code FROM players GROUP BY country_code HAVING count ( * )   >  50",
        "query_w_results_blank_res": "SELECT country_code FROM players GROUP BY country_code HAVING count ( * )   >  50",
        "query_toks_w_results": [
            "select",
            "country_code",
            "from",
            "players",
            "group",
            "by",
            "country_code",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "50"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "country_code",
            "from",
            "players",
            "group",
            "by",
            "country_code",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "50"
        ],
        "response_blank_res": "Here are the codes of countries with more than 50 players",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "codes",
            "of",
            "countries",
            "with",
            "more",
            "than",
            "50",
            "players"
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT country_code FROM players GROUP BY country_code HAVING count ( * )   <  40",
        "query_toks": [
            "select",
            "country_code",
            "from",
            "players",
            "group",
            "by",
            "country_code",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<",
            "40"
        ],
        "results_raw": [
            [
                "country_code"
            ],
            [
                "AHO"
            ],
            [
                "ALB"
            ],
            [
                "AND"
            ]
        ],
        "response": "Here is the list of the code of countries that have less than 40 players.",
        "response_toks": [
            "Here",
            "is",
            "the",
            "list",
            "of",
            "the",
            "code",
            "of",
            "countries",
            "that",
            "have",
            "less",
            "than",
            "40",
            "players",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT country_code FROM players GROUP BY country_code HAVING count ( * )   <  40",
        "query_w_results_blank_res": "SELECT country_code FROM players GROUP BY country_code HAVING count ( * )   <  40",
        "query_toks_w_results": [
            "select",
            "country_code",
            "from",
            "players",
            "group",
            "by",
            "country_code",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<",
            "40"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "country_code",
            "from",
            "players",
            "group",
            "by",
            "country_code",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<",
            "40"
        ],
        "response_blank_res": "Here is the list of the code of countries that have less than 40 players .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "list",
            "of",
            "the",
            "code",
            "of",
            "countries",
            "that",
            "have",
            "less",
            "than",
            "40",
            "players",
            "."
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT first_name,last_name FROM players where country_code = 'AHO'",
        "query_toks": [
            "select",
            "first_name",
            ",",
            "last_name",
            "from",
            "players",
            "where",
            "country_code",
            "=",
            "'aho'"
        ],
        "results_raw": [
            [
                "first_name",
                "last_name"
            ],
            [
                "Tsarina",
                "Domacasse"
            ],
            [
                "Lorna",
                "Simmons"
            ],
            [
                "Marisa",
                "Tseng"
            ]
        ],
        "response": "Here are the first and last name of players from the country code AHO.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "first",
            "and",
            "last",
            "name",
            "of",
            "players",
            "from",
            "the",
            "country",
            "code",
            "AHO",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT first_name,last_name FROM players where country_code = 'AHO'",
        "query_w_results_blank_res": "SELECT first_name,last_name FROM players where country_code = 'AHO'",
        "query_toks_w_results": [
            "select",
            "first_name",
            ",",
            "last_name",
            "from",
            "players",
            "where",
            "country_code",
            "=",
            "'aho'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "first_name",
            ",",
            "last_name",
            "from",
            "players",
            "where",
            "country_code",
            "=",
            "'aho'"
        ],
        "response_blank_res": "Here are the first and last name of players from the country code AHO .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "first",
            "and",
            "last",
            "name",
            "of",
            "players",
            "from",
            "the",
            "country",
            "code",
            "AHO",
            "."
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT player_id FROM players where country_code = 'AHO'",
        "query_toks": [
            "select",
            "player_id",
            "from",
            "players",
            "where",
            "country_code",
            "=",
            "'aho'"
        ],
        "results_raw": [
            [
                "player_id"
            ],
            [
                206442
            ],
            [
                206443
            ],
            [
                206445
            ]
        ],
        "response": "Here are the player id  for players from the country code AHO.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "player",
            "id",
            "for",
            "players",
            "from",
            "the",
            "country",
            "code",
            "AHO",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT player_id FROM players where country_code = 'AHO'",
        "query_w_results_blank_res": "SELECT player_id FROM players where country_code = 'AHO'",
        "query_toks_w_results": [
            "select",
            "player_id",
            "from",
            "players",
            "where",
            "country_code",
            "=",
            "'aho'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "player_id",
            "from",
            "players",
            "where",
            "country_code",
            "=",
            "'aho'"
        ],
        "response_blank_res": "Here are the player id for players from the country code AHO .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "player",
            "id",
            "for",
            "players",
            "from",
            "the",
            "country",
            "code",
            "AHO",
            "."
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT hand FROM players where player_id = 206449",
        "query_toks": [
            "select",
            "hand",
            "from",
            "players",
            "where",
            "player_id",
            "=",
            "206449"
        ],
        "results_raw": [
            [
                "hand"
            ],
            [
                "U"
            ]
        ],
        "response": "The hand for player with id 206449 is U.",
        "response_toks": [
            "The",
            "hand",
            "for",
            "player",
            "with",
            "id",
            "206449",
            "is",
            "U",
            "."
        ],
        "results_map": {
            "result0": "U"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT hand FROM players where player_id = 206449 | U ",
        "query_w_results_blank_res": "SELECT hand FROM players where player_id = 206449 | result0 ",
        "query_toks_w_results": [
            "select",
            "hand",
            "from",
            "players",
            "where",
            "player_id",
            "=",
            "206449",
            "U"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "hand",
            "from",
            "players",
            "where",
            "player_id",
            "=",
            "206449",
            "result0"
        ],
        "response_blank_res": "The hand for player with id 206449 is result0 .",
        "response_toks_blank_res": [
            "The",
            "hand",
            "for",
            "player",
            "with",
            "id",
            "206449",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT count ( * )  FROM players where hand = 'U'",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "players",
            "where",
            "hand",
            "=",
            "'u'"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                14193
            ]
        ],
        "response": "There are 14193 players having hand U.",
        "response_toks": [
            "There",
            "are",
            "14193",
            "players",
            "having",
            "hand",
            "U",
            "."
        ],
        "results_map": {
            "result0": "14193"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM players where hand = 'U' | 14193 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM players where hand = 'U' | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "players",
            "where",
            "hand",
            "=",
            "'u'",
            "14193"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "players",
            "where",
            "hand",
            "=",
            "'u'",
            "result0"
        ],
        "response_blank_res": "There are result0 players having hand U .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "players",
            "having",
            "hand",
            "U",
            "."
        ]
    },
    {
        "database_id": "battle_death",
        "query": "SELECT name FROM battle EXCEPT SELECT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id   =   T2.lost_in_battle WHERE T2.location   =   'English Channel'",
        "query_toks": [
            "select",
            "name",
            "from",
            "battle",
            "except",
            "select",
            "t1",
            ".",
            "name",
            "from",
            "battle",
            "as",
            "t1",
            "join",
            "ship",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "lost_in_battle",
            "where",
            "t2",
            ".",
            "location",
            "=",
            "'english",
            "channel'"
        ],
        "results_raw": [
            [
                "name"
            ],
            [
                "Battle of Adrianople"
            ],
            [
                "Battle of Rusion"
            ],
            [
                "Battle of Serres"
            ]
        ],
        "response": "Sure! Here are the names of the battles with no ships lost in the 'English Channel'.",
        "response_toks": [
            "Sure",
            "!",
            "Here",
            "are",
            "the",
            "names",
            "of",
            "the",
            "battles",
            "with",
            "no",
            "ships",
            "lost",
            "in",
            "the",
            "'English",
            "Channel",
            "'",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT name FROM battle EXCEPT SELECT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id   =   T2.lost_in_battle WHERE T2.location   =   'English Channel'",
        "query_w_results_blank_res": "SELECT name FROM battle EXCEPT SELECT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id   =   T2.lost_in_battle WHERE T2.location   =   'English Channel'",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "battle",
            "except",
            "select",
            "t1",
            ".",
            "name",
            "from",
            "battle",
            "as",
            "t1",
            "join",
            "ship",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "lost_in_battle",
            "where",
            "t2",
            ".",
            "location",
            "=",
            "'english",
            "channel'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "battle",
            "except",
            "select",
            "t1",
            ".",
            "name",
            "from",
            "battle",
            "as",
            "t1",
            "join",
            "ship",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "lost_in_battle",
            "where",
            "t2",
            ".",
            "location",
            "=",
            "'english",
            "channel'"
        ],
        "response_blank_res": "Sure ! Here are the names of the battles with no ships lost in the 'English Channel ' .",
        "response_toks_blank_res": [
            "Sure",
            "!",
            "Here",
            "are",
            "the",
            "names",
            "of",
            "the",
            "battles",
            "with",
            "no",
            "ships",
            "lost",
            "in",
            "the",
            "'English",
            "Channel",
            "'",
            "."
        ]
    },
    {
        "database_id": "battle_death",
        "query": "SELECT RESULT  FROM battle where name not in  ( SELECT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id   =   T2.lost_in_battle WHERE T2.location   =   'English Channel' ) ",
        "query_toks": [
            "select",
            "result",
            "from",
            "battle",
            "where",
            "name",
            "not",
            "in",
            "(",
            "select",
            "t1",
            ".",
            "name",
            "from",
            "battle",
            "as",
            "t1",
            "join",
            "ship",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "lost_in_battle",
            "where",
            "t2",
            ".",
            "location",
            "=",
            "'english",
            "channel'",
            ")"
        ],
        "results_raw": [
            [
                "result"
            ],
            [
                "Bulgarian victory"
            ],
            [
                "Bulgarian victory"
            ],
            [
                "Bulgarian victory"
            ]
        ],
        "response": "here is the list of results of the battles with no ships lost in the 'English Channel'.",
        "response_toks": [
            "here",
            "is",
            "the",
            "list",
            "of",
            "results",
            "of",
            "the",
            "battles",
            "with",
            "no",
            "ships",
            "lost",
            "in",
            "the",
            "'English",
            "Channel",
            "'",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT RESULT  FROM battle where name not in  ( SELECT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id   =   T2.lost_in_battle WHERE T2.location   =   'English Channel' ) ",
        "query_w_results_blank_res": "SELECT RESULT  FROM battle where name not in  ( SELECT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id   =   T2.lost_in_battle WHERE T2.location   =   'English Channel' ) ",
        "query_toks_w_results": [
            "select",
            "result",
            "from",
            "battle",
            "where",
            "name",
            "not",
            "in",
            "(",
            "select",
            "t1",
            ".",
            "name",
            "from",
            "battle",
            "as",
            "t1",
            "join",
            "ship",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "lost_in_battle",
            "where",
            "t2",
            ".",
            "location",
            "=",
            "'english",
            "channel'",
            ")"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "result",
            "from",
            "battle",
            "where",
            "name",
            "not",
            "in",
            "(",
            "select",
            "t1",
            ".",
            "name",
            "from",
            "battle",
            "as",
            "t1",
            "join",
            "ship",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "lost_in_battle",
            "where",
            "t2",
            ".",
            "location",
            "=",
            "'english",
            "channel'",
            ")"
        ],
        "response_blank_res": "here is the list of results of the battles with no ships lost in the 'English Channel ' .",
        "response_toks_blank_res": [
            "here",
            "is",
            "the",
            "list",
            "of",
            "results",
            "of",
            "the",
            "battles",
            "with",
            "no",
            "ships",
            "lost",
            "in",
            "the",
            "'English",
            "Channel",
            "'",
            "."
        ]
    },
    {
        "database_id": "battle_death",
        "query": "SELECT bulgarian_commander FROM battle where name not in  ( SELECT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id   =   T2.lost_in_battle WHERE T2.location   =   'English Channel' ) ",
        "query_toks": [
            "select",
            "bulgarian_commander",
            "from",
            "battle",
            "where",
            "name",
            "not",
            "in",
            "(",
            "select",
            "t1",
            ".",
            "name",
            "from",
            "battle",
            "as",
            "t1",
            "join",
            "ship",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "lost_in_battle",
            "where",
            "t2",
            ".",
            "location",
            "=",
            "'english",
            "channel'",
            ")"
        ],
        "results_raw": [
            [
                "bulgarian_commander"
            ],
            [
                "Kaloyan"
            ],
            [
                "Kaloyan"
            ],
            [
                "Kaloyan"
            ]
        ],
        "response": "The Bulgarian commanders of the battles with no ships lost in the 'English Channel' are listed here.",
        "response_toks": [
            "The",
            "Bulgarian",
            "commanders",
            "of",
            "the",
            "battles",
            "with",
            "no",
            "ships",
            "lost",
            "in",
            "the",
            "'English",
            "Channel",
            "'",
            "are",
            "listed",
            "here",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT bulgarian_commander FROM battle where name not in  ( SELECT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id   =   T2.lost_in_battle WHERE T2.location   =   'English Channel' ) ",
        "query_w_results_blank_res": "SELECT bulgarian_commander FROM battle where name not in  ( SELECT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id   =   T2.lost_in_battle WHERE T2.location   =   'English Channel' ) ",
        "query_toks_w_results": [
            "select",
            "bulgarian_commander",
            "from",
            "battle",
            "where",
            "name",
            "not",
            "in",
            "(",
            "select",
            "t1",
            ".",
            "name",
            "from",
            "battle",
            "as",
            "t1",
            "join",
            "ship",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "lost_in_battle",
            "where",
            "t2",
            ".",
            "location",
            "=",
            "'english",
            "channel'",
            ")"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "bulgarian_commander",
            "from",
            "battle",
            "where",
            "name",
            "not",
            "in",
            "(",
            "select",
            "t1",
            ".",
            "name",
            "from",
            "battle",
            "as",
            "t1",
            "join",
            "ship",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "lost_in_battle",
            "where",
            "t2",
            ".",
            "location",
            "=",
            "'english",
            "channel'",
            ")"
        ],
        "response_blank_res": "The Bulgarian commanders of the battles with no ships lost in the 'English Channel ' are listed here .",
        "response_toks_blank_res": [
            "The",
            "Bulgarian",
            "commanders",
            "of",
            "the",
            "battles",
            "with",
            "no",
            "ships",
            "lost",
            "in",
            "the",
            "'English",
            "Channel",
            "'",
            "are",
            "listed",
            "here",
            "."
        ]
    },
    {
        "database_id": "battle_death",
        "query": "SELECT date FROM battle where name not in  ( SELECT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id   =   T2.lost_in_battle WHERE T2.location   =   'English Channel' ) ",
        "query_toks": [
            "select",
            "date",
            "from",
            "battle",
            "where",
            "name",
            "not",
            "in",
            "(",
            "select",
            "t1",
            ".",
            "name",
            "from",
            "battle",
            "as",
            "t1",
            "join",
            "ship",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "lost_in_battle",
            "where",
            "t2",
            ".",
            "location",
            "=",
            "'english",
            "channel'",
            ")"
        ],
        "results_raw": [
            [
                "date"
            ],
            [
                "14 April 1205"
            ],
            [
                "June 1205"
            ],
            [
                "31 January 1206"
            ]
        ],
        "response": "Here we show the dates for the battles with no ships lost in the 'English Channel'.",
        "response_toks": [
            "Here",
            "we",
            "show",
            "the",
            "dates",
            "for",
            "the",
            "battles",
            "with",
            "no",
            "ships",
            "lost",
            "in",
            "the",
            "'English",
            "Channel",
            "'",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT date FROM battle where name not in  ( SELECT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id   =   T2.lost_in_battle WHERE T2.location   =   'English Channel' ) ",
        "query_w_results_blank_res": "SELECT date FROM battle where name not in  ( SELECT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id   =   T2.lost_in_battle WHERE T2.location   =   'English Channel' ) ",
        "query_toks_w_results": [
            "select",
            "date",
            "from",
            "battle",
            "where",
            "name",
            "not",
            "in",
            "(",
            "select",
            "t1",
            ".",
            "name",
            "from",
            "battle",
            "as",
            "t1",
            "join",
            "ship",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "lost_in_battle",
            "where",
            "t2",
            ".",
            "location",
            "=",
            "'english",
            "channel'",
            ")"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "date",
            "from",
            "battle",
            "where",
            "name",
            "not",
            "in",
            "(",
            "select",
            "t1",
            ".",
            "name",
            "from",
            "battle",
            "as",
            "t1",
            "join",
            "ship",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "lost_in_battle",
            "where",
            "t2",
            ".",
            "location",
            "=",
            "'english",
            "channel'",
            ")"
        ],
        "response_blank_res": "Here we show the dates for the battles with no ships lost in the 'English Channel ' .",
        "response_toks_blank_res": [
            "Here",
            "we",
            "show",
            "the",
            "dates",
            "for",
            "the",
            "battles",
            "with",
            "no",
            "ships",
            "lost",
            "in",
            "the",
            "'English",
            "Channel",
            "'",
            "."
        ]
    },
    {
        "database_id": "battle_death",
        "query": "SELECT  latin_commander  FROM battle where name not in  ( SELECT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id   =   T2.lost_in_battle WHERE T2.location   =   'English Channel' ) ",
        "query_toks": [
            "select",
            "latin_commander",
            "from",
            "battle",
            "where",
            "name",
            "not",
            "in",
            "(",
            "select",
            "t1",
            ".",
            "name",
            "from",
            "battle",
            "as",
            "t1",
            "join",
            "ship",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "lost_in_battle",
            "where",
            "t2",
            ".",
            "location",
            "=",
            "'english",
            "channel'",
            ")"
        ],
        "results_raw": [
            [
                "latin_commander"
            ],
            [
                "Baldwin I"
            ],
            [
                "Unknown"
            ],
            [
                "Thierry de Termond"
            ]
        ],
        "response": "Here we show the latin commanders of the battles with no ships lost in the 'English Channel'.",
        "response_toks": [
            "Here",
            "we",
            "show",
            "the",
            "latin",
            "commanders",
            "of",
            "the",
            "battles",
            "with",
            "no",
            "ships",
            "lost",
            "in",
            "the",
            "'English",
            "Channel",
            "'",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT  latin_commander  FROM battle where name not in  ( SELECT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id   =   T2.lost_in_battle WHERE T2.location   =   'English Channel' ) ",
        "query_w_results_blank_res": "SELECT  latin_commander  FROM battle where name not in  ( SELECT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id   =   T2.lost_in_battle WHERE T2.location   =   'English Channel' ) ",
        "query_toks_w_results": [
            "select",
            "latin_commander",
            "from",
            "battle",
            "where",
            "name",
            "not",
            "in",
            "(",
            "select",
            "t1",
            ".",
            "name",
            "from",
            "battle",
            "as",
            "t1",
            "join",
            "ship",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "lost_in_battle",
            "where",
            "t2",
            ".",
            "location",
            "=",
            "'english",
            "channel'",
            ")"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "latin_commander",
            "from",
            "battle",
            "where",
            "name",
            "not",
            "in",
            "(",
            "select",
            "t1",
            ".",
            "name",
            "from",
            "battle",
            "as",
            "t1",
            "join",
            "ship",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "lost_in_battle",
            "where",
            "t2",
            ".",
            "location",
            "=",
            "'english",
            "channel'",
            ")"
        ],
        "response_blank_res": "Here we show the latin commanders of the battles with no ships lost in the 'English Channel ' .",
        "response_toks_blank_res": [
            "Here",
            "we",
            "show",
            "the",
            "latin",
            "commanders",
            "of",
            "the",
            "battles",
            "with",
            "no",
            "ships",
            "lost",
            "in",
            "the",
            "'English",
            "Channel",
            "'",
            "."
        ]
    },
    {
        "database_id": "employee_hire_evaluation",
        "query": "SELECT COUNT ( * )  FROM shop",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "shop"
        ],
        "results_raw": [
            [
                "COUNT(*)"
            ],
            [
                9
            ]
        ],
        "response": "There are 9 shops.",
        "response_toks": [
            "There",
            "are",
            "9",
            "shops",
            "."
        ],
        "results_map": {
            "result0": "9"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT COUNT ( * )  FROM shop | 9 ",
        "query_w_results_blank_res": "SELECT COUNT ( * )  FROM shop | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "shop",
            "9"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "shop",
            "result0"
        ],
        "response_blank_res": "There are result0 shops .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "shops",
            "."
        ]
    },
    {
        "database_id": "employee_hire_evaluation",
        "query": "SELECT MAX ( Number_products )  FROM shop",
        "query_toks": [
            "select",
            "max",
            "(",
            "number_products",
            ")",
            "from",
            "shop"
        ],
        "results_raw": [
            [
                "MAX(Number_products)"
            ],
            [
                15000
            ]
        ],
        "response": "The maximum number of products that one shop has is 15000.",
        "response_toks": [
            "The",
            "maximum",
            "number",
            "of",
            "products",
            "that",
            "one",
            "shop",
            "has",
            "is",
            "15000",
            "."
        ],
        "results_map": {
            "result0": "15000"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT MAX ( Number_products )  FROM shop | 15000 ",
        "query_w_results_blank_res": "SELECT MAX ( Number_products )  FROM shop | result0 ",
        "query_toks_w_results": [
            "select",
            "max",
            "(",
            "number_products",
            ")",
            "from",
            "shop",
            "15000"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "max",
            "(",
            "number_products",
            ")",
            "from",
            "shop",
            "result0"
        ],
        "response_blank_res": "The maximum number of products that one shop has is result0 .",
        "response_toks_blank_res": [
            "The",
            "maximum",
            "number",
            "of",
            "products",
            "that",
            "one",
            "shop",
            "has",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "employee_hire_evaluation",
        "query": "SELECT MIN ( Number_products )  FROM shop",
        "query_toks": [
            "select",
            "min",
            "(",
            "number_products",
            ")",
            "from",
            "shop"
        ],
        "results_raw": [
            [
                "MIN(Number_products)"
            ],
            [
                1600
            ]
        ],
        "response": "The minimum number of products that one shop has is 1600.",
        "response_toks": [
            "The",
            "minimum",
            "number",
            "of",
            "products",
            "that",
            "one",
            "shop",
            "has",
            "is",
            "1600",
            "."
        ],
        "results_map": {
            "result0": "1600"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT MIN ( Number_products )  FROM shop | 1600 ",
        "query_w_results_blank_res": "SELECT MIN ( Number_products )  FROM shop | result0 ",
        "query_toks_w_results": [
            "select",
            "min",
            "(",
            "number_products",
            ")",
            "from",
            "shop",
            "1600"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "min",
            "(",
            "number_products",
            ")",
            "from",
            "shop",
            "result0"
        ],
        "response_blank_res": "The minimum number of products that one shop has is result0 .",
        "response_toks_blank_res": [
            "The",
            "minimum",
            "number",
            "of",
            "products",
            "that",
            "one",
            "shop",
            "has",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code   =   T2.breed_code GROUP BY T1.breed_name ORDER BY count ( * )  DESC LIMIT 1",
        "query_toks": [
            "select",
            "t1",
            ".",
            "breed_name",
            "from",
            "breeds",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "breed_code",
            "=",
            "t2",
            ".",
            "breed_code",
            "group",
            "by",
            "t1",
            ".",
            "breed_name",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "breed_name"
            ],
            [
                "Bulldog"
            ]
        ],
        "response": "Bulldog is the breed with the most dogs.",
        "response_toks": [
            "Bulldog",
            "is",
            "the",
            "breed",
            "with",
            "the",
            "most",
            "dogs",
            "."
        ],
        "results_map": {
            "result0": "Bulldog"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code   =   T2.breed_code GROUP BY T1.breed_name ORDER BY count ( * )  DESC LIMIT 1 | Bulldog ",
        "query_w_results_blank_res": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code   =   T2.breed_code GROUP BY T1.breed_name ORDER BY count ( * )  DESC LIMIT 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "breed_name",
            "from",
            "breeds",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "breed_code",
            "=",
            "t2",
            ".",
            "breed_code",
            "group",
            "by",
            "t1",
            ".",
            "breed_name",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1",
            "Bulldog"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "breed_name",
            "from",
            "breeds",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "breed_code",
            "=",
            "t2",
            ".",
            "breed_code",
            "group",
            "by",
            "t1",
            ".",
            "breed_name",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "result0 is the breed with the most dogs .",
        "response_toks_blank_res": [
            "result0",
            "is",
            "the",
            "breed",
            "with",
            "the",
            "most",
            "dogs",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT count ( * )  FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code   =   T2.breed_code where T1.breed_name  =  \"Bulldog\"",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "breeds",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "breed_code",
            "=",
            "t2",
            ".",
            "breed_code",
            "where",
            "t1",
            ".",
            "breed_name",
            "=",
            "\"bulldog\""
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                7
            ]
        ],
        "response": "There are 7 dogs with breed bulldog.",
        "response_toks": [
            "There",
            "are",
            "7",
            "dogs",
            "with",
            "breed",
            "bulldog",
            "."
        ],
        "results_map": {
            "result0": "7"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code   =   T2.breed_code where T1.breed_name  =  \"Bulldog\" | 7 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code   =   T2.breed_code where T1.breed_name  =  \"Bulldog\" | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "breeds",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "breed_code",
            "=",
            "t2",
            ".",
            "breed_code",
            "where",
            "t1",
            ".",
            "breed_name",
            "=",
            "\"bulldog\"",
            "7"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "breeds",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "breed_code",
            "=",
            "t2",
            ".",
            "breed_code",
            "where",
            "t1",
            ".",
            "breed_name",
            "=",
            "\"bulldog\"",
            "result0"
        ],
        "response_blank_res": "There are result0 dogs with breed bulldog .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "dogs",
            "with",
            "breed",
            "bulldog",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code   =   T2.breed_code GROUP BY T1.breed_name ORDER BY count ( * )  DESC LIMIT 2",
        "query_toks": [
            "select",
            "t1",
            ".",
            "breed_name",
            "from",
            "breeds",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "breed_code",
            "=",
            "t2",
            ".",
            "breed_code",
            "group",
            "by",
            "t1",
            ".",
            "breed_name",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "2"
        ],
        "results_raw": [
            [
                "breed_name"
            ],
            [
                "Bulldog"
            ],
            [
                "Eskimo"
            ]
        ],
        "response": "Eskimo is the breed of the second most dogs.",
        "response_toks": [
            "Eskimo",
            "is",
            "the",
            "breed",
            "of",
            "the",
            "second",
            "most",
            "dogs",
            "."
        ],
        "results_map": {
            "result0": "Eskimo"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code   =   T2.breed_code GROUP BY T1.breed_name ORDER BY count ( * )  DESC LIMIT 2 | Eskimo ",
        "query_w_results_blank_res": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code   =   T2.breed_code GROUP BY T1.breed_name ORDER BY count ( * )  DESC LIMIT 2 | result0 ",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "breed_name",
            "from",
            "breeds",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "breed_code",
            "=",
            "t2",
            ".",
            "breed_code",
            "group",
            "by",
            "t1",
            ".",
            "breed_name",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "2",
            "Eskimo"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "breed_name",
            "from",
            "breeds",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "breed_code",
            "=",
            "t2",
            ".",
            "breed_code",
            "group",
            "by",
            "t1",
            ".",
            "breed_name",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "2",
            "result0"
        ],
        "response_blank_res": "result0 is the breed of the second most dogs .",
        "response_toks_blank_res": [
            "result0",
            "is",
            "the",
            "breed",
            "of",
            "the",
            "second",
            "most",
            "dogs",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT T1.breed_name except SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code   =   T2.breed_code GROUP BY T1.breed_name",
        "query_toks": [
            "select",
            "t1",
            ".",
            "breed_name",
            "except",
            "select",
            "t1",
            ".",
            "breed_name",
            "from",
            "breeds",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "breed_code",
            "=",
            "t2",
            ".",
            "breed_code",
            "group",
            "by",
            "t1",
            ".",
            "breed_name"
        ],
        "results_raw": null,
        "response": "There are no breed with 0 dog.",
        "response_toks": [
            "There",
            "are",
            "no",
            "breed",
            "with",
            "0",
            "dog",
            "."
        ],
        "results_map": null,
        "results_blank_res": null,
        "query_w_results": null,
        "query_w_results_blank_res": null,
        "query_toks_w_results": null,
        "query_toks_w_results_blank_res": null,
        "response_blank_res": null,
        "response_toks_blank_res": null
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code   =   T2.breed_code GROUP BY T1.breed_name having count ( * )   =  =  1",
        "query_toks": [
            "select",
            "t1",
            ".",
            "breed_name",
            "from",
            "breeds",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "breed_code",
            "=",
            "t2",
            ".",
            "breed_code",
            "group",
            "by",
            "t1",
            ".",
            "breed_name",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "=",
            "1"
        ],
        "results_raw": [
            [
                "breed_name"
            ]
        ],
        "response": "There are no breed with 1 dog.",
        "response_toks": [
            "There",
            "are",
            "no",
            "breed",
            "with",
            "1",
            "dog",
            "."
        ],
        "results_map": null,
        "results_blank_res": null,
        "query_w_results": null,
        "query_w_results_blank_res": null,
        "query_toks_w_results": null,
        "query_toks_w_results_blank_res": null,
        "response_blank_res": null,
        "response_toks_blank_res": null
    },
    {
        "database_id": "pets_1",
        "query": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T3.pettype   =   'cat'",
        "query_toks": [
            "select",
            "t1",
            ".",
            "fname",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "where",
            "t3",
            ".",
            "pettype",
            "=",
            "'cat'"
        ],
        "results_raw": [
            [
                "Fname"
            ],
            [
                "Linda"
            ]
        ],
        "response": "Linda is the first name of the student who has a cat pet.",
        "response_toks": [
            "Linda",
            "is",
            "the",
            "first",
            "name",
            "of",
            "the",
            "student",
            "who",
            "has",
            "a",
            "cat",
            "pet",
            "."
        ],
        "results_map": {
            "result0": "Linda"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T3.pettype   =   'cat' | Linda ",
        "query_w_results_blank_res": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T3.pettype   =   'cat' | result0 ",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "fname",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "where",
            "t3",
            ".",
            "pettype",
            "=",
            "'cat'",
            "Linda"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "fname",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "where",
            "t3",
            ".",
            "pettype",
            "=",
            "'cat'",
            "result0"
        ],
        "response_blank_res": "result0 is the first name of the student who has a cat pet .",
        "response_toks_blank_res": [
            "result0",
            "is",
            "the",
            "first",
            "name",
            "of",
            "the",
            "student",
            "who",
            "has",
            "a",
            "cat",
            "pet",
            "."
        ]
    },
    {
        "database_id": "pets_1",
        "query": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T3.pettype   =   'dog'",
        "query_toks": [
            "select",
            "t1",
            ".",
            "fname",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "where",
            "t3",
            ".",
            "pettype",
            "=",
            "'dog'"
        ],
        "results_raw": [
            [
                "Fname"
            ],
            [
                "Tracy"
            ],
            [
                "Tracy"
            ]
        ],
        "response": "Here are the first names of the students who have dog pets.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "first",
            "names",
            "of",
            "the",
            "students",
            "who",
            "have",
            "dog",
            "pets",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T3.pettype   =   'dog'",
        "query_w_results_blank_res": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T3.pettype   =   'dog'",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "fname",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "where",
            "t3",
            ".",
            "pettype",
            "=",
            "'dog'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "fname",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "where",
            "t3",
            ".",
            "pettype",
            "=",
            "'dog'"
        ],
        "response_blank_res": "Here are the first names of the students who have dog pets .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "first",
            "names",
            "of",
            "the",
            "students",
            "who",
            "have",
            "dog",
            "pets",
            "."
        ]
    },
    {
        "database_id": "pets_1",
        "query": "SELECT count ( T2.StuId )  FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid",
        "query_toks": [
            "select",
            "count",
            "(",
            "t2",
            ".",
            "stuid",
            ")",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid"
        ],
        "results_raw": [
            [
                "count(T2.StuId)"
            ],
            [
                3
            ]
        ],
        "response": "There are 3 students have any type of pet",
        "response_toks": [
            "There",
            "are",
            "3",
            "students",
            "have",
            "any",
            "type",
            "of",
            "pet"
        ],
        "results_map": {
            "result0": "3"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( T2.StuId )  FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid | 3 ",
        "query_w_results_blank_res": "SELECT count ( T2.StuId )  FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "t2",
            ".",
            "stuid",
            ")",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "3"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "t2",
            ".",
            "stuid",
            ")",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "result0"
        ],
        "response_blank_res": "There are result0 students have any type of pet",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "students",
            "have",
            "any",
            "type",
            "of",
            "pet"
        ]
    },
    {
        "database_id": "pets_1",
        "query": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T3.pettype   =   'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T3.pettype   =   'dog'",
        "query_toks": [
            "select",
            "t1",
            ".",
            "fname",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "where",
            "t3",
            ".",
            "pettype",
            "=",
            "'cat'",
            "intersect",
            "select",
            "t1",
            ".",
            "fname",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "where",
            "t3",
            ".",
            "pettype",
            "=",
            "'dog'"
        ],
        "results_raw": [
            [
                "Fname"
            ]
        ],
        "response": "There is no students have bothe a cat and a dog",
        "response_toks": [
            "There",
            "is",
            "no",
            "students",
            "have",
            "bothe",
            "a",
            "cat",
            "and",
            "a",
            "dog"
        ],
        "results_map": null,
        "results_blank_res": null,
        "query_w_results": null,
        "query_w_results_blank_res": null,
        "query_toks_w_results": null,
        "query_toks_w_results_blank_res": null,
        "response_blank_res": null,
        "response_toks_blank_res": null
    },
    {
        "database_id": "pets_1",
        "query": "SELECT T3.pet_age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T1.Fname  =  \"Linda\"",
        "query_toks": [
            "select",
            "t3",
            ".",
            "pet_age",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "where",
            "t1",
            ".",
            "fname",
            "=",
            "\"linda\""
        ],
        "results_raw": [
            [
                "pet_age"
            ],
            [
                3
            ]
        ],
        "response": "The age of Linda's pet is 3",
        "response_toks": [
            "The",
            "age",
            "of",
            "Linda",
            "'s",
            "pet",
            "is",
            "3"
        ],
        "results_map": {
            "result0": "3"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT T3.pet_age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T1.Fname  =  \"Linda\" | 3 ",
        "query_w_results_blank_res": "SELECT T3.pet_age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T1.Fname  =  \"Linda\" | result0 ",
        "query_toks_w_results": [
            "select",
            "t3",
            ".",
            "pet_age",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "where",
            "t1",
            ".",
            "fname",
            "=",
            "\"linda\"",
            "3"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t3",
            ".",
            "pet_age",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "where",
            "t1",
            ".",
            "fname",
            "=",
            "\"linda\"",
            "result0"
        ],
        "response_blank_res": "The age of Linda 's pet is result0",
        "response_toks_blank_res": [
            "The",
            "age",
            "of",
            "Linda",
            "'s",
            "pet",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "museum_visit",
        "query": "SELECT name FROM visitor WHERE Level_of_membership  >  4",
        "query_toks": [
            "select",
            "name",
            "from",
            "visitor",
            "where",
            "level_of_membership",
            ">",
            "4"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Gonzalo Higua\u00edn "
            ],
            [
                "Guti Midfielder"
            ],
            [
                "Fernando Gago"
            ]
        ],
        "response": "The name of the visitors who have a membership higher than 4 are shown in the result table.",
        "response_toks": [
            "The",
            "name",
            "of",
            "the",
            "visitors",
            "who",
            "have",
            "a",
            "membership",
            "higher",
            "than",
            "4",
            "are",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT name FROM visitor WHERE Level_of_membership  >  4",
        "query_w_results_blank_res": "SELECT name FROM visitor WHERE Level_of_membership  >  4",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "visitor",
            "where",
            "level_of_membership",
            ">",
            "4"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "visitor",
            "where",
            "level_of_membership",
            ">",
            "4"
        ],
        "response_blank_res": "The name of the visitors who have a membership higher than 4 are shown in the result table .",
        "response_toks_blank_res": [
            "The",
            "name",
            "of",
            "the",
            "visitors",
            "who",
            "have",
            "a",
            "membership",
            "higher",
            "than",
            "4",
            "are",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ]
    },
    {
        "database_id": "museum_visit",
        "query": "SELECT name, age FROM visitor WHERE Level_of_membership  >  4",
        "query_toks": [
            "select",
            "name",
            ",",
            "age",
            "from",
            "visitor",
            "where",
            "level_of_membership",
            ">",
            "4"
        ],
        "results_raw": [
            [
                "Name",
                "Age"
            ],
            [
                "Gonzalo Higua\u00edn ",
                35
            ],
            [
                "Guti Midfielder",
                28
            ],
            [
                "Fernando Gago",
                36
            ]
        ],
        "response": "Yes, the name and age of the visitors who have a membership higher than 4 are shown in the result table.",
        "response_toks": [
            "Yes",
            ",",
            "the",
            "name",
            "and",
            "age",
            "of",
            "the",
            "visitors",
            "who",
            "have",
            "a",
            "membership",
            "higher",
            "than",
            "4",
            "are",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT name, age FROM visitor WHERE Level_of_membership  >  4",
        "query_w_results_blank_res": "SELECT name, age FROM visitor WHERE Level_of_membership  >  4",
        "query_toks_w_results": [
            "select",
            "name",
            ",",
            "age",
            "from",
            "visitor",
            "where",
            "level_of_membership",
            ">",
            "4"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            ",",
            "age",
            "from",
            "visitor",
            "where",
            "level_of_membership",
            ">",
            "4"
        ],
        "response_blank_res": "Yes , the name and age of the visitors who have a membership higher than 4 are shown in the result table .",
        "response_toks_blank_res": [
            "Yes",
            ",",
            "the",
            "name",
            "and",
            "age",
            "of",
            "the",
            "visitors",
            "who",
            "have",
            "a",
            "membership",
            "higher",
            "than",
            "4",
            "are",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ]
    },
    {
        "database_id": "museum_visit",
        "query": "SELECT name ,  age FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC",
        "query_toks": [
            "select",
            "name",
            ",",
            "age",
            "from",
            "visitor",
            "where",
            "level_of_membership",
            ">",
            "4",
            "order",
            "by",
            "age",
            "desc"
        ],
        "results_raw": [
            [
                "Name",
                "Age"
            ],
            [
                "Fernando Gago",
                36
            ],
            [
                "Gonzalo Higua\u00edn ",
                35
            ],
            [
                "Guti Midfielder",
                28
            ]
        ],
        "response": "The name and age of the visitors who have a membership higher than 4 sorted by age descending are shown in the result table.",
        "response_toks": [
            "The",
            "name",
            "and",
            "age",
            "of",
            "the",
            "visitors",
            "who",
            "have",
            "a",
            "membership",
            "higher",
            "than",
            "4",
            "sorted",
            "by",
            "age",
            "descending",
            "are",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT name ,  age FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC",
        "query_w_results_blank_res": "SELECT name ,  age FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC",
        "query_toks_w_results": [
            "select",
            "name",
            ",",
            "age",
            "from",
            "visitor",
            "where",
            "level_of_membership",
            ">",
            "4",
            "order",
            "by",
            "age",
            "desc"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            ",",
            "age",
            "from",
            "visitor",
            "where",
            "level_of_membership",
            ">",
            "4",
            "order",
            "by",
            "age",
            "desc"
        ],
        "response_blank_res": "The name and age of the visitors who have a membership higher than 4 sorted by age descending are shown in the result table .",
        "response_toks_blank_res": [
            "The",
            "name",
            "and",
            "age",
            "of",
            "the",
            "visitors",
            "who",
            "have",
            "a",
            "membership",
            "higher",
            "than",
            "4",
            "sorted",
            "by",
            "age",
            "descending",
            "are",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ]
    },
    {
        "database_id": "museum_visit",
        "query": "SELECT id FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC",
        "query_toks": [
            "select",
            "id",
            "from",
            "visitor",
            "where",
            "level_of_membership",
            ">",
            "4",
            "order",
            "by",
            "age",
            "desc"
        ],
        "results_raw": [
            [
                "ID"
            ],
            [
                5
            ],
            [
                1
            ],
            [
                2
            ]
        ],
        "response": "The customer ids of the visitors who have a membership higher than 4 sorted by age descending are shown in the result table.",
        "response_toks": [
            "The",
            "customer",
            "ids",
            "of",
            "the",
            "visitors",
            "who",
            "have",
            "a",
            "membership",
            "higher",
            "than",
            "4",
            "sorted",
            "by",
            "age",
            "descending",
            "are",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT id FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC",
        "query_w_results_blank_res": "SELECT id FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC",
        "query_toks_w_results": [
            "select",
            "id",
            "from",
            "visitor",
            "where",
            "level_of_membership",
            ">",
            "4",
            "order",
            "by",
            "age",
            "desc"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "id",
            "from",
            "visitor",
            "where",
            "level_of_membership",
            ">",
            "4",
            "order",
            "by",
            "age",
            "desc"
        ],
        "response_blank_res": "The customer ids of the visitors who have a membership higher than 4 sorted by age descending are shown in the result table .",
        "response_toks_blank_res": [
            "The",
            "customer",
            "ids",
            "of",
            "the",
            "visitors",
            "who",
            "have",
            "a",
            "membership",
            "higher",
            "than",
            "4",
            "sorted",
            "by",
            "age",
            "descending",
            "are",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id GROUP BY T1.student_id HAVING count ( * )    =   2",
        "query_toks": [
            "select",
            "t1",
            ".",
            "first_name",
            ",",
            "t1",
            ".",
            "middle_name",
            ",",
            "t1",
            ".",
            "last_name",
            ",",
            "t1",
            ".",
            "student_id",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "student_id",
            "group",
            "by",
            "t1",
            ".",
            "student_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "2"
        ],
        "results_raw": [
            [
                "first_name",
                "middle_name",
                "last_name",
                "student_id"
            ],
            [
                "Jarvis",
                "Aaliyah",
                "Carroll",
                4
            ],
            [
                "Reva",
                "Golda",
                "Osinski",
                9
            ],
            [
                "Jordy",
                "Osborne",
                "Rempel",
                14
            ]
        ],
        "response": "There are the first, middle and last names of the students enrolled in 2 degree programs.",
        "response_toks": [
            "There",
            "are",
            "the",
            "first",
            ",",
            "middle",
            "and",
            "last",
            "names",
            "of",
            "the",
            "students",
            "enrolled",
            "in",
            "2",
            "degree",
            "programs",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id GROUP BY T1.student_id HAVING count ( * )    =   2",
        "query_w_results_blank_res": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id GROUP BY T1.student_id HAVING count ( * )    =   2",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "first_name",
            ",",
            "t1",
            ".",
            "middle_name",
            ",",
            "t1",
            ".",
            "last_name",
            ",",
            "t1",
            ".",
            "student_id",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "student_id",
            "group",
            "by",
            "t1",
            ".",
            "student_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "2"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "first_name",
            ",",
            "t1",
            ".",
            "middle_name",
            ",",
            "t1",
            ".",
            "last_name",
            ",",
            "t1",
            ".",
            "student_id",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "student_id",
            "group",
            "by",
            "t1",
            ".",
            "student_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "2"
        ],
        "response_blank_res": "There are the first , middle and last names of the students enrolled in 2 degree programs .",
        "response_toks_blank_res": [
            "There",
            "are",
            "the",
            "first",
            ",",
            "middle",
            "and",
            "last",
            "names",
            "of",
            "the",
            "students",
            "enrolled",
            "in",
            "2",
            "degree",
            "programs",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id GROUP BY T1.student_id HAVING count ( * )    =   2",
        "query_toks": [
            "select",
            "t1",
            ".",
            "student_id",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "student_id",
            "group",
            "by",
            "t1",
            ".",
            "student_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "2"
        ],
        "results_raw": [
            [
                "student_id"
            ],
            [
                4
            ],
            [
                9
            ],
            [
                14
            ]
        ],
        "response": "There are ids of the students enrolled in 2 degree programs.",
        "response_toks": [
            "There",
            "are",
            "ids",
            "of",
            "the",
            "students",
            "enrolled",
            "in",
            "2",
            "degree",
            "programs",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id GROUP BY T1.student_id HAVING count ( * )    =   2",
        "query_w_results_blank_res": "SELECT T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id GROUP BY T1.student_id HAVING count ( * )    =   2",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "student_id",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "student_id",
            "group",
            "by",
            "t1",
            ".",
            "student_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "2"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "student_id",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "student_id",
            "group",
            "by",
            "t1",
            ".",
            "student_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "2"
        ],
        "response_blank_res": "There are ids of the students enrolled in 2 degree programs .",
        "response_toks_blank_res": [
            "There",
            "are",
            "ids",
            "of",
            "the",
            "students",
            "enrolled",
            "in",
            "2",
            "degree",
            "programs",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT email_address FROM Students where student_id  =  4",
        "query_toks": [
            "select",
            "email_address",
            "from",
            "students",
            "where",
            "student_id",
            "=",
            "4"
        ],
        "results_raw": [
            [
                "email_address"
            ],
            [
                "jillian26@example.net"
            ]
        ],
        "response": "the email address of the student with id 4 is jillian26@example.net.",
        "response_toks": [
            "the",
            "email",
            "address",
            "of",
            "the",
            "student",
            "with",
            "id",
            "4",
            "is",
            "jillian26",
            "@",
            "example.net",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT email_address FROM Students where student_id  =  4",
        "query_w_results_blank_res": "SELECT email_address FROM Students where student_id  =  4",
        "query_toks_w_results": [
            "select",
            "email_address",
            "from",
            "students",
            "where",
            "student_id",
            "=",
            "4"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "email_address",
            "from",
            "students",
            "where",
            "student_id",
            "=",
            "4"
        ],
        "response_blank_res": "the email address of the student with id 4 is jillian26 @ example.net .",
        "response_toks_blank_res": [
            "the",
            "email",
            "address",
            "of",
            "the",
            "student",
            "with",
            "id",
            "4",
            "is",
            "jillian26",
            "@",
            "example.net",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT date_first_registered FROM Students where first_name  =  'Timmothy' and middle_name  =  'Anna' and last_name  =  'Ward'",
        "query_toks": [
            "select",
            "date_first_registered",
            "from",
            "students",
            "where",
            "first_name",
            "=",
            "'timmothy'",
            "and",
            "middle_name",
            "=",
            "'anna'",
            "and",
            "last_name",
            "=",
            "'ward'"
        ],
        "results_raw": [
            [
                "date_first_registered"
            ],
            [
                "1971-02-05 07:28:23"
            ]
        ],
        "response": "The date first registered of the student Timothy Anna Ward is 1971-02-05 07:28:23.",
        "response_toks": [
            "The",
            "date",
            "first",
            "registered",
            "of",
            "the",
            "student",
            "Timothy",
            "Anna",
            "Ward",
            "is",
            "1971-02-05",
            "07:28:23",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT date_first_registered FROM Students where first_name  =  'Timmothy' and middle_name  =  'Anna' and last_name  =  'Ward'",
        "query_w_results_blank_res": "SELECT date_first_registered FROM Students where first_name  =  'Timmothy' and middle_name  =  'Anna' and last_name  =  'Ward'",
        "query_toks_w_results": [
            "select",
            "date_first_registered",
            "from",
            "students",
            "where",
            "first_name",
            "=",
            "'timmothy'",
            "and",
            "middle_name",
            "=",
            "'anna'",
            "and",
            "last_name",
            "=",
            "'ward'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "date_first_registered",
            "from",
            "students",
            "where",
            "first_name",
            "=",
            "'timmothy'",
            "and",
            "middle_name",
            "=",
            "'anna'",
            "and",
            "last_name",
            "=",
            "'ward'"
        ],
        "response_blank_res": "The date first registered of the student Timothy Anna Ward is 1971-02-05 07:28:23 .",
        "response_toks_blank_res": [
            "The",
            "date",
            "first",
            "registered",
            "of",
            "the",
            "student",
            "Timothy",
            "Anna",
            "Ward",
            "is",
            "1971-02-05",
            "07:28:23",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT count ( * )  FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T1.state   =   'Virginia'",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "owners",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "owner_id",
            "=",
            "t2",
            ".",
            "owner_id",
            "where",
            "t1",
            ".",
            "state",
            "=",
            "'virginia'"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                1
            ]
        ],
        "response": "The number of dog owners who live in Virginia is 1.",
        "response_toks": [
            "The",
            "number",
            "of",
            "dog",
            "owners",
            "who",
            "live",
            "in",
            "Virginia",
            "is",
            "1",
            "."
        ],
        "results_map": {
            "result0": "1"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T1.state   =   'Virginia' | 1 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T1.state   =   'Virginia' | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "owners",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "owner_id",
            "=",
            "t2",
            ".",
            "owner_id",
            "where",
            "t1",
            ".",
            "state",
            "=",
            "'virginia'",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "owners",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "owner_id",
            "=",
            "t2",
            ".",
            "owner_id",
            "where",
            "t1",
            ".",
            "state",
            "=",
            "'virginia'",
            "result0"
        ],
        "response_blank_res": "The number of dog owners who live in Virginia is result0 .",
        "response_toks_blank_res": [
            "The",
            "number",
            "of",
            "dog",
            "owners",
            "who",
            "live",
            "in",
            "Virginia",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT T1.first_name, T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T1.state   =   'Virginia'",
        "query_toks": [
            "select",
            "t1",
            ".",
            "first_name",
            ",",
            "t1",
            ".",
            "last_name",
            "from",
            "owners",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "owner_id",
            "=",
            "t2",
            ".",
            "owner_id",
            "where",
            "t1",
            ".",
            "state",
            "=",
            "'virginia'"
        ],
        "results_raw": [
            [
                "first_name",
                "last_name"
            ],
            [
                "Melisa",
                "DuBuque"
            ]
        ],
        "response": "The first and last name of the dog owner who lives in Virginia is Melisa DuBuque.",
        "response_toks": [
            "The",
            "first",
            "and",
            "last",
            "name",
            "of",
            "the",
            "dog",
            "owner",
            "who",
            "lives",
            "in",
            "Virginia",
            "is",
            "Melisa",
            "DuBuque",
            "."
        ],
        "results_map": {
            "result0": "Melisa",
            "result1": "DuBuque"
        },
        "results_blank_res": "result0 result1 ",
        "query_w_results": "SELECT T1.first_name, T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T1.state   =   'Virginia' | Melisa DuBuque ",
        "query_w_results_blank_res": "SELECT T1.first_name, T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T1.state   =   'Virginia' | result0 result1 ",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "first_name",
            ",",
            "t1",
            ".",
            "last_name",
            "from",
            "owners",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "owner_id",
            "=",
            "t2",
            ".",
            "owner_id",
            "where",
            "t1",
            ".",
            "state",
            "=",
            "'virginia'",
            "Melisa",
            "DuBuque"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "first_name",
            ",",
            "t1",
            ".",
            "last_name",
            "from",
            "owners",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "owner_id",
            "=",
            "t2",
            ".",
            "owner_id",
            "where",
            "t1",
            ".",
            "state",
            "=",
            "'virginia'",
            "result0",
            "result1"
        ],
        "response_blank_res": "The first and last name of the dog owner who lives in Virginia is result0 result1 .",
        "response_toks_blank_res": [
            "The",
            "first",
            "and",
            "last",
            "name",
            "of",
            "the",
            "dog",
            "owner",
            "who",
            "lives",
            "in",
            "Virginia",
            "is",
            "result0",
            "result1",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T1.state   =   'Virginia'",
        "query_toks": [
            "select",
            "t2",
            ".",
            "name",
            "from",
            "owners",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "owner_id",
            "=",
            "t2",
            ".",
            "owner_id",
            "where",
            "t1",
            ".",
            "state",
            "=",
            "'virginia'"
        ],
        "results_raw": [
            [
                "name"
            ],
            [
                "Bessie"
            ]
        ],
        "response": "The name of the dog of the owner who lives in Virginia is Bessie.",
        "response_toks": [
            "The",
            "name",
            "of",
            "the",
            "dog",
            "of",
            "the",
            "owner",
            "who",
            "lives",
            "in",
            "Virginia",
            "is",
            "Bessie",
            "."
        ],
        "results_map": {
            "result0": "Bessie"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T1.state   =   'Virginia' | Bessie ",
        "query_w_results_blank_res": "SELECT T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T1.state   =   'Virginia' | result0 ",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "name",
            "from",
            "owners",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "owner_id",
            "=",
            "t2",
            ".",
            "owner_id",
            "where",
            "t1",
            ".",
            "state",
            "=",
            "'virginia'",
            "Bessie"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "name",
            "from",
            "owners",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "owner_id",
            "=",
            "t2",
            ".",
            "owner_id",
            "where",
            "t1",
            ".",
            "state",
            "=",
            "'virginia'",
            "result0"
        ],
        "response_blank_res": "The name of the dog of the owner who lives in Virginia is result0 .",
        "response_toks_blank_res": [
            "The",
            "name",
            "of",
            "the",
            "dog",
            "of",
            "the",
            "owner",
            "who",
            "lives",
            "in",
            "Virginia",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT T2.breed_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T2.name  =  \"Bessie\"",
        "query_toks": [
            "select",
            "t2",
            ".",
            "breed_code",
            "from",
            "owners",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "owner_id",
            "=",
            "t2",
            ".",
            "owner_id",
            "where",
            "t2",
            ".",
            "name",
            "=",
            "\"bessie\""
        ],
        "results_raw": [
            [
                "breed_code"
            ],
            [
                "BUL"
            ]
        ],
        "response": "The breed code of the dog whose owner name is Bessie is BUL.",
        "response_toks": [
            "The",
            "breed",
            "code",
            "of",
            "the",
            "dog",
            "whose",
            "owner",
            "name",
            "is",
            "Bessie",
            "is",
            "BUL",
            "."
        ],
        "results_map": {
            "result0": "BUL"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT T2.breed_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T2.name  =  \"Bessie\" | BUL ",
        "query_w_results_blank_res": "SELECT T2.breed_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T2.name  =  \"Bessie\" | result0 ",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "breed_code",
            "from",
            "owners",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "owner_id",
            "=",
            "t2",
            ".",
            "owner_id",
            "where",
            "t2",
            ".",
            "name",
            "=",
            "\"bessie\"",
            "BUL"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "breed_code",
            "from",
            "owners",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "owner_id",
            "=",
            "t2",
            ".",
            "owner_id",
            "where",
            "t2",
            ".",
            "name",
            "=",
            "\"bessie\"",
            "result0"
        ],
        "response_blank_res": "The breed code of the dog whose owner name is Bessie is result0 .",
        "response_toks_blank_res": [
            "The",
            "breed",
            "code",
            "of",
            "the",
            "dog",
            "whose",
            "owner",
            "name",
            "is",
            "Bessie",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T2.name  =  \"Bessie\"",
        "query_toks": [
            "select",
            "t2",
            ".",
            "size_code",
            "from",
            "owners",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "owner_id",
            "=",
            "t2",
            ".",
            "owner_id",
            "where",
            "t2",
            ".",
            "name",
            "=",
            "\"bessie\""
        ],
        "results_raw": [
            [
                "size_code"
            ],
            [
                "MED"
            ]
        ],
        "response": "The size code of the dog whose owner name is Bessie is MED.",
        "response_toks": [
            "The",
            "size",
            "code",
            "of",
            "the",
            "dog",
            "whose",
            "owner",
            "name",
            "is",
            "Bessie",
            "is",
            "MED",
            "."
        ],
        "results_map": {
            "result0": "MED"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T2.name  =  \"Bessie\" | MED ",
        "query_w_results_blank_res": "SELECT T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T2.name  =  \"Bessie\" | result0 ",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "size_code",
            "from",
            "owners",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "owner_id",
            "=",
            "t2",
            ".",
            "owner_id",
            "where",
            "t2",
            ".",
            "name",
            "=",
            "\"bessie\"",
            "MED"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "size_code",
            "from",
            "owners",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "owner_id",
            "=",
            "t2",
            ".",
            "owner_id",
            "where",
            "t2",
            ".",
            "name",
            "=",
            "\"bessie\"",
            "result0"
        ],
        "response_blank_res": "The size code of the dog whose owner name is Bessie is result0 .",
        "response_toks_blank_res": [
            "The",
            "size",
            "code",
            "of",
            "the",
            "dog",
            "whose",
            "owner",
            "name",
            "is",
            "Bessie",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "orchestra",
        "query": "SELECT count ( Record_Company )  FROM orchestra",
        "query_toks": [
            "select",
            "count",
            "(",
            "record_company",
            ")",
            "from",
            "orchestra"
        ],
        "results_raw": [
            [
                "count(Record_Company)"
            ],
            [
                12
            ]
        ],
        "response": "There are 12 record companies.",
        "response_toks": [
            "There",
            "are",
            "12",
            "record",
            "companies",
            "."
        ],
        "results_map": {
            "result0": "12"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( Record_Company )  FROM orchestra | 12 ",
        "query_w_results_blank_res": "SELECT count ( Record_Company )  FROM orchestra | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "record_company",
            ")",
            "from",
            "orchestra",
            "12"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "record_company",
            ")",
            "from",
            "orchestra",
            "result0"
        ],
        "response_blank_res": "There are result0 record companies .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "record",
            "companies",
            "."
        ]
    },
    {
        "database_id": "orchestra",
        "query": "SELECT count ( Orchestra_ID )  FROM orchestra",
        "query_toks": [
            "select",
            "count",
            "(",
            "orchestra_id",
            ")",
            "from",
            "orchestra"
        ],
        "results_raw": [
            [
                "count(Orchestra_ID)"
            ],
            [
                12
            ]
        ],
        "response": "There are 12 orchestras.",
        "response_toks": [
            "There",
            "are",
            "12",
            "orchestras",
            "."
        ],
        "results_map": {
            "result0": "12"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( Orchestra_ID )  FROM orchestra | 12 ",
        "query_w_results_blank_res": "SELECT count ( Orchestra_ID )  FROM orchestra | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "orchestra_id",
            ")",
            "from",
            "orchestra",
            "12"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "orchestra_id",
            ")",
            "from",
            "orchestra",
            "result0"
        ],
        "response_blank_res": "There are result0 orchestras .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "orchestras",
            "."
        ]
    },
    {
        "database_id": "orchestra",
        "query": "select count ( Orchestra )  from orchestra group by Conductor_ID having count ( orchestra ) >1",
        "query_toks": [
            "select",
            "count",
            "(",
            "orchestra",
            ")",
            "from",
            "orchestra",
            "group",
            "by",
            "conductor_id",
            "having",
            "count",
            "(",
            "orchestra",
            ")",
            ">",
            "1"
        ],
        "results_raw": [
            [
                "count(Orchestra)"
            ]
        ],
        "response": "No. There is no conductor working for more than one orchestra.",
        "response_toks": [
            "No",
            ".",
            "There",
            "is",
            "no",
            "conductor",
            "working",
            "for",
            "more",
            "than",
            "one",
            "orchestra",
            "."
        ],
        "results_map": null,
        "results_blank_res": null,
        "query_w_results": null,
        "query_w_results_blank_res": null,
        "query_toks_w_results": null,
        "query_toks_w_results_blank_res": null,
        "response_blank_res": null,
        "response_toks_blank_res": null
    },
    {
        "database_id": "orchestra",
        "query": "select orchestra from orchestra order by Year_of_Founded",
        "query_toks": [
            "select",
            "orchestra",
            "from",
            "orchestra",
            "order",
            "by",
            "year_of_founded"
        ],
        "results_raw": [
            [
                "Orchestra"
            ],
            [
                "Royal Danish Orchestra"
            ],
            [
                "Detroit Symphony Orchestra"
            ],
            [
                "Seattle Symphony Orchestra"
            ]
        ],
        "response": "The names of the orchestras are listed by the date they were founded starting with the oldest.",
        "response_toks": [
            "The",
            "names",
            "of",
            "the",
            "orchestras",
            "are",
            "listed",
            "by",
            "the",
            "date",
            "they",
            "were",
            "founded",
            "starting",
            "with",
            "the",
            "oldest",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "select orchestra from orchestra order by Year_of_Founded",
        "query_w_results_blank_res": "select orchestra from orchestra order by Year_of_Founded",
        "query_toks_w_results": [
            "select",
            "orchestra",
            "from",
            "orchestra",
            "order",
            "by",
            "year_of_founded"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "orchestra",
            "from",
            "orchestra",
            "order",
            "by",
            "year_of_founded"
        ],
        "response_blank_res": "The names of the orchestras are listed by the date they were founded starting with the oldest .",
        "response_toks_blank_res": [
            "The",
            "names",
            "of",
            "the",
            "orchestras",
            "are",
            "listed",
            "by",
            "the",
            "date",
            "they",
            "were",
            "founded",
            "starting",
            "with",
            "the",
            "oldest",
            "."
        ]
    },
    {
        "database_id": "orchestra",
        "query": "select year_of_founded  from orchestra where orchestra = 'Royal Danish Orchestra'",
        "query_toks": [
            "select",
            "year_of_founded",
            "from",
            "orchestra",
            "where",
            "orchestra",
            "=",
            "'royal",
            "danish",
            "orchestra'"
        ],
        "results_raw": [
            [
                "Year_of_Founded"
            ],
            [
                2002.0
            ]
        ],
        "response": "The year when the orchestra named 'Royal Danish Orchestra' was founded was 2002.",
        "response_toks": [
            "The",
            "year",
            "when",
            "the",
            "orchestra",
            "named",
            "'Royal",
            "Danish",
            "Orchestra",
            "'",
            "was",
            "founded",
            "was",
            "2002",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "select year_of_founded  from orchestra where orchestra = 'Royal Danish Orchestra'",
        "query_w_results_blank_res": "select year_of_founded  from orchestra where orchestra = 'Royal Danish Orchestra'",
        "query_toks_w_results": [
            "select",
            "year_of_founded",
            "from",
            "orchestra",
            "where",
            "orchestra",
            "=",
            "'royal",
            "danish",
            "orchestra'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "year_of_founded",
            "from",
            "orchestra",
            "where",
            "orchestra",
            "=",
            "'royal",
            "danish",
            "orchestra'"
        ],
        "response_blank_res": "The year when the orchestra named 'Royal Danish Orchestra ' was founded was 2002 .",
        "response_toks_blank_res": [
            "The",
            "year",
            "when",
            "the",
            "orchestra",
            "named",
            "'Royal",
            "Danish",
            "Orchestra",
            "'",
            "was",
            "founded",
            "was",
            "2002",
            "."
        ]
    },
    {
        "database_id": "orchestra",
        "query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT ( * )  DESC LIMIT 1",
        "query_toks": [
            "select",
            "record_company",
            "from",
            "orchestra",
            "group",
            "by",
            "record_company",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Record_Company"
            ],
            [
                "Decca Records"
            ]
        ],
        "response": "The record company which is shared by the most orchestras is Decca Records.",
        "response_toks": [
            "The",
            "record",
            "company",
            "which",
            "is",
            "shared",
            "by",
            "the",
            "most",
            "orchestras",
            "is",
            "Decca",
            "Records",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT ( * )  DESC LIMIT 1",
        "query_w_results_blank_res": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT ( * )  DESC LIMIT 1",
        "query_toks_w_results": [
            "select",
            "record_company",
            "from",
            "orchestra",
            "group",
            "by",
            "record_company",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "record_company",
            "from",
            "orchestra",
            "group",
            "by",
            "record_company",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "response_blank_res": "The record company which is shared by the most orchestras is Decca Records .",
        "response_toks_blank_res": [
            "The",
            "record",
            "company",
            "which",
            "is",
            "shared",
            "by",
            "the",
            "most",
            "orchestras",
            "is",
            "Decca",
            "Records",
            "."
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT count ( * )  FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline   =   T1.uid WHERE T1.Airline   =   \"United Airlines\" AND T2.DestAirport   =   \"ASY\"",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "airlines",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t2",
            ".",
            "airline",
            "=",
            "t1",
            ".",
            "uid",
            "where",
            "t1",
            ".",
            "airline",
            "=",
            "\"united",
            "airlines\"",
            "and",
            "t2",
            ".",
            "destairport",
            "=",
            "\"asy\""
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                0
            ]
        ],
        "response": "There is 0 'United Airlines' flight go to the airport ASY.",
        "response_toks": [
            "There",
            "is",
            "0",
            "'United",
            "Airlines",
            "'",
            "flight",
            "go",
            "to",
            "the",
            "airport",
            "ASY",
            "."
        ],
        "results_map": {
            "result0": "0"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline   =   T1.uid WHERE T1.Airline   =   \"United Airlines\" AND T2.DestAirport   =   \"ASY\" | 0 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline   =   T1.uid WHERE T1.Airline   =   \"United Airlines\" AND T2.DestAirport   =   \"ASY\" | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "airlines",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t2",
            ".",
            "airline",
            "=",
            "t1",
            ".",
            "uid",
            "where",
            "t1",
            ".",
            "airline",
            "=",
            "\"united",
            "airlines\"",
            "and",
            "t2",
            ".",
            "destairport",
            "=",
            "\"asy\"",
            "0"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "airlines",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t2",
            ".",
            "airline",
            "=",
            "t1",
            ".",
            "uid",
            "where",
            "t1",
            ".",
            "airline",
            "=",
            "\"united",
            "airlines\"",
            "and",
            "t2",
            ".",
            "destairport",
            "=",
            "\"asy\"",
            "result0"
        ],
        "response_blank_res": "There is result0 'United Airlines ' flight go to the airport ASY .",
        "response_toks_blank_res": [
            "There",
            "is",
            "result0",
            "'United",
            "Airlines",
            "'",
            "flight",
            "go",
            "to",
            "the",
            "airport",
            "ASY",
            "."
        ]
    },
    {
        "database_id": "flight_2",
        "query": "select uid from airlines where airline  =  \"United Airlines\"",
        "query_toks": [
            "select",
            "uid",
            "from",
            "airlines",
            "where",
            "airline",
            "=",
            "\"united",
            "airlines\""
        ],
        "results_raw": [
            [
                "uid"
            ],
            [
                1
            ]
        ],
        "response": "1 is the id of airline \"United Airlines\".",
        "response_toks": [
            "1",
            "is",
            "the",
            "id",
            "of",
            "airline",
            "``",
            "United",
            "Airlines",
            "''",
            "."
        ],
        "results_map": {
            "result0": "1"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "select uid from airlines where airline  =  \"United Airlines\" | 1 ",
        "query_w_results_blank_res": "select uid from airlines where airline  =  \"United Airlines\" | result0 ",
        "query_toks_w_results": [
            "select",
            "uid",
            "from",
            "airlines",
            "where",
            "airline",
            "=",
            "\"united",
            "airlines\"",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "uid",
            "from",
            "airlines",
            "where",
            "airline",
            "=",
            "\"united",
            "airlines\"",
            "result0"
        ],
        "response_blank_res": "result0 is the id of airline `` United Airlines '' .",
        "response_toks_blank_res": [
            "result0",
            "is",
            "the",
            "id",
            "of",
            "airline",
            "``",
            "United",
            "Airlines",
            "''",
            "."
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT count ( * )  FROM FLIGHTS WHERE airline  =  1 and DestAirport   =   \" ASY\"",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "where",
            "airline",
            "=",
            "1",
            "and",
            "destairport",
            "=",
            "\"",
            "asy\""
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                1
            ]
        ],
        "response": "there is one flight with airline id 1 goes to the destination airport ASY.",
        "response_toks": [
            "there",
            "is",
            "one",
            "flight",
            "with",
            "airline",
            "id",
            "1",
            "goes",
            "to",
            "the",
            "destination",
            "airport",
            "ASY",
            "."
        ],
        "results_map": {
            "result0": "1"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM FLIGHTS WHERE airline  =  1 and DestAirport   =   \" ASY\" | 1 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM FLIGHTS WHERE airline  =  1 and DestAirport   =   \" ASY\" | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "where",
            "airline",
            "=",
            "1",
            "and",
            "destairport",
            "=",
            "\"",
            "asy\"",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "where",
            "airline",
            "=",
            "1",
            "and",
            "destairport",
            "=",
            "\"",
            "asy\"",
            "result0"
        ],
        "response_blank_res": "there is one flight with airline id result0 goes to the destination airport ASY .",
        "response_toks_blank_res": [
            "there",
            "is",
            "one",
            "flight",
            "with",
            "airline",
            "id",
            "result0",
            "goes",
            "to",
            "the",
            "destination",
            "airport",
            "ASY",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT count ( * )  FROM CAR_names where model  =  \"volvo\"",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "car_names",
            "where",
            "model",
            "=",
            "\"volvo\""
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                6
            ]
        ],
        "response": "There are 6 cars in the model of volvo",
        "response_toks": [
            "There",
            "are",
            "6",
            "cars",
            "in",
            "the",
            "model",
            "of",
            "volvo"
        ],
        "results_map": {
            "result0": "6"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM CAR_names where model  =  \"volvo\" | 6 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM CAR_names where model  =  \"volvo\" | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "car_names",
            "where",
            "model",
            "=",
            "\"volvo\"",
            "6"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "car_names",
            "where",
            "model",
            "=",
            "\"volvo\"",
            "result0"
        ],
        "response_blank_res": "There are result0 cars in the model of volvo",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "cars",
            "in",
            "the",
            "model",
            "of",
            "volvo"
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT T1.id FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1",
        "query_toks": [
            "select",
            "t1",
            ".",
            "id",
            "from",
            "cars_data",
            "as",
            "t1",
            "join",
            "car_names",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "makeid",
            "where",
            "t2",
            ".",
            "model",
            "=",
            "'volvo'",
            "order",
            "by",
            "t1",
            ".",
            "accelerate",
            "asc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Id"
            ],
            [
                283
            ]
        ],
        "response": "The id of the car that is in the model of volvo and has the least accelerate is 283",
        "response_toks": [
            "The",
            "id",
            "of",
            "the",
            "car",
            "that",
            "is",
            "in",
            "the",
            "model",
            "of",
            "volvo",
            "and",
            "has",
            "the",
            "least",
            "accelerate",
            "is",
            "283"
        ],
        "results_map": {
            "result0": "283"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT T1.id FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1 | 283 ",
        "query_w_results_blank_res": "SELECT T1.id FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "id",
            "from",
            "cars_data",
            "as",
            "t1",
            "join",
            "car_names",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "makeid",
            "where",
            "t2",
            ".",
            "model",
            "=",
            "'volvo'",
            "order",
            "by",
            "t1",
            ".",
            "accelerate",
            "asc",
            "limit",
            "1",
            "283"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "id",
            "from",
            "cars_data",
            "as",
            "t1",
            "join",
            "car_names",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "makeid",
            "where",
            "t2",
            ".",
            "model",
            "=",
            "'volvo'",
            "order",
            "by",
            "t1",
            ".",
            "accelerate",
            "asc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "The id of the car that is in the model of volvo and has the least accelerate is result0",
        "response_toks_blank_res": [
            "The",
            "id",
            "of",
            "the",
            "car",
            "that",
            "is",
            "in",
            "the",
            "model",
            "of",
            "volvo",
            "and",
            "has",
            "the",
            "least",
            "accelerate",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1",
        "query_toks": [
            "select",
            "t1",
            ".",
            "cylinders",
            "from",
            "cars_data",
            "as",
            "t1",
            "join",
            "car_names",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "makeid",
            "where",
            "t2",
            ".",
            "model",
            "=",
            "'volvo'",
            "order",
            "by",
            "t1",
            ".",
            "accelerate",
            "asc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Cylinders"
            ],
            [
                6
            ]
        ],
        "response": "The volvo car having the least accelerate has 6 cylinders",
        "response_toks": [
            "The",
            "volvo",
            "car",
            "having",
            "the",
            "least",
            "accelerate",
            "has",
            "6",
            "cylinders"
        ],
        "results_map": {
            "result0": "6"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1 | 6 ",
        "query_w_results_blank_res": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "cylinders",
            "from",
            "cars_data",
            "as",
            "t1",
            "join",
            "car_names",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "makeid",
            "where",
            "t2",
            ".",
            "model",
            "=",
            "'volvo'",
            "order",
            "by",
            "t1",
            ".",
            "accelerate",
            "asc",
            "limit",
            "1",
            "6"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "cylinders",
            "from",
            "cars_data",
            "as",
            "t1",
            "join",
            "car_names",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "makeid",
            "where",
            "t2",
            ".",
            "model",
            "=",
            "'volvo'",
            "order",
            "by",
            "t1",
            ".",
            "accelerate",
            "asc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "The volvo car having the least accelerate has result0 cylinders",
        "response_toks_blank_res": [
            "The",
            "volvo",
            "car",
            "having",
            "the",
            "least",
            "accelerate",
            "has",
            "result0",
            "cylinders"
        ]
    },
    {
        "database_id": "network_1",
        "query": "SELECT count ( * )  FROM Highschooler",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "highschooler"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                16
            ]
        ],
        "response": "There are 16 highschoolers.",
        "response_toks": [
            "There",
            "are",
            "16",
            "highschoolers",
            "."
        ],
        "results_map": {
            "result0": "16"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM Highschooler | 16 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM Highschooler | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "highschooler",
            "16"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "highschooler",
            "result0"
        ],
        "response_blank_res": "There are result0 highschoolers .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "highschoolers",
            "."
        ]
    },
    {
        "database_id": "network_1",
        "query": "SELECT count ( * )  FROM Friend",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "friend"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                20
            ]
        ],
        "response": "There are 20 pairs of friends.",
        "response_toks": [
            "There",
            "are",
            "20",
            "pairs",
            "of",
            "friends",
            "."
        ],
        "results_map": {
            "result0": "20"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM Friend | 20 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM Friend | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "friend",
            "20"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "friend",
            "result0"
        ],
        "response_blank_res": "There are result0 pairs of friends .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "pairs",
            "of",
            "friends",
            "."
        ]
    },
    {
        "database_id": "network_1",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id   =   T2.id",
        "query_toks": [
            "select",
            "t2",
            ".",
            "name",
            "from",
            "friend",
            "as",
            "t1",
            "join",
            "highschooler",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "id"
        ],
        "results_raw": [
            [
                "name"
            ],
            [
                "Jordan"
            ],
            [
                "Jordan"
            ],
            [
                "Gabriel"
            ]
        ],
        "response": "The following table shows the names of all the highschoolers who have friends.",
        "response_toks": [
            "The",
            "following",
            "table",
            "shows",
            "the",
            "names",
            "of",
            "all",
            "the",
            "highschoolers",
            "who",
            "have",
            "friends",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id   =   T2.id",
        "query_w_results_blank_res": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id   =   T2.id",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "name",
            "from",
            "friend",
            "as",
            "t1",
            "join",
            "highschooler",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "id"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "name",
            "from",
            "friend",
            "as",
            "t1",
            "join",
            "highschooler",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "id"
        ],
        "response_blank_res": "The following table shows the names of all the highschoolers who have friends .",
        "response_toks_blank_res": [
            "The",
            "following",
            "table",
            "shows",
            "the",
            "names",
            "of",
            "all",
            "the",
            "highschoolers",
            "who",
            "have",
            "friends",
            "."
        ]
    },
    {
        "database_id": "network_1",
        "query": "SELECT T2.name ,  count ( * )  FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id   =   T2.id GROUP BY T1.student_id",
        "query_toks": [
            "select",
            "t2",
            ".",
            "name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "friend",
            "as",
            "t1",
            "join",
            "highschooler",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "id",
            "group",
            "by",
            "t1",
            ".",
            "student_id"
        ],
        "results_raw": [
            [
                "name",
                "count(*)"
            ],
            [
                "Haley",
                1
            ],
            [
                "Alexis",
                2
            ],
            [
                "Jordan",
                1
            ]
        ],
        "response": "The following table shows the names of all the highschoolers who have friends and their corresponding number of friends.",
        "response_toks": [
            "The",
            "following",
            "table",
            "shows",
            "the",
            "names",
            "of",
            "all",
            "the",
            "highschoolers",
            "who",
            "have",
            "friends",
            "and",
            "their",
            "corresponding",
            "number",
            "of",
            "friends",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T2.name ,  count ( * )  FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id   =   T2.id GROUP BY T1.student_id",
        "query_w_results_blank_res": "SELECT T2.name ,  count ( * )  FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id   =   T2.id GROUP BY T1.student_id",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "friend",
            "as",
            "t1",
            "join",
            "highschooler",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "id",
            "group",
            "by",
            "t1",
            ".",
            "student_id"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "friend",
            "as",
            "t1",
            "join",
            "highschooler",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "id",
            "group",
            "by",
            "t1",
            ".",
            "student_id"
        ],
        "response_blank_res": "The following table shows the names of all the highschoolers who have friends and their corresponding number of friends .",
        "response_toks_blank_res": [
            "The",
            "following",
            "table",
            "shows",
            "the",
            "names",
            "of",
            "all",
            "the",
            "highschoolers",
            "who",
            "have",
            "friends",
            "and",
            "their",
            "corresponding",
            "number",
            "of",
            "friends",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id   =   T2.degree_program_id WHERE degree_summary_name   =   'Master'",
        "query_toks": [
            "select",
            "distinct",
            "t2",
            ".",
            "semester_id",
            "from",
            "degree_programs",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "degree_program_id",
            "=",
            "t2",
            ".",
            "degree_program_id",
            "where",
            "degree_summary_name",
            "=",
            "'master'"
        ],
        "results_raw": [
            [
                "semester_id"
            ],
            [
                13
            ],
            [
                1
            ],
            [
                5
            ]
        ],
        "response": "These are the ids of the semesters that bachelor students got enrolled in.",
        "response_toks": [
            "These",
            "are",
            "the",
            "ids",
            "of",
            "the",
            "semesters",
            "that",
            "bachelor",
            "students",
            "got",
            "enrolled",
            "in",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id   =   T2.degree_program_id WHERE degree_summary_name   =   'Master'",
        "query_w_results_blank_res": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id   =   T2.degree_program_id WHERE degree_summary_name   =   'Master'",
        "query_toks_w_results": [
            "select",
            "distinct",
            "t2",
            ".",
            "semester_id",
            "from",
            "degree_programs",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "degree_program_id",
            "=",
            "t2",
            ".",
            "degree_program_id",
            "where",
            "degree_summary_name",
            "=",
            "'master'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "t2",
            ".",
            "semester_id",
            "from",
            "degree_programs",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "degree_program_id",
            "=",
            "t2",
            ".",
            "degree_program_id",
            "where",
            "degree_summary_name",
            "=",
            "'master'"
        ],
        "response_blank_res": "These are the ids of the semesters that bachelor students got enrolled in .",
        "response_toks_blank_res": [
            "These",
            "are",
            "the",
            "ids",
            "of",
            "the",
            "semesters",
            "that",
            "bachelor",
            "students",
            "got",
            "enrolled",
            "in",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT T1.degree_summary_description FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE T2.student_id  =  14",
        "query_toks": [
            "select",
            "t1",
            ".",
            "degree_summary_description",
            "from",
            "degree_programs",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "degree_program_id",
            "=",
            "t2",
            ".",
            "degree_program_id",
            "where",
            "t2",
            ".",
            "student_id",
            "=",
            "14"
        ],
        "results_raw": [
            [
                "degree_summary_description"
            ],
            [
                "qui"
            ],
            [
                "officiis"
            ]
        ],
        "response": "The degree summary description for the student with id 14 are qui and officiis.",
        "response_toks": [
            "The",
            "degree",
            "summary",
            "description",
            "for",
            "the",
            "student",
            "with",
            "id",
            "14",
            "are",
            "qui",
            "and",
            "officiis",
            "."
        ],
        "results_map": {
            "result0": "qui",
            "result1": "officiis"
        },
        "results_blank_res": "result0 result1 ",
        "query_w_results": "SELECT T1.degree_summary_description FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE T2.student_id  =  14 | qui officiis ",
        "query_w_results_blank_res": "SELECT T1.degree_summary_description FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE T2.student_id  =  14 | result0 result1 ",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "degree_summary_description",
            "from",
            "degree_programs",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "degree_program_id",
            "=",
            "t2",
            ".",
            "degree_program_id",
            "where",
            "t2",
            ".",
            "student_id",
            "=",
            "14",
            "qui",
            "officiis"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "degree_summary_description",
            "from",
            "degree_programs",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "degree_program_id",
            "=",
            "t2",
            ".",
            "degree_program_id",
            "where",
            "t2",
            ".",
            "student_id",
            "=",
            "14",
            "result0",
            "result1"
        ],
        "response_blank_res": "The degree summary description for the student with id 14 are result0 and result1 .",
        "response_toks_blank_res": [
            "The",
            "degree",
            "summary",
            "description",
            "for",
            "the",
            "student",
            "with",
            "id",
            "14",
            "are",
            "result0",
            "and",
            "result1",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId   =   T2.Id ORDER BY T2.mpg DESC LIMIT 1",
        "query_toks": [
            "select",
            "t1",
            ".",
            "model",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "cars_data",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t2",
            ".",
            "id",
            "order",
            "by",
            "t2",
            ".",
            "mpg",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Model"
            ],
            [
                "citroen"
            ]
        ],
        "response": "Citroen is the model that saves the most gasoline.",
        "response_toks": [
            "Citroen",
            "is",
            "the",
            "model",
            "that",
            "saves",
            "the",
            "most",
            "gasoline",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId   =   T2.Id ORDER BY T2.mpg DESC LIMIT 1",
        "query_w_results_blank_res": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId   =   T2.Id ORDER BY T2.mpg DESC LIMIT 1",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "model",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "cars_data",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t2",
            ".",
            "id",
            "order",
            "by",
            "t2",
            ".",
            "mpg",
            "desc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "model",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "cars_data",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t2",
            ".",
            "id",
            "order",
            "by",
            "t2",
            ".",
            "mpg",
            "desc",
            "limit",
            "1"
        ],
        "response_blank_res": "Citroen is the model that saves the most gasoline .",
        "response_toks_blank_res": [
            "Citroen",
            "is",
            "the",
            "model",
            "that",
            "saves",
            "the",
            "most",
            "gasoline",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId   =   T2.Id ORDER BY T2.horsepower DESC LIMIT 1",
        "query_toks": [
            "select",
            "t1",
            ".",
            "model",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "cars_data",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t2",
            ".",
            "id",
            "order",
            "by",
            "t2",
            ".",
            "horsepower",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Model"
            ],
            [
                "ford"
            ]
        ],
        "response": "Ford is the model that has the highest horsepower.",
        "response_toks": [
            "Ford",
            "is",
            "the",
            "model",
            "that",
            "has",
            "the",
            "highest",
            "horsepower",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId   =   T2.Id ORDER BY T2.horsepower DESC LIMIT 1",
        "query_w_results_blank_res": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId   =   T2.Id ORDER BY T2.horsepower DESC LIMIT 1",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "model",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "cars_data",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t2",
            ".",
            "id",
            "order",
            "by",
            "t2",
            ".",
            "horsepower",
            "desc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "model",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "cars_data",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t2",
            ".",
            "id",
            "order",
            "by",
            "t2",
            ".",
            "horsepower",
            "desc",
            "limit",
            "1"
        ],
        "response_blank_res": "Ford is the model that has the highest horsepower .",
        "response_toks_blank_res": [
            "Ford",
            "is",
            "the",
            "model",
            "that",
            "has",
            "the",
            "highest",
            "horsepower",
            "."
        ]
    },
    {
        "database_id": "employee_hire_evaluation",
        "query": "SELECT Age from employee where Name = 'George Chuter'",
        "query_toks": [
            "select",
            "age",
            "from",
            "employee",
            "where",
            "name",
            "=",
            "'george",
            "chuter'"
        ],
        "results_raw": [
            [
                "Age"
            ],
            [
                23
            ]
        ],
        "response": "George Chuter is 23 years old",
        "response_toks": [
            "George",
            "Chuter",
            "is",
            "23",
            "years",
            "old"
        ],
        "results_map": {
            "result0": "23"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT Age from employee where Name = 'George Chuter' | 23 ",
        "query_w_results_blank_res": "SELECT Age from employee where Name = 'George Chuter' | result0 ",
        "query_toks_w_results": [
            "select",
            "age",
            "from",
            "employee",
            "where",
            "name",
            "=",
            "'george",
            "chuter'",
            "23"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "age",
            "from",
            "employee",
            "where",
            "name",
            "=",
            "'george",
            "chuter'",
            "result0"
        ],
        "response_blank_res": "George Chuter is result0 years old",
        "response_toks_blank_res": [
            "George",
            "Chuter",
            "is",
            "result0",
            "years",
            "old"
        ]
    },
    {
        "database_id": "employee_hire_evaluation",
        "query": "SELECT Age from employee where Name = 'Lee Mears'",
        "query_toks": [
            "select",
            "age",
            "from",
            "employee",
            "where",
            "name",
            "=",
            "'lee",
            "mears'"
        ],
        "results_raw": [
            [
                "Age"
            ],
            [
                29
            ]
        ],
        "response": "lee mearsis 29  years old",
        "response_toks": [
            "lee",
            "mearsis",
            "29",
            "years",
            "old"
        ],
        "results_map": {
            "result0": "29"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT Age from employee where Name = 'Lee Mears' | 29 ",
        "query_w_results_blank_res": "SELECT Age from employee where Name = 'Lee Mears' | result0 ",
        "query_toks_w_results": [
            "select",
            "age",
            "from",
            "employee",
            "where",
            "name",
            "=",
            "'lee",
            "mears'",
            "29"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "age",
            "from",
            "employee",
            "where",
            "name",
            "=",
            "'lee",
            "mears'",
            "result0"
        ],
        "response_blank_res": "lee mearsis result0 years old",
        "response_toks_blank_res": [
            "lee",
            "mearsis",
            "result0",
            "years",
            "old"
        ]
    },
    {
        "database_id": "employee_hire_evaluation",
        "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
        "query_toks": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "employee",
            "as",
            "t1",
            "join",
            "evaluation",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "employee_id",
            "=",
            "t2",
            ".",
            "employee_id",
            "order",
            "by",
            "t2",
            ".",
            "bonus",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Louis Deacon"
            ]
        ],
        "response": "Louis Deacon got the highest one time bonus",
        "response_toks": [
            "Louis",
            "Deacon",
            "got",
            "the",
            "highest",
            "one",
            "time",
            "bonus"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
        "query_w_results_blank_res": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "employee",
            "as",
            "t1",
            "join",
            "evaluation",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "employee_id",
            "=",
            "t2",
            ".",
            "employee_id",
            "order",
            "by",
            "t2",
            ".",
            "bonus",
            "desc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "employee",
            "as",
            "t1",
            "join",
            "evaluation",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "employee_id",
            "=",
            "t2",
            ".",
            "employee_id",
            "order",
            "by",
            "t2",
            ".",
            "bonus",
            "desc",
            "limit",
            "1"
        ],
        "response_blank_res": "Louis Deacon got the highest one time bonus",
        "response_toks_blank_res": [
            "Louis",
            "Deacon",
            "got",
            "the",
            "highest",
            "one",
            "time",
            "bonus"
        ]
    },
    {
        "database_id": "poker_player",
        "query": "SELECT Name FROM people WHERE People_ID NOT IN  ( SELECT People_ID FROM poker_player ) ",
        "query_toks": [
            "select",
            "name",
            "from",
            "people",
            "where",
            "people_id",
            "not",
            "in",
            "(",
            "select",
            "people_id",
            "from",
            "poker_player",
            ")"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Roman Bragin"
            ],
            [
                "Sergey Grankin"
            ]
        ],
        "response": "These are the names of people who do not play poker.",
        "response_toks": [
            "These",
            "are",
            "the",
            "names",
            "of",
            "people",
            "who",
            "do",
            "not",
            "play",
            "poker",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Name FROM people WHERE People_ID NOT IN  ( SELECT People_ID FROM poker_player ) ",
        "query_w_results_blank_res": "SELECT Name FROM people WHERE People_ID NOT IN  ( SELECT People_ID FROM poker_player ) ",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "people",
            "where",
            "people_id",
            "not",
            "in",
            "(",
            "select",
            "people_id",
            "from",
            "poker_player",
            ")"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "people",
            "where",
            "people_id",
            "not",
            "in",
            "(",
            "select",
            "people_id",
            "from",
            "poker_player",
            ")"
        ],
        "response_blank_res": "These are the names of people who do not play poker .",
        "response_toks_blank_res": [
            "These",
            "are",
            "the",
            "names",
            "of",
            "people",
            "who",
            "do",
            "not",
            "play",
            "poker",
            "."
        ]
    },
    {
        "database_id": "poker_player",
        "query": "SELECT Name FROM people WHERE People_ID IN  ( SELECT People_ID FROM poker_player ) ",
        "query_toks": [
            "select",
            "name",
            "from",
            "people",
            "where",
            "people_id",
            "in",
            "(",
            "select",
            "people_id",
            "from",
            "poker_player",
            ")"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Aleksey Ostapenko"
            ],
            [
                "Teodor Salparov"
            ],
            [
                "Yevgeni Sivozhelez"
            ]
        ],
        "response": "These are the names of people who play poker.",
        "response_toks": [
            "These",
            "are",
            "the",
            "names",
            "of",
            "people",
            "who",
            "play",
            "poker",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Name FROM people WHERE People_ID IN  ( SELECT People_ID FROM poker_player ) ",
        "query_w_results_blank_res": "SELECT Name FROM people WHERE People_ID IN  ( SELECT People_ID FROM poker_player ) ",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "people",
            "where",
            "people_id",
            "in",
            "(",
            "select",
            "people_id",
            "from",
            "poker_player",
            ")"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "people",
            "where",
            "people_id",
            "in",
            "(",
            "select",
            "people_id",
            "from",
            "poker_player",
            ")"
        ],
        "response_blank_res": "These are the names of people who play poker .",
        "response_toks_blank_res": [
            "These",
            "are",
            "the",
            "names",
            "of",
            "people",
            "who",
            "play",
            "poker",
            "."
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT count ( * )  FROM players",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "players"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                20662
            ]
        ],
        "response": "There are 20662 players",
        "response_toks": [
            "There",
            "are",
            "20662",
            "players"
        ],
        "results_map": {
            "result0": "20662"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM players | 20662 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM players | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "players",
            "20662"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "players",
            "result0"
        ],
        "response_blank_res": "There are result0 players",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "players"
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT first_name FROM players",
        "query_toks": [
            "select",
            "first_name",
            "from",
            "players"
        ],
        "results_raw": null,
        "response": "Here are the first names of all the players.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "first",
            "names",
            "of",
            "all",
            "the",
            "players",
            "."
        ],
        "results_map": null,
        "results_blank_res": null,
        "query_w_results": null,
        "query_w_results_blank_res": null,
        "query_toks_w_results": null,
        "query_toks_w_results_blank_res": null,
        "response_blank_res": null,
        "response_toks_blank_res": null
    },
    {
        "database_id": "wta_1",
        "query": "SELECT country_code FROM players  where first_name  =  \"Mirjana\"",
        "query_toks": [
            "select",
            "country_code",
            "from",
            "players",
            "where",
            "first_name",
            "=",
            "\"mirjana\""
        ],
        "results_raw": [
            [
                "country_code"
            ],
            [
                "CRO"
            ]
        ],
        "response": "The country code of the player with first name Mirjana is CRO",
        "response_toks": [
            "The",
            "country",
            "code",
            "of",
            "the",
            "player",
            "with",
            "first",
            "name",
            "Mirjana",
            "is",
            "CRO"
        ],
        "results_map": {
            "result0": "CRO"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT country_code FROM players  where first_name  =  \"Mirjana\" | CRO ",
        "query_w_results_blank_res": "SELECT country_code FROM players  where first_name  =  \"Mirjana\" | result0 ",
        "query_toks_w_results": [
            "select",
            "country_code",
            "from",
            "players",
            "where",
            "first_name",
            "=",
            "\"mirjana\"",
            "CRO"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "country_code",
            "from",
            "players",
            "where",
            "first_name",
            "=",
            "\"mirjana\"",
            "result0"
        ],
        "response_blank_res": "The country code of the player with first name Mirjana is result0",
        "response_toks_blank_res": [
            "The",
            "country",
            "code",
            "of",
            "the",
            "player",
            "with",
            "first",
            "name",
            "Mirjana",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT birth_date FROM players  where first_name  =  \"Mirjana\"",
        "query_toks": [
            "select",
            "birth_date",
            "from",
            "players",
            "where",
            "first_name",
            "=",
            "\"mirjana\""
        ],
        "results_raw": [
            [
                "birth_date"
            ],
            [
                19820309
            ]
        ],
        "response": "the birth date of the player with first name Justine is 19820309",
        "response_toks": [
            "the",
            "birth",
            "date",
            "of",
            "the",
            "player",
            "with",
            "first",
            "name",
            "Justine",
            "is",
            "19820309"
        ],
        "results_map": {
            "result0": "19820309"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT birth_date FROM players  where first_name  =  \"Mirjana\" | 19820309 ",
        "query_w_results_blank_res": "SELECT birth_date FROM players  where first_name  =  \"Mirjana\" | result0 ",
        "query_toks_w_results": [
            "select",
            "birth_date",
            "from",
            "players",
            "where",
            "first_name",
            "=",
            "\"mirjana\"",
            "19820309"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "birth_date",
            "from",
            "players",
            "where",
            "first_name",
            "=",
            "\"mirjana\"",
            "result0"
        ],
        "response_blank_res": "the birth date of the player with first name Justine is result0",
        "response_toks_blank_res": [
            "the",
            "birth",
            "date",
            "of",
            "the",
            "player",
            "with",
            "first",
            "name",
            "Justine",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors'",
        "query_toks": [
            "select",
            "distinct",
            "t2",
            ".",
            "model",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "model",
            "=",
            "t2",
            ".",
            "model",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "maker",
            "=",
            "t3",
            ".",
            "id",
            "join",
            "cars_data",
            "as",
            "t4",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t4",
            ".",
            "id",
            "where",
            "t3",
            ".",
            "fullname",
            "=",
            "'general",
            "motors'"
        ],
        "results_raw": [
            [
                "Model"
            ],
            [
                "chevrolet"
            ],
            [
                "buick"
            ],
            [
                "pontiac"
            ]
        ],
        "response": "Here is the table of the model of Gerneral motors. For example, they are chevrolet",
        "response_toks": [
            "Here",
            "is",
            "the",
            "table",
            "of",
            "the",
            "model",
            "of",
            "Gerneral",
            "motors",
            ".",
            "For",
            "example",
            ",",
            "they",
            "are",
            "chevrolet"
        ],
        "results_map": {
            "result0": "chevrolet"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors' | chevrolet ",
        "query_w_results_blank_res": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors' | result0 ",
        "query_toks_w_results": [
            "select",
            "distinct",
            "t2",
            ".",
            "model",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "model",
            "=",
            "t2",
            ".",
            "model",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "maker",
            "=",
            "t3",
            ".",
            "id",
            "join",
            "cars_data",
            "as",
            "t4",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t4",
            ".",
            "id",
            "where",
            "t3",
            ".",
            "fullname",
            "=",
            "'general",
            "motors'",
            "chevrolet"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "t2",
            ".",
            "model",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "model",
            "=",
            "t2",
            ".",
            "model",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "maker",
            "=",
            "t3",
            ".",
            "id",
            "join",
            "cars_data",
            "as",
            "t4",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t4",
            ".",
            "id",
            "where",
            "t3",
            ".",
            "fullname",
            "=",
            "'general",
            "motors'",
            "result0"
        ],
        "response_blank_res": "Here is the table of the model of Gerneral motors . For example , they are result0",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "table",
            "of",
            "the",
            "model",
            "of",
            "Gerneral",
            "motors",
            ".",
            "For",
            "example",
            ",",
            "they",
            "are",
            "result0"
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T4.weight  >  3500",
        "query_toks": [
            "select",
            "distinct",
            "t2",
            ".",
            "model",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "model",
            "=",
            "t2",
            ".",
            "model",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "maker",
            "=",
            "t3",
            ".",
            "id",
            "join",
            "cars_data",
            "as",
            "t4",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t4",
            ".",
            "id",
            "where",
            "t4",
            ".",
            "weight",
            ">",
            "3500"
        ],
        "results_raw": [
            [
                "Model"
            ],
            [
                "chevrolet"
            ],
            [
                "buick"
            ],
            [
                "ford"
            ]
        ],
        "response": "Here is the table of the models have a weight greater than 3500. For example, they are chevrolet.",
        "response_toks": [
            "Here",
            "is",
            "the",
            "table",
            "of",
            "the",
            "models",
            "have",
            "a",
            "weight",
            "greater",
            "than",
            "3500",
            ".",
            "For",
            "example",
            ",",
            "they",
            "are",
            "chevrolet",
            "."
        ],
        "results_map": {
            "result0": "chevrolet"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T4.weight  >  3500 | chevrolet ",
        "query_w_results_blank_res": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T4.weight  >  3500 | result0 ",
        "query_toks_w_results": [
            "select",
            "distinct",
            "t2",
            ".",
            "model",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "model",
            "=",
            "t2",
            ".",
            "model",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "maker",
            "=",
            "t3",
            ".",
            "id",
            "join",
            "cars_data",
            "as",
            "t4",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t4",
            ".",
            "id",
            "where",
            "t4",
            ".",
            "weight",
            ">",
            "3500",
            "chevrolet"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "t2",
            ".",
            "model",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "model",
            "=",
            "t2",
            ".",
            "model",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "maker",
            "=",
            "t3",
            ".",
            "id",
            "join",
            "cars_data",
            "as",
            "t4",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t4",
            ".",
            "id",
            "where",
            "t4",
            ".",
            "weight",
            ">",
            "3500",
            "result0"
        ],
        "response_blank_res": "Here is the table of the models have a weight greater than 3500 . For example , they are result0 .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "table",
            "of",
            "the",
            "models",
            "have",
            "a",
            "weight",
            "greater",
            "than",
            "3500",
            ".",
            "For",
            "example",
            ",",
            "they",
            "are",
            "result0",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors' or T4.weight  < =   3500",
        "query_toks": [
            "select",
            "distinct",
            "t2",
            ".",
            "model",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "model",
            "=",
            "t2",
            ".",
            "model",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "maker",
            "=",
            "t3",
            ".",
            "id",
            "join",
            "cars_data",
            "as",
            "t4",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t4",
            ".",
            "id",
            "where",
            "t3",
            ".",
            "fullname",
            "=",
            "'general",
            "motors'",
            "or",
            "t4",
            ".",
            "weight",
            "<",
            "=",
            "3500"
        ],
        "results_raw": [
            [
                "Model"
            ],
            [
                "chevrolet"
            ],
            [
                "buick"
            ],
            [
                "plymouth"
            ]
        ],
        "response": "Here are the distinctive models produced by maker with the full name General Motors or weighing more than 3500.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "distinctive",
            "models",
            "produced",
            "by",
            "maker",
            "with",
            "the",
            "full",
            "name",
            "General",
            "Motors",
            "or",
            "weighing",
            "more",
            "than",
            "3500",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors' or T4.weight  < =   3500",
        "query_w_results_blank_res": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors' or T4.weight  < =   3500",
        "query_toks_w_results": [
            "select",
            "distinct",
            "t2",
            ".",
            "model",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "model",
            "=",
            "t2",
            ".",
            "model",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "maker",
            "=",
            "t3",
            ".",
            "id",
            "join",
            "cars_data",
            "as",
            "t4",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t4",
            ".",
            "id",
            "where",
            "t3",
            ".",
            "fullname",
            "=",
            "'general",
            "motors'",
            "or",
            "t4",
            ".",
            "weight",
            "<",
            "=",
            "3500"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "t2",
            ".",
            "model",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "model",
            "=",
            "t2",
            ".",
            "model",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "maker",
            "=",
            "t3",
            ".",
            "id",
            "join",
            "cars_data",
            "as",
            "t4",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t4",
            ".",
            "id",
            "where",
            "t3",
            ".",
            "fullname",
            "=",
            "'general",
            "motors'",
            "or",
            "t4",
            ".",
            "weight",
            "<",
            "=",
            "3500"
        ],
        "response_blank_res": "Here are the distinctive models produced by maker with the full name General Motors or weighing more than 3500 .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "distinctive",
            "models",
            "produced",
            "by",
            "maker",
            "with",
            "the",
            "full",
            "name",
            "General",
            "Motors",
            "or",
            "weighing",
            "more",
            "than",
            "3500",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors' Or T4.weight  < =   3500 except SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors' and T4.weight  < =   3500",
        "query_toks": [
            "select",
            "distinct",
            "t2",
            ".",
            "model",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "model",
            "=",
            "t2",
            ".",
            "model",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "maker",
            "=",
            "t3",
            ".",
            "id",
            "join",
            "cars_data",
            "as",
            "t4",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t4",
            ".",
            "id",
            "where",
            "t3",
            ".",
            "fullname",
            "=",
            "'general",
            "motors'",
            "or",
            "t4",
            ".",
            "weight",
            "<",
            "=",
            "3500",
            "except",
            "select",
            "distinct",
            "t2",
            ".",
            "model",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "model",
            "=",
            "t2",
            ".",
            "model",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "maker",
            "=",
            "t3",
            ".",
            "id",
            "join",
            "cars_data",
            "as",
            "t4",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t4",
            ".",
            "id",
            "where",
            "t3",
            ".",
            "fullname",
            "=",
            "'general",
            "motors'",
            "and",
            "t4",
            ".",
            "weight",
            "<",
            "=",
            "3500"
        ],
        "results_raw": [
            [
                "Model"
            ],
            [
                "amc"
            ],
            [
                "audi"
            ],
            [
                "bmw"
            ]
        ],
        "response": "Here are the models that weigh greater than 3500 or have the maker General Motors but not both.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "models",
            "that",
            "weigh",
            "greater",
            "than",
            "3500",
            "or",
            "have",
            "the",
            "maker",
            "General",
            "Motors",
            "but",
            "not",
            "both",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors' Or T4.weight  < =   3500 except SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors' and T4.weight  < =   3500",
        "query_w_results_blank_res": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors' Or T4.weight  < =   3500 except SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors' and T4.weight  < =   3500",
        "query_toks_w_results": [
            "select",
            "distinct",
            "t2",
            ".",
            "model",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "model",
            "=",
            "t2",
            ".",
            "model",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "maker",
            "=",
            "t3",
            ".",
            "id",
            "join",
            "cars_data",
            "as",
            "t4",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t4",
            ".",
            "id",
            "where",
            "t3",
            ".",
            "fullname",
            "=",
            "'general",
            "motors'",
            "or",
            "t4",
            ".",
            "weight",
            "<",
            "=",
            "3500",
            "except",
            "select",
            "distinct",
            "t2",
            ".",
            "model",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "model",
            "=",
            "t2",
            ".",
            "model",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "maker",
            "=",
            "t3",
            ".",
            "id",
            "join",
            "cars_data",
            "as",
            "t4",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t4",
            ".",
            "id",
            "where",
            "t3",
            ".",
            "fullname",
            "=",
            "'general",
            "motors'",
            "and",
            "t4",
            ".",
            "weight",
            "<",
            "=",
            "3500"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "t2",
            ".",
            "model",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "model",
            "=",
            "t2",
            ".",
            "model",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "maker",
            "=",
            "t3",
            ".",
            "id",
            "join",
            "cars_data",
            "as",
            "t4",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t4",
            ".",
            "id",
            "where",
            "t3",
            ".",
            "fullname",
            "=",
            "'general",
            "motors'",
            "or",
            "t4",
            ".",
            "weight",
            "<",
            "=",
            "3500",
            "except",
            "select",
            "distinct",
            "t2",
            ".",
            "model",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "model",
            "=",
            "t2",
            ".",
            "model",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "maker",
            "=",
            "t3",
            ".",
            "id",
            "join",
            "cars_data",
            "as",
            "t4",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t4",
            ".",
            "id",
            "where",
            "t3",
            ".",
            "fullname",
            "=",
            "'general",
            "motors'",
            "and",
            "t4",
            ".",
            "weight",
            "<",
            "=",
            "3500"
        ],
        "response_blank_res": "Here are the models that weigh greater than 3500 or have the maker General Motors but not both .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "models",
            "that",
            "weigh",
            "greater",
            "than",
            "3500",
            "or",
            "have",
            "the",
            "maker",
            "General",
            "Motors",
            "but",
            "not",
            "both",
            "."
        ]
    },
    {
        "database_id": "poker_player",
        "query": "SELECT height FROM people where name  =  \"Aleksey Ostapenko\"",
        "query_toks": [
            "select",
            "height",
            "from",
            "people",
            "where",
            "name",
            "=",
            "\"aleksey",
            "ostapenko\""
        ],
        "results_raw": [
            [
                "Height"
            ],
            [
                207.0
            ]
        ],
        "response": "The height of Aleksey Ostapenko is 207.0",
        "response_toks": [
            "The",
            "height",
            "of",
            "Aleksey",
            "Ostapenko",
            "is",
            "207.0"
        ],
        "results_map": {
            "result0": "207.0"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT height FROM people where name  =  \"Aleksey Ostapenko\" | 207.0 ",
        "query_w_results_blank_res": "SELECT height FROM people where name  =  \"Aleksey Ostapenko\" | result0 ",
        "query_toks_w_results": [
            "select",
            "height",
            "from",
            "people",
            "where",
            "name",
            "=",
            "\"aleksey",
            "ostapenko\"",
            "207.0"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "height",
            "from",
            "people",
            "where",
            "name",
            "=",
            "\"aleksey",
            "ostapenko\"",
            "result0"
        ],
        "response_blank_res": "The height of Aleksey Ostapenko is result0",
        "response_toks_blank_res": [
            "The",
            "height",
            "of",
            "Aleksey",
            "Ostapenko",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "poker_player",
        "query": "SELECT name FROM people where birth_date  =  \"August 16, 1982\"",
        "query_toks": [
            "select",
            "name",
            "from",
            "people",
            "where",
            "birth_date",
            "=",
            "\"august",
            "16",
            ",",
            "1982\""
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Teodor Salparov"
            ]
        ],
        "response": "the person born on August 16, 1982 is Teodor Salparov",
        "response_toks": [
            "the",
            "person",
            "born",
            "on",
            "August",
            "16",
            ",",
            "1982",
            "is",
            "Teodor",
            "Salparov"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT name FROM people where birth_date  =  \"August 16, 1982\"",
        "query_w_results_blank_res": "SELECT name FROM people where birth_date  =  \"August 16, 1982\"",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "people",
            "where",
            "birth_date",
            "=",
            "\"august",
            "16",
            ",",
            "1982\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "people",
            "where",
            "birth_date",
            "=",
            "\"august",
            "16",
            ",",
            "1982\""
        ],
        "response_blank_res": "the person born on August 16 , 1982 is Teodor Salparov",
        "response_toks_blank_res": [
            "the",
            "person",
            "born",
            "on",
            "August",
            "16",
            ",",
            "1982",
            "is",
            "Teodor",
            "Salparov"
        ]
    },
    {
        "database_id": "poker_player",
        "query": "SELECT people_id FROM people where nationality  =  \"Russia\"",
        "query_toks": [
            "select",
            "people_id",
            "from",
            "people",
            "where",
            "nationality",
            "=",
            "\"russia\""
        ],
        "results_raw": [
            [
                "People_ID"
            ],
            [
                1
            ],
            [
                3
            ],
            [
                4
            ]
        ],
        "response": "Here is the result table of the people ids of nationality Russia. for example, one of them is 1",
        "response_toks": [
            "Here",
            "is",
            "the",
            "result",
            "table",
            "of",
            "the",
            "people",
            "ids",
            "of",
            "nationality",
            "Russia",
            ".",
            "for",
            "example",
            ",",
            "one",
            "of",
            "them",
            "is",
            "1"
        ],
        "results_map": {
            "result0": "1"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT people_id FROM people where nationality  =  \"Russia\" | 1 ",
        "query_w_results_blank_res": "SELECT people_id FROM people where nationality  =  \"Russia\" | result0 ",
        "query_toks_w_results": [
            "select",
            "people_id",
            "from",
            "people",
            "where",
            "nationality",
            "=",
            "\"russia\"",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "people_id",
            "from",
            "people",
            "where",
            "nationality",
            "=",
            "\"russia\"",
            "result0"
        ],
        "response_blank_res": "Here is the result table of the people ids of nationality Russia . for example , one of them is result0",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "result",
            "table",
            "of",
            "the",
            "people",
            "ids",
            "of",
            "nationality",
            "Russia",
            ".",
            "for",
            "example",
            ",",
            "one",
            "of",
            "them",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "poker_player",
        "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT ( * )    > =    2",
        "query_toks": [
            "select",
            "nationality",
            "from",
            "people",
            "group",
            "by",
            "nationality",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "results_raw": [
            [
                "Nationality"
            ],
            [
                "Russia"
            ]
        ],
        "response": "the nationalities that are shared by at least two people is Russia",
        "response_toks": [
            "the",
            "nationalities",
            "that",
            "are",
            "shared",
            "by",
            "at",
            "least",
            "two",
            "people",
            "is",
            "Russia"
        ],
        "results_map": {
            "result0": "Russia"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT ( * )    > =    2 | Russia ",
        "query_w_results_blank_res": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT ( * )    > =    2 | result0 ",
        "query_toks_w_results": [
            "select",
            "nationality",
            "from",
            "people",
            "group",
            "by",
            "nationality",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2",
            "Russia"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "nationality",
            "from",
            "people",
            "group",
            "by",
            "nationality",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2",
            "result0"
        ],
        "response_blank_res": "the nationalities that are shared by at least two people is result0",
        "response_toks_blank_res": [
            "the",
            "nationalities",
            "that",
            "are",
            "shared",
            "by",
            "at",
            "least",
            "two",
            "people",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT Population FROM country where Name   =   \"Afghanistan\"",
        "query_toks": [
            "select",
            "population",
            "from",
            "country",
            "where",
            "name",
            "=",
            "\"afghanistan\""
        ],
        "results_raw": [
            [
                "Population"
            ],
            [
                22720000
            ]
        ],
        "response": "the population of Afghanistan is 22720000",
        "response_toks": [
            "the",
            "population",
            "of",
            "Afghanistan",
            "is",
            "22720000"
        ],
        "results_map": {
            "result0": "22720000"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT Population FROM country where Name   =   \"Afghanistan\" | 22720000 ",
        "query_w_results_blank_res": "SELECT Population FROM country where Name   =   \"Afghanistan\" | result0 ",
        "query_toks_w_results": [
            "select",
            "population",
            "from",
            "country",
            "where",
            "name",
            "=",
            "\"afghanistan\"",
            "22720000"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "population",
            "from",
            "country",
            "where",
            "name",
            "=",
            "\"afghanistan\"",
            "result0"
        ],
        "response_blank_res": "the population of Afghanistan is result0",
        "response_toks_blank_res": [
            "the",
            "population",
            "of",
            "Afghanistan",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT Population FROM country where Name   =   \"Aruba\"",
        "query_toks": [
            "select",
            "population",
            "from",
            "country",
            "where",
            "name",
            "=",
            "\"aruba\""
        ],
        "results_raw": [
            [
                "Population"
            ],
            [
                103000
            ]
        ],
        "response": "country Aruba has a population of 103000",
        "response_toks": [
            "country",
            "Aruba",
            "has",
            "a",
            "population",
            "of",
            "103000"
        ],
        "results_map": {
            "result0": "103000"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT Population FROM country where Name   =   \"Aruba\" | 103000 ",
        "query_w_results_blank_res": "SELECT Population FROM country where Name   =   \"Aruba\" | result0 ",
        "query_toks_w_results": [
            "select",
            "population",
            "from",
            "country",
            "where",
            "name",
            "=",
            "\"aruba\"",
            "103000"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "population",
            "from",
            "country",
            "where",
            "name",
            "=",
            "\"aruba\"",
            "result0"
        ],
        "response_blank_res": "country Aruba has a population of result0",
        "response_toks_blank_res": [
            "country",
            "Aruba",
            "has",
            "a",
            "population",
            "of",
            "result0"
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT T2.language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T1.Name   =   \"Aruba\"",
        "query_toks": [
            "select",
            "t2",
            ".",
            "language",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t1",
            ".",
            "name",
            "=",
            "\"aruba\""
        ],
        "results_raw": [
            [
                "Language"
            ],
            [
                "Dutch"
            ],
            [
                "English"
            ],
            [
                "Papiamento"
            ]
        ],
        "response": "This is the list of languages used in country Aruba",
        "response_toks": [
            "This",
            "is",
            "the",
            "list",
            "of",
            "languages",
            "used",
            "in",
            "country",
            "Aruba"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T2.language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T1.Name   =   \"Aruba\"",
        "query_w_results_blank_res": "SELECT T2.language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T1.Name   =   \"Aruba\"",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "language",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t1",
            ".",
            "name",
            "=",
            "\"aruba\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "language",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t1",
            ".",
            "name",
            "=",
            "\"aruba\""
        ],
        "response_blank_res": "This is the list of languages used in country Aruba",
        "response_toks_blank_res": [
            "This",
            "is",
            "the",
            "list",
            "of",
            "languages",
            "used",
            "in",
            "country",
            "Aruba"
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT T2.language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T1.Name   =   \"Aruba\" and T2.IsOfficial = 'T'",
        "query_toks": [
            "select",
            "t2",
            ".",
            "language",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t1",
            ".",
            "name",
            "=",
            "\"aruba\"",
            "and",
            "t2",
            ".",
            "isofficial",
            "=",
            "'t'"
        ],
        "results_raw": [
            [
                "Language"
            ],
            [
                "Dutch"
            ]
        ],
        "response": "Yes, the official language for the country Aruba is Dutch.",
        "response_toks": [
            "Yes",
            ",",
            "the",
            "official",
            "language",
            "for",
            "the",
            "country",
            "Aruba",
            "is",
            "Dutch",
            "."
        ],
        "results_map": {
            "result0": "Dutch"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT T2.language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T1.Name   =   \"Aruba\" and T2.IsOfficial = 'T' | Dutch ",
        "query_w_results_blank_res": "SELECT T2.language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T1.Name   =   \"Aruba\" and T2.IsOfficial = 'T' | result0 ",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "language",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t1",
            ".",
            "name",
            "=",
            "\"aruba\"",
            "and",
            "t2",
            ".",
            "isofficial",
            "=",
            "'t'",
            "Dutch"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "language",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t1",
            ".",
            "name",
            "=",
            "\"aruba\"",
            "and",
            "t2",
            ".",
            "isofficial",
            "=",
            "'t'",
            "result0"
        ],
        "response_blank_res": "Yes , the official language for the country Aruba is result0 .",
        "response_toks_blank_res": [
            "Yes",
            ",",
            "the",
            "official",
            "language",
            "for",
            "the",
            "country",
            "Aruba",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT T2.language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T1.Name   =   \"Afghanistan\" and T2.IsOfficial = 'T'",
        "query_toks": [
            "select",
            "t2",
            ".",
            "language",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t1",
            ".",
            "name",
            "=",
            "\"afghanistan\"",
            "and",
            "t2",
            ".",
            "isofficial",
            "=",
            "'t'"
        ],
        "results_raw": [
            [
                "Language"
            ],
            [
                "Dari"
            ],
            [
                "Pashto"
            ]
        ],
        "response": "the official language for the country Afghanistan are Dari and Pashto",
        "response_toks": [
            "the",
            "official",
            "language",
            "for",
            "the",
            "country",
            "Afghanistan",
            "are",
            "Dari",
            "and",
            "Pashto"
        ],
        "results_map": {
            "result0": "Dari",
            "result1": "Pashto"
        },
        "results_blank_res": "result0 result1 ",
        "query_w_results": "SELECT T2.language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T1.Name   =   \"Afghanistan\" and T2.IsOfficial = 'T' | Dari Pashto ",
        "query_w_results_blank_res": "SELECT T2.language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T1.Name   =   \"Afghanistan\" and T2.IsOfficial = 'T' | result0 result1 ",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "language",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t1",
            ".",
            "name",
            "=",
            "\"afghanistan\"",
            "and",
            "t2",
            ".",
            "isofficial",
            "=",
            "'t'",
            "Dari",
            "Pashto"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "language",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t1",
            ".",
            "name",
            "=",
            "\"afghanistan\"",
            "and",
            "t2",
            ".",
            "isofficial",
            "=",
            "'t'",
            "result0",
            "result1"
        ],
        "response_blank_res": "the official language for the country Afghanistan are result0 and result1",
        "response_toks_blank_res": [
            "the",
            "official",
            "language",
            "for",
            "the",
            "country",
            "Afghanistan",
            "are",
            "result0",
            "and",
            "result1"
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT count ( * )  FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.language = 'Dari' and T1.name ! =  'Afghanistan'",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "language",
            "=",
            "'dari'",
            "and",
            "t1",
            ".",
            "name",
            "!",
            "=",
            "'afghanistan'"
        ],
        "results_raw": null,
        "response": "There isn't any other country speak Dari other than Afghanistan",
        "response_toks": [
            "There",
            "is",
            "n't",
            "any",
            "other",
            "country",
            "speak",
            "Dari",
            "other",
            "than",
            "Afghanistan"
        ],
        "results_map": null,
        "results_blank_res": null,
        "query_w_results": null,
        "query_w_results_blank_res": null,
        "query_toks_w_results": null,
        "query_toks_w_results_blank_res": null,
        "response_blank_res": null,
        "response_toks_blank_res": null
    },
    {
        "database_id": "world_1",
        "query": "SELECT T1.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.language = 'Pashto' and T1.name! = 'Afghanistan'",
        "query_toks": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "language",
            "=",
            "'pashto'",
            "and",
            "t1",
            ".",
            "name!",
            "=",
            "'afghanistan'"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Pakistan"
            ]
        ],
        "response": "Yes, Pakistan is the country speaking Pashto other than Afghanistan.",
        "response_toks": [
            "Yes",
            ",",
            "Pakistan",
            "is",
            "the",
            "country",
            "speaking",
            "Pashto",
            "other",
            "than",
            "Afghanistan",
            "."
        ],
        "results_map": {
            "result0": "Pakistan"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT T1.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.language = 'Pashto' and T1.name! = 'Afghanistan' | Pakistan ",
        "query_w_results_blank_res": "SELECT T1.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.language = 'Pashto' and T1.name! = 'Afghanistan' | result0 ",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "language",
            "=",
            "'pashto'",
            "and",
            "t1",
            ".",
            "name!",
            "=",
            "'afghanistan'",
            "Pakistan"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "language",
            "=",
            "'pashto'",
            "and",
            "t1",
            ".",
            "name!",
            "=",
            "'afghanistan'",
            "result0"
        ],
        "response_blank_res": "Yes , result0 is the country speaking Pashto other than Afghanistan .",
        "response_toks_blank_res": [
            "Yes",
            ",",
            "result0",
            "is",
            "the",
            "country",
            "speaking",
            "Pashto",
            "other",
            "than",
            "Afghanistan",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT T2.language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.isOfficial = 'T' and T1.name = 'Pakistan'",
        "query_toks": [
            "select",
            "t2",
            ".",
            "language",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "isofficial",
            "=",
            "'t'",
            "and",
            "t1",
            ".",
            "name",
            "=",
            "'pakistan'"
        ],
        "results_raw": [
            [
                "Language"
            ],
            [
                "Urdu"
            ]
        ],
        "response": "No. Urdu is the only official language of Pakistan.",
        "response_toks": [
            "No",
            ".",
            "Urdu",
            "is",
            "the",
            "only",
            "official",
            "language",
            "of",
            "Pakistan",
            "."
        ],
        "results_map": {
            "result0": "Urdu"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT T2.language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.isOfficial = 'T' and T1.name = 'Pakistan' | Urdu ",
        "query_w_results_blank_res": "SELECT T2.language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.isOfficial = 'T' and T1.name = 'Pakistan' | result0 ",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "language",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "isofficial",
            "=",
            "'t'",
            "and",
            "t1",
            ".",
            "name",
            "=",
            "'pakistan'",
            "Urdu"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "language",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "isofficial",
            "=",
            "'t'",
            "and",
            "t1",
            ".",
            "name",
            "=",
            "'pakistan'",
            "result0"
        ],
        "response_blank_res": "No . result0 is the only official language of Pakistan .",
        "response_toks_blank_res": [
            "No",
            ".",
            "result0",
            "is",
            "the",
            "only",
            "official",
            "language",
            "of",
            "Pakistan",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT name,cost_of_treatment  FROM Dogs join Treatments",
        "query_toks": [
            "select",
            "name",
            ",",
            "cost_of_treatment",
            "from",
            "dogs",
            "join",
            "treatments"
        ],
        "results_raw": [
            [
                "name",
                "cost_of_treatment"
            ],
            [
                "Kacey",
                567
            ],
            [
                "Kacey",
                147
            ],
            [
                "Kacey",
                429
            ]
        ],
        "response": "The dog names and corresponding treatment cost are listed.",
        "response_toks": [
            "The",
            "dog",
            "names",
            "and",
            "corresponding",
            "treatment",
            "cost",
            "are",
            "listed",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT name,cost_of_treatment  FROM Dogs join Treatments",
        "query_w_results_blank_res": "SELECT name,cost_of_treatment  FROM Dogs join Treatments",
        "query_toks_w_results": [
            "select",
            "name",
            ",",
            "cost_of_treatment",
            "from",
            "dogs",
            "join",
            "treatments"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            ",",
            "cost_of_treatment",
            "from",
            "dogs",
            "join",
            "treatments"
        ],
        "response_blank_res": "The dog names and corresponding treatment cost are listed .",
        "response_toks_blank_res": [
            "The",
            "dog",
            "names",
            "and",
            "corresponding",
            "treatment",
            "cost",
            "are",
            "listed",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT cost_of_treatment  FROM Dogs join Treatments order by cost_of_treatment desc",
        "query_toks": [
            "select",
            "cost_of_treatment",
            "from",
            "dogs",
            "join",
            "treatments",
            "order",
            "by",
            "cost_of_treatment",
            "desc"
        ],
        "results_raw": [
            [
                "cost_of_treatment"
            ],
            [
                945
            ],
            [
                945
            ],
            [
                945
            ]
        ],
        "response": "The result table of the treatment cost is listed in descending order of the cost of treatment.",
        "response_toks": [
            "The",
            "result",
            "table",
            "of",
            "the",
            "treatment",
            "cost",
            "is",
            "listed",
            "in",
            "descending",
            "order",
            "of",
            "the",
            "cost",
            "of",
            "treatment",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT cost_of_treatment  FROM Dogs join Treatments order by cost_of_treatment desc",
        "query_w_results_blank_res": "SELECT cost_of_treatment  FROM Dogs join Treatments order by cost_of_treatment desc",
        "query_toks_w_results": [
            "select",
            "cost_of_treatment",
            "from",
            "dogs",
            "join",
            "treatments",
            "order",
            "by",
            "cost_of_treatment",
            "desc"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "cost_of_treatment",
            "from",
            "dogs",
            "join",
            "treatments",
            "order",
            "by",
            "cost_of_treatment",
            "desc"
        ],
        "response_blank_res": "The result table of the treatment cost is listed in descending order of the cost of treatment .",
        "response_toks_blank_res": [
            "The",
            "result",
            "table",
            "of",
            "the",
            "treatment",
            "cost",
            "is",
            "listed",
            "in",
            "descending",
            "order",
            "of",
            "the",
            "cost",
            "of",
            "treatment",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT name FROM Dogs WHERE dog_id NOT IN (  SELECT dog_id FROM Treatments GROUP BY dog_id HAVING sum ( cost_of_treatment )   <  1000  ) ",
        "query_toks": [
            "select",
            "name",
            "from",
            "dogs",
            "where",
            "dog_id",
            "not",
            "in",
            "(",
            "select",
            "dog_id",
            "from",
            "treatments",
            "group",
            "by",
            "dog_id",
            "having",
            "sum",
            "(",
            "cost_of_treatment",
            ")",
            "<",
            "1000",
            ")"
        ],
        "results_raw": [
            [
                "name"
            ],
            [
                "Mavis"
            ],
            [
                "Jeffrey"
            ],
            [
                "Merritt"
            ]
        ],
        "response": "The dog names which cost less than 1000 for treatment are listed.",
        "response_toks": [
            "The",
            "dog",
            "names",
            "which",
            "cost",
            "less",
            "than",
            "1000",
            "for",
            "treatment",
            "are",
            "listed",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT name FROM Dogs WHERE dog_id NOT IN (  SELECT dog_id FROM Treatments GROUP BY dog_id HAVING sum ( cost_of_treatment )   <  1000  ) ",
        "query_w_results_blank_res": "SELECT name FROM Dogs WHERE dog_id NOT IN (  SELECT dog_id FROM Treatments GROUP BY dog_id HAVING sum ( cost_of_treatment )   <  1000  ) ",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "dogs",
            "where",
            "dog_id",
            "not",
            "in",
            "(",
            "select",
            "dog_id",
            "from",
            "treatments",
            "group",
            "by",
            "dog_id",
            "having",
            "sum",
            "(",
            "cost_of_treatment",
            ")",
            "<",
            "1000",
            ")"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "dogs",
            "where",
            "dog_id",
            "not",
            "in",
            "(",
            "select",
            "dog_id",
            "from",
            "treatments",
            "group",
            "by",
            "dog_id",
            "having",
            "sum",
            "(",
            "cost_of_treatment",
            ")",
            "<",
            "1000",
            ")"
        ],
        "response_blank_res": "The dog names which cost less than 1000 for treatment are listed .",
        "response_toks_blank_res": [
            "The",
            "dog",
            "names",
            "which",
            "cost",
            "less",
            "than",
            "1000",
            "for",
            "treatment",
            "are",
            "listed",
            "."
        ]
    },
    {
        "database_id": "museum_visit",
        "query": "SELECT age FROM visitor where name  =  \"Gonzalo Higua\u00edn\"",
        "query_toks": [
            "select",
            "age",
            "from",
            "visitor",
            "where",
            "name",
            "=",
            "\"gonzalo",
            "higua\u00edn\""
        ],
        "results_raw": [
            [
                "Age"
            ]
        ],
        "response": "The age of the visitor named Gonzalo Higua\u00edn is 35.",
        "response_toks": [
            "The",
            "age",
            "of",
            "the",
            "visitor",
            "named",
            "Gonzalo",
            "Higua\u00edn",
            "is",
            "35",
            "."
        ],
        "results_map": null,
        "results_blank_res": null,
        "query_w_results": null,
        "query_w_results_blank_res": null,
        "query_toks_w_results": null,
        "query_toks_w_results_blank_res": null,
        "response_blank_res": null,
        "response_toks_blank_res": null
    },
    {
        "database_id": "museum_visit",
        "query": "SELECT num_of_ticket FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id where visitor_id  =  5",
        "query_toks": [
            "select",
            "num_of_ticket",
            "from",
            "visitor",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "visitor_id",
            "where",
            "visitor_id",
            "=",
            "5"
        ],
        "results_raw": [
            [
                "Num_of_Ticket"
            ],
            [
                20
            ],
            [
                4
            ]
        ],
        "response": "Here are the numbers of tickets, the customer id with 5 bought during visits.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "numbers",
            "of",
            "tickets",
            ",",
            "the",
            "customer",
            "id",
            "with",
            "5",
            "bought",
            "during",
            "visits",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT num_of_ticket FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id where visitor_id  =  5",
        "query_w_results_blank_res": "SELECT num_of_ticket FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id where visitor_id  =  5",
        "query_toks_w_results": [
            "select",
            "num_of_ticket",
            "from",
            "visitor",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "visitor_id",
            "where",
            "visitor_id",
            "=",
            "5"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "num_of_ticket",
            "from",
            "visitor",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "visitor_id",
            "where",
            "visitor_id",
            "=",
            "5"
        ],
        "response_blank_res": "Here are the numbers of tickets , the customer id with 5 bought during visits .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "numbers",
            "of",
            "tickets",
            ",",
            "the",
            "customer",
            "id",
            "with",
            "5",
            "bought",
            "during",
            "visits",
            "."
        ]
    },
    {
        "database_id": "museum_visit",
        "query": "SELECT Total_spent FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id where name  =  \"Arjen Robben\"",
        "query_toks": [
            "select",
            "total_spent",
            "from",
            "visitor",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "visitor_id",
            "where",
            "name",
            "=",
            "\"arjen",
            "robben\""
        ],
        "results_raw": [
            [
                "Total_spent"
            ],
            [
                320.44
            ],
            [
                209.98
            ]
        ],
        "response": "The total spent of the vistor named Arjen Robben are 320.44 and 209.98",
        "response_toks": [
            "The",
            "total",
            "spent",
            "of",
            "the",
            "vistor",
            "named",
            "Arjen",
            "Robben",
            "are",
            "320.44",
            "and",
            "209.98"
        ],
        "results_map": {
            "result0": "320.44",
            "result1": "209.98"
        },
        "results_blank_res": "result0 result1 ",
        "query_w_results": "SELECT Total_spent FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id where name  =  \"Arjen Robben\" | 320.44 209.98 ",
        "query_w_results_blank_res": "SELECT Total_spent FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id where name  =  \"Arjen Robben\" | result0 result1 ",
        "query_toks_w_results": [
            "select",
            "total_spent",
            "from",
            "visitor",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "visitor_id",
            "where",
            "name",
            "=",
            "\"arjen",
            "robben\"",
            "320.44",
            "209.98"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "total_spent",
            "from",
            "visitor",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "visitor_id",
            "where",
            "name",
            "=",
            "\"arjen",
            "robben\"",
            "result0",
            "result1"
        ],
        "response_blank_res": "The total spent of the vistor named Arjen Robben are result0 and result1",
        "response_toks_blank_res": [
            "The",
            "total",
            "spent",
            "of",
            "the",
            "vistor",
            "named",
            "Arjen",
            "Robben",
            "are",
            "result0",
            "and",
            "result1"
        ]
    },
    {
        "database_id": "museum_visit",
        "query": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1",
        "query_toks": [
            "select",
            "t1",
            ".",
            "name",
            ",",
            "t1",
            ".",
            "age",
            "from",
            "visitor",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "visitor_id",
            "order",
            "by",
            "t2",
            ".",
            "num_of_ticket",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Name",
                "Age"
            ],
            [
                "Arjen Robben",
                27
            ]
        ],
        "response": "the name and age of the visitor who bought the most tickets at once are Arjen Robben and 27",
        "response_toks": [
            "the",
            "name",
            "and",
            "age",
            "of",
            "the",
            "visitor",
            "who",
            "bought",
            "the",
            "most",
            "tickets",
            "at",
            "once",
            "are",
            "Arjen",
            "Robben",
            "and",
            "27"
        ],
        "results_map": {
            "result0": "27"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1 | 27 ",
        "query_w_results_blank_res": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "name",
            ",",
            "t1",
            ".",
            "age",
            "from",
            "visitor",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "visitor_id",
            "order",
            "by",
            "t2",
            ".",
            "num_of_ticket",
            "desc",
            "limit",
            "1",
            "27"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "name",
            ",",
            "t1",
            ".",
            "age",
            "from",
            "visitor",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "visitor_id",
            "order",
            "by",
            "t2",
            ".",
            "num_of_ticket",
            "desc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "the name and age of the visitor who bought the most tickets at once are Arjen Robben and result0",
        "response_toks_blank_res": [
            "the",
            "name",
            "and",
            "age",
            "of",
            "the",
            "visitor",
            "who",
            "bought",
            "the",
            "most",
            "tickets",
            "at",
            "once",
            "are",
            "Arjen",
            "Robben",
            "and",
            "result0"
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   \"English\"",
        "query_toks": [
            "select",
            "distinct",
            "t1",
            ".",
            "region",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "language",
            "=",
            "\"english\""
        ],
        "results_raw": [
            [
                "Region"
            ],
            [
                "Caribbean"
            ],
            [
                "Polynesia"
            ],
            [
                "Australia and New Zealand"
            ]
        ],
        "response": "There are unique regions whose country language is English.",
        "response_toks": [
            "There",
            "are",
            "unique",
            "regions",
            "whose",
            "country",
            "language",
            "is",
            "English",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   \"English\"",
        "query_w_results_blank_res": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   \"English\"",
        "query_toks_w_results": [
            "select",
            "distinct",
            "t1",
            ".",
            "region",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "language",
            "=",
            "\"english\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "t1",
            ".",
            "region",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "language",
            "=",
            "\"english\""
        ],
        "response_blank_res": "There are unique regions whose country language is English .",
        "response_toks_blank_res": [
            "There",
            "are",
            "unique",
            "regions",
            "whose",
            "country",
            "language",
            "is",
            "English",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   \"Dutch\"",
        "query_toks": [
            "select",
            "distinct",
            "t1",
            ".",
            "region",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "language",
            "=",
            "\"dutch\""
        ],
        "results_raw": [
            [
                "Region"
            ],
            [
                "Caribbean"
            ],
            [
                "Western Europe"
            ],
            [
                "North America"
            ]
        ],
        "response": "There are unique regions whose country language is Dutch.",
        "response_toks": [
            "There",
            "are",
            "unique",
            "regions",
            "whose",
            "country",
            "language",
            "is",
            "Dutch",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   \"Dutch\"",
        "query_w_results_blank_res": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   \"Dutch\"",
        "query_toks_w_results": [
            "select",
            "distinct",
            "t1",
            ".",
            "region",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "language",
            "=",
            "\"dutch\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "t1",
            ".",
            "region",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "language",
            "=",
            "\"dutch\""
        ],
        "response_blank_res": "There are unique regions whose country language is Dutch .",
        "response_toks_blank_res": [
            "There",
            "are",
            "unique",
            "regions",
            "whose",
            "country",
            "language",
            "is",
            "Dutch",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT DISTINCT T1.LifeExpectancy FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   \"Dutch\"",
        "query_toks": [
            "select",
            "distinct",
            "t1",
            ".",
            "lifeexpectancy",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "language",
            "=",
            "\"dutch\""
        ],
        "results_raw": [
            [
                "LifeExpectancy"
            ],
            [
                78.4
            ],
            [
                74.7
            ],
            [
                77.8
            ]
        ],
        "response": "There are the life expectancies of the countries whose language is Dutch.",
        "response_toks": [
            "There",
            "are",
            "the",
            "life",
            "expectancies",
            "of",
            "the",
            "countries",
            "whose",
            "language",
            "is",
            "Dutch",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT DISTINCT T1.LifeExpectancy FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   \"Dutch\"",
        "query_w_results_blank_res": "SELECT DISTINCT T1.LifeExpectancy FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   \"Dutch\"",
        "query_toks_w_results": [
            "select",
            "distinct",
            "t1",
            ".",
            "lifeexpectancy",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "language",
            "=",
            "\"dutch\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "t1",
            ".",
            "lifeexpectancy",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "language",
            "=",
            "\"dutch\""
        ],
        "response_blank_res": "There are the life expectancies of the countries whose language is Dutch .",
        "response_toks_blank_res": [
            "There",
            "are",
            "the",
            "life",
            "expectancies",
            "of",
            "the",
            "countries",
            "whose",
            "language",
            "is",
            "Dutch",
            "."
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT winner_name  FROM matches ORDER BY winner_age LIMIT 3",
        "query_toks": [
            "select",
            "winner_name",
            "from",
            "matches",
            "order",
            "by",
            "winner_age",
            "limit",
            "3"
        ],
        "results_raw": [
            [
                "winner_name"
            ],
            [
                "Madison Keys"
            ],
            [
                "Madison Keys"
            ],
            [
                "Madison Keys"
            ]
        ],
        "response": "There are the names of the 3 youngest winners across all matches.",
        "response_toks": [
            "There",
            "are",
            "the",
            "names",
            "of",
            "the",
            "3",
            "youngest",
            "winners",
            "across",
            "all",
            "matches",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT winner_name  FROM matches ORDER BY winner_age LIMIT 3",
        "query_w_results_blank_res": "SELECT winner_name  FROM matches ORDER BY winner_age LIMIT 3",
        "query_toks_w_results": [
            "select",
            "winner_name",
            "from",
            "matches",
            "order",
            "by",
            "winner_age",
            "limit",
            "3"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "winner_name",
            "from",
            "matches",
            "order",
            "by",
            "winner_age",
            "limit",
            "3"
        ],
        "response_blank_res": "There are the names of the 3 youngest winners across all matches .",
        "response_toks_blank_res": [
            "There",
            "are",
            "the",
            "names",
            "of",
            "the",
            "3",
            "youngest",
            "winners",
            "across",
            "all",
            "matches",
            "."
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT loser_name FROM matches ORDER BY winner_age LIMIT 3",
        "query_toks": [
            "select",
            "loser_name",
            "from",
            "matches",
            "order",
            "by",
            "winner_age",
            "limit",
            "3"
        ],
        "results_raw": [
            [
                "loser_name"
            ],
            [
                "Ana Ivanovic"
            ],
            [
                "Roberta Vinci"
            ],
            [
                "Carla Suarez Navarro"
            ]
        ],
        "response": "There are the loser names for the 3 youngest winners across all matches.",
        "response_toks": [
            "There",
            "are",
            "the",
            "loser",
            "names",
            "for",
            "the",
            "3",
            "youngest",
            "winners",
            "across",
            "all",
            "matches",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT loser_name FROM matches ORDER BY winner_age LIMIT 3",
        "query_w_results_blank_res": "SELECT loser_name FROM matches ORDER BY winner_age LIMIT 3",
        "query_toks_w_results": [
            "select",
            "loser_name",
            "from",
            "matches",
            "order",
            "by",
            "winner_age",
            "limit",
            "3"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "loser_name",
            "from",
            "matches",
            "order",
            "by",
            "winner_age",
            "limit",
            "3"
        ],
        "response_blank_res": "There are the loser names for the 3 youngest winners across all matches .",
        "response_toks_blank_res": [
            "There",
            "are",
            "the",
            "loser",
            "names",
            "for",
            "the",
            "3",
            "youngest",
            "winners",
            "across",
            "all",
            "matches",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT first_name, last_name FROM professionals",
        "query_toks": [
            "select",
            "first_name",
            ",",
            "last_name",
            "from",
            "professionals"
        ],
        "results_raw": [
            [
                "first_name",
                "last_name"
            ],
            [
                "Taryn",
                "Braun"
            ],
            [
                "Jayson",
                "Ullrich"
            ],
            [
                "Olaf",
                "Watsica"
            ]
        ],
        "response": "Here are the first and last names of all professionals.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "first",
            "and",
            "last",
            "names",
            "of",
            "all",
            "professionals",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT first_name, last_name FROM professionals",
        "query_w_results_blank_res": "SELECT first_name, last_name FROM professionals",
        "query_toks_w_results": [
            "select",
            "first_name",
            ",",
            "last_name",
            "from",
            "professionals"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "first_name",
            ",",
            "last_name",
            "from",
            "professionals"
        ],
        "response_blank_res": "Here are the first and last names of all professionals .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "first",
            "and",
            "last",
            "names",
            "of",
            "all",
            "professionals",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT first_name, last_name FROM professionals  WHERE city LIKE '%West%'",
        "query_toks": [
            "select",
            "first_name",
            ",",
            "last_name",
            "from",
            "professionals",
            "where",
            "city",
            "like",
            "'%west%'"
        ],
        "results_raw": [
            [
                "first_name",
                "last_name"
            ],
            [
                "Taryn",
                "Braun"
            ]
        ],
        "response": "Here are the first and last names of the professional that lives in a city containing the substring West",
        "response_toks": [
            "Here",
            "are",
            "the",
            "first",
            "and",
            "last",
            "names",
            "of",
            "the",
            "professional",
            "that",
            "lives",
            "in",
            "a",
            "city",
            "containing",
            "the",
            "substring",
            "West"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT first_name, last_name FROM professionals  WHERE city LIKE '%West%'",
        "query_w_results_blank_res": "SELECT first_name, last_name FROM professionals  WHERE city LIKE '%West%'",
        "query_toks_w_results": [
            "select",
            "first_name",
            ",",
            "last_name",
            "from",
            "professionals",
            "where",
            "city",
            "like",
            "'%west%'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "first_name",
            ",",
            "last_name",
            "from",
            "professionals",
            "where",
            "city",
            "like",
            "'%west%'"
        ],
        "response_blank_res": "Here are the first and last names of the professional that lives in a city containing the substring West",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "first",
            "and",
            "last",
            "names",
            "of",
            "the",
            "professional",
            "that",
            "lives",
            "in",
            "a",
            "city",
            "containing",
            "the",
            "substring",
            "West"
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT role_code FROM professionals  WHERE first_name  =  \"Taryn\"",
        "query_toks": [
            "select",
            "role_code",
            "from",
            "professionals",
            "where",
            "first_name",
            "=",
            "\"taryn\""
        ],
        "results_raw": [
            [
                "role_code"
            ],
            [
                "Employee"
            ]
        ],
        "response": "The role code of the professional with first name Taryn is Employee",
        "response_toks": [
            "The",
            "role",
            "code",
            "of",
            "the",
            "professional",
            "with",
            "first",
            "name",
            "Taryn",
            "is",
            "Employee"
        ],
        "results_map": {
            "result0": "Employee"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT role_code FROM professionals  WHERE first_name  =  \"Taryn\" | Employee ",
        "query_w_results_blank_res": "SELECT role_code FROM professionals  WHERE first_name  =  \"Taryn\" | result0 ",
        "query_toks_w_results": [
            "select",
            "role_code",
            "from",
            "professionals",
            "where",
            "first_name",
            "=",
            "\"taryn\"",
            "Employee"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "role_code",
            "from",
            "professionals",
            "where",
            "first_name",
            "=",
            "\"taryn\"",
            "result0"
        ],
        "response_blank_res": "The role code of the professional with first name Taryn is result0",
        "response_toks_blank_res": [
            "The",
            "role",
            "code",
            "of",
            "the",
            "professional",
            "with",
            "first",
            "name",
            "Taryn",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT role_code , street , city , state FROM professionals WHERE first_name  =  \"Taryn\"",
        "query_toks": [
            "select",
            "role_code",
            ",",
            "street",
            ",",
            "city",
            ",",
            "state",
            "from",
            "professionals",
            "where",
            "first_name",
            "=",
            "\"taryn\""
        ],
        "results_raw": [
            [
                "role_code",
                "street",
                "city",
                "state"
            ],
            [
                "Employee",
                "6915 Oberbrunner Point Suite 491\nGleasonville, LA ",
                "West Heidi",
                "Indiana"
            ]
        ],
        "response": "Here are the role, street, city, and state of the professional with first name Taryn",
        "response_toks": [
            "Here",
            "are",
            "the",
            "role",
            ",",
            "street",
            ",",
            "city",
            ",",
            "and",
            "state",
            "of",
            "the",
            "professional",
            "with",
            "first",
            "name",
            "Taryn"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT role_code , street , city , state FROM professionals WHERE first_name  =  \"Taryn\"",
        "query_w_results_blank_res": "SELECT role_code , street , city , state FROM professionals WHERE first_name  =  \"Taryn\"",
        "query_toks_w_results": [
            "select",
            "role_code",
            ",",
            "street",
            ",",
            "city",
            ",",
            "state",
            "from",
            "professionals",
            "where",
            "first_name",
            "=",
            "\"taryn\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "role_code",
            ",",
            "street",
            ",",
            "city",
            ",",
            "state",
            "from",
            "professionals",
            "where",
            "first_name",
            "=",
            "\"taryn\""
        ],
        "response_blank_res": "Here are the role , street , city , and state of the professional with first name Taryn",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "role",
            ",",
            "street",
            ",",
            "city",
            ",",
            "and",
            "state",
            "of",
            "the",
            "professional",
            "with",
            "first",
            "name",
            "Taryn"
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT first_name,state FROM professionals",
        "query_toks": [
            "select",
            "first_name",
            ",",
            "state",
            "from",
            "professionals"
        ],
        "results_raw": [
            [
                "first_name",
                "state"
            ],
            [
                "Taryn",
                "Indiana"
            ],
            [
                "Jayson",
                "Connecticut"
            ],
            [
                "Olaf",
                "Wisconsin"
            ]
        ],
        "response": "Here are the names and states of all professionals.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "names",
            "and",
            "states",
            "of",
            "all",
            "professionals",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT first_name,state FROM professionals",
        "query_w_results_blank_res": "SELECT first_name,state FROM professionals",
        "query_toks_w_results": [
            "select",
            "first_name",
            ",",
            "state",
            "from",
            "professionals"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "first_name",
            ",",
            "state",
            "from",
            "professionals"
        ],
        "response_blank_res": "Here are the names and states of all professionals .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "names",
            "and",
            "states",
            "of",
            "all",
            "professionals",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT first_name FROM professionals WHERE state  =  \"Indiana\"",
        "query_toks": [
            "select",
            "first_name",
            "from",
            "professionals",
            "where",
            "state",
            "=",
            "\"indiana\""
        ],
        "results_raw": [
            [
                "first_name"
            ],
            [
                "Taryn"
            ],
            [
                "Karley"
            ]
        ],
        "response": "Here are the names of all professionals with the state Indiana",
        "response_toks": [
            "Here",
            "are",
            "the",
            "names",
            "of",
            "all",
            "professionals",
            "with",
            "the",
            "state",
            "Indiana"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT first_name FROM professionals WHERE state  =  \"Indiana\"",
        "query_w_results_blank_res": "SELECT first_name FROM professionals WHERE state  =  \"Indiana\"",
        "query_toks_w_results": [
            "select",
            "first_name",
            "from",
            "professionals",
            "where",
            "state",
            "=",
            "\"indiana\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "first_name",
            "from",
            "professionals",
            "where",
            "state",
            "=",
            "\"indiana\""
        ],
        "response_blank_res": "Here are the names of all professionals with the state Indiana",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "names",
            "of",
            "all",
            "professionals",
            "with",
            "the",
            "state",
            "Indiana"
        ]
    },
    {
        "database_id": "battle_death",
        "query": "SELECT count ( * )  FROM death",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "death"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                13
            ]
        ],
        "response": "There are 13 death events",
        "response_toks": [
            "There",
            "are",
            "13",
            "death",
            "events"
        ],
        "results_map": {
            "result0": "13"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM death | 13 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM death | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "death",
            "13"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "death",
            "result0"
        ],
        "response_blank_res": "There are result0 death events",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "death",
            "events"
        ]
    },
    {
        "database_id": "battle_death",
        "query": "SELECT * FROM death where killed  =   ( select max ( killed )  from death ) ",
        "query_toks": [
            "select",
            "*",
            "from",
            "death",
            "where",
            "killed",
            "=",
            "(",
            "select",
            "max",
            "(",
            "killed",
            ")",
            "from",
            "death",
            ")"
        ],
        "results_raw": [
            [
                "caused_by_ship_id",
                "id",
                "note",
                "killed",
                "injured"
            ],
            [
                1,
                9,
                "Dantewada, Chhattisgarh",
                29,
                0
            ]
        ],
        "response": "Here are the detailed information about the event that has the highest number killed",
        "response_toks": [
            "Here",
            "are",
            "the",
            "detailed",
            "information",
            "about",
            "the",
            "event",
            "that",
            "has",
            "the",
            "highest",
            "number",
            "killed"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT * FROM death where killed  =   ( select max ( killed )  from death ) ",
        "query_w_results_blank_res": "SELECT * FROM death where killed  =   ( select max ( killed )  from death ) ",
        "query_toks_w_results": [
            "select",
            "*",
            "from",
            "death",
            "where",
            "killed",
            "=",
            "(",
            "select",
            "max",
            "(",
            "killed",
            ")",
            "from",
            "death",
            ")"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "*",
            "from",
            "death",
            "where",
            "killed",
            "=",
            "(",
            "select",
            "max",
            "(",
            "killed",
            ")",
            "from",
            "death",
            ")"
        ],
        "response_blank_res": "Here are the detailed information about the event that has the highest number killed",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "detailed",
            "information",
            "about",
            "the",
            "event",
            "that",
            "has",
            "the",
            "highest",
            "number",
            "killed"
        ]
    },
    {
        "database_id": "battle_death",
        "query": "SELECT * FROM death where injured > 0",
        "query_toks": [
            "select",
            "*",
            "from",
            "death",
            "where",
            "injured",
            ">",
            "0"
        ],
        "results_raw": [
            [
                "caused_by_ship_id",
                "id",
                "note",
                "killed",
                "injured"
            ],
            [
                4,
                5,
                "Sundargarh, Odisha",
                0,
                9
            ],
            [
                5,
                7,
                "Dantewada, Chhattisgarh",
                4,
                5
            ]
        ],
        "response": "Yes. Here are the detailed information of the events that have people injured",
        "response_toks": [
            "Yes",
            ".",
            "Here",
            "are",
            "the",
            "detailed",
            "information",
            "of",
            "the",
            "events",
            "that",
            "have",
            "people",
            "injured"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT * FROM death where injured > 0",
        "query_w_results_blank_res": "SELECT * FROM death where injured > 0",
        "query_toks_w_results": [
            "select",
            "*",
            "from",
            "death",
            "where",
            "injured",
            ">",
            "0"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "*",
            "from",
            "death",
            "where",
            "injured",
            ">",
            "0"
        ],
        "response_blank_res": "Yes . Here are the detailed information of the events that have people injured",
        "response_toks_blank_res": [
            "Yes",
            ".",
            "Here",
            "are",
            "the",
            "detailed",
            "information",
            "of",
            "the",
            "events",
            "that",
            "have",
            "people",
            "injured"
        ]
    },
    {
        "database_id": "battle_death",
        "query": "SELECT * FROM death where note like \"%East%\"",
        "query_toks": [
            "select",
            "*",
            "from",
            "death",
            "where",
            "note",
            "like",
            "\"%east%\""
        ],
        "results_raw": [
            [
                "caused_by_ship_id",
                "id",
                "note",
                "killed",
                "injured"
            ],
            [
                3,
                3,
                "East Champaran, Bihar",
                2,
                0
            ]
        ],
        "response": "Here are the detailed information about the events that has word \"East\" in the event notes",
        "response_toks": [
            "Here",
            "are",
            "the",
            "detailed",
            "information",
            "about",
            "the",
            "events",
            "that",
            "has",
            "word",
            "``",
            "East",
            "''",
            "in",
            "the",
            "event",
            "notes"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT * FROM death where note like \"%East%\"",
        "query_w_results_blank_res": "SELECT * FROM death where note like \"%East%\"",
        "query_toks_w_results": [
            "select",
            "*",
            "from",
            "death",
            "where",
            "note",
            "like",
            "\"%east%\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "*",
            "from",
            "death",
            "where",
            "note",
            "like",
            "\"%east%\""
        ],
        "response_blank_res": "Here are the detailed information about the events that has word `` East '' in the event notes",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "detailed",
            "information",
            "about",
            "the",
            "events",
            "that",
            "has",
            "word",
            "``",
            "East",
            "''",
            "in",
            "the",
            "event",
            "notes"
        ]
    },
    {
        "database_id": "battle_death",
        "query": "SELECT T1.killed FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'",
        "query_toks": [
            "select",
            "t1",
            ".",
            "killed",
            "from",
            "death",
            "as",
            "t1",
            "join",
            "ship",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "caused_by_ship_id",
            "=",
            "t2",
            ".",
            "id",
            "where",
            "t2",
            ".",
            "tonnage",
            "=",
            "'t'"
        ],
        "results_raw": [
            [
                "killed"
            ],
            [
                8
            ],
            [
                3
            ],
            [
                25
            ]
        ],
        "response": "These are the death situations caused by the ship with tonnage 't'.",
        "response_toks": [
            "These",
            "are",
            "the",
            "death",
            "situations",
            "caused",
            "by",
            "the",
            "ship",
            "with",
            "tonnage",
            "'t",
            "'",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.killed FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'",
        "query_w_results_blank_res": "SELECT T1.killed FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "killed",
            "from",
            "death",
            "as",
            "t1",
            "join",
            "ship",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "caused_by_ship_id",
            "=",
            "t2",
            ".",
            "id",
            "where",
            "t2",
            ".",
            "tonnage",
            "=",
            "'t'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "killed",
            "from",
            "death",
            "as",
            "t1",
            "join",
            "ship",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "caused_by_ship_id",
            "=",
            "t2",
            ".",
            "id",
            "where",
            "t2",
            ".",
            "tonnage",
            "=",
            "'t'"
        ],
        "response_blank_res": "These are the death situations caused by the ship with tonnage 't ' .",
        "response_toks_blank_res": [
            "These",
            "are",
            "the",
            "death",
            "situations",
            "caused",
            "by",
            "the",
            "ship",
            "with",
            "tonnage",
            "'t",
            "'",
            "."
        ]
    },
    {
        "database_id": "battle_death",
        "query": "SELECT T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'",
        "query_toks": [
            "select",
            "t1",
            ".",
            "injured",
            "from",
            "death",
            "as",
            "t1",
            "join",
            "ship",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "caused_by_ship_id",
            "=",
            "t2",
            ".",
            "id",
            "where",
            "t2",
            ".",
            "tonnage",
            "=",
            "'t'"
        ],
        "results_raw": [
            [
                "injured"
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ]
        ],
        "response": "These are the injury situations caused by the ship with tonnage 't'.",
        "response_toks": [
            "These",
            "are",
            "the",
            "injury",
            "situations",
            "caused",
            "by",
            "the",
            "ship",
            "with",
            "tonnage",
            "'t",
            "'",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'",
        "query_w_results_blank_res": "SELECT T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "injured",
            "from",
            "death",
            "as",
            "t1",
            "join",
            "ship",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "caused_by_ship_id",
            "=",
            "t2",
            ".",
            "id",
            "where",
            "t2",
            ".",
            "tonnage",
            "=",
            "'t'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "injured",
            "from",
            "death",
            "as",
            "t1",
            "join",
            "ship",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "caused_by_ship_id",
            "=",
            "t2",
            ".",
            "id",
            "where",
            "t2",
            ".",
            "tonnage",
            "=",
            "'t'"
        ],
        "response_blank_res": "These are the injury situations caused by the ship with tonnage 't ' .",
        "response_toks_blank_res": [
            "These",
            "are",
            "the",
            "injury",
            "situations",
            "caused",
            "by",
            "the",
            "ship",
            "with",
            "tonnage",
            "'t",
            "'",
            "."
        ]
    },
    {
        "database_id": "battle_death",
        "query": "SELECT COUNT ( T1.id )  FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'",
        "query_toks": [
            "select",
            "count",
            "(",
            "t1",
            ".",
            "id",
            ")",
            "from",
            "death",
            "as",
            "t1",
            "join",
            "ship",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "caused_by_ship_id",
            "=",
            "t2",
            ".",
            "id",
            "where",
            "t2",
            ".",
            "tonnage",
            "=",
            "'t'"
        ],
        "results_raw": [
            [
                "COUNT(T1.id)"
            ],
            [
                11
            ]
        ],
        "response": "There were 11 death and injury situations caused by the ship with tonnage 't'.",
        "response_toks": [
            "There",
            "were",
            "11",
            "death",
            "and",
            "injury",
            "situations",
            "caused",
            "by",
            "the",
            "ship",
            "with",
            "tonnage",
            "'t",
            "'",
            "."
        ],
        "results_map": {
            "result0": "11"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT COUNT ( T1.id )  FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't' | 11 ",
        "query_w_results_blank_res": "SELECT COUNT ( T1.id )  FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't' | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "t1",
            ".",
            "id",
            ")",
            "from",
            "death",
            "as",
            "t1",
            "join",
            "ship",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "caused_by_ship_id",
            "=",
            "t2",
            ".",
            "id",
            "where",
            "t2",
            ".",
            "tonnage",
            "=",
            "'t'",
            "11"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "t1",
            ".",
            "id",
            ")",
            "from",
            "death",
            "as",
            "t1",
            "join",
            "ship",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "caused_by_ship_id",
            "=",
            "t2",
            ".",
            "id",
            "where",
            "t2",
            ".",
            "tonnage",
            "=",
            "'t'",
            "result0"
        ],
        "response_blank_res": "There were result0 death and injury situations caused by the ship with tonnage 't ' .",
        "response_toks_blank_res": [
            "There",
            "were",
            "result0",
            "death",
            "and",
            "injury",
            "situations",
            "caused",
            "by",
            "the",
            "ship",
            "with",
            "tonnage",
            "'t",
            "'",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT T1.Continent ,  count ( * )  FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId   =   T2.continent JOIN car_makers AS T3 ON T2.CountryId   =   T3.Country GROUP BY T1.Continent",
        "query_toks": [
            "select",
            "t1",
            ".",
            "continent",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "continents",
            "as",
            "t1",
            "join",
            "countries",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "contid",
            "=",
            "t2",
            ".",
            "continent",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "countryid",
            "=",
            "t3",
            ".",
            "country",
            "group",
            "by",
            "t1",
            ".",
            "continent"
        ],
        "results_raw": [
            [
                "Continent",
                "count(*)"
            ],
            [
                "america",
                4
            ],
            [
                "asia",
                7
            ],
            [
                "europe",
                11
            ]
        ],
        "response": "Here are the continents with their corresponding number of car makers",
        "response_toks": [
            "Here",
            "are",
            "the",
            "continents",
            "with",
            "their",
            "corresponding",
            "number",
            "of",
            "car",
            "makers"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.Continent ,  count ( * )  FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId   =   T2.continent JOIN car_makers AS T3 ON T2.CountryId   =   T3.Country GROUP BY T1.Continent",
        "query_w_results_blank_res": "SELECT T1.Continent ,  count ( * )  FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId   =   T2.continent JOIN car_makers AS T3 ON T2.CountryId   =   T3.Country GROUP BY T1.Continent",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "continent",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "continents",
            "as",
            "t1",
            "join",
            "countries",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "contid",
            "=",
            "t2",
            ".",
            "continent",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "countryid",
            "=",
            "t3",
            ".",
            "country",
            "group",
            "by",
            "t1",
            ".",
            "continent"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "continent",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "continents",
            "as",
            "t1",
            "join",
            "countries",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "contid",
            "=",
            "t2",
            ".",
            "continent",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "countryid",
            "=",
            "t3",
            ".",
            "country",
            "group",
            "by",
            "t1",
            ".",
            "continent"
        ],
        "response_blank_res": "Here are the continents with their corresponding number of car makers",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "continents",
            "with",
            "their",
            "corresponding",
            "number",
            "of",
            "car",
            "makers"
        ]
    },
    {
        "database_id": "car_1",
        "query": "seLECT count ( * )  FROM car_makers as T1 join countries as T2 on T2.CountryId   =   T1.Country where T2.countryname  =  \"usa\"",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "countries",
            "as",
            "t2",
            "on",
            "t2",
            ".",
            "countryid",
            "=",
            "t1",
            ".",
            "country",
            "where",
            "t2",
            ".",
            "countryname",
            "=",
            "\"usa\""
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                4
            ]
        ],
        "response": "There are 4 car makers in the country USA",
        "response_toks": [
            "There",
            "are",
            "4",
            "car",
            "makers",
            "in",
            "the",
            "country",
            "USA"
        ],
        "results_map": {
            "result0": "4"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "seLECT count ( * )  FROM car_makers as T1 join countries as T2 on T2.CountryId   =   T1.Country where T2.countryname  =  \"usa\" | 4 ",
        "query_w_results_blank_res": "seLECT count ( * )  FROM car_makers as T1 join countries as T2 on T2.CountryId   =   T1.Country where T2.countryname  =  \"usa\" | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "countries",
            "as",
            "t2",
            "on",
            "t2",
            ".",
            "countryid",
            "=",
            "t1",
            ".",
            "country",
            "where",
            "t2",
            ".",
            "countryname",
            "=",
            "\"usa\"",
            "4"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "countries",
            "as",
            "t2",
            "on",
            "t2",
            ".",
            "countryid",
            "=",
            "t1",
            ".",
            "country",
            "where",
            "t2",
            ".",
            "countryname",
            "=",
            "\"usa\"",
            "result0"
        ],
        "response_blank_res": "There are result0 car makers in the country USA",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "car",
            "makers",
            "in",
            "the",
            "country",
            "USA"
        ]
    },
    {
        "database_id": "car_1",
        "query": "seLECT count ( * )  FROM car_makers as T1 join countries as T2 on T2.CountryId   =   T1.Country where T2.countryname  =  \"germany\"",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "countries",
            "as",
            "t2",
            "on",
            "t2",
            ".",
            "countryid",
            "=",
            "t1",
            ".",
            "country",
            "where",
            "t2",
            ".",
            "countryname",
            "=",
            "\"germany\""
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                4
            ]
        ],
        "response": "There are 4 car makers in the country Germany",
        "response_toks": [
            "There",
            "are",
            "4",
            "car",
            "makers",
            "in",
            "the",
            "country",
            "Germany"
        ],
        "results_map": {
            "result0": "4"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "seLECT count ( * )  FROM car_makers as T1 join countries as T2 on T2.CountryId   =   T1.Country where T2.countryname  =  \"germany\" | 4 ",
        "query_w_results_blank_res": "seLECT count ( * )  FROM car_makers as T1 join countries as T2 on T2.CountryId   =   T1.Country where T2.countryname  =  \"germany\" | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "countries",
            "as",
            "t2",
            "on",
            "t2",
            ".",
            "countryid",
            "=",
            "t1",
            ".",
            "country",
            "where",
            "t2",
            ".",
            "countryname",
            "=",
            "\"germany\"",
            "4"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "countries",
            "as",
            "t2",
            "on",
            "t2",
            ".",
            "countryid",
            "=",
            "t1",
            ".",
            "country",
            "where",
            "t2",
            ".",
            "countryname",
            "=",
            "\"germany\"",
            "result0"
        ],
        "response_blank_res": "There are result0 car makers in the country Germany",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "car",
            "makers",
            "in",
            "the",
            "country",
            "Germany"
        ]
    },
    {
        "database_id": "car_1",
        "query": "seLECT count ( * )  FROM car_makers as T1 join countries as T2 on T2.CountryId   =   T1.Country where T2.countryname  =  \"france\"",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "countries",
            "as",
            "t2",
            "on",
            "t2",
            ".",
            "countryid",
            "=",
            "t1",
            ".",
            "country",
            "where",
            "t2",
            ".",
            "countryname",
            "=",
            "\"france\""
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                3
            ]
        ],
        "response": "There are 3 car makers in the country France.",
        "response_toks": [
            "There",
            "are",
            "3",
            "car",
            "makers",
            "in",
            "the",
            "country",
            "France",
            "."
        ],
        "results_map": {
            "result0": "3"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "seLECT count ( * )  FROM car_makers as T1 join countries as T2 on T2.CountryId   =   T1.Country where T2.countryname  =  \"france\" | 3 ",
        "query_w_results_blank_res": "seLECT count ( * )  FROM car_makers as T1 join countries as T2 on T2.CountryId   =   T1.Country where T2.countryname  =  \"france\" | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "countries",
            "as",
            "t2",
            "on",
            "t2",
            ".",
            "countryid",
            "=",
            "t1",
            ".",
            "country",
            "where",
            "t2",
            ".",
            "countryname",
            "=",
            "\"france\"",
            "3"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "countries",
            "as",
            "t2",
            "on",
            "t2",
            ".",
            "countryid",
            "=",
            "t1",
            ".",
            "country",
            "where",
            "t2",
            ".",
            "countryname",
            "=",
            "\"france\"",
            "result0"
        ],
        "response_blank_res": "There are result0 car makers in the country France .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "car",
            "makers",
            "in",
            "the",
            "country",
            "France",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT count ( * )  FROM country",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "country"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                239
            ]
        ],
        "response": "There are 239 countries in total",
        "response_toks": [
            "There",
            "are",
            "239",
            "countries",
            "in",
            "total"
        ],
        "results_map": {
            "result0": "239"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM country | 239 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM country | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "country",
            "239"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "country",
            "result0"
        ],
        "response_blank_res": "There are result0 countries in total",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "countries",
            "in",
            "total"
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT count ( * )  FROM city",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "city"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                4079
            ]
        ],
        "response": "There are 4079 cities",
        "response_toks": [
            "There",
            "are",
            "4079",
            "cities"
        ],
        "results_map": {
            "result0": "4079"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM city | 4079 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM city | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "city",
            "4079"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "city",
            "result0"
        ],
        "response_blank_res": "There are result0 cities",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "cities"
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
        "query_toks": [
            "select",
            "region",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "city",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "name",
            "=",
            "\"kabul\""
        ],
        "results_raw": [
            [
                "Region"
            ],
            [
                "Southern and Central Asia"
            ]
        ],
        "response": "The city with name Kabul is in the region of Southern and Central Asia",
        "response_toks": [
            "The",
            "city",
            "with",
            "name",
            "Kabul",
            "is",
            "in",
            "the",
            "region",
            "of",
            "Southern",
            "and",
            "Central",
            "Asia"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
        "query_w_results_blank_res": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
        "query_toks_w_results": [
            "select",
            "region",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "city",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "name",
            "=",
            "\"kabul\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "region",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "city",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "name",
            "=",
            "\"kabul\""
        ],
        "response_blank_res": "The city with name Kabul is in the region of Southern and Central Asia",
        "response_toks_blank_res": [
            "The",
            "city",
            "with",
            "name",
            "Kabul",
            "is",
            "in",
            "the",
            "region",
            "of",
            "Southern",
            "and",
            "Central",
            "Asia"
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT count ( T2.name )  FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.region  =  \"Southern and Central Asia\"",
        "query_toks": [
            "select",
            "count",
            "(",
            "t2",
            ".",
            "name",
            ")",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "city",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t1",
            ".",
            "region",
            "=",
            "\"southern",
            "and",
            "central",
            "asia\""
        ],
        "results_raw": [
            [
                "count(T2.name)"
            ],
            [
                555
            ]
        ],
        "response": "There are 555 cities in the region of Southern and Central Asia",
        "response_toks": [
            "There",
            "are",
            "555",
            "cities",
            "in",
            "the",
            "region",
            "of",
            "Southern",
            "and",
            "Central",
            "Asia"
        ],
        "results_map": {
            "result0": "555"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( T2.name )  FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.region  =  \"Southern and Central Asia\" | 555 ",
        "query_w_results_blank_res": "SELECT count ( T2.name )  FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.region  =  \"Southern and Central Asia\" | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "t2",
            ".",
            "name",
            ")",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "city",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t1",
            ".",
            "region",
            "=",
            "\"southern",
            "and",
            "central",
            "asia\"",
            "555"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "t2",
            ".",
            "name",
            ")",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "city",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t1",
            ".",
            "region",
            "=",
            "\"southern",
            "and",
            "central",
            "asia\"",
            "result0"
        ],
        "response_blank_res": "There are result0 cities in the region of Southern and Central Asia",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "cities",
            "in",
            "the",
            "region",
            "of",
            "Southern",
            "and",
            "Central",
            "Asia"
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count ( * )  FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id   =   T2.template_id WHERE T1.template_type_code   =   \"BK\"",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "templates",
            "as",
            "t1",
            "join",
            "documents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "template_id",
            "=",
            "t2",
            ".",
            "template_id",
            "where",
            "t1",
            ".",
            "template_type_code",
            "=",
            "\"bk\""
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                5
            ]
        ],
        "response": "There are 5 documents that have template type code BK.",
        "response_toks": [
            "There",
            "are",
            "5",
            "documents",
            "that",
            "have",
            "template",
            "type",
            "code",
            "BK",
            "."
        ],
        "results_map": {
            "result0": "5"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id   =   T2.template_id WHERE T1.template_type_code   =   \"BK\" | 5 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id   =   T2.template_id WHERE T1.template_type_code   =   \"BK\" | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "templates",
            "as",
            "t1",
            "join",
            "documents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "template_id",
            "=",
            "t2",
            ".",
            "template_id",
            "where",
            "t1",
            ".",
            "template_type_code",
            "=",
            "\"bk\"",
            "5"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "templates",
            "as",
            "t1",
            "join",
            "documents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "template_id",
            "=",
            "t2",
            ".",
            "template_id",
            "where",
            "t1",
            ".",
            "template_type_code",
            "=",
            "\"bk\"",
            "result0"
        ],
        "response_blank_res": "There are result0 documents that have template type code BK .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "documents",
            "that",
            "have",
            "template",
            "type",
            "code",
            "BK",
            "."
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id   =   T2.template_id WHERE T1.template_type_code   =   \"BK\"",
        "query_toks": [
            "select",
            "t2",
            ".",
            "document_name",
            "from",
            "templates",
            "as",
            "t1",
            "join",
            "documents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "template_id",
            "=",
            "t2",
            ".",
            "template_id",
            "where",
            "t1",
            ".",
            "template_type_code",
            "=",
            "\"bk\""
        ],
        "results_raw": [
            [
                "Document_Name"
            ],
            [
                "Robbin CV"
            ],
            [
                "Data base"
            ],
            [
                "How to read a book"
            ]
        ],
        "response": "The names of the documents that have template type code BK are shown in the result table.",
        "response_toks": [
            "The",
            "names",
            "of",
            "the",
            "documents",
            "that",
            "have",
            "template",
            "type",
            "code",
            "BK",
            "are",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id   =   T2.template_id WHERE T1.template_type_code   =   \"BK\"",
        "query_w_results_blank_res": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id   =   T2.template_id WHERE T1.template_type_code   =   \"BK\"",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "document_name",
            "from",
            "templates",
            "as",
            "t1",
            "join",
            "documents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "template_id",
            "=",
            "t2",
            ".",
            "template_id",
            "where",
            "t1",
            ".",
            "template_type_code",
            "=",
            "\"bk\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "document_name",
            "from",
            "templates",
            "as",
            "t1",
            "join",
            "documents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "template_id",
            "=",
            "t2",
            ".",
            "template_id",
            "where",
            "t1",
            ".",
            "template_type_code",
            "=",
            "\"bk\""
        ],
        "response_blank_res": "The names of the documents that have template type code BK are shown in the result table .",
        "response_toks_blank_res": [
            "The",
            "names",
            "of",
            "the",
            "documents",
            "that",
            "have",
            "template",
            "type",
            "code",
            "BK",
            "are",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "query": "Select count ( * )  from documents where document_name not in \n ( SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id   =   T2.template_id WHERE T1.template_type_code   =   \"BK\" ) ",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "documents",
            "where",
            "document_name",
            "not",
            "in",
            "(",
            "select",
            "t2",
            ".",
            "document_name",
            "from",
            "templates",
            "as",
            "t1",
            "join",
            "documents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "template_id",
            "=",
            "t2",
            ".",
            "template_id",
            "where",
            "t1",
            ".",
            "template_type_code",
            "=",
            "\"bk\"",
            ")"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                10
            ]
        ],
        "response": "There are 10 documents that do not have a template type code BK.",
        "response_toks": [
            "There",
            "are",
            "10",
            "documents",
            "that",
            "do",
            "not",
            "have",
            "a",
            "template",
            "type",
            "code",
            "BK",
            "."
        ],
        "results_map": {
            "result0": "10"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "Select count ( * )  from documents where document_name not in \n ( SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id   =   T2.template_id WHERE T1.template_type_code   =   \"BK\" )  | 10 ",
        "query_w_results_blank_res": "Select count ( * )  from documents where document_name not in \n ( SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id   =   T2.template_id WHERE T1.template_type_code   =   \"BK\" )  | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "documents",
            "where",
            "document_name",
            "not",
            "in",
            "(",
            "select",
            "t2",
            ".",
            "document_name",
            "from",
            "templates",
            "as",
            "t1",
            "join",
            "documents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "template_id",
            "=",
            "t2",
            ".",
            "template_id",
            "where",
            "t1",
            ".",
            "template_type_code",
            "=",
            "\"bk\"",
            ")",
            "10"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "documents",
            "where",
            "document_name",
            "not",
            "in",
            "(",
            "select",
            "t2",
            ".",
            "document_name",
            "from",
            "templates",
            "as",
            "t1",
            "join",
            "documents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "template_id",
            "=",
            "t2",
            ".",
            "template_id",
            "where",
            "t1",
            ".",
            "template_type_code",
            "=",
            "\"bk\"",
            ")",
            "result0"
        ],
        "response_blank_res": "There are result0 documents that do not have a template type code BK .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "documents",
            "that",
            "do",
            "not",
            "have",
            "a",
            "template",
            "type",
            "code",
            "BK",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  ! =   \"English\"",
        "query_toks": [
            "select",
            "countrycode",
            "from",
            "countrylanguage",
            "where",
            "language",
            "!",
            "=",
            "\"english\""
        ],
        "results_raw": [
            [
                "CountryCode"
            ],
            [
                "ABW"
            ],
            [
                "ABW"
            ],
            [
                "ABW"
            ]
        ],
        "response": "Here are the codes of the countries that do not speak English.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "codes",
            "of",
            "the",
            "countries",
            "that",
            "do",
            "not",
            "speak",
            "English",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  ! =   \"English\"",
        "query_w_results_blank_res": "SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  ! =   \"English\"",
        "query_toks_w_results": [
            "select",
            "countrycode",
            "from",
            "countrylanguage",
            "where",
            "language",
            "!",
            "=",
            "\"english\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "countrycode",
            "from",
            "countrylanguage",
            "where",
            "language",
            "!",
            "=",
            "\"english\""
        ],
        "response_blank_res": "Here are the codes of the countries that do not speak English .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "codes",
            "of",
            "the",
            "countries",
            "that",
            "do",
            "not",
            "speak",
            "English",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT Code FROM country WHERE GovernmentForm ! =  \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE   =   \"English\"",
        "query_toks": [
            "select",
            "code",
            "from",
            "country",
            "where",
            "governmentform",
            "!",
            "=",
            "\"republic\"",
            "except",
            "select",
            "countrycode",
            "from",
            "countrylanguage",
            "where",
            "language",
            "=",
            "\"english\""
        ],
        "results_raw": [
            [
                "Code"
            ],
            [
                "AFG"
            ],
            [
                "AND"
            ],
            [
                "ARE"
            ]
        ],
        "response": "Here are the codes of the countries that do not speak English and whose government forms are not Republic",
        "response_toks": [
            "Here",
            "are",
            "the",
            "codes",
            "of",
            "the",
            "countries",
            "that",
            "do",
            "not",
            "speak",
            "English",
            "and",
            "whose",
            "government",
            "forms",
            "are",
            "not",
            "Republic"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Code FROM country WHERE GovernmentForm ! =  \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE   =   \"English\"",
        "query_w_results_blank_res": "SELECT Code FROM country WHERE GovernmentForm ! =  \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE   =   \"English\"",
        "query_toks_w_results": [
            "select",
            "code",
            "from",
            "country",
            "where",
            "governmentform",
            "!",
            "=",
            "\"republic\"",
            "except",
            "select",
            "countrycode",
            "from",
            "countrylanguage",
            "where",
            "language",
            "=",
            "\"english\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "code",
            "from",
            "country",
            "where",
            "governmentform",
            "!",
            "=",
            "\"republic\"",
            "except",
            "select",
            "countrycode",
            "from",
            "countrylanguage",
            "where",
            "language",
            "=",
            "\"english\""
        ],
        "response_blank_res": "Here are the codes of the countries that do not speak English and whose government forms are not Republic",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "codes",
            "of",
            "the",
            "countries",
            "that",
            "do",
            "not",
            "speak",
            "English",
            "and",
            "whose",
            "government",
            "forms",
            "are",
            "not",
            "Republic"
        ]
    },
    {
        "database_id": "world_1",
        "query": "select countrycode, language from countrylanguage where countrycode in  ( SELECT Code FROM country WHERE GovernmentForm ! =  \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE   =   \"English\" ) ",
        "query_toks": [
            "select",
            "countrycode",
            ",",
            "language",
            "from",
            "countrylanguage",
            "where",
            "countrycode",
            "in",
            "(",
            "select",
            "code",
            "from",
            "country",
            "where",
            "governmentform",
            "!",
            "=",
            "\"republic\"",
            "except",
            "select",
            "countrycode",
            "from",
            "countrylanguage",
            "where",
            "language",
            "=",
            "\"english\"",
            ")"
        ],
        "results_raw": [
            [
                "CountryCode",
                "Language"
            ],
            [
                "AFG",
                "Balochi"
            ],
            [
                "AFG",
                "Dari"
            ],
            [
                "AFG",
                "Pashto"
            ]
        ],
        "response": "Here are languages those countries that do not speak English and whose government forms are not Republic speak.",
        "response_toks": [
            "Here",
            "are",
            "languages",
            "those",
            "countries",
            "that",
            "do",
            "not",
            "speak",
            "English",
            "and",
            "whose",
            "government",
            "forms",
            "are",
            "not",
            "Republic",
            "speak",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "select countrycode, language from countrylanguage where countrycode in  ( SELECT Code FROM country WHERE GovernmentForm ! =  \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE   =   \"English\" ) ",
        "query_w_results_blank_res": "select countrycode, language from countrylanguage where countrycode in  ( SELECT Code FROM country WHERE GovernmentForm ! =  \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE   =   \"English\" ) ",
        "query_toks_w_results": [
            "select",
            "countrycode",
            ",",
            "language",
            "from",
            "countrylanguage",
            "where",
            "countrycode",
            "in",
            "(",
            "select",
            "code",
            "from",
            "country",
            "where",
            "governmentform",
            "!",
            "=",
            "\"republic\"",
            "except",
            "select",
            "countrycode",
            "from",
            "countrylanguage",
            "where",
            "language",
            "=",
            "\"english\"",
            ")"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "countrycode",
            ",",
            "language",
            "from",
            "countrylanguage",
            "where",
            "countrycode",
            "in",
            "(",
            "select",
            "code",
            "from",
            "country",
            "where",
            "governmentform",
            "!",
            "=",
            "\"republic\"",
            "except",
            "select",
            "countrycode",
            "from",
            "countrylanguage",
            "where",
            "language",
            "=",
            "\"english\"",
            ")"
        ],
        "response_blank_res": "Here are languages those countries that do not speak English and whose government forms are not Republic speak .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "languages",
            "those",
            "countries",
            "that",
            "do",
            "not",
            "speak",
            "English",
            "and",
            "whose",
            "government",
            "forms",
            "are",
            "not",
            "Republic",
            "speak",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "select code from country where continent  =  \"North America\" and code in  ( SELECT Code FROM country WHERE GovernmentForm ! =  \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE   =   \"English\" ) ",
        "query_toks": [
            "select",
            "code",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"north",
            "america\"",
            "and",
            "code",
            "in",
            "(",
            "select",
            "code",
            "from",
            "country",
            "where",
            "governmentform",
            "!",
            "=",
            "\"republic\"",
            "except",
            "select",
            "countrycode",
            "from",
            "countrylanguage",
            "where",
            "language",
            "=",
            "\"english\"",
            ")"
        ],
        "results_raw": [
            [
                "Code"
            ],
            [
                "BHS"
            ],
            [
                "CUB"
            ],
            [
                "GLP"
            ]
        ],
        "response": "Here are the codes of countries that are on the continent of North America and do not speak English and whose government forms are not Republic.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "codes",
            "of",
            "countries",
            "that",
            "are",
            "on",
            "the",
            "continent",
            "of",
            "North",
            "America",
            "and",
            "do",
            "not",
            "speak",
            "English",
            "and",
            "whose",
            "government",
            "forms",
            "are",
            "not",
            "Republic",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "select code from country where continent  =  \"North America\" and code in  ( SELECT Code FROM country WHERE GovernmentForm ! =  \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE   =   \"English\" ) ",
        "query_w_results_blank_res": "select code from country where continent  =  \"North America\" and code in  ( SELECT Code FROM country WHERE GovernmentForm ! =  \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE   =   \"English\" ) ",
        "query_toks_w_results": [
            "select",
            "code",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"north",
            "america\"",
            "and",
            "code",
            "in",
            "(",
            "select",
            "code",
            "from",
            "country",
            "where",
            "governmentform",
            "!",
            "=",
            "\"republic\"",
            "except",
            "select",
            "countrycode",
            "from",
            "countrylanguage",
            "where",
            "language",
            "=",
            "\"english\"",
            ")"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "code",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"north",
            "america\"",
            "and",
            "code",
            "in",
            "(",
            "select",
            "code",
            "from",
            "country",
            "where",
            "governmentform",
            "!",
            "=",
            "\"republic\"",
            "except",
            "select",
            "countrycode",
            "from",
            "countrylanguage",
            "where",
            "language",
            "=",
            "\"english\"",
            ")"
        ],
        "response_blank_res": "Here are the codes of countries that are on the continent of North America and do not speak English and whose government forms are not Republic .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "codes",
            "of",
            "countries",
            "that",
            "are",
            "on",
            "the",
            "continent",
            "of",
            "North",
            "America",
            "and",
            "do",
            "not",
            "speak",
            "English",
            "and",
            "whose",
            "government",
            "forms",
            "are",
            "not",
            "Republic",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT * FROM Professionals WHERE state   =   'Indiana'",
        "query_toks": [
            "select",
            "*",
            "from",
            "professionals",
            "where",
            "state",
            "=",
            "'indiana'"
        ],
        "results_raw": [
            [
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number"
            ],
            [
                1,
                "Employee",
                "Taryn",
                "6915 Oberbrunner Point Suite 491\nGleasonville, LA ",
                "West Heidi",
                "Indiana",
                "06646",
                "Braun",
                "deanna.schuster@example.com",
                "+71(6)2898266914",
                "(275)939-2435x80863"
            ],
            [
                8,
                "Employee",
                "Karley",
                "36895 Eli Ferry\nPort Marcelle, FL 45712",
                "Kirastad",
                "Indiana",
                "33020",
                "Hyatt",
                "goyette.roosevelt@example.net",
                "891.475.2256",
                "328.842.3792"
            ]
        ],
        "response": "The information about the professionals from the state Indiana are shown in the result table.",
        "response_toks": [
            "The",
            "information",
            "about",
            "the",
            "professionals",
            "from",
            "the",
            "state",
            "Indiana",
            "are",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ],
        "results_map": {
            "result0": "Indiana"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT * FROM Professionals WHERE state   =   'Indiana' | Indiana ",
        "query_w_results_blank_res": "SELECT * FROM Professionals WHERE state   =   'Indiana' | result0 ",
        "query_toks_w_results": [
            "select",
            "*",
            "from",
            "professionals",
            "where",
            "state",
            "=",
            "'indiana'",
            "Indiana"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "*",
            "from",
            "professionals",
            "where",
            "state",
            "=",
            "'indiana'",
            "result0"
        ],
        "response_blank_res": "The information about the professionals from the state result0 are shown in the result table .",
        "response_toks_blank_res": [
            "The",
            "information",
            "about",
            "the",
            "professionals",
            "from",
            "the",
            "state",
            "result0",
            "are",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT cell_number FROM Professionals WHERE first_name  =  \"Taryn\"",
        "query_toks": [
            "select",
            "cell_number",
            "from",
            "professionals",
            "where",
            "first_name",
            "=",
            "\"taryn\""
        ],
        "results_raw": [
            [
                "cell_number"
            ],
            [
                "(275)939-2435x80863"
            ]
        ],
        "response": "The cell number of the professional with the first name Taryn is shown in the result table.",
        "response_toks": [
            "The",
            "cell",
            "number",
            "of",
            "the",
            "professional",
            "with",
            "the",
            "first",
            "name",
            "Taryn",
            "is",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT cell_number FROM Professionals WHERE first_name  =  \"Taryn\"",
        "query_w_results_blank_res": "SELECT cell_number FROM Professionals WHERE first_name  =  \"Taryn\"",
        "query_toks_w_results": [
            "select",
            "cell_number",
            "from",
            "professionals",
            "where",
            "first_name",
            "=",
            "\"taryn\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "cell_number",
            "from",
            "professionals",
            "where",
            "first_name",
            "=",
            "\"taryn\""
        ],
        "response_blank_res": "The cell number of the professional with the first name Taryn is shown in the result table .",
        "response_toks_blank_res": [
            "The",
            "cell",
            "number",
            "of",
            "the",
            "professional",
            "with",
            "the",
            "first",
            "name",
            "Taryn",
            "is",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count ( * )  FROM Templates",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "templates"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                20
            ]
        ],
        "response": "There are 20 templates.",
        "response_toks": [
            "There",
            "are",
            "20",
            "templates",
            "."
        ],
        "results_map": {
            "result0": "20"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM Templates | 20 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM Templates | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "templates",
            "20"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "templates",
            "result0"
        ],
        "response_blank_res": "There are result0 templates .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "templates",
            "."
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "query": "SELECT Date_Effective_From, Date_Effective_To FROM Templates where Template_ID = 1",
        "query_toks": [
            "select",
            "date_effective_from",
            ",",
            "date_effective_to",
            "from",
            "templates",
            "where",
            "template_id",
            "=",
            "1"
        ],
        "results_raw": [
            [
                "Date_Effective_From",
                "Date_Effective_To"
            ],
            [
                "2010-09-24 01:15:11",
                "1999-07-08 03:31:04"
            ]
        ],
        "response": "The date effective for the template with id 1 is from 2010-09-24 01:15:11 to 1999-07-08 03:31:04",
        "response_toks": [
            "The",
            "date",
            "effective",
            "for",
            "the",
            "template",
            "with",
            "id",
            "1",
            "is",
            "from",
            "2010-09-24",
            "01:15:11",
            "to",
            "1999-07-08",
            "03:31:04"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Date_Effective_From, Date_Effective_To FROM Templates where Template_ID = 1",
        "query_w_results_blank_res": "SELECT Date_Effective_From, Date_Effective_To FROM Templates where Template_ID = 1",
        "query_toks_w_results": [
            "select",
            "date_effective_from",
            ",",
            "date_effective_to",
            "from",
            "templates",
            "where",
            "template_id",
            "=",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "date_effective_from",
            ",",
            "date_effective_to",
            "from",
            "templates",
            "where",
            "template_id",
            "=",
            "1"
        ],
        "response_blank_res": "The date effective for the template with id 1 is from 2010-09-24 01:15:11 to 1999-07-08 03:31:04",
        "response_toks_blank_res": [
            "The",
            "date",
            "effective",
            "for",
            "the",
            "template",
            "with",
            "id",
            "1",
            "is",
            "from",
            "2010-09-24",
            "01:15:11",
            "to",
            "1999-07-08",
            "03:31:04"
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "query": "SELECT Template_Type_Code  FROM Templates where Template_ID = 4",
        "query_toks": [
            "select",
            "template_type_code",
            "from",
            "templates",
            "where",
            "template_id",
            "=",
            "4"
        ],
        "results_raw": [
            [
                "Template_Type_Code"
            ],
            [
                "BK"
            ]
        ],
        "response": "The template type code for the template with id 4 is BK.",
        "response_toks": [
            "The",
            "template",
            "type",
            "code",
            "for",
            "the",
            "template",
            "with",
            "id",
            "4",
            "is",
            "BK",
            "."
        ],
        "results_map": {
            "result0": "BK"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT Template_Type_Code  FROM Templates where Template_ID = 4 | BK ",
        "query_w_results_blank_res": "SELECT Template_Type_Code  FROM Templates where Template_ID = 4 | result0 ",
        "query_toks_w_results": [
            "select",
            "template_type_code",
            "from",
            "templates",
            "where",
            "template_id",
            "=",
            "4",
            "BK"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "template_type_code",
            "from",
            "templates",
            "where",
            "template_id",
            "=",
            "4",
            "result0"
        ],
        "response_blank_res": "The template type code for the template with id 4 is result0 .",
        "response_toks_blank_res": [
            "The",
            "template",
            "type",
            "code",
            "for",
            "the",
            "template",
            "with",
            "id",
            "4",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "query": "SELECT Version_Number  FROM Templates where Template_ID = 0",
        "query_toks": [
            "select",
            "version_number",
            "from",
            "templates",
            "where",
            "template_id",
            "=",
            "0"
        ],
        "results_raw": [
            [
                "Version_Number"
            ],
            [
                5
            ]
        ],
        "response": "The version number for template with id 0 is 5.",
        "response_toks": [
            "The",
            "version",
            "number",
            "for",
            "template",
            "with",
            "id",
            "0",
            "is",
            "5",
            "."
        ],
        "results_map": {
            "result0": "5"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT Version_Number  FROM Templates where Template_ID = 0 | 5 ",
        "query_w_results_blank_res": "SELECT Version_Number  FROM Templates where Template_ID = 0 | result0 ",
        "query_toks_w_results": [
            "select",
            "version_number",
            "from",
            "templates",
            "where",
            "template_id",
            "=",
            "0",
            "5"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "version_number",
            "from",
            "templates",
            "where",
            "template_id",
            "=",
            "0",
            "result0"
        ],
        "response_blank_res": "The version number for template with id 0 is result0 .",
        "response_toks_blank_res": [
            "The",
            "version",
            "number",
            "for",
            "template",
            "with",
            "id",
            "0",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "concert_singer",
        "query": "SELECT country FROM singer WHERE age  >  40",
        "query_toks": [
            "select",
            "country",
            "from",
            "singer",
            "where",
            "age",
            ">",
            "40"
        ],
        "results_raw": [
            [
                "Country"
            ],
            [
                "Netherlands"
            ],
            [
                "France"
            ],
            [
                "France"
            ]
        ],
        "response": "Here is a list of countries where singers with age above 40 are from.",
        "response_toks": [
            "Here",
            "is",
            "a",
            "list",
            "of",
            "countries",
            "where",
            "singers",
            "with",
            "age",
            "above",
            "40",
            "are",
            "from",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT country FROM singer WHERE age  >  40",
        "query_w_results_blank_res": "SELECT country FROM singer WHERE age  >  40",
        "query_toks_w_results": [
            "select",
            "country",
            "from",
            "singer",
            "where",
            "age",
            ">",
            "40"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "country",
            "from",
            "singer",
            "where",
            "age",
            ">",
            "40"
        ],
        "response_blank_res": "Here is a list of countries where singers with age above 40 are from .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "a",
            "list",
            "of",
            "countries",
            "where",
            "singers",
            "with",
            "age",
            "above",
            "40",
            "are",
            "from",
            "."
        ]
    },
    {
        "database_id": "concert_singer",
        "query": "SELECT DISTINCT ( country )  FROM singer WHERE age  < 30",
        "query_toks": [
            "select",
            "distinct",
            "(",
            "country",
            ")",
            "from",
            "singer",
            "where",
            "age",
            "<",
            "30"
        ],
        "results_raw": [
            [
                "Country"
            ],
            [
                "France"
            ]
        ],
        "response": "The country where singers below age 30 are from is France.",
        "response_toks": [
            "The",
            "country",
            "where",
            "singers",
            "below",
            "age",
            "30",
            "are",
            "from",
            "is",
            "France",
            "."
        ],
        "results_map": {
            "result0": "France"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT DISTINCT ( country )  FROM singer WHERE age  < 30 | France ",
        "query_w_results_blank_res": "SELECT DISTINCT ( country )  FROM singer WHERE age  < 30 | result0 ",
        "query_toks_w_results": [
            "select",
            "distinct",
            "(",
            "country",
            ")",
            "from",
            "singer",
            "where",
            "age",
            "<",
            "30",
            "France"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "(",
            "country",
            ")",
            "from",
            "singer",
            "where",
            "age",
            "<",
            "30",
            "result0"
        ],
        "response_blank_res": "The country where singers below age 30 are from is result0 .",
        "response_toks_blank_res": [
            "The",
            "country",
            "where",
            "singers",
            "below",
            "age",
            "30",
            "are",
            "from",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "concert_singer",
        "query": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30",
        "query_toks": [
            "select",
            "country",
            "from",
            "singer",
            "where",
            "age",
            ">",
            "40",
            "intersect",
            "select",
            "country",
            "from",
            "singer",
            "where",
            "age",
            "<",
            "30"
        ],
        "results_raw": [
            [
                "Country"
            ],
            [
                "France"
            ]
        ],
        "response": "The country where singers above age 40 and below age 30 are from is France.",
        "response_toks": [
            "The",
            "country",
            "where",
            "singers",
            "above",
            "age",
            "40",
            "and",
            "below",
            "age",
            "30",
            "are",
            "from",
            "is",
            "France",
            "."
        ],
        "results_map": {
            "result0": "France"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30 | France ",
        "query_w_results_blank_res": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30 | result0 ",
        "query_toks_w_results": [
            "select",
            "country",
            "from",
            "singer",
            "where",
            "age",
            ">",
            "40",
            "intersect",
            "select",
            "country",
            "from",
            "singer",
            "where",
            "age",
            "<",
            "30",
            "France"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "country",
            "from",
            "singer",
            "where",
            "age",
            ">",
            "40",
            "intersect",
            "select",
            "country",
            "from",
            "singer",
            "where",
            "age",
            "<",
            "30",
            "result0"
        ],
        "response_blank_res": "The country where singers above age 40 and below age 30 are from is result0 .",
        "response_toks_blank_res": [
            "The",
            "country",
            "where",
            "singers",
            "above",
            "age",
            "40",
            "and",
            "below",
            "age",
            "30",
            "are",
            "from",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id   =   T2.MakeId WHERE T2.Make   =   'amc hornet sportabout  ( sw ) '",
        "query_toks": [
            "select",
            "t1",
            ".",
            "accelerate",
            "from",
            "cars_data",
            "as",
            "t1",
            "join",
            "car_names",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "makeid",
            "where",
            "t2",
            ".",
            "make",
            "=",
            "'amc",
            "hornet",
            "sportabout",
            "(",
            "sw",
            ")",
            "'"
        ],
        "results_raw": [
            [
                "Accelerate"
            ],
            [
                13.5
            ]
        ],
        "response": "the accelerate of the car make amc hornet sportabout (sw) is 13.5",
        "response_toks": [
            "the",
            "accelerate",
            "of",
            "the",
            "car",
            "make",
            "amc",
            "hornet",
            "sportabout",
            "(",
            "sw",
            ")",
            "is",
            "13.5"
        ],
        "results_map": {
            "result0": "13.5"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id   =   T2.MakeId WHERE T2.Make   =   'amc hornet sportabout  ( sw ) ' | 13.5 ",
        "query_w_results_blank_res": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id   =   T2.MakeId WHERE T2.Make   =   'amc hornet sportabout  ( sw ) ' | result0 ",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "accelerate",
            "from",
            "cars_data",
            "as",
            "t1",
            "join",
            "car_names",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "makeid",
            "where",
            "t2",
            ".",
            "make",
            "=",
            "'amc",
            "hornet",
            "sportabout",
            "(",
            "sw",
            ")",
            "'",
            "13.5"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "accelerate",
            "from",
            "cars_data",
            "as",
            "t1",
            "join",
            "car_names",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "makeid",
            "where",
            "t2",
            ".",
            "make",
            "=",
            "'amc",
            "hornet",
            "sportabout",
            "(",
            "sw",
            ")",
            "'",
            "result0"
        ],
        "response_blank_res": "the accelerate of the car make amc hornet sportabout ( sw ) is result0",
        "response_toks_blank_res": [
            "the",
            "accelerate",
            "of",
            "the",
            "car",
            "make",
            "amc",
            "hornet",
            "sportabout",
            "(",
            "sw",
            ")",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT T2.Model FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id   =   T2.MakeId order by T1.Accelerate desc limit 1",
        "query_toks": [
            "select",
            "t2",
            ".",
            "model",
            "from",
            "cars_data",
            "as",
            "t1",
            "join",
            "car_names",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "makeid",
            "order",
            "by",
            "t1",
            ".",
            "accelerate",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Model"
            ],
            [
                "peugeot"
            ]
        ],
        "response": "the model of car which gives more acceleration is peugeot",
        "response_toks": [
            "the",
            "model",
            "of",
            "car",
            "which",
            "gives",
            "more",
            "acceleration",
            "is",
            "peugeot"
        ],
        "results_map": {
            "result0": "peugeot"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT T2.Model FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id   =   T2.MakeId order by T1.Accelerate desc limit 1 | peugeot ",
        "query_w_results_blank_res": "SELECT T2.Model FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id   =   T2.MakeId order by T1.Accelerate desc limit 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "model",
            "from",
            "cars_data",
            "as",
            "t1",
            "join",
            "car_names",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "makeid",
            "order",
            "by",
            "t1",
            ".",
            "accelerate",
            "desc",
            "limit",
            "1",
            "peugeot"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "model",
            "from",
            "cars_data",
            "as",
            "t1",
            "join",
            "car_names",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "makeid",
            "order",
            "by",
            "t1",
            ".",
            "accelerate",
            "desc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "the model of car which gives more acceleration is result0",
        "response_toks_blank_res": [
            "the",
            "model",
            "of",
            "car",
            "which",
            "gives",
            "more",
            "acceleration",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT T2.Model FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id   =   T2.MakeId order by T1.Year desc limit 1",
        "query_toks": [
            "select",
            "t2",
            ".",
            "model",
            "from",
            "cars_data",
            "as",
            "t1",
            "join",
            "car_names",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "makeid",
            "order",
            "by",
            "t1",
            ".",
            "year",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Model"
            ],
            [
                "chevrolet"
            ]
        ],
        "response": "the model of car which is recent released is chevrolet",
        "response_toks": [
            "the",
            "model",
            "of",
            "car",
            "which",
            "is",
            "recent",
            "released",
            "is",
            "chevrolet"
        ],
        "results_map": {
            "result0": "chevrolet"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT T2.Model FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id   =   T2.MakeId order by T1.Year desc limit 1 | chevrolet ",
        "query_w_results_blank_res": "SELECT T2.Model FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id   =   T2.MakeId order by T1.Year desc limit 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "model",
            "from",
            "cars_data",
            "as",
            "t1",
            "join",
            "car_names",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "makeid",
            "order",
            "by",
            "t1",
            ".",
            "year",
            "desc",
            "limit",
            "1",
            "chevrolet"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "model",
            "from",
            "cars_data",
            "as",
            "t1",
            "join",
            "car_names",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "makeid",
            "order",
            "by",
            "t1",
            ".",
            "year",
            "desc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "the model of car which is recent released is result0",
        "response_toks_blank_res": [
            "the",
            "model",
            "of",
            "car",
            "which",
            "is",
            "recent",
            "released",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_id FROM Templates",
        "query_toks": [
            "select",
            "template_id",
            "from",
            "templates"
        ],
        "results_raw": [
            [
                "Template_ID"
            ],
            [
                0
            ],
            [
                1
            ],
            [
                4
            ]
        ],
        "response": "Here are all the template ides.",
        "response_toks": [
            "Here",
            "are",
            "all",
            "the",
            "template",
            "ides",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT template_id FROM Templates",
        "query_w_results_blank_res": "SELECT template_id FROM Templates",
        "query_toks_w_results": [
            "select",
            "template_id",
            "from",
            "templates"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "template_id",
            "from",
            "templates"
        ],
        "response_blank_res": "Here are all the template ides .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "all",
            "the",
            "template",
            "ides",
            "."
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
        "query_toks": [
            "select",
            "template_id",
            "from",
            "templates",
            "except",
            "select",
            "template_id",
            "from",
            "documents"
        ],
        "results_raw": [
            [
                "Template_ID"
            ],
            [
                0
            ],
            [
                9
            ],
            [
                15
            ]
        ],
        "response": "These template ids are not used in a document.",
        "response_toks": [
            "These",
            "template",
            "ids",
            "are",
            "not",
            "used",
            "in",
            "a",
            "document",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
        "query_w_results_blank_res": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
        "query_toks_w_results": [
            "select",
            "template_id",
            "from",
            "templates",
            "except",
            "select",
            "template_id",
            "from",
            "documents"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "template_id",
            "from",
            "templates",
            "except",
            "select",
            "template_id",
            "from",
            "documents"
        ],
        "response_blank_res": "These template ids are not used in a document .",
        "response_toks_blank_res": [
            "These",
            "template",
            "ids",
            "are",
            "not",
            "used",
            "in",
            "a",
            "document",
            "."
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "query": "SELECT Date_effective_to FROM Templates WHERE template_id IN  (  SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents ) ",
        "query_toks": [
            "select",
            "date_effective_to",
            "from",
            "templates",
            "where",
            "template_id",
            "in",
            "(",
            "select",
            "template_id",
            "from",
            "templates",
            "except",
            "select",
            "template_id",
            "from",
            "documents",
            ")"
        ],
        "results_raw": [
            [
                "Date_Effective_To"
            ],
            [
                "2008-01-05 14:19:28"
            ],
            [
                "1994-12-07 13:26:23"
            ],
            [
                "1993-03-24 14:30:23"
            ]
        ],
        "response": "These are the effective-to dates of all templates not used in a document.",
        "response_toks": [
            "These",
            "are",
            "the",
            "effective-to",
            "dates",
            "of",
            "all",
            "templates",
            "not",
            "used",
            "in",
            "a",
            "document",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Date_effective_to FROM Templates WHERE template_id IN  (  SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents ) ",
        "query_w_results_blank_res": "SELECT Date_effective_to FROM Templates WHERE template_id IN  (  SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents ) ",
        "query_toks_w_results": [
            "select",
            "date_effective_to",
            "from",
            "templates",
            "where",
            "template_id",
            "in",
            "(",
            "select",
            "template_id",
            "from",
            "templates",
            "except",
            "select",
            "template_id",
            "from",
            "documents",
            ")"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "date_effective_to",
            "from",
            "templates",
            "where",
            "template_id",
            "in",
            "(",
            "select",
            "template_id",
            "from",
            "templates",
            "except",
            "select",
            "template_id",
            "from",
            "documents",
            ")"
        ],
        "response_blank_res": "These are the effective-to dates of all templates not used in a document .",
        "response_toks_blank_res": [
            "These",
            "are",
            "the",
            "effective-to",
            "dates",
            "of",
            "all",
            "templates",
            "not",
            "used",
            "in",
            "a",
            "document",
            "."
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count ( * )  FROM Templates WHERE template_id IN  ( SELECT template_id FROM Documents ) ",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "templates",
            "where",
            "template_id",
            "in",
            "(",
            "select",
            "template_id",
            "from",
            "documents",
            ")"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                12
            ]
        ],
        "response": "12 templates are used in a document.",
        "response_toks": [
            "12",
            "templates",
            "are",
            "used",
            "in",
            "a",
            "document",
            "."
        ],
        "results_map": {
            "result0": "12"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM Templates WHERE template_id IN  ( SELECT template_id FROM Documents )  | 12 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM Templates WHERE template_id IN  ( SELECT template_id FROM Documents )  | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "templates",
            "where",
            "template_id",
            "in",
            "(",
            "select",
            "template_id",
            "from",
            "documents",
            ")",
            "12"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "templates",
            "where",
            "template_id",
            "in",
            "(",
            "select",
            "template_id",
            "from",
            "documents",
            ")",
            "result0"
        ],
        "response_blank_res": "result0 templates are used in a document .",
        "response_toks_blank_res": [
            "result0",
            "templates",
            "are",
            "used",
            "in",
            "a",
            "document",
            "."
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count ( * )  FROM Templates WHERE template_id in  ( SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents ) ",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "templates",
            "where",
            "template_id",
            "in",
            "(",
            "select",
            "template_id",
            "from",
            "templates",
            "except",
            "select",
            "template_id",
            "from",
            "documents",
            ")"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                8
            ]
        ],
        "response": "8 templates are not used in a document.",
        "response_toks": [
            "8",
            "templates",
            "are",
            "not",
            "used",
            "in",
            "a",
            "document",
            "."
        ],
        "results_map": {
            "result0": "8"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM Templates WHERE template_id in  ( SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents )  | 8 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM Templates WHERE template_id in  ( SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents )  | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "templates",
            "where",
            "template_id",
            "in",
            "(",
            "select",
            "template_id",
            "from",
            "templates",
            "except",
            "select",
            "template_id",
            "from",
            "documents",
            ")",
            "8"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "templates",
            "where",
            "template_id",
            "in",
            "(",
            "select",
            "template_id",
            "from",
            "templates",
            "except",
            "select",
            "template_id",
            "from",
            "documents",
            ")",
            "result0"
        ],
        "response_blank_res": "result0 templates are not used in a document .",
        "response_toks_blank_res": [
            "result0",
            "templates",
            "are",
            "not",
            "used",
            "in",
            "a",
            "document",
            "."
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
        "query_toks": [
            "select",
            "template_id",
            "from",
            "templates",
            "except",
            "select",
            "template_id",
            "from",
            "documents"
        ],
        "results_raw": [
            [
                "Template_ID"
            ],
            [
                0
            ],
            [
                9
            ],
            [
                15
            ]
        ],
        "response": "Here are the ids for all templates not used by any document.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "ids",
            "for",
            "all",
            "templates",
            "not",
            "used",
            "by",
            "any",
            "document",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
        "query_w_results_blank_res": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
        "query_toks_w_results": [
            "select",
            "template_id",
            "from",
            "templates",
            "except",
            "select",
            "template_id",
            "from",
            "documents"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "template_id",
            "from",
            "templates",
            "except",
            "select",
            "template_id",
            "from",
            "documents"
        ],
        "response_blank_res": "Here are the ids for all templates not used by any document .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "ids",
            "for",
            "all",
            "templates",
            "not",
            "used",
            "by",
            "any",
            "document",
            "."
        ]
    },
    {
        "database_id": "concert_singer",
        "query": "SELECT T2.concert_name , T2.theme , count ( * )  FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id",
        "query_toks": [
            "select",
            "t2",
            ".",
            "concert_name",
            ",",
            "t2",
            ".",
            "theme",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "singer_in_concert",
            "as",
            "t1",
            "join",
            "concert",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "concert_id",
            "=",
            "t2",
            ".",
            "concert_id",
            "group",
            "by",
            "t2",
            ".",
            "concert_id"
        ],
        "results_raw": [
            [
                "concert_Name",
                "Theme",
                "count(*)"
            ],
            [
                "Auditions",
                "Free choice",
                3
            ],
            [
                "Super bootcamp",
                "Free choice 2",
                2
            ],
            [
                "Home Visits",
                "Bleeding Love",
                1
            ]
        ],
        "response": "The names, themes and number of singers for each concert are as follows.",
        "response_toks": [
            "The",
            "names",
            ",",
            "themes",
            "and",
            "number",
            "of",
            "singers",
            "for",
            "each",
            "concert",
            "are",
            "as",
            "follows",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T2.concert_name , T2.theme , count ( * )  FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id",
        "query_w_results_blank_res": "SELECT T2.concert_name , T2.theme , count ( * )  FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "concert_name",
            ",",
            "t2",
            ".",
            "theme",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "singer_in_concert",
            "as",
            "t1",
            "join",
            "concert",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "concert_id",
            "=",
            "t2",
            ".",
            "concert_id",
            "group",
            "by",
            "t2",
            ".",
            "concert_id"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "concert_name",
            ",",
            "t2",
            ".",
            "theme",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "singer_in_concert",
            "as",
            "t1",
            "join",
            "concert",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "concert_id",
            "=",
            "t2",
            ".",
            "concert_id",
            "group",
            "by",
            "t2",
            ".",
            "concert_id"
        ],
        "response_blank_res": "The names , themes and number of singers for each concert are as follows .",
        "response_toks_blank_res": [
            "The",
            "names",
            ",",
            "themes",
            "and",
            "number",
            "of",
            "singers",
            "for",
            "each",
            "concert",
            "are",
            "as",
            "follows",
            "."
        ]
    },
    {
        "database_id": "concert_singer",
        "query": "SELECT Year FROM concert WHERE concert_Name  =  \"Super bootcamp\"",
        "query_toks": [
            "select",
            "year",
            "from",
            "concert",
            "where",
            "concert_name",
            "=",
            "\"super",
            "bootcamp\""
        ],
        "results_raw": [
            [
                "Year"
            ],
            [
                "2014"
            ]
        ],
        "response": "Super bootcamp was in year 2014.",
        "response_toks": [
            "Super",
            "bootcamp",
            "was",
            "in",
            "year",
            "2014",
            "."
        ],
        "results_map": {
            "result0": "2014"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT Year FROM concert WHERE concert_Name  =  \"Super bootcamp\" | 2014 ",
        "query_w_results_blank_res": "SELECT Year FROM concert WHERE concert_Name  =  \"Super bootcamp\" | result0 ",
        "query_toks_w_results": [
            "select",
            "year",
            "from",
            "concert",
            "where",
            "concert_name",
            "=",
            "\"super",
            "bootcamp\"",
            "2014"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "year",
            "from",
            "concert",
            "where",
            "concert_name",
            "=",
            "\"super",
            "bootcamp\"",
            "result0"
        ],
        "response_blank_res": "Super bootcamp was in year result0 .",
        "response_toks_blank_res": [
            "Super",
            "bootcamp",
            "was",
            "in",
            "year",
            "result0",
            "."
        ]
    },
    {
        "database_id": "concert_singer",
        "query": "SELECT Stadium_ID FROM concert WHERE concert_Name  =  \"Super bootcamp\"",
        "query_toks": [
            "select",
            "stadium_id",
            "from",
            "concert",
            "where",
            "concert_name",
            "=",
            "\"super",
            "bootcamp\""
        ],
        "results_raw": [
            [
                "Stadium_ID"
            ],
            [
                "2"
            ]
        ],
        "response": "The stadium id for Super bootcamp is 2.",
        "response_toks": [
            "The",
            "stadium",
            "id",
            "for",
            "Super",
            "bootcamp",
            "is",
            "2",
            "."
        ],
        "results_map": {
            "result0": "2"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT Stadium_ID FROM concert WHERE concert_Name  =  \"Super bootcamp\" | 2 ",
        "query_w_results_blank_res": "SELECT Stadium_ID FROM concert WHERE concert_Name  =  \"Super bootcamp\" | result0 ",
        "query_toks_w_results": [
            "select",
            "stadium_id",
            "from",
            "concert",
            "where",
            "concert_name",
            "=",
            "\"super",
            "bootcamp\"",
            "2"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "stadium_id",
            "from",
            "concert",
            "where",
            "concert_name",
            "=",
            "\"super",
            "bootcamp\"",
            "result0"
        ],
        "response_blank_res": "The stadium id for Super bootcamp is result0 .",
        "response_toks_blank_res": [
            "The",
            "stadium",
            "id",
            "for",
            "Super",
            "bootcamp",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT sum ( Population )  FROM country where Continent  =  'Asia'",
        "query_toks": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "'asia'"
        ],
        "results_raw": [
            [
                "sum(Population)"
            ],
            [
                3705025700
            ]
        ],
        "response": "The total number of population in the Asian continent is 3705025700.",
        "response_toks": [
            "The",
            "total",
            "number",
            "of",
            "population",
            "in",
            "the",
            "Asian",
            "continent",
            "is",
            "3705025700",
            "."
        ],
        "results_map": {
            "result0": "3705025700"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT sum ( Population )  FROM country where Continent  =  'Asia' | 3705025700 ",
        "query_w_results_blank_res": "SELECT sum ( Population )  FROM country where Continent  =  'Asia' | result0 ",
        "query_toks_w_results": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "'asia'",
            "3705025700"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "'asia'",
            "result0"
        ],
        "response_blank_res": "The total number of population in the Asian continent is result0 .",
        "response_toks_blank_res": [
            "The",
            "total",
            "number",
            "of",
            "population",
            "in",
            "the",
            "Asian",
            "continent",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT Language FROM countrylanguage where Percentage  =  9.5",
        "query_toks": [
            "select",
            "language",
            "from",
            "countrylanguage",
            "where",
            "percentage",
            "=",
            "9.5"
        ],
        "results_raw": [
            [
                "Language"
            ],
            [
                "English"
            ],
            [
                "Afrikaans"
            ]
        ],
        "response": "The languages that consist of 9.5 percentage are English and Afrikaans.",
        "response_toks": [
            "The",
            "languages",
            "that",
            "consist",
            "of",
            "9.5",
            "percentage",
            "are",
            "English",
            "and",
            "Afrikaans",
            "."
        ],
        "results_map": {
            "result0": "English",
            "result1": "Afrikaans"
        },
        "results_blank_res": "result0 result1 ",
        "query_w_results": "SELECT Language FROM countrylanguage where Percentage  =  9.5 | English Afrikaans ",
        "query_w_results_blank_res": "SELECT Language FROM countrylanguage where Percentage  =  9.5 | result0 result1 ",
        "query_toks_w_results": [
            "select",
            "language",
            "from",
            "countrylanguage",
            "where",
            "percentage",
            "=",
            "9.5",
            "English",
            "Afrikaans"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "language",
            "from",
            "countrylanguage",
            "where",
            "percentage",
            "=",
            "9.5",
            "result0",
            "result1"
        ],
        "response_blank_res": "The languages that consist of 9.5 percentage are result0 and result1 .",
        "response_toks_blank_res": [
            "The",
            "languages",
            "that",
            "consist",
            "of",
            "9.5",
            "percentage",
            "are",
            "result0",
            "and",
            "result1",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT LifeExpectancy FROM country where LocalName  =  'Angola'",
        "query_toks": [
            "select",
            "lifeexpectancy",
            "from",
            "country",
            "where",
            "localname",
            "=",
            "'angola'"
        ],
        "results_raw": [
            [
                "LifeExpectancy"
            ],
            [
                38.3
            ]
        ],
        "response": "the life expectancy rate in local with name Angola is 38.3.",
        "response_toks": [
            "the",
            "life",
            "expectancy",
            "rate",
            "in",
            "local",
            "with",
            "name",
            "Angola",
            "is",
            "38.3",
            "."
        ],
        "results_map": {
            "result0": "38.3"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT LifeExpectancy FROM country where LocalName  =  'Angola' | 38.3 ",
        "query_w_results_blank_res": "SELECT LifeExpectancy FROM country where LocalName  =  'Angola' | result0 ",
        "query_toks_w_results": [
            "select",
            "lifeexpectancy",
            "from",
            "country",
            "where",
            "localname",
            "=",
            "'angola'",
            "38.3"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "lifeexpectancy",
            "from",
            "country",
            "where",
            "localname",
            "=",
            "'angola'",
            "result0"
        ],
        "response_blank_res": "the life expectancy rate in local with name Angola is result0 .",
        "response_toks_blank_res": [
            "the",
            "life",
            "expectancy",
            "rate",
            "in",
            "local",
            "with",
            "name",
            "Angola",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT GNP FROM country where LocalName  =  'Angola'",
        "query_toks": [
            "select",
            "gnp",
            "from",
            "country",
            "where",
            "localname",
            "=",
            "'angola'"
        ],
        "results_raw": [
            [
                "GNP"
            ],
            [
                6648.0
            ]
        ],
        "response": "The GNP of the country with the local name Angola is 6648.0.",
        "response_toks": [
            "The",
            "GNP",
            "of",
            "the",
            "country",
            "with",
            "the",
            "local",
            "name",
            "Angola",
            "is",
            "6648.0",
            "."
        ],
        "results_map": {
            "result0": "6648.0"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT GNP FROM country where LocalName  =  'Angola' | 6648.0 ",
        "query_w_results_blank_res": "SELECT GNP FROM country where LocalName  =  'Angola' | result0 ",
        "query_toks_w_results": [
            "select",
            "gnp",
            "from",
            "country",
            "where",
            "localname",
            "=",
            "'angola'",
            "6648.0"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "gnp",
            "from",
            "country",
            "where",
            "localname",
            "=",
            "'angola'",
            "result0"
        ],
        "response_blank_res": "The GNP of the country with the local name Angola is result0 .",
        "response_toks_blank_res": [
            "The",
            "GNP",
            "of",
            "the",
            "country",
            "with",
            "the",
            "local",
            "name",
            "Angola",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT GNPOld FROM country where Name  =  'Afghanistan'",
        "query_toks": [
            "select",
            "gnpold",
            "from",
            "country",
            "where",
            "name",
            "=",
            "'afghanistan'"
        ],
        "results_raw": [
            [
                "GNPOld"
            ],
            [
                null
            ]
        ],
        "response": "The GNP old of country Afghanistan is NULL.",
        "response_toks": [
            "The",
            "GNP",
            "old",
            "of",
            "country",
            "Afghanistan",
            "is",
            "NULL",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT GNPOld FROM country where Name  =  'Afghanistan'",
        "query_w_results_blank_res": "SELECT GNPOld FROM country where Name  =  'Afghanistan'",
        "query_toks_w_results": [
            "select",
            "gnpold",
            "from",
            "country",
            "where",
            "name",
            "=",
            "'afghanistan'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "gnpold",
            "from",
            "country",
            "where",
            "name",
            "=",
            "'afghanistan'"
        ],
        "response_blank_res": "The GNP old of country Afghanistan is NULL .",
        "response_toks_blank_res": [
            "The",
            "GNP",
            "old",
            "of",
            "country",
            "Afghanistan",
            "is",
            "NULL",
            "."
        ]
    },
    {
        "database_id": "concert_singer",
        "query": "SELECT song_name FROM singer WHERE song_release_year  >   ( SELECT avg ( song_release_year )  FROM singer ) ",
        "query_toks": [
            "select",
            "song_name",
            "from",
            "singer",
            "where",
            "song_release_year",
            ">",
            "(",
            "select",
            "avg",
            "(",
            "song_release_year",
            ")",
            "from",
            "singer",
            ")"
        ],
        "results_raw": [
            [
                "Song_Name"
            ],
            [
                "Dangerous"
            ],
            [
                "Hey Oh"
            ],
            [
                "Gentleman"
            ]
        ],
        "response": "Here are the names of the singers whose song release year is greater than the average song release year.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "names",
            "of",
            "the",
            "singers",
            "whose",
            "song",
            "release",
            "year",
            "is",
            "greater",
            "than",
            "the",
            "average",
            "song",
            "release",
            "year",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT song_name FROM singer WHERE song_release_year  >   ( SELECT avg ( song_release_year )  FROM singer ) ",
        "query_w_results_blank_res": "SELECT song_name FROM singer WHERE song_release_year  >   ( SELECT avg ( song_release_year )  FROM singer ) ",
        "query_toks_w_results": [
            "select",
            "song_name",
            "from",
            "singer",
            "where",
            "song_release_year",
            ">",
            "(",
            "select",
            "avg",
            "(",
            "song_release_year",
            ")",
            "from",
            "singer",
            ")"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "song_name",
            "from",
            "singer",
            "where",
            "song_release_year",
            ">",
            "(",
            "select",
            "avg",
            "(",
            "song_release_year",
            ")",
            "from",
            "singer",
            ")"
        ],
        "response_blank_res": "Here are the names of the singers whose song release year is greater than the average song release year .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "names",
            "of",
            "the",
            "singers",
            "whose",
            "song",
            "release",
            "year",
            "is",
            "greater",
            "than",
            "the",
            "average",
            "song",
            "release",
            "year",
            "."
        ]
    },
    {
        "database_id": "concert_singer",
        "query": "SELECT avg ( song_release_year )  FROM singer",
        "query_toks": [
            "select",
            "avg",
            "(",
            "song_release_year",
            ")",
            "from",
            "singer"
        ],
        "results_raw": [
            [
                "avg(song_release_year)"
            ],
            [
                2007.6666666666667
            ]
        ],
        "response": "2007.6666666666667 is the average song release year of all singers.",
        "response_toks": [
            "2007.6666666666667",
            "is",
            "the",
            "average",
            "song",
            "release",
            "year",
            "of",
            "all",
            "singers",
            "."
        ],
        "results_map": {
            "result0": "2007.6666666666667"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT avg ( song_release_year )  FROM singer | 2007.6666666666667 ",
        "query_w_results_blank_res": "SELECT avg ( song_release_year )  FROM singer | result0 ",
        "query_toks_w_results": [
            "select",
            "avg",
            "(",
            "song_release_year",
            ")",
            "from",
            "singer",
            "2007.6666666666667"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "avg",
            "(",
            "song_release_year",
            ")",
            "from",
            "singer",
            "result0"
        ],
        "response_blank_res": "result0 is the average song release year of all singers .",
        "response_toks_blank_res": [
            "result0",
            "is",
            "the",
            "average",
            "song",
            "release",
            "year",
            "of",
            "all",
            "singers",
            "."
        ]
    },
    {
        "database_id": "concert_singer",
        "query": "SELECT song_name from singer order by song_release_year",
        "query_toks": [
            "select",
            "song_name",
            "from",
            "singer",
            "order",
            "by",
            "song_release_year"
        ],
        "results_raw": [
            [
                "Song_Name"
            ],
            [
                "You"
            ],
            [
                "Sun"
            ],
            [
                "Dangerous"
            ]
        ],
        "response": "Here are the song names of singers ordered by the song release year.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "song",
            "names",
            "of",
            "singers",
            "ordered",
            "by",
            "the",
            "song",
            "release",
            "year",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT song_name from singer order by song_release_year",
        "query_w_results_blank_res": "SELECT song_name from singer order by song_release_year",
        "query_toks_w_results": [
            "select",
            "song_name",
            "from",
            "singer",
            "order",
            "by",
            "song_release_year"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "song_name",
            "from",
            "singer",
            "order",
            "by",
            "song_release_year"
        ],
        "response_blank_res": "Here are the song names of singers ordered by the song release year .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "song",
            "names",
            "of",
            "singers",
            "ordered",
            "by",
            "the",
            "song",
            "release",
            "year",
            "."
        ]
    },
    {
        "database_id": "concert_singer",
        "query": "SELECT song_name FROM singer WHERE age  >   ( SELECT avg ( age )  FROM singer ) ",
        "query_toks": [
            "select",
            "song_name",
            "from",
            "singer",
            "where",
            "age",
            ">",
            "(",
            "select",
            "avg",
            "(",
            "age",
            ")",
            "from",
            "singer",
            ")"
        ],
        "results_raw": [
            [
                "Song_Name"
            ],
            [
                "You"
            ],
            [
                "Sun"
            ],
            [
                "Gentleman"
            ]
        ],
        "response": "Here are the song names of singers with age above the average.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "song",
            "names",
            "of",
            "singers",
            "with",
            "age",
            "above",
            "the",
            "average",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT song_name FROM singer WHERE age  >   ( SELECT avg ( age )  FROM singer ) ",
        "query_w_results_blank_res": "SELECT song_name FROM singer WHERE age  >   ( SELECT avg ( age )  FROM singer ) ",
        "query_toks_w_results": [
            "select",
            "song_name",
            "from",
            "singer",
            "where",
            "age",
            ">",
            "(",
            "select",
            "avg",
            "(",
            "age",
            ")",
            "from",
            "singer",
            ")"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "song_name",
            "from",
            "singer",
            "where",
            "age",
            ">",
            "(",
            "select",
            "avg",
            "(",
            "age",
            ")",
            "from",
            "singer",
            ")"
        ],
        "response_blank_res": "Here are the song names of singers with age above the average .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "song",
            "names",
            "of",
            "singers",
            "with",
            "age",
            "above",
            "the",
            "average",
            "."
        ]
    },
    {
        "database_id": "orchestra",
        "query": "SELECT T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID   =   T2.Conductor_ID",
        "query_toks": [
            "select",
            "t2",
            ".",
            "orchestra",
            "from",
            "conductor",
            "as",
            "t1",
            "join",
            "orchestra",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "conductor_id",
            "=",
            "t2",
            ".",
            "conductor_id"
        ],
        "results_raw": [
            [
                "Orchestra"
            ],
            [
                "London Symphony Orchestra"
            ],
            [
                "Columbia Symphony Orchestra"
            ],
            [
                "Royal Concertgebouw Orchestra"
            ]
        ],
        "response": "Here are all the orchestras of all conductors.",
        "response_toks": [
            "Here",
            "are",
            "all",
            "the",
            "orchestras",
            "of",
            "all",
            "conductors",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID   =   T2.Conductor_ID",
        "query_w_results_blank_res": "SELECT T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID   =   T2.Conductor_ID",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "orchestra",
            "from",
            "conductor",
            "as",
            "t1",
            "join",
            "orchestra",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "conductor_id",
            "=",
            "t2",
            ".",
            "conductor_id"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "orchestra",
            "from",
            "conductor",
            "as",
            "t1",
            "join",
            "orchestra",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "conductor_id",
            "=",
            "t2",
            ".",
            "conductor_id"
        ],
        "response_blank_res": "Here are all the orchestras of all conductors .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "all",
            "the",
            "orchestras",
            "of",
            "all",
            "conductors",
            "."
        ]
    },
    {
        "database_id": "orchestra",
        "query": "SELECT Name FROM conductor",
        "query_toks": [
            "select",
            "name",
            "from",
            "conductor"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Antal Dor\u00e1ti"
            ],
            [
                "Igor Stravinsky"
            ],
            [
                "Colin Davis"
            ]
        ],
        "response": "Here are the names of all conductors.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "names",
            "of",
            "all",
            "conductors",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Name FROM conductor",
        "query_w_results_blank_res": "SELECT Name FROM conductor",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "conductor"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "conductor"
        ],
        "response_blank_res": "Here are the names of all conductors .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "names",
            "of",
            "all",
            "conductors",
            "."
        ]
    },
    {
        "database_id": "orchestra",
        "query": "SELECT Age FROM conductor WHERE Name  =  \"Colin Davis\"",
        "query_toks": [
            "select",
            "age",
            "from",
            "conductor",
            "where",
            "name",
            "=",
            "\"colin",
            "davis\""
        ],
        "results_raw": [
            [
                "Age"
            ],
            [
                42
            ]
        ],
        "response": "The conductor named Colin Davis is 42 years old.",
        "response_toks": [
            "The",
            "conductor",
            "named",
            "Colin",
            "Davis",
            "is",
            "42",
            "years",
            "old",
            "."
        ],
        "results_map": {
            "result0": "42"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT Age FROM conductor WHERE Name  =  \"Colin Davis\" | 42 ",
        "query_w_results_blank_res": "SELECT Age FROM conductor WHERE Name  =  \"Colin Davis\" | result0 ",
        "query_toks_w_results": [
            "select",
            "age",
            "from",
            "conductor",
            "where",
            "name",
            "=",
            "\"colin",
            "davis\"",
            "42"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "age",
            "from",
            "conductor",
            "where",
            "name",
            "=",
            "\"colin",
            "davis\"",
            "result0"
        ],
        "response_blank_res": "The conductor named Colin Davis is result0 years old .",
        "response_toks_blank_res": [
            "The",
            "conductor",
            "named",
            "Colin",
            "Davis",
            "is",
            "result0",
            "years",
            "old",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT count ( * )  FROM Students",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "students"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                15
            ]
        ],
        "response": "There are 15 students.",
        "response_toks": [
            "There",
            "are",
            "15",
            "students",
            "."
        ],
        "results_map": {
            "result0": "15"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM Students | 15 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM Students | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "students",
            "15"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "students",
            "result0"
        ],
        "response_blank_res": "There are result0 students .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "students",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT first_name FROM Students where student_id = 3",
        "query_toks": [
            "select",
            "first_name",
            "from",
            "students",
            "where",
            "student_id",
            "=",
            "3"
        ],
        "results_raw": [
            [
                "first_name"
            ],
            [
                "Warren"
            ]
        ],
        "response": "The first name for student id 3 is Warren",
        "response_toks": [
            "The",
            "first",
            "name",
            "for",
            "student",
            "id",
            "3",
            "is",
            "Warren"
        ],
        "results_map": {
            "result0": "Warren"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT first_name FROM Students where student_id = 3 | Warren ",
        "query_w_results_blank_res": "SELECT first_name FROM Students where student_id = 3 | result0 ",
        "query_toks_w_results": [
            "select",
            "first_name",
            "from",
            "students",
            "where",
            "student_id",
            "=",
            "3",
            "Warren"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "first_name",
            "from",
            "students",
            "where",
            "student_id",
            "=",
            "3",
            "result0"
        ],
        "response_blank_res": "The first name for student id 3 is result0",
        "response_toks_blank_res": [
            "The",
            "first",
            "name",
            "for",
            "student",
            "id",
            "3",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT email_address FROM Students where student_id = 2",
        "query_toks": [
            "select",
            "email_address",
            "from",
            "students",
            "where",
            "student_id",
            "=",
            "2"
        ],
        "results_raw": [
            [
                "email_address"
            ],
            [
                "swift.kolby@example.com"
            ]
        ],
        "response": "The email address for student id 2 is swift.kolby@example.com",
        "response_toks": [
            "The",
            "email",
            "address",
            "for",
            "student",
            "id",
            "2",
            "is",
            "swift.kolby",
            "@",
            "example.com"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT email_address FROM Students where student_id = 2",
        "query_w_results_blank_res": "SELECT email_address FROM Students where student_id = 2",
        "query_toks_w_results": [
            "select",
            "email_address",
            "from",
            "students",
            "where",
            "student_id",
            "=",
            "2"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "email_address",
            "from",
            "students",
            "where",
            "student_id",
            "=",
            "2"
        ],
        "response_blank_res": "The email address for student id 2 is swift.kolby @ example.com",
        "response_toks_blank_res": [
            "The",
            "email",
            "address",
            "for",
            "student",
            "id",
            "2",
            "is",
            "swift.kolby",
            "@",
            "example.com"
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT count ( * )  FROM Student_Enrolment",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "student_enrolment"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                15
            ]
        ],
        "response": "There are 15 students enrollments.",
        "response_toks": [
            "There",
            "are",
            "15",
            "students",
            "enrollments",
            "."
        ],
        "results_map": {
            "result0": "15"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM Student_Enrolment | 15 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM Student_Enrolment | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "student_enrolment",
            "15"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "student_enrolment",
            "result0"
        ],
        "response_blank_res": "There are result0 students enrollments .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "students",
            "enrollments",
            "."
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "query": "SELECT * FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID   =   T2.template_ID",
        "query_toks": [
            "select",
            "*",
            "from",
            "templates",
            "as",
            "t1",
            "join",
            "documents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "template_id",
            "=",
            "t2",
            ".",
            "template_id"
        ],
        "results_raw": [
            [
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details"
            ],
            [
                7,
                8,
                "PPT",
                "1993-10-07 02:33:04",
                "1975-07-16 04:52:10",
                "",
                0,
                7,
                "Introduction of OS",
                "n",
                null
            ],
            [
                25,
                5,
                "PP",
                "1979-10-20 21:23:20",
                "2006-02-06 23:52:04",
                "",
                1,
                25,
                "Understanding DB",
                "y",
                null
            ],
            [
                6,
                2,
                "PPT",
                "1975-05-20 22:51:19",
                "1992-05-02 20:06:11",
                "",
                3,
                6,
                "Summer Show",
                "u",
                null
            ]
        ],
        "response": "These are the information about all the templates that have been used by all documents",
        "response_toks": [
            "These",
            "are",
            "the",
            "information",
            "about",
            "all",
            "the",
            "templates",
            "that",
            "have",
            "been",
            "used",
            "by",
            "all",
            "documents"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT * FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID   =   T2.template_ID",
        "query_w_results_blank_res": "SELECT * FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID   =   T2.template_ID",
        "query_toks_w_results": [
            "select",
            "*",
            "from",
            "templates",
            "as",
            "t1",
            "join",
            "documents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "template_id",
            "=",
            "t2",
            ".",
            "template_id"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "*",
            "from",
            "templates",
            "as",
            "t1",
            "join",
            "documents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "template_id",
            "=",
            "t2",
            ".",
            "template_id"
        ],
        "response_blank_res": "These are the information about all the templates that have been used by all documents",
        "response_toks_blank_res": [
            "These",
            "are",
            "the",
            "information",
            "about",
            "all",
            "the",
            "templates",
            "that",
            "have",
            "been",
            "used",
            "by",
            "all",
            "documents"
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  =  T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
        "query_toks": [
            "select",
            "t1",
            ".",
            "template_type_description",
            "from",
            "ref_template_types",
            "as",
            "t1",
            "join",
            "templates",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "template_type_code",
            "=",
            "t2",
            ".",
            "template_type_code",
            "join",
            "documents",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "template_id",
            "=",
            "t3",
            ".",
            "template_id"
        ],
        "results_raw": [
            [
                "Template_Type_Description"
            ],
            [
                "Presentation"
            ],
            [
                "Paper"
            ],
            [
                "Presentation"
            ]
        ],
        "response": "These are the template type descriptions for templates ever used by any document.",
        "response_toks": [
            "These",
            "are",
            "the",
            "template",
            "type",
            "descriptions",
            "for",
            "templates",
            "ever",
            "used",
            "by",
            "any",
            "document",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  =  T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
        "query_w_results_blank_res": "SELECT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  =  T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "template_type_description",
            "from",
            "ref_template_types",
            "as",
            "t1",
            "join",
            "templates",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "template_type_code",
            "=",
            "t2",
            ".",
            "template_type_code",
            "join",
            "documents",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "template_id",
            "=",
            "t3",
            ".",
            "template_id"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "template_type_description",
            "from",
            "ref_template_types",
            "as",
            "t1",
            "join",
            "templates",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "template_type_code",
            "=",
            "t2",
            ".",
            "template_type_code",
            "join",
            "documents",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "template_id",
            "=",
            "t3",
            ".",
            "template_id"
        ],
        "response_blank_res": "These are the template type descriptions for templates ever used by any document .",
        "response_toks_blank_res": [
            "These",
            "are",
            "the",
            "template",
            "type",
            "descriptions",
            "for",
            "templates",
            "ever",
            "used",
            "by",
            "any",
            "document",
            "."
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  =  T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
        "query_toks": [
            "select",
            "distinct",
            "t1",
            ".",
            "template_type_description",
            "from",
            "ref_template_types",
            "as",
            "t1",
            "join",
            "templates",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "template_type_code",
            "=",
            "t2",
            ".",
            "template_type_code",
            "join",
            "documents",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "template_id",
            "=",
            "t3",
            ".",
            "template_id"
        ],
        "results_raw": [
            [
                "Template_Type_Description"
            ],
            [
                "Presentation"
            ],
            [
                "Paper"
            ],
            [
                "Book"
            ]
        ],
        "response": "These are the distinct templates type descriptions for templates ever used by any document.",
        "response_toks": [
            "These",
            "are",
            "the",
            "distinct",
            "templates",
            "type",
            "descriptions",
            "for",
            "templates",
            "ever",
            "used",
            "by",
            "any",
            "document",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  =  T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
        "query_w_results_blank_res": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  =  T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
        "query_toks_w_results": [
            "select",
            "distinct",
            "t1",
            ".",
            "template_type_description",
            "from",
            "ref_template_types",
            "as",
            "t1",
            "join",
            "templates",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "template_type_code",
            "=",
            "t2",
            ".",
            "template_type_code",
            "join",
            "documents",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "template_id",
            "=",
            "t3",
            ".",
            "template_id"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "t1",
            ".",
            "template_type_description",
            "from",
            "ref_template_types",
            "as",
            "t1",
            "join",
            "templates",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "template_type_code",
            "=",
            "t2",
            ".",
            "template_type_code",
            "join",
            "documents",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "template_id",
            "=",
            "t3",
            ".",
            "template_id"
        ],
        "response_blank_res": "These are the distinct templates type descriptions for templates ever used by any document .",
        "response_toks_blank_res": [
            "These",
            "are",
            "the",
            "distinct",
            "templates",
            "type",
            "descriptions",
            "for",
            "templates",
            "ever",
            "used",
            "by",
            "any",
            "document",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT Name FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "query_toks": [
            "select",
            "name",
            "from",
            "country",
            "order",
            "by",
            "surfacearea",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Russian Federation"
            ]
        ],
        "response": "Russian Federation is the name of the country with the largest area.",
        "response_toks": [
            "Russian",
            "Federation",
            "is",
            "the",
            "name",
            "of",
            "the",
            "country",
            "with",
            "the",
            "largest",
            "area",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Name FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "query_w_results_blank_res": "SELECT Name FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "country",
            "order",
            "by",
            "surfacearea",
            "desc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "country",
            "order",
            "by",
            "surfacearea",
            "desc",
            "limit",
            "1"
        ],
        "response_blank_res": "Russian Federation is the name of the country with the largest area .",
        "response_toks_blank_res": [
            "Russian",
            "Federation",
            "is",
            "the",
            "name",
            "of",
            "the",
            "country",
            "with",
            "the",
            "largest",
            "area",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT Population FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "query_toks": [
            "select",
            "population",
            "from",
            "country",
            "order",
            "by",
            "surfacearea",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Population"
            ],
            [
                146934000
            ]
        ],
        "response": "The population for the country with the largest area is 146934000",
        "response_toks": [
            "The",
            "population",
            "for",
            "the",
            "country",
            "with",
            "the",
            "largest",
            "area",
            "is",
            "146934000"
        ],
        "results_map": {
            "result0": "146934000"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT Population FROM country ORDER BY SurfaceArea DESC LIMIT 1 | 146934000 ",
        "query_w_results_blank_res": "SELECT Population FROM country ORDER BY SurfaceArea DESC LIMIT 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "population",
            "from",
            "country",
            "order",
            "by",
            "surfacearea",
            "desc",
            "limit",
            "1",
            "146934000"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "population",
            "from",
            "country",
            "order",
            "by",
            "surfacearea",
            "desc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "The population for the country with the largest area is result0",
        "response_toks_blank_res": [
            "The",
            "population",
            "for",
            "the",
            "country",
            "with",
            "the",
            "largest",
            "area",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "query_toks": [
            "select",
            "headofstate",
            "from",
            "country",
            "order",
            "by",
            "surfacearea",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "HeadOfState"
            ],
            [
                "Vladimir Putin"
            ]
        ],
        "response": "The leader for the country with the largest area is Vladimir Putin.",
        "response_toks": [
            "The",
            "leader",
            "for",
            "the",
            "country",
            "with",
            "the",
            "largest",
            "area",
            "is",
            "Vladimir",
            "Putin",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "query_w_results_blank_res": "SELECT HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "query_toks_w_results": [
            "select",
            "headofstate",
            "from",
            "country",
            "order",
            "by",
            "surfacearea",
            "desc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "headofstate",
            "from",
            "country",
            "order",
            "by",
            "surfacearea",
            "desc",
            "limit",
            "1"
        ],
        "response_blank_res": "The leader for the country with the largest area is Vladimir Putin .",
        "response_toks_blank_res": [
            "The",
            "leader",
            "for",
            "the",
            "country",
            "with",
            "the",
            "largest",
            "area",
            "is",
            "Vladimir",
            "Putin",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT Continent FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "query_toks": [
            "select",
            "continent",
            "from",
            "country",
            "order",
            "by",
            "surfacearea",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Continent"
            ],
            [
                "Europe"
            ]
        ],
        "response": "the country with the largest area is in Europe.",
        "response_toks": [
            "the",
            "country",
            "with",
            "the",
            "largest",
            "area",
            "is",
            "in",
            "Europe",
            "."
        ],
        "results_map": {
            "result0": "Europe"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT Continent FROM country ORDER BY SurfaceArea DESC LIMIT 1 | Europe ",
        "query_w_results_blank_res": "SELECT Continent FROM country ORDER BY SurfaceArea DESC LIMIT 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "continent",
            "from",
            "country",
            "order",
            "by",
            "surfacearea",
            "desc",
            "limit",
            "1",
            "Europe"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "continent",
            "from",
            "country",
            "order",
            "by",
            "surfacearea",
            "desc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "the country with the largest area is in result0 .",
        "response_toks_blank_res": [
            "the",
            "country",
            "with",
            "the",
            "largest",
            "area",
            "is",
            "in",
            "result0",
            "."
        ]
    },
    {
        "database_id": "poker_player",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID WHERE T2.Earnings  >  300000",
        "query_toks": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "people",
            "as",
            "t1",
            "join",
            "poker_player",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "people_id",
            "=",
            "t2",
            ".",
            "people_id",
            "where",
            "t2",
            ".",
            "earnings",
            ">",
            "300000"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Aleksey Ostapenko"
            ],
            [
                "Maksim Botin"
            ]
        ],
        "response": "The names of poker players whose earnings is higher than 300000 are listed.",
        "response_toks": [
            "The",
            "names",
            "of",
            "poker",
            "players",
            "whose",
            "earnings",
            "is",
            "higher",
            "than",
            "300000",
            "are",
            "listed",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID WHERE T2.Earnings  >  300000",
        "query_w_results_blank_res": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID WHERE T2.Earnings  >  300000",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "people",
            "as",
            "t1",
            "join",
            "poker_player",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "people_id",
            "=",
            "t2",
            ".",
            "people_id",
            "where",
            "t2",
            ".",
            "earnings",
            ">",
            "300000"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "people",
            "as",
            "t1",
            "join",
            "poker_player",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "people_id",
            "=",
            "t2",
            ".",
            "people_id",
            "where",
            "t2",
            ".",
            "earnings",
            ">",
            "300000"
        ],
        "response_blank_res": "The names of poker players whose earnings is higher than 300000 are listed .",
        "response_toks_blank_res": [
            "The",
            "names",
            "of",
            "poker",
            "players",
            "whose",
            "earnings",
            "is",
            "higher",
            "than",
            "300000",
            "are",
            "listed",
            "."
        ]
    },
    {
        "database_id": "poker_player",
        "query": "SELECT count ( Poker_Player_ID )  from poker_player",
        "query_toks": [
            "select",
            "count",
            "(",
            "poker_player_id",
            ")",
            "from",
            "poker_player"
        ],
        "results_raw": [
            [
                "count(Poker_Player_ID)"
            ],
            [
                5
            ]
        ],
        "response": "The number of poker players is 5.",
        "response_toks": [
            "The",
            "number",
            "of",
            "poker",
            "players",
            "is",
            "5",
            "."
        ],
        "results_map": {
            "result0": "5"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( Poker_Player_ID )  from poker_player | 5 ",
        "query_w_results_blank_res": "SELECT count ( Poker_Player_ID )  from poker_player | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "poker_player_id",
            ")",
            "from",
            "poker_player",
            "5"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "poker_player_id",
            ")",
            "from",
            "poker_player",
            "result0"
        ],
        "response_blank_res": "The number of poker players is result0 .",
        "response_toks_blank_res": [
            "The",
            "number",
            "of",
            "poker",
            "players",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT count ( * )  FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id   =   T2.address_id WHERE T2.state_province_county   =   'NorthCarolina'",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "addresses",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "current_address_id",
            "=",
            "t2",
            ".",
            "address_id",
            "where",
            "t2",
            ".",
            "state_province_county",
            "=",
            "'northcarolina'"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                3
            ]
        ],
        "response": "There are 3 students who live in the state of North Carolina.",
        "response_toks": [
            "There",
            "are",
            "3",
            "students",
            "who",
            "live",
            "in",
            "the",
            "state",
            "of",
            "North",
            "Carolina",
            "."
        ],
        "results_map": {
            "result0": "3"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id   =   T2.address_id WHERE T2.state_province_county   =   'NorthCarolina' | 3 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id   =   T2.address_id WHERE T2.state_province_county   =   'NorthCarolina' | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "addresses",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "current_address_id",
            "=",
            "t2",
            ".",
            "address_id",
            "where",
            "t2",
            ".",
            "state_province_county",
            "=",
            "'northcarolina'",
            "3"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "addresses",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "current_address_id",
            "=",
            "t2",
            ".",
            "address_id",
            "where",
            "t2",
            ".",
            "state_province_county",
            "=",
            "'northcarolina'",
            "result0"
        ],
        "response_blank_res": "There are result0 students who live in the state of North Carolina .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "students",
            "who",
            "live",
            "in",
            "the",
            "state",
            "of",
            "North",
            "Carolina",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT T1.first_name,T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id   =   T2.address_id WHERE T2.state_province_county   =   'NorthCarolina'",
        "query_toks": [
            "select",
            "t1",
            ".",
            "first_name",
            ",",
            "t1",
            ".",
            "last_name",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "addresses",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "current_address_id",
            "=",
            "t2",
            ".",
            "address_id",
            "where",
            "t2",
            ".",
            "state_province_county",
            "=",
            "'northcarolina'"
        ],
        "results_raw": [
            [
                "first_name",
                "last_name"
            ],
            [
                "Warren",
                "Gleichner"
            ],
            [
                "Milton",
                "Christiansen"
            ],
            [
                "Deon",
                "Weimann"
            ]
        ],
        "response": "Here are the first and last names of students who live in the state of North Carolina",
        "response_toks": [
            "Here",
            "are",
            "the",
            "first",
            "and",
            "last",
            "names",
            "of",
            "students",
            "who",
            "live",
            "in",
            "the",
            "state",
            "of",
            "North",
            "Carolina"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.first_name,T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id   =   T2.address_id WHERE T2.state_province_county   =   'NorthCarolina'",
        "query_w_results_blank_res": "SELECT T1.first_name,T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id   =   T2.address_id WHERE T2.state_province_county   =   'NorthCarolina'",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "first_name",
            ",",
            "t1",
            ".",
            "last_name",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "addresses",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "current_address_id",
            "=",
            "t2",
            ".",
            "address_id",
            "where",
            "t2",
            ".",
            "state_province_county",
            "=",
            "'northcarolina'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "first_name",
            ",",
            "t1",
            ".",
            "last_name",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "addresses",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "current_address_id",
            "=",
            "t2",
            ".",
            "address_id",
            "where",
            "t2",
            ".",
            "state_province_county",
            "=",
            "'northcarolina'"
        ],
        "response_blank_res": "Here are the first and last names of students who live in the state of North Carolina",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "first",
            "and",
            "last",
            "names",
            "of",
            "students",
            "who",
            "live",
            "in",
            "the",
            "state",
            "of",
            "North",
            "Carolina"
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT T1.first_name, T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id   =   T2.address_id WHERE T2.state_province_county   =   'NorthCarolina' EXCEPT SELECT T3.first_name, T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id   =   T4.student_id",
        "query_toks": [
            "select",
            "t1",
            ".",
            "first_name",
            ",",
            "t1",
            ".",
            "last_name",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "addresses",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "current_address_id",
            "=",
            "t2",
            ".",
            "address_id",
            "where",
            "t2",
            ".",
            "state_province_county",
            "=",
            "'northcarolina'",
            "except",
            "select",
            "t3",
            ".",
            "first_name",
            ",",
            "t3",
            ".",
            "last_name",
            "from",
            "students",
            "as",
            "t3",
            "join",
            "student_enrolment",
            "as",
            "t4",
            "on",
            "t3",
            ".",
            "student_id",
            "=",
            "t4",
            ".",
            "student_id"
        ],
        "results_raw": [
            [
                "first_name",
                "last_name"
            ],
            [
                "Deon",
                "Weimann"
            ],
            [
                "Warren",
                "Gleichner"
            ]
        ],
        "response": "Here are the first and last names of students who live in the state of North Carolina but have not registered in any degree program.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "first",
            "and",
            "last",
            "names",
            "of",
            "students",
            "who",
            "live",
            "in",
            "the",
            "state",
            "of",
            "North",
            "Carolina",
            "but",
            "have",
            "not",
            "registered",
            "in",
            "any",
            "degree",
            "program",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.first_name, T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id   =   T2.address_id WHERE T2.state_province_county   =   'NorthCarolina' EXCEPT SELECT T3.first_name, T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id   =   T4.student_id",
        "query_w_results_blank_res": "SELECT T1.first_name, T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id   =   T2.address_id WHERE T2.state_province_county   =   'NorthCarolina' EXCEPT SELECT T3.first_name, T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id   =   T4.student_id",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "first_name",
            ",",
            "t1",
            ".",
            "last_name",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "addresses",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "current_address_id",
            "=",
            "t2",
            ".",
            "address_id",
            "where",
            "t2",
            ".",
            "state_province_county",
            "=",
            "'northcarolina'",
            "except",
            "select",
            "t3",
            ".",
            "first_name",
            ",",
            "t3",
            ".",
            "last_name",
            "from",
            "students",
            "as",
            "t3",
            "join",
            "student_enrolment",
            "as",
            "t4",
            "on",
            "t3",
            ".",
            "student_id",
            "=",
            "t4",
            ".",
            "student_id"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "first_name",
            ",",
            "t1",
            ".",
            "last_name",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "addresses",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "current_address_id",
            "=",
            "t2",
            ".",
            "address_id",
            "where",
            "t2",
            ".",
            "state_province_county",
            "=",
            "'northcarolina'",
            "except",
            "select",
            "t3",
            ".",
            "first_name",
            ",",
            "t3",
            ".",
            "last_name",
            "from",
            "students",
            "as",
            "t3",
            "join",
            "student_enrolment",
            "as",
            "t4",
            "on",
            "t3",
            ".",
            "student_id",
            "=",
            "t4",
            ".",
            "student_id"
        ],
        "response_blank_res": "Here are the first and last names of students who live in the state of North Carolina but have not registered in any degree program .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "first",
            "and",
            "last",
            "names",
            "of",
            "students",
            "who",
            "live",
            "in",
            "the",
            "state",
            "of",
            "North",
            "Carolina",
            "but",
            "have",
            "not",
            "registered",
            "in",
            "any",
            "degree",
            "program",
            "."
        ]
    },
    {
        "database_id": "voter_1",
        "query": "select area_code from AREA_CODE_STATE",
        "query_toks": [
            "select",
            "area_code",
            "from",
            "area_code_state"
        ],
        "results_raw": [
            [
                "area_code"
            ],
            [
                201
            ],
            [
                202
            ],
            [
                203
            ]
        ],
        "response": "Here is the result table shows all the area codes.",
        "response_toks": [
            "Here",
            "is",
            "the",
            "result",
            "table",
            "shows",
            "all",
            "the",
            "area",
            "codes",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "select area_code from AREA_CODE_STATE",
        "query_w_results_blank_res": "select area_code from AREA_CODE_STATE",
        "query_toks_w_results": [
            "select",
            "area_code",
            "from",
            "area_code_state"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "area_code",
            "from",
            "area_code_state"
        ],
        "response_blank_res": "Here is the result table shows all the area codes .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "result",
            "table",
            "shows",
            "all",
            "the",
            "area",
            "codes",
            "."
        ]
    },
    {
        "database_id": "voter_1",
        "query": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling'",
        "query_toks": [
            "select",
            "t3",
            ".",
            "area_code",
            "from",
            "contestants",
            "as",
            "t1",
            "join",
            "votes",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "contestant_number",
            "=",
            "t2",
            ".",
            "contestant_number",
            "join",
            "area_code_state",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "state",
            "=",
            "t3",
            ".",
            "state",
            "where",
            "t1",
            ".",
            "contestant_name",
            "=",
            "'tabatha",
            "gehling'"
        ],
        "results_raw": [
            [
                "area_code"
            ],
            [
                212
            ],
            [
                315
            ],
            [
                347
            ]
        ],
        "response": "Here is the result table shows the area codes voted for the contestant 'Tabatha Gehling'.",
        "response_toks": [
            "Here",
            "is",
            "the",
            "result",
            "table",
            "shows",
            "the",
            "area",
            "codes",
            "voted",
            "for",
            "the",
            "contestant",
            "'Tabatha",
            "Gehling",
            "'",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling'",
        "query_w_results_blank_res": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling'",
        "query_toks_w_results": [
            "select",
            "t3",
            ".",
            "area_code",
            "from",
            "contestants",
            "as",
            "t1",
            "join",
            "votes",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "contestant_number",
            "=",
            "t2",
            ".",
            "contestant_number",
            "join",
            "area_code_state",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "state",
            "=",
            "t3",
            ".",
            "state",
            "where",
            "t1",
            ".",
            "contestant_name",
            "=",
            "'tabatha",
            "gehling'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t3",
            ".",
            "area_code",
            "from",
            "contestants",
            "as",
            "t1",
            "join",
            "votes",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "contestant_number",
            "=",
            "t2",
            ".",
            "contestant_number",
            "join",
            "area_code_state",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "state",
            "=",
            "t3",
            ".",
            "state",
            "where",
            "t1",
            ".",
            "contestant_name",
            "=",
            "'tabatha",
            "gehling'"
        ],
        "response_blank_res": "Here is the result table shows the area codes voted for the contestant 'Tabatha Gehling ' .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "result",
            "table",
            "shows",
            "the",
            "area",
            "codes",
            "voted",
            "for",
            "the",
            "contestant",
            "'Tabatha",
            "Gehling",
            "'",
            "."
        ]
    },
    {
        "database_id": "voter_1",
        "query": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'",
        "query_toks": [
            "select",
            "t3",
            ".",
            "area_code",
            "from",
            "contestants",
            "as",
            "t1",
            "join",
            "votes",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "contestant_number",
            "=",
            "t2",
            ".",
            "contestant_number",
            "join",
            "area_code_state",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "state",
            "=",
            "t3",
            ".",
            "state",
            "where",
            "t1",
            ".",
            "contestant_name",
            "=",
            "'kelly",
            "clauss'"
        ],
        "results_raw": [
            [
                "area_code"
            ],
            [
                212
            ],
            [
                315
            ],
            [
                347
            ]
        ],
        "response": "Here is the result table shows the area codes voted for the contestant 'Kelly Clauss'.",
        "response_toks": [
            "Here",
            "is",
            "the",
            "result",
            "table",
            "shows",
            "the",
            "area",
            "codes",
            "voted",
            "for",
            "the",
            "contestant",
            "'Kelly",
            "Clauss",
            "'",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'",
        "query_w_results_blank_res": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'",
        "query_toks_w_results": [
            "select",
            "t3",
            ".",
            "area_code",
            "from",
            "contestants",
            "as",
            "t1",
            "join",
            "votes",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "contestant_number",
            "=",
            "t2",
            ".",
            "contestant_number",
            "join",
            "area_code_state",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "state",
            "=",
            "t3",
            ".",
            "state",
            "where",
            "t1",
            ".",
            "contestant_name",
            "=",
            "'kelly",
            "clauss'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t3",
            ".",
            "area_code",
            "from",
            "contestants",
            "as",
            "t1",
            "join",
            "votes",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "contestant_number",
            "=",
            "t2",
            ".",
            "contestant_number",
            "join",
            "area_code_state",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "state",
            "=",
            "t3",
            ".",
            "state",
            "where",
            "t1",
            ".",
            "contestant_name",
            "=",
            "'kelly",
            "clauss'"
        ],
        "response_blank_res": "Here is the result table shows the area codes voted for the contestant 'Kelly Clauss ' .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "result",
            "table",
            "shows",
            "the",
            "area",
            "codes",
            "voted",
            "for",
            "the",
            "contestant",
            "'Kelly",
            "Clauss",
            "'",
            "."
        ]
    },
    {
        "database_id": "voter_1",
        "query": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'",
        "query_toks": [
            "select",
            "t3",
            ".",
            "area_code",
            "from",
            "contestants",
            "as",
            "t1",
            "join",
            "votes",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "contestant_number",
            "=",
            "t2",
            ".",
            "contestant_number",
            "join",
            "area_code_state",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "state",
            "=",
            "t3",
            ".",
            "state",
            "where",
            "t1",
            ".",
            "contestant_name",
            "=",
            "'tabatha",
            "gehling'",
            "intersect",
            "select",
            "t3",
            ".",
            "area_code",
            "from",
            "contestants",
            "as",
            "t1",
            "join",
            "votes",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "contestant_number",
            "=",
            "t2",
            ".",
            "contestant_number",
            "join",
            "area_code_state",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "state",
            "=",
            "t3",
            ".",
            "state",
            "where",
            "t1",
            ".",
            "contestant_name",
            "=",
            "'kelly",
            "clauss'"
        ],
        "results_raw": [
            [
                "area_code"
            ],
            [
                212
            ],
            [
                315
            ],
            [
                347
            ]
        ],
        "response": "Here is the result table shows the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
        "response_toks": [
            "Here",
            "is",
            "the",
            "result",
            "table",
            "shows",
            "the",
            "area",
            "codes",
            "in",
            "which",
            "voters",
            "voted",
            "both",
            "for",
            "the",
            "contestant",
            "'Tabatha",
            "Gehling",
            "'",
            "and",
            "the",
            "contestant",
            "'Kelly",
            "Clauss",
            "'",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'",
        "query_w_results_blank_res": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'",
        "query_toks_w_results": [
            "select",
            "t3",
            ".",
            "area_code",
            "from",
            "contestants",
            "as",
            "t1",
            "join",
            "votes",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "contestant_number",
            "=",
            "t2",
            ".",
            "contestant_number",
            "join",
            "area_code_state",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "state",
            "=",
            "t3",
            ".",
            "state",
            "where",
            "t1",
            ".",
            "contestant_name",
            "=",
            "'tabatha",
            "gehling'",
            "intersect",
            "select",
            "t3",
            ".",
            "area_code",
            "from",
            "contestants",
            "as",
            "t1",
            "join",
            "votes",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "contestant_number",
            "=",
            "t2",
            ".",
            "contestant_number",
            "join",
            "area_code_state",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "state",
            "=",
            "t3",
            ".",
            "state",
            "where",
            "t1",
            ".",
            "contestant_name",
            "=",
            "'kelly",
            "clauss'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t3",
            ".",
            "area_code",
            "from",
            "contestants",
            "as",
            "t1",
            "join",
            "votes",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "contestant_number",
            "=",
            "t2",
            ".",
            "contestant_number",
            "join",
            "area_code_state",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "state",
            "=",
            "t3",
            ".",
            "state",
            "where",
            "t1",
            ".",
            "contestant_name",
            "=",
            "'tabatha",
            "gehling'",
            "intersect",
            "select",
            "t3",
            ".",
            "area_code",
            "from",
            "contestants",
            "as",
            "t1",
            "join",
            "votes",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "contestant_number",
            "=",
            "t2",
            ".",
            "contestant_number",
            "join",
            "area_code_state",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "state",
            "=",
            "t3",
            ".",
            "state",
            "where",
            "t1",
            ".",
            "contestant_name",
            "=",
            "'kelly",
            "clauss'"
        ],
        "response_blank_res": "Here is the result table shows the area codes in which voters voted both for the contestant 'Tabatha Gehling ' and the contestant 'Kelly Clauss ' .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "result",
            "table",
            "shows",
            "the",
            "area",
            "codes",
            "in",
            "which",
            "voters",
            "voted",
            "both",
            "for",
            "the",
            "contestant",
            "'Tabatha",
            "Gehling",
            "'",
            "and",
            "the",
            "contestant",
            "'Kelly",
            "Clauss",
            "'",
            "."
        ]
    },
    {
        "database_id": "employee_hire_evaluation",
        "query": "SELECT count ( * )  FROM shop",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "shop"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                9
            ]
        ],
        "response": "The number of shops presented on the table is 9.",
        "response_toks": [
            "The",
            "number",
            "of",
            "shops",
            "presented",
            "on",
            "the",
            "table",
            "is",
            "9",
            "."
        ],
        "results_map": {
            "result0": "9"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM shop | 9 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM shop | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "shop",
            "9"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "shop",
            "result0"
        ],
        "response_blank_res": "The number of shops presented on the table is result0 .",
        "response_toks_blank_res": [
            "The",
            "number",
            "of",
            "shops",
            "presented",
            "on",
            "the",
            "table",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "employee_hire_evaluation",
        "query": "SELECT name FROM shop",
        "query_toks": [
            "select",
            "name",
            "from",
            "shop"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "FC Haka"
            ],
            [
                "HJK"
            ],
            [
                "FC Honka"
            ]
        ],
        "response": "here is the result table of the shop names. for example, one of them is HJK.",
        "response_toks": [
            "here",
            "is",
            "the",
            "result",
            "table",
            "of",
            "the",
            "shop",
            "names",
            ".",
            "for",
            "example",
            ",",
            "one",
            "of",
            "them",
            "is",
            "HJK",
            "."
        ],
        "results_map": {
            "result0": "HJK"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT name FROM shop | HJK ",
        "query_w_results_blank_res": "SELECT name FROM shop | result0 ",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "shop",
            "HJK"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "shop",
            "result0"
        ],
        "response_blank_res": "here is the result table of the shop names . for example , one of them is result0 .",
        "response_toks_blank_res": [
            "here",
            "is",
            "the",
            "result",
            "table",
            "of",
            "the",
            "shop",
            "names",
            ".",
            "for",
            "example",
            ",",
            "one",
            "of",
            "them",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "employee_hire_evaluation",
        "query": "SELECT location FROM shop where name  =  \"FC Haka\"",
        "query_toks": [
            "select",
            "location",
            "from",
            "shop",
            "where",
            "name",
            "=",
            "\"fc",
            "haka\""
        ],
        "results_raw": [
            [
                "Location"
            ],
            [
                "Valkeakoski"
            ]
        ],
        "response": "the location of a shop named FC Haka is Valkeakoski",
        "response_toks": [
            "the",
            "location",
            "of",
            "a",
            "shop",
            "named",
            "FC",
            "Haka",
            "is",
            "Valkeakoski"
        ],
        "results_map": {
            "result0": "Valkeakoski"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT location FROM shop where name  =  \"FC Haka\" | Valkeakoski ",
        "query_w_results_blank_res": "SELECT location FROM shop where name  =  \"FC Haka\" | result0 ",
        "query_toks_w_results": [
            "select",
            "location",
            "from",
            "shop",
            "where",
            "name",
            "=",
            "\"fc",
            "haka\"",
            "Valkeakoski"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "location",
            "from",
            "shop",
            "where",
            "name",
            "=",
            "\"fc",
            "haka\"",
            "result0"
        ],
        "response_blank_res": "the location of a shop named FC Haka is result0",
        "response_toks_blank_res": [
            "the",
            "location",
            "of",
            "a",
            "shop",
            "named",
            "FC",
            "Haka",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "employee_hire_evaluation",
        "query": "SELECT Number_products FROM shop where name  =  \"HJK\"",
        "query_toks": [
            "select",
            "number_products",
            "from",
            "shop",
            "where",
            "name",
            "=",
            "\"hjk\""
        ],
        "results_raw": [
            [
                "Number_products"
            ],
            [
                10770
            ]
        ],
        "response": "the number of products in the shop named HJK is 10770",
        "response_toks": [
            "the",
            "number",
            "of",
            "products",
            "in",
            "the",
            "shop",
            "named",
            "HJK",
            "is",
            "10770"
        ],
        "results_map": {
            "result0": "10770"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT Number_products FROM shop where name  =  \"HJK\" | 10770 ",
        "query_w_results_blank_res": "SELECT Number_products FROM shop where name  =  \"HJK\" | result0 ",
        "query_toks_w_results": [
            "select",
            "number_products",
            "from",
            "shop",
            "where",
            "name",
            "=",
            "\"hjk\"",
            "10770"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "number_products",
            "from",
            "shop",
            "where",
            "name",
            "=",
            "\"hjk\"",
            "result0"
        ],
        "response_blank_res": "the number of products in the shop named HJK is result0",
        "response_toks_blank_res": [
            "the",
            "number",
            "of",
            "products",
            "in",
            "the",
            "shop",
            "named",
            "HJK",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "select department_id,department_name from Departments",
        "query_toks": [
            "select",
            "department_id",
            ",",
            "department_name",
            "from",
            "departments"
        ],
        "results_raw": [
            [
                "department_id",
                "department_name"
            ],
            [
                1,
                "computer science"
            ],
            [
                2,
                "history"
            ],
            [
                3,
                "art"
            ]
        ],
        "response": "here are all of the deparatment names and department IDs",
        "response_toks": [
            "here",
            "are",
            "all",
            "of",
            "the",
            "deparatment",
            "names",
            "and",
            "department",
            "IDs"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "select department_id,department_name from Departments",
        "query_w_results_blank_res": "select department_id,department_name from Departments",
        "query_toks_w_results": [
            "select",
            "department_id",
            ",",
            "department_name",
            "from",
            "departments"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "department_id",
            ",",
            "department_name",
            "from",
            "departments"
        ],
        "response_blank_res": "here are all of the deparatment names and department IDs",
        "response_toks_blank_res": [
            "here",
            "are",
            "all",
            "of",
            "the",
            "deparatment",
            "names",
            "and",
            "department",
            "IDs"
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id   =   T2.department_id GROUP BY T1.department_id ORDER BY count ( * )  DESC LIMIT 1",
        "query_toks": [
            "select",
            "t2",
            ".",
            "department_name",
            ",",
            "t1",
            ".",
            "department_id",
            "from",
            "degree_programs",
            "as",
            "t1",
            "join",
            "departments",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "department_id",
            "=",
            "t2",
            ".",
            "department_id",
            "group",
            "by",
            "t1",
            ".",
            "department_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "department_name",
                "department_id"
            ],
            [
                "statistics",
                8
            ]
        ],
        "response": "here are the deparatment names and department IDs which offers the largest number of degrees",
        "response_toks": [
            "here",
            "are",
            "the",
            "deparatment",
            "names",
            "and",
            "department",
            "IDs",
            "which",
            "offers",
            "the",
            "largest",
            "number",
            "of",
            "degrees"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id   =   T2.department_id GROUP BY T1.department_id ORDER BY count ( * )  DESC LIMIT 1",
        "query_w_results_blank_res": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id   =   T2.department_id GROUP BY T1.department_id ORDER BY count ( * )  DESC LIMIT 1",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "department_name",
            ",",
            "t1",
            ".",
            "department_id",
            "from",
            "degree_programs",
            "as",
            "t1",
            "join",
            "departments",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "department_id",
            "=",
            "t2",
            ".",
            "department_id",
            "group",
            "by",
            "t1",
            ".",
            "department_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "department_name",
            ",",
            "t1",
            ".",
            "department_id",
            "from",
            "degree_programs",
            "as",
            "t1",
            "join",
            "departments",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "department_id",
            "=",
            "t2",
            ".",
            "department_id",
            "group",
            "by",
            "t1",
            ".",
            "department_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "response_blank_res": "here are the deparatment names and department IDs which offers the largest number of degrees",
        "response_toks_blank_res": [
            "here",
            "are",
            "the",
            "deparatment",
            "names",
            "and",
            "department",
            "IDs",
            "which",
            "offers",
            "the",
            "largest",
            "number",
            "of",
            "degrees"
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "select T2.degree_summary_name from Departments as T1 JOIN Degree_Programs as T2 on T1.department_id  =  T2.department_id where T1.department_name  =  'statistics'",
        "query_toks": [
            "select",
            "t2",
            ".",
            "degree_summary_name",
            "from",
            "departments",
            "as",
            "t1",
            "join",
            "degree_programs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "department_id",
            "=",
            "t2",
            ".",
            "department_id",
            "where",
            "t1",
            ".",
            "department_name",
            "=",
            "'statistics'"
        ],
        "results_raw": [
            [
                "degree_summary_name"
            ],
            [
                "Bachelor"
            ],
            [
                "Bachelor"
            ],
            [
                "Bachelor"
            ]
        ],
        "response": "here are all of the degree summary names associated with these departments that offer the largest number of degrees",
        "response_toks": [
            "here",
            "are",
            "all",
            "of",
            "the",
            "degree",
            "summary",
            "names",
            "associated",
            "with",
            "these",
            "departments",
            "that",
            "offer",
            "the",
            "largest",
            "number",
            "of",
            "degrees"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "select T2.degree_summary_name from Departments as T1 JOIN Degree_Programs as T2 on T1.department_id  =  T2.department_id where T1.department_name  =  'statistics'",
        "query_w_results_blank_res": "select T2.degree_summary_name from Departments as T1 JOIN Degree_Programs as T2 on T1.department_id  =  T2.department_id where T1.department_name  =  'statistics'",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "degree_summary_name",
            "from",
            "departments",
            "as",
            "t1",
            "join",
            "degree_programs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "department_id",
            "=",
            "t2",
            ".",
            "department_id",
            "where",
            "t1",
            ".",
            "department_name",
            "=",
            "'statistics'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "degree_summary_name",
            "from",
            "departments",
            "as",
            "t1",
            "join",
            "degree_programs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "department_id",
            "=",
            "t2",
            ".",
            "department_id",
            "where",
            "t1",
            ".",
            "department_name",
            "=",
            "'statistics'"
        ],
        "response_blank_res": "here are all of the degree summary names associated with these departments that offer the largest number of degrees",
        "response_toks_blank_res": [
            "here",
            "are",
            "all",
            "of",
            "the",
            "degree",
            "summary",
            "names",
            "associated",
            "with",
            "these",
            "departments",
            "that",
            "offer",
            "the",
            "largest",
            "number",
            "of",
            "degrees"
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT professional_id  FROM Professionals",
        "query_toks": [
            "select",
            "professional_id",
            "from",
            "professionals"
        ],
        "results_raw": [
            [
                "professional_id"
            ],
            [
                1
            ],
            [
                2
            ],
            [
                3
            ]
        ],
        "response": "Here are all the ids of professionals",
        "response_toks": [
            "Here",
            "are",
            "all",
            "the",
            "ids",
            "of",
            "professionals"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT professional_id  FROM Professionals",
        "query_w_results_blank_res": "SELECT professional_id  FROM Professionals",
        "query_toks_w_results": [
            "select",
            "professional_id",
            "from",
            "professionals"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "professional_id",
            "from",
            "professionals"
        ],
        "response_blank_res": "Here are all the ids of professionals",
        "response_toks_blank_res": [
            "Here",
            "are",
            "all",
            "the",
            "ids",
            "of",
            "professionals"
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT professional_id, role_code  FROM Professionals",
        "query_toks": [
            "select",
            "professional_id",
            ",",
            "role_code",
            "from",
            "professionals"
        ],
        "results_raw": [
            [
                "professional_id",
                "role_code"
            ],
            [
                1,
                "Employee"
            ],
            [
                2,
                "Employee"
            ],
            [
                3,
                "Employee"
            ]
        ],
        "response": "Here are the IDs and roles of all the professionals",
        "response_toks": [
            "Here",
            "are",
            "the",
            "IDs",
            "and",
            "roles",
            "of",
            "all",
            "the",
            "professionals"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT professional_id, role_code  FROM Professionals",
        "query_w_results_blank_res": "SELECT professional_id, role_code  FROM Professionals",
        "query_toks_w_results": [
            "select",
            "professional_id",
            ",",
            "role_code",
            "from",
            "professionals"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "professional_id",
            ",",
            "role_code",
            "from",
            "professionals"
        ],
        "response_blank_res": "Here are the IDs and roles of all the professionals",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "IDs",
            "and",
            "roles",
            "of",
            "all",
            "the",
            "professionals"
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
        "query_toks": [
            "select",
            "professional_id",
            ",",
            "role_code",
            ",",
            "email_address",
            "from",
            "professionals",
            "except",
            "select",
            "t1",
            ".",
            "professional_id",
            ",",
            "t1",
            ".",
            "role_code",
            ",",
            "t1",
            ".",
            "email_address",
            "from",
            "professionals",
            "as",
            "t1",
            "join",
            "treatments",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "professional_id",
            "=",
            "t2",
            ".",
            "professional_id"
        ],
        "results_raw": [
            [
                "professional_id",
                "role_code",
                "email_address"
            ],
            [
                1,
                "Employee",
                "deanna.schuster@example.com"
            ],
            [
                2,
                "Employee",
                "lucile.shanahan@example.org"
            ],
            [
                3,
                "Employee",
                "uboehm@example.org"
            ]
        ],
        "response": "Here are the email addresses  of professionals that did not operate any treatment on dogs.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "email",
            "addresses",
            "of",
            "professionals",
            "that",
            "did",
            "not",
            "operate",
            "any",
            "treatment",
            "on",
            "dogs",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
        "query_w_results_blank_res": "SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
        "query_toks_w_results": [
            "select",
            "professional_id",
            ",",
            "role_code",
            ",",
            "email_address",
            "from",
            "professionals",
            "except",
            "select",
            "t1",
            ".",
            "professional_id",
            ",",
            "t1",
            ".",
            "role_code",
            ",",
            "t1",
            ".",
            "email_address",
            "from",
            "professionals",
            "as",
            "t1",
            "join",
            "treatments",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "professional_id",
            "=",
            "t2",
            ".",
            "professional_id"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "professional_id",
            ",",
            "role_code",
            ",",
            "email_address",
            "from",
            "professionals",
            "except",
            "select",
            "t1",
            ".",
            "professional_id",
            ",",
            "t1",
            ".",
            "role_code",
            ",",
            "t1",
            ".",
            "email_address",
            "from",
            "professionals",
            "as",
            "t1",
            "join",
            "treatments",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "professional_id",
            "=",
            "t2",
            ".",
            "professional_id"
        ],
        "response_blank_res": "Here are the email addresses of professionals that did not operate any treatment on dogs .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "email",
            "addresses",
            "of",
            "professionals",
            "that",
            "did",
            "not",
            "operate",
            "any",
            "treatment",
            "on",
            "dogs",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker WHERE T1.FullName   =   'American Motor Company'",
        "query_toks": [
            "select",
            "id",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "maker",
            "where",
            "t1",
            ".",
            "fullname",
            "=",
            "'american",
            "motor",
            "company'"
        ],
        "results_raw": [
            [
                "Id"
            ],
            [
                1
            ]
        ],
        "response": "The ID of the American Motor Company is 1.",
        "response_toks": [
            "The",
            "ID",
            "of",
            "the",
            "American",
            "Motor",
            "Company",
            "is",
            "1",
            "."
        ],
        "results_map": {
            "result0": "1"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker WHERE T1.FullName   =   'American Motor Company' | 1 ",
        "query_w_results_blank_res": "SELECT Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker WHERE T1.FullName   =   'American Motor Company' | result0 ",
        "query_toks_w_results": [
            "select",
            "id",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "maker",
            "where",
            "t1",
            ".",
            "fullname",
            "=",
            "'american",
            "motor",
            "company'",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "id",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "maker",
            "where",
            "t1",
            ".",
            "fullname",
            "=",
            "'american",
            "motor",
            "company'",
            "result0"
        ],
        "response_blank_res": "The ID of the American Motor Company is result0 .",
        "response_toks_blank_res": [
            "The",
            "ID",
            "of",
            "the",
            "American",
            "Motor",
            "Company",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT ModelId FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker WHERE T1.Maker   =   'amc'",
        "query_toks": [
            "select",
            "modelid",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "maker",
            "where",
            "t1",
            ".",
            "maker",
            "=",
            "'amc'"
        ],
        "results_raw": [
            [
                "ModelId"
            ],
            [
                1
            ]
        ],
        "response": "The Model Id of the maker amc is 1.",
        "response_toks": [
            "The",
            "Model",
            "Id",
            "of",
            "the",
            "maker",
            "amc",
            "is",
            "1",
            "."
        ],
        "results_map": {
            "result0": "1"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT ModelId FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker WHERE T1.Maker   =   'amc' | 1 ",
        "query_w_results_blank_res": "SELECT ModelId FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker WHERE T1.Maker   =   'amc' | result0 ",
        "query_toks_w_results": [
            "select",
            "modelid",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "maker",
            "where",
            "t1",
            ".",
            "maker",
            "=",
            "'amc'",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "modelid",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "maker",
            "where",
            "t1",
            ".",
            "maker",
            "=",
            "'amc'",
            "result0"
        ],
        "response_blank_res": "The Model Id of the maker amc is result0 .",
        "response_toks_blank_res": [
            "The",
            "Model",
            "Id",
            "of",
            "the",
            "maker",
            "amc",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT DISTINCT ( T1.Maker )  FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker WHERE T1.Id  =  2",
        "query_toks": [
            "select",
            "distinct",
            "(",
            "t1",
            ".",
            "maker",
            ")",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "maker",
            "where",
            "t1",
            ".",
            "id",
            "=",
            "2"
        ],
        "results_raw": [
            [
                "Maker"
            ],
            [
                "volkswagen"
            ]
        ],
        "response": "The Maker with Id 2 is Volkswagen.",
        "response_toks": [
            "The",
            "Maker",
            "with",
            "Id",
            "2",
            "is",
            "Volkswagen",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT DISTINCT ( T1.Maker )  FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker WHERE T1.Id  =  2",
        "query_w_results_blank_res": "SELECT DISTINCT ( T1.Maker )  FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker WHERE T1.Id  =  2",
        "query_toks_w_results": [
            "select",
            "distinct",
            "(",
            "t1",
            ".",
            "maker",
            ")",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "maker",
            "where",
            "t1",
            ".",
            "id",
            "=",
            "2"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "(",
            "t1",
            ".",
            "maker",
            ")",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "maker",
            "where",
            "t1",
            ".",
            "id",
            "=",
            "2"
        ],
        "response_blank_res": "The Maker with Id 2 is Volkswagen .",
        "response_toks_blank_res": [
            "The",
            "Maker",
            "with",
            "Id",
            "2",
            "is",
            "Volkswagen",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT count ( * )  FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker WHERE T1.FullName   =   'American Motor Company'",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "maker",
            "where",
            "t1",
            ".",
            "fullname",
            "=",
            "'american",
            "motor",
            "company'"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                1
            ]
        ],
        "response": "there is 1 car model that was produced by the maker American Motor Company.",
        "response_toks": [
            "there",
            "is",
            "1",
            "car",
            "model",
            "that",
            "was",
            "produced",
            "by",
            "the",
            "maker",
            "American",
            "Motor",
            "Company",
            "."
        ],
        "results_map": {
            "result0": "1"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker WHERE T1.FullName   =   'American Motor Company' | 1 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker WHERE T1.FullName   =   'American Motor Company' | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "maker",
            "where",
            "t1",
            ".",
            "fullname",
            "=",
            "'american",
            "motor",
            "company'",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "maker",
            "where",
            "t1",
            ".",
            "fullname",
            "=",
            "'american",
            "motor",
            "company'",
            "result0"
        ],
        "response_blank_res": "there is result0 car model that was produced by the maker American Motor Company .",
        "response_toks_blank_res": [
            "there",
            "is",
            "result0",
            "car",
            "model",
            "that",
            "was",
            "produced",
            "by",
            "the",
            "maker",
            "American",
            "Motor",
            "Company",
            "."
        ]
    },
    {
        "database_id": "course_teach",
        "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID   =   T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID   =   T3.Teacher_ID",
        "query_toks": [
            "select",
            "t3",
            ".",
            "name",
            ",",
            "t2",
            ".",
            "course",
            "from",
            "course_arrange",
            "as",
            "t1",
            "join",
            "course",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "course_id",
            "=",
            "t2",
            ".",
            "course_id",
            "join",
            "teacher",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "teacher_id",
            "=",
            "t3",
            ".",
            "teacher_id"
        ],
        "results_raw": [
            [
                "Name",
                "Course"
            ],
            [
                "Kearsley Brown",
                "Math"
            ],
            [
                "Vicente Carretero",
                "Math"
            ],
            [
                "Gustaaf Deloor",
                "Science"
            ]
        ],
        "response": "Here are the names of the teachers and the courses they teach.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "names",
            "of",
            "the",
            "teachers",
            "and",
            "the",
            "courses",
            "they",
            "teach",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID   =   T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID   =   T3.Teacher_ID",
        "query_w_results_blank_res": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID   =   T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID   =   T3.Teacher_ID",
        "query_toks_w_results": [
            "select",
            "t3",
            ".",
            "name",
            ",",
            "t2",
            ".",
            "course",
            "from",
            "course_arrange",
            "as",
            "t1",
            "join",
            "course",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "course_id",
            "=",
            "t2",
            ".",
            "course_id",
            "join",
            "teacher",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "teacher_id",
            "=",
            "t3",
            ".",
            "teacher_id"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t3",
            ".",
            "name",
            ",",
            "t2",
            ".",
            "course",
            "from",
            "course_arrange",
            "as",
            "t1",
            "join",
            "course",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "course_id",
            "=",
            "t2",
            ".",
            "course_id",
            "join",
            "teacher",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "teacher_id",
            "=",
            "t3",
            ".",
            "teacher_id"
        ],
        "response_blank_res": "Here are the names of the teachers and the courses they teach .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "names",
            "of",
            "the",
            "teachers",
            "and",
            "the",
            "courses",
            "they",
            "teach",
            "."
        ]
    },
    {
        "database_id": "course_teach",
        "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID   =   T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID   =   T3.Teacher_ID ORDER BY T3.Name",
        "query_toks": [
            "select",
            "t3",
            ".",
            "name",
            ",",
            "t2",
            ".",
            "course",
            "from",
            "course_arrange",
            "as",
            "t1",
            "join",
            "course",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "course_id",
            "=",
            "t2",
            ".",
            "course_id",
            "join",
            "teacher",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "teacher_id",
            "=",
            "t3",
            ".",
            "teacher_id",
            "order",
            "by",
            "t3",
            ".",
            "name"
        ],
        "results_raw": [
            [
                "Name",
                "Course"
            ],
            [
                "Anne Walker",
                "History"
            ],
            [
                "Anne Walker",
                "Bible"
            ],
            [
                "Gustaaf Deloor",
                "Science"
            ]
        ],
        "response": "Here are the names of the teachers and the courses they teach in ascending alphabetical order of the teacher's name",
        "response_toks": [
            "Here",
            "are",
            "the",
            "names",
            "of",
            "the",
            "teachers",
            "and",
            "the",
            "courses",
            "they",
            "teach",
            "in",
            "ascending",
            "alphabetical",
            "order",
            "of",
            "the",
            "teacher",
            "'s",
            "name"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID   =   T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID   =   T3.Teacher_ID ORDER BY T3.Name",
        "query_w_results_blank_res": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID   =   T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID   =   T3.Teacher_ID ORDER BY T3.Name",
        "query_toks_w_results": [
            "select",
            "t3",
            ".",
            "name",
            ",",
            "t2",
            ".",
            "course",
            "from",
            "course_arrange",
            "as",
            "t1",
            "join",
            "course",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "course_id",
            "=",
            "t2",
            ".",
            "course_id",
            "join",
            "teacher",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "teacher_id",
            "=",
            "t3",
            ".",
            "teacher_id",
            "order",
            "by",
            "t3",
            ".",
            "name"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t3",
            ".",
            "name",
            ",",
            "t2",
            ".",
            "course",
            "from",
            "course_arrange",
            "as",
            "t1",
            "join",
            "course",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "course_id",
            "=",
            "t2",
            ".",
            "course_id",
            "join",
            "teacher",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "teacher_id",
            "=",
            "t3",
            ".",
            "teacher_id",
            "order",
            "by",
            "t3",
            ".",
            "name"
        ],
        "response_blank_res": "Here are the names of the teachers and the courses they teach in ascending alphabetical order of the teacher 's name",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "names",
            "of",
            "the",
            "teachers",
            "and",
            "the",
            "courses",
            "they",
            "teach",
            "in",
            "ascending",
            "alphabetical",
            "order",
            "of",
            "the",
            "teacher",
            "'s",
            "name"
        ]
    },
    {
        "database_id": "course_teach",
        "query": "SELECT T3.Name ,  T2.Course, T1.teacher_ID FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID   =   T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID   =   T3.Teacher_ID ORDER BY T3.Name",
        "query_toks": [
            "select",
            "t3",
            ".",
            "name",
            ",",
            "t2",
            ".",
            "course",
            ",",
            "t1",
            ".",
            "teacher_id",
            "from",
            "course_arrange",
            "as",
            "t1",
            "join",
            "course",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "course_id",
            "=",
            "t2",
            ".",
            "course_id",
            "join",
            "teacher",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "teacher_id",
            "=",
            "t3",
            ".",
            "teacher_id",
            "order",
            "by",
            "t3",
            ".",
            "name"
        ],
        "results_raw": [
            [
                "Name",
                "Course",
                "Teacher_ID"
            ],
            [
                "Anne Walker",
                "History",
                6
            ],
            [
                "Anne Walker",
                "Bible",
                6
            ],
            [
                "Gustaaf Deloor",
                "Science",
                2
            ]
        ],
        "response": "Here are the names and ids of the teachers and the courses they teach in ascending alphabetical order of the teacher's name.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "names",
            "and",
            "ids",
            "of",
            "the",
            "teachers",
            "and",
            "the",
            "courses",
            "they",
            "teach",
            "in",
            "ascending",
            "alphabetical",
            "order",
            "of",
            "the",
            "teacher",
            "'s",
            "name",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T3.Name ,  T2.Course, T1.teacher_ID FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID   =   T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID   =   T3.Teacher_ID ORDER BY T3.Name",
        "query_w_results_blank_res": "SELECT T3.Name ,  T2.Course, T1.teacher_ID FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID   =   T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID   =   T3.Teacher_ID ORDER BY T3.Name",
        "query_toks_w_results": [
            "select",
            "t3",
            ".",
            "name",
            ",",
            "t2",
            ".",
            "course",
            ",",
            "t1",
            ".",
            "teacher_id",
            "from",
            "course_arrange",
            "as",
            "t1",
            "join",
            "course",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "course_id",
            "=",
            "t2",
            ".",
            "course_id",
            "join",
            "teacher",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "teacher_id",
            "=",
            "t3",
            ".",
            "teacher_id",
            "order",
            "by",
            "t3",
            ".",
            "name"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t3",
            ".",
            "name",
            ",",
            "t2",
            ".",
            "course",
            ",",
            "t1",
            ".",
            "teacher_id",
            "from",
            "course_arrange",
            "as",
            "t1",
            "join",
            "course",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "course_id",
            "=",
            "t2",
            ".",
            "course_id",
            "join",
            "teacher",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "teacher_id",
            "=",
            "t3",
            ".",
            "teacher_id",
            "order",
            "by",
            "t3",
            ".",
            "name"
        ],
        "response_blank_res": "Here are the names and ids of the teachers and the courses they teach in ascending alphabetical order of the teacher 's name .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "names",
            "and",
            "ids",
            "of",
            "the",
            "teachers",
            "and",
            "the",
            "courses",
            "they",
            "teach",
            "in",
            "ascending",
            "alphabetical",
            "order",
            "of",
            "the",
            "teacher",
            "'s",
            "name",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT Name FROM country",
        "query_toks": [
            "select",
            "name",
            "from",
            "country"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Aruba"
            ],
            [
                "Afghanistan"
            ],
            [
                "Angola"
            ]
        ],
        "response": "Here are all the countries' names.",
        "response_toks": [
            "Here",
            "are",
            "all",
            "the",
            "countries",
            "'",
            "names",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Name FROM country",
        "query_w_results_blank_res": "SELECT Name FROM country",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "country"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "country"
        ],
        "response_blank_res": "Here are all the countries ' names .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "all",
            "the",
            "countries",
            "'",
            "names",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT GovernmentForm FROM country",
        "query_toks": [
            "select",
            "governmentform",
            "from",
            "country"
        ],
        "results_raw": [
            [
                "GovernmentForm"
            ],
            [
                "Nonmetropolitan Territory of The Netherlands"
            ],
            [
                "Islamic Emirate"
            ],
            [
                "Republic"
            ]
        ],
        "response": "Here are all the countries' government forms.",
        "response_toks": [
            "Here",
            "are",
            "all",
            "the",
            "countries",
            "'",
            "government",
            "forms",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT GovernmentForm FROM country",
        "query_w_results_blank_res": "SELECT GovernmentForm FROM country",
        "query_toks_w_results": [
            "select",
            "governmentform",
            "from",
            "country"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "governmentform",
            "from",
            "country"
        ],
        "response_blank_res": "Here are all the countries ' government forms .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "all",
            "the",
            "countries",
            "'",
            "government",
            "forms",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT SurfaceArea FROM country",
        "query_toks": [
            "select",
            "surfacearea",
            "from",
            "country"
        ],
        "results_raw": [
            [
                "SurfaceArea"
            ],
            [
                193.0
            ],
            [
                652090.0
            ],
            [
                1246700.0
            ]
        ],
        "response": "Here are the countries' surface areas.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "countries",
            "'",
            "surface",
            "areas",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT SurfaceArea FROM country",
        "query_w_results_blank_res": "SELECT SurfaceArea FROM country",
        "query_toks_w_results": [
            "select",
            "surfacearea",
            "from",
            "country"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "surfacearea",
            "from",
            "country"
        ],
        "response_blank_res": "Here are the countries ' surface areas .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "countries",
            "'",
            "surface",
            "areas",
            "."
        ]
    },
    {
        "database_id": "tvshow",
        "query": "SELECT Language FROM TV_Channel where series_name = 'Sky Music'",
        "query_toks": [
            "select",
            "language",
            "from",
            "tv_channel",
            "where",
            "series_name",
            "=",
            "'sky",
            "music'"
        ],
        "results_raw": [
            [
                "Language"
            ],
            [
                "Italian"
            ]
        ],
        "response": "the  LANGUAGE SKY MUSIC AVAILABLE is Italian",
        "response_toks": [
            "the",
            "LANGUAGE",
            "SKY",
            "MUSIC",
            "AVAILABLE",
            "is",
            "Italian"
        ],
        "results_map": {
            "result0": "Italian"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT Language FROM TV_Channel where series_name = 'Sky Music' | Italian ",
        "query_w_results_blank_res": "SELECT Language FROM TV_Channel where series_name = 'Sky Music' | result0 ",
        "query_toks_w_results": [
            "select",
            "language",
            "from",
            "tv_channel",
            "where",
            "series_name",
            "=",
            "'sky",
            "music'",
            "Italian"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "language",
            "from",
            "tv_channel",
            "where",
            "series_name",
            "=",
            "'sky",
            "music'",
            "result0"
        ],
        "response_blank_res": "the LANGUAGE SKY MUSIC AVAILABLE is result0",
        "response_toks_blank_res": [
            "the",
            "LANGUAGE",
            "SKY",
            "MUSIC",
            "AVAILABLE",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "tvshow",
        "query": "SELECT distinct Package_Option FROM TV_Channel",
        "query_toks": [
            "select",
            "distinct",
            "package_option",
            "from",
            "tv_channel"
        ],
        "results_raw": [
            [
                "Package_Option"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "no ( FTV )"
            ],
            [
                "Sky Famiglia + Sky HD"
            ]
        ],
        "response": "there are 4 THE PACKAGE OPTION OF ALL CHANNELS ,ther are Sky Famiglia\uff1bno ( FTV )\uff1bSky Famiglia + Sky HD and Option",
        "response_toks": [
            "there",
            "are",
            "4",
            "THE",
            "PACKAGE",
            "OPTION",
            "OF",
            "ALL",
            "CHANNELS",
            ",",
            "ther",
            "are",
            "Sky",
            "Famiglia\uff1bno",
            "(",
            "FTV",
            ")",
            "\uff1bSky",
            "Famiglia",
            "+",
            "Sky",
            "HD",
            "and",
            "Option"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT distinct Package_Option FROM TV_Channel",
        "query_w_results_blank_res": "SELECT distinct Package_Option FROM TV_Channel",
        "query_toks_w_results": [
            "select",
            "distinct",
            "package_option",
            "from",
            "tv_channel"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "package_option",
            "from",
            "tv_channel"
        ],
        "response_blank_res": "there are 4 THE PACKAGE OPTION OF ALL CHANNELS , ther are Sky Famiglia\uff1bno ( FTV ) \uff1bSky Famiglia + Sky HD and Option",
        "response_toks_blank_res": [
            "there",
            "are",
            "4",
            "THE",
            "PACKAGE",
            "OPTION",
            "OF",
            "ALL",
            "CHANNELS",
            ",",
            "ther",
            "are",
            "Sky",
            "Famiglia\uff1bno",
            "(",
            "FTV",
            ")",
            "\uff1bSky",
            "Famiglia",
            "+",
            "Sky",
            "HD",
            "and",
            "Option"
        ]
    },
    {
        "database_id": "tvshow",
        "query": "SELECT *  FROM TV_Channel where Hight_definition_TV = 'yes'",
        "query_toks": [
            "select",
            "*",
            "from",
            "tv_channel",
            "where",
            "hight_definition_tv",
            "=",
            "'yes'"
        ],
        "results_raw": [
            [
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option"
            ],
            [
                "709",
                "MTV Live HD",
                "Poland",
                "English",
                "music",
                "16:9",
                "yes",
                "no",
                "Sky Famiglia + Sky HD"
            ]
        ],
        "response": "yes. There is one channel which is available in high definition.",
        "response_toks": [
            "yes",
            ".",
            "There",
            "is",
            "one",
            "channel",
            "which",
            "is",
            "available",
            "in",
            "high",
            "definition",
            "."
        ],
        "results_map": {
            "result0": "yes"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT *  FROM TV_Channel where Hight_definition_TV = 'yes' | yes ",
        "query_w_results_blank_res": "SELECT *  FROM TV_Channel where Hight_definition_TV = 'yes' | result0 ",
        "query_toks_w_results": [
            "select",
            "*",
            "from",
            "tv_channel",
            "where",
            "hight_definition_tv",
            "=",
            "'yes'",
            "yes"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "*",
            "from",
            "tv_channel",
            "where",
            "hight_definition_tv",
            "=",
            "'yes'",
            "result0"
        ],
        "response_blank_res": "result0 . There is one channel which is available in high definition .",
        "response_toks_blank_res": [
            "result0",
            ".",
            "There",
            "is",
            "one",
            "channel",
            "which",
            "is",
            "available",
            "in",
            "high",
            "definition",
            "."
        ]
    },
    {
        "database_id": "tvshow",
        "query": "SELECT distinct  Content FROM TV_Channel",
        "query_toks": [
            "select",
            "distinct",
            "content",
            "from",
            "tv_channel"
        ],
        "results_raw": [
            [
                "Content"
            ],
            [
                "music"
            ]
        ],
        "response": "the content of all the channels is music",
        "response_toks": [
            "the",
            "content",
            "of",
            "all",
            "the",
            "channels",
            "is",
            "music"
        ],
        "results_map": {
            "result0": "music"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT distinct  Content FROM TV_Channel | music ",
        "query_w_results_blank_res": "SELECT distinct  Content FROM TV_Channel | result0 ",
        "query_toks_w_results": [
            "select",
            "distinct",
            "content",
            "from",
            "tv_channel",
            "music"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "content",
            "from",
            "tv_channel",
            "result0"
        ],
        "response_blank_res": "the content of all the channels is result0",
        "response_toks_blank_res": [
            "the",
            "content",
            "of",
            "all",
            "the",
            "channels",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "tvshow",
        "query": "SELECT LANGUAGE FROM TV_Channel GROUP BY LANGUAGE ORDER BY count ( * )  ASC LIMIT 1",
        "query_toks": [
            "select",
            "language",
            "from",
            "tv_channel",
            "group",
            "by",
            "language",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "asc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Language"
            ],
            [
                "English"
            ]
        ],
        "response": "English is the language used on the least number of TV Channels",
        "response_toks": [
            "English",
            "is",
            "the",
            "language",
            "used",
            "on",
            "the",
            "least",
            "number",
            "of",
            "TV",
            "Channels"
        ],
        "results_map": {
            "result0": "English"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT LANGUAGE FROM TV_Channel GROUP BY LANGUAGE ORDER BY count ( * )  ASC LIMIT 1 | English ",
        "query_w_results_blank_res": "SELECT LANGUAGE FROM TV_Channel GROUP BY LANGUAGE ORDER BY count ( * )  ASC LIMIT 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "language",
            "from",
            "tv_channel",
            "group",
            "by",
            "language",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "asc",
            "limit",
            "1",
            "English"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "language",
            "from",
            "tv_channel",
            "group",
            "by",
            "language",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "asc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "result0 is the language used on the least number of TV Channels",
        "response_toks_blank_res": [
            "result0",
            "is",
            "the",
            "language",
            "used",
            "on",
            "the",
            "least",
            "number",
            "of",
            "TV",
            "Channels"
        ]
    },
    {
        "database_id": "tvshow",
        "query": "SELECT LANGUAGE FROM TV_Channel GROUP BY LANGUAGE ORDER BY count ( * )  desc LIMIT 1",
        "query_toks": [
            "select",
            "language",
            "from",
            "tv_channel",
            "group",
            "by",
            "language",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Language"
            ],
            [
                "Italian"
            ]
        ],
        "response": "Italian is the language used on the most number of TV channels",
        "response_toks": [
            "Italian",
            "is",
            "the",
            "language",
            "used",
            "on",
            "the",
            "most",
            "number",
            "of",
            "TV",
            "channels"
        ],
        "results_map": {
            "result0": "Italian"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT LANGUAGE FROM TV_Channel GROUP BY LANGUAGE ORDER BY count ( * )  desc LIMIT 1 | Italian ",
        "query_w_results_blank_res": "SELECT LANGUAGE FROM TV_Channel GROUP BY LANGUAGE ORDER BY count ( * )  desc LIMIT 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "language",
            "from",
            "tv_channel",
            "group",
            "by",
            "language",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1",
            "Italian"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "language",
            "from",
            "tv_channel",
            "group",
            "by",
            "language",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "result0 is the language used on the most number of TV channels",
        "response_toks_blank_res": [
            "result0",
            "is",
            "the",
            "language",
            "used",
            "on",
            "the",
            "most",
            "number",
            "of",
            "TV",
            "channels"
        ]
    },
    {
        "database_id": "tvshow",
        "query": "SELECT content from tv_channel group by content order by count ( * )  desc limit 1",
        "query_toks": [
            "select",
            "content",
            "from",
            "tv_channel",
            "group",
            "by",
            "content",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Content"
            ],
            [
                "music"
            ]
        ],
        "response": "music is the most common content of those tv channels.",
        "response_toks": [
            "music",
            "is",
            "the",
            "most",
            "common",
            "content",
            "of",
            "those",
            "tv",
            "channels",
            "."
        ],
        "results_map": {
            "result0": "music"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT content from tv_channel group by content order by count ( * )  desc limit 1 | music ",
        "query_w_results_blank_res": "SELECT content from tv_channel group by content order by count ( * )  desc limit 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "content",
            "from",
            "tv_channel",
            "group",
            "by",
            "content",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1",
            "music"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "content",
            "from",
            "tv_channel",
            "group",
            "by",
            "content",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "result0 is the most common content of those tv channels .",
        "response_toks_blank_res": [
            "result0",
            "is",
            "the",
            "most",
            "common",
            "content",
            "of",
            "those",
            "tv",
            "channels",
            "."
        ]
    },
    {
        "database_id": "tvshow",
        "query": "SELECT content from tv_channel group by content order by count ( * )  limit 1",
        "query_toks": [
            "select",
            "content",
            "from",
            "tv_channel",
            "group",
            "by",
            "content",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Content"
            ],
            [
                "music"
            ]
        ],
        "response": "music is the least common content of those tv channels.",
        "response_toks": [
            "music",
            "is",
            "the",
            "least",
            "common",
            "content",
            "of",
            "those",
            "tv",
            "channels",
            "."
        ],
        "results_map": {
            "result0": "music"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT content from tv_channel group by content order by count ( * )  limit 1 | music ",
        "query_w_results_blank_res": "SELECT content from tv_channel group by content order by count ( * )  limit 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "content",
            "from",
            "tv_channel",
            "group",
            "by",
            "content",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "limit",
            "1",
            "music"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "content",
            "from",
            "tv_channel",
            "group",
            "by",
            "content",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "result0 is the least common content of those tv channels .",
        "response_toks_blank_res": [
            "result0",
            "is",
            "the",
            "least",
            "common",
            "content",
            "of",
            "those",
            "tv",
            "channels",
            "."
        ]
    },
    {
        "database_id": "tvshow",
        "query": "SELECT series_name from tv_channel",
        "query_toks": [
            "select",
            "series_name",
            "from",
            "tv_channel"
        ],
        "results_raw": [
            [
                "series_name"
            ],
            [
                "Sky Radio"
            ],
            [
                "Sky Music"
            ],
            [
                "Music Box Italia"
            ]
        ],
        "response": "Here are the series names of all TV channels.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "series",
            "names",
            "of",
            "all",
            "TV",
            "channels",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT series_name from tv_channel",
        "query_w_results_blank_res": "SELECT series_name from tv_channel",
        "query_toks_w_results": [
            "select",
            "series_name",
            "from",
            "tv_channel"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "series_name",
            "from",
            "tv_channel"
        ],
        "response_blank_res": "Here are the series names of all TV channels .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "series",
            "names",
            "of",
            "all",
            "TV",
            "channels",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners",
        "query_toks": [
            "select",
            "first_name",
            "from",
            "professionals",
            "union",
            "select",
            "first_name",
            "from",
            "owners"
        ],
        "results_raw": [
            [
                "first_name"
            ],
            [
                "Adelle"
            ],
            [
                "Brady"
            ],
            [
                "Cindy"
            ]
        ],
        "response": "Here are the first names used for professionals or owners",
        "response_toks": [
            "Here",
            "are",
            "the",
            "first",
            "names",
            "used",
            "for",
            "professionals",
            "or",
            "owners"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners",
        "query_w_results_blank_res": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners",
        "query_toks_w_results": [
            "select",
            "first_name",
            "from",
            "professionals",
            "union",
            "select",
            "first_name",
            "from",
            "owners"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "first_name",
            "from",
            "professionals",
            "union",
            "select",
            "first_name",
            "from",
            "owners"
        ],
        "response_blank_res": "Here are the first names used for professionals or owners",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "first",
            "names",
            "used",
            "for",
            "professionals",
            "or",
            "owners"
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
        "query_toks": [
            "select",
            "first_name",
            "from",
            "professionals",
            "union",
            "select",
            "first_name",
            "from",
            "owners",
            "except",
            "select",
            "name",
            "from",
            "dogs"
        ],
        "results_raw": [
            [
                "first_name"
            ],
            [
                "Adelle"
            ],
            [
                "Brady"
            ],
            [
                "Cindy"
            ]
        ],
        "response": "Here are  first names are used for professionals or owners, but are not used as dog names",
        "response_toks": [
            "Here",
            "are",
            "first",
            "names",
            "are",
            "used",
            "for",
            "professionals",
            "or",
            "owners",
            ",",
            "but",
            "are",
            "not",
            "used",
            "as",
            "dog",
            "names"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
        "query_w_results_blank_res": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
        "query_toks_w_results": [
            "select",
            "first_name",
            "from",
            "professionals",
            "union",
            "select",
            "first_name",
            "from",
            "owners",
            "except",
            "select",
            "name",
            "from",
            "dogs"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "first_name",
            "from",
            "professionals",
            "union",
            "select",
            "first_name",
            "from",
            "owners",
            "except",
            "select",
            "name",
            "from",
            "dogs"
        ],
        "response_blank_res": "Here are first names are used for professionals or owners , but are not used as dog names",
        "response_toks_blank_res": [
            "Here",
            "are",
            "first",
            "names",
            "are",
            "used",
            "for",
            "professionals",
            "or",
            "owners",
            ",",
            "but",
            "are",
            "not",
            "used",
            "as",
            "dog",
            "names"
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners UNION SELECT name FROM Dogs",
        "query_toks": [
            "select",
            "first_name",
            "from",
            "professionals",
            "union",
            "select",
            "first_name",
            "from",
            "owners",
            "union",
            "select",
            "name",
            "from",
            "dogs"
        ],
        "results_raw": [
            [
                "first_name"
            ],
            [
                "Adelle"
            ],
            [
                "Bessie"
            ],
            [
                "Betty"
            ]
        ],
        "response": "Here are the first names used for professionals or owners, and used as dog names",
        "response_toks": [
            "Here",
            "are",
            "the",
            "first",
            "names",
            "used",
            "for",
            "professionals",
            "or",
            "owners",
            ",",
            "and",
            "used",
            "as",
            "dog",
            "names"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners UNION SELECT name FROM Dogs",
        "query_w_results_blank_res": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners UNION SELECT name FROM Dogs",
        "query_toks_w_results": [
            "select",
            "first_name",
            "from",
            "professionals",
            "union",
            "select",
            "first_name",
            "from",
            "owners",
            "union",
            "select",
            "name",
            "from",
            "dogs"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "first_name",
            "from",
            "professionals",
            "union",
            "select",
            "first_name",
            "from",
            "owners",
            "union",
            "select",
            "name",
            "from",
            "dogs"
        ],
        "response_blank_res": "Here are the first names used for professionals or owners , and used as dog names",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "first",
            "names",
            "used",
            "for",
            "professionals",
            "or",
            "owners",
            ",",
            "and",
            "used",
            "as",
            "dog",
            "names"
        ]
    },
    {
        "database_id": "pets_1",
        "query": "select lname from Student AS T1 JOIN Has_Pet AS T2 ON T2.stuid = T1.stuid",
        "query_toks": [
            "select",
            "lname",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t2",
            ".",
            "stuid",
            "=",
            "t1",
            ".",
            "stuid"
        ],
        "results_raw": [
            [
                "LName"
            ],
            [
                "Smith"
            ],
            [
                "Kim"
            ],
            [
                "Kim"
            ]
        ],
        "response": "The last names of students who have pets are \"Smith\" and \"Kim\".",
        "response_toks": [
            "The",
            "last",
            "names",
            "of",
            "students",
            "who",
            "have",
            "pets",
            "are",
            "``",
            "Smith",
            "''",
            "and",
            "``",
            "Kim",
            "''",
            "."
        ],
        "results_map": {
            "result0": "Smith",
            "result1": "Kim"
        },
        "results_blank_res": "result0 result1 ",
        "query_w_results": "select lname from Student AS T1 JOIN Has_Pet AS T2 ON T2.stuid = T1.stuid | Smith Kim ",
        "query_w_results_blank_res": "select lname from Student AS T1 JOIN Has_Pet AS T2 ON T2.stuid = T1.stuid | result0 result1 ",
        "query_toks_w_results": [
            "select",
            "lname",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t2",
            ".",
            "stuid",
            "=",
            "t1",
            ".",
            "stuid",
            "Smith",
            "Kim"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "lname",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t2",
            ".",
            "stuid",
            "=",
            "t1",
            ".",
            "stuid",
            "result0",
            "result1"
        ],
        "response_blank_res": "The last names of students who have pets are `` result0 '' and `` result1 '' .",
        "response_toks_blank_res": [
            "The",
            "last",
            "names",
            "of",
            "students",
            "who",
            "have",
            "pets",
            "are",
            "``",
            "result0",
            "''",
            "and",
            "``",
            "result1",
            "''",
            "."
        ]
    },
    {
        "database_id": "pets_1",
        "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE  T3.pettype  =  'cat'",
        "query_toks": [
            "select",
            "t1",
            ".",
            "lname",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "where",
            "t3",
            ".",
            "pettype",
            "=",
            "'cat'"
        ],
        "results_raw": [
            [
                "LName"
            ],
            [
                "Smith"
            ]
        ],
        "response": "The last name of the student who has a cat is \"Smith\".",
        "response_toks": [
            "The",
            "last",
            "name",
            "of",
            "the",
            "student",
            "who",
            "has",
            "a",
            "cat",
            "is",
            "``",
            "Smith",
            "''",
            "."
        ],
        "results_map": {
            "result0": "Smith"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE  T3.pettype  =  'cat' | Smith ",
        "query_w_results_blank_res": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE  T3.pettype  =  'cat' | result0 ",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "lname",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "where",
            "t3",
            ".",
            "pettype",
            "=",
            "'cat'",
            "Smith"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "lname",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "where",
            "t3",
            ".",
            "pettype",
            "=",
            "'cat'",
            "result0"
        ],
        "response_blank_res": "The last name of the student who has a cat is `` result0 '' .",
        "response_toks_blank_res": [
            "The",
            "last",
            "name",
            "of",
            "the",
            "student",
            "who",
            "has",
            "a",
            "cat",
            "is",
            "``",
            "result0",
            "''",
            "."
        ]
    },
    {
        "database_id": "pets_1",
        "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
        "query_toks": [
            "select",
            "t1",
            ".",
            "lname",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "where",
            "t3",
            ".",
            "pet_age",
            "=",
            "3",
            "and",
            "t3",
            ".",
            "pettype",
            "=",
            "'cat'"
        ],
        "results_raw": [
            [
                "LName"
            ],
            [
                "Smith"
            ]
        ],
        "response": "The last name of the student who has a cat that is age 3 is \"Smith\".",
        "response_toks": [
            "The",
            "last",
            "name",
            "of",
            "the",
            "student",
            "who",
            "has",
            "a",
            "cat",
            "that",
            "is",
            "age",
            "3",
            "is",
            "``",
            "Smith",
            "''",
            "."
        ],
        "results_map": {
            "result0": "Smith"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat' | Smith ",
        "query_w_results_blank_res": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat' | result0 ",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "lname",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "where",
            "t3",
            ".",
            "pet_age",
            "=",
            "3",
            "and",
            "t3",
            ".",
            "pettype",
            "=",
            "'cat'",
            "Smith"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "lname",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "where",
            "t3",
            ".",
            "pet_age",
            "=",
            "3",
            "and",
            "t3",
            ".",
            "pettype",
            "=",
            "'cat'",
            "result0"
        ],
        "response_blank_res": "The last name of the student who has a cat that is age 3 is `` result0 '' .",
        "response_toks_blank_res": [
            "The",
            "last",
            "name",
            "of",
            "the",
            "student",
            "who",
            "has",
            "a",
            "cat",
            "that",
            "is",
            "age",
            "3",
            "is",
            "``",
            "result0",
            "''",
            "."
        ]
    },
    {
        "database_id": "orchestra",
        "query": "SELECT orchestra, Major_Record_Format  FROM orchestra",
        "query_toks": [
            "select",
            "orchestra",
            ",",
            "major_record_format",
            "from",
            "orchestra"
        ],
        "results_raw": [
            [
                "Orchestra",
                "Major_Record_Format"
            ],
            [
                "London Symphony Orchestra",
                "CD"
            ],
            [
                "Columbia Symphony Orchestra",
                "CD / LP"
            ],
            [
                "Royal Concertgebouw Orchestra",
                "CD"
            ]
        ],
        "response": "The orchestra names and the major record formats are shown in the table.",
        "response_toks": [
            "The",
            "orchestra",
            "names",
            "and",
            "the",
            "major",
            "record",
            "formats",
            "are",
            "shown",
            "in",
            "the",
            "table",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT orchestra, Major_Record_Format  FROM orchestra",
        "query_w_results_blank_res": "SELECT orchestra, Major_Record_Format  FROM orchestra",
        "query_toks_w_results": [
            "select",
            "orchestra",
            ",",
            "major_record_format",
            "from",
            "orchestra"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "orchestra",
            ",",
            "major_record_format",
            "from",
            "orchestra"
        ],
        "response_blank_res": "The orchestra names and the major record formats are shown in the table .",
        "response_toks_blank_res": [
            "The",
            "orchestra",
            "names",
            "and",
            "the",
            "major",
            "record",
            "formats",
            "are",
            "shown",
            "in",
            "the",
            "table",
            "."
        ]
    },
    {
        "database_id": "orchestra",
        "query": "SELECT orchestra FROM orchestra order by orchestra",
        "query_toks": [
            "select",
            "orchestra",
            "from",
            "orchestra",
            "order",
            "by",
            "orchestra"
        ],
        "results_raw": [
            [
                "Orchestra"
            ],
            [
                "Chicago Symphony Orchestra"
            ],
            [
                "Columbia Symphony Orchestra"
            ],
            [
                "Detroit Symphony Orchestra"
            ]
        ],
        "response": "The list of orchestra names in ascending order are in the result table.",
        "response_toks": [
            "The",
            "list",
            "of",
            "orchestra",
            "names",
            "in",
            "ascending",
            "order",
            "are",
            "in",
            "the",
            "result",
            "table",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT orchestra FROM orchestra order by orchestra",
        "query_w_results_blank_res": "SELECT orchestra FROM orchestra order by orchestra",
        "query_toks_w_results": [
            "select",
            "orchestra",
            "from",
            "orchestra",
            "order",
            "by",
            "orchestra"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "orchestra",
            "from",
            "orchestra",
            "order",
            "by",
            "orchestra"
        ],
        "response_blank_res": "The list of orchestra names in ascending order are in the result table .",
        "response_toks_blank_res": [
            "The",
            "list",
            "of",
            "orchestra",
            "names",
            "in",
            "ascending",
            "order",
            "are",
            "in",
            "the",
            "result",
            "table",
            "."
        ]
    },
    {
        "database_id": "orchestra",
        "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT ( * )  ASC",
        "query_toks": [
            "select",
            "major_record_format",
            "from",
            "orchestra",
            "group",
            "by",
            "major_record_format",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "asc"
        ],
        "results_raw": [
            [
                "Major_Record_Format"
            ],
            [
                "CD / LP"
            ],
            [
                "DVD"
            ],
            [
                "CD"
            ]
        ],
        "response": "The record formats of orchestra in ascending order of count are shown in the result table.",
        "response_toks": [
            "The",
            "record",
            "formats",
            "of",
            "orchestra",
            "in",
            "ascending",
            "order",
            "of",
            "count",
            "are",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT ( * )  ASC",
        "query_w_results_blank_res": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT ( * )  ASC",
        "query_toks_w_results": [
            "select",
            "major_record_format",
            "from",
            "orchestra",
            "group",
            "by",
            "major_record_format",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "asc"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "major_record_format",
            "from",
            "orchestra",
            "group",
            "by",
            "major_record_format",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "asc"
        ],
        "response_blank_res": "The record formats of orchestra in ascending order of count are shown in the result table .",
        "response_toks_blank_res": [
            "The",
            "record",
            "formats",
            "of",
            "orchestra",
            "in",
            "ascending",
            "order",
            "of",
            "count",
            "are",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ]
    },
    {
        "database_id": "museum_visit",
        "query": "SELECT count ( Museum_ID  )  FROM museum",
        "query_toks": [
            "select",
            "count",
            "(",
            "museum_id",
            ")",
            "from",
            "museum"
        ],
        "results_raw": [
            [
                "count(Museum_ID )"
            ],
            [
                8
            ]
        ],
        "response": "There are 8 museum id in total in the list.",
        "response_toks": [
            "There",
            "are",
            "8",
            "museum",
            "id",
            "in",
            "total",
            "in",
            "the",
            "list",
            "."
        ],
        "results_map": {
            "result0": "8"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( Museum_ID  )  FROM museum | 8 ",
        "query_w_results_blank_res": "SELECT count ( Museum_ID  )  FROM museum | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "museum_id",
            ")",
            "from",
            "museum",
            "8"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "museum_id",
            ")",
            "from",
            "museum",
            "result0"
        ],
        "response_blank_res": "There are result0 museum id in total in the list .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "museum",
            "id",
            "in",
            "total",
            "in",
            "the",
            "list",
            "."
        ]
    },
    {
        "database_id": "museum_visit",
        "query": "SELECT Num_of_Staff FROM museum where museum.Museum_ID  =  3",
        "query_toks": [
            "select",
            "num_of_staff",
            "from",
            "museum",
            "where",
            "museum.museum_id",
            "=",
            "3"
        ],
        "results_raw": [
            [
                "Num_of_Staff"
            ],
            [
                18
            ]
        ],
        "response": "The number of staff in museum id 3 is 18.",
        "response_toks": [
            "The",
            "number",
            "of",
            "staff",
            "in",
            "museum",
            "id",
            "3",
            "is",
            "18",
            "."
        ],
        "results_map": {
            "result0": "18"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT Num_of_Staff FROM museum where museum.Museum_ID  =  3 | 18 ",
        "query_w_results_blank_res": "SELECT Num_of_Staff FROM museum where museum.Museum_ID  =  3 | result0 ",
        "query_toks_w_results": [
            "select",
            "num_of_staff",
            "from",
            "museum",
            "where",
            "museum.museum_id",
            "=",
            "3",
            "18"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "num_of_staff",
            "from",
            "museum",
            "where",
            "museum.museum_id",
            "=",
            "3",
            "result0"
        ],
        "response_blank_res": "The number of staff in museum id 3 is result0 .",
        "response_toks_blank_res": [
            "The",
            "number",
            "of",
            "staff",
            "in",
            "museum",
            "id",
            "3",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "museum_visit",
        "query": "SELECT Open_year FROM museum where Name = 'Capital Plaza Museum'",
        "query_toks": [
            "select",
            "open_year",
            "from",
            "museum",
            "where",
            "name",
            "=",
            "'capital",
            "plaza",
            "museum'"
        ],
        "results_raw": [
            [
                "Open_Year"
            ],
            [
                "2012"
            ]
        ],
        "response": "The open year of the capital plaza museum is 2012.",
        "response_toks": [
            "The",
            "open",
            "year",
            "of",
            "the",
            "capital",
            "plaza",
            "museum",
            "is",
            "2012",
            "."
        ],
        "results_map": {
            "result0": "2012"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT Open_year FROM museum where Name = 'Capital Plaza Museum' | 2012 ",
        "query_w_results_blank_res": "SELECT Open_year FROM museum where Name = 'Capital Plaza Museum' | result0 ",
        "query_toks_w_results": [
            "select",
            "open_year",
            "from",
            "museum",
            "where",
            "name",
            "=",
            "'capital",
            "plaza",
            "museum'",
            "2012"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "open_year",
            "from",
            "museum",
            "where",
            "name",
            "=",
            "'capital",
            "plaza",
            "museum'",
            "result0"
        ],
        "response_blank_res": "The open year of the capital plaza museum is result0 .",
        "response_toks_blank_res": [
            "The",
            "open",
            "year",
            "of",
            "the",
            "capital",
            "plaza",
            "museum",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "museum_visit",
        "query": "SELECT  t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id GROUP BY t1.id HAVING count ( * )   >  1",
        "query_toks": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "visitor",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "visitor_id",
            "group",
            "by",
            "t1",
            ".",
            "id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Arjen Robben"
            ],
            [
                "Fernando Gago"
            ],
            [
                "Rafael van der Vaart"
            ]
        ],
        "response": "These are the names of all visitors who visited some museums more than once",
        "response_toks": [
            "These",
            "are",
            "the",
            "names",
            "of",
            "all",
            "visitors",
            "who",
            "visited",
            "some",
            "museums",
            "more",
            "than",
            "once"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT  t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id GROUP BY t1.id HAVING count ( * )   >  1",
        "query_w_results_blank_res": "SELECT  t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id GROUP BY t1.id HAVING count ( * )   >  1",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "visitor",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "visitor_id",
            "group",
            "by",
            "t1",
            ".",
            "id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "visitor",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "visitor_id",
            "group",
            "by",
            "t1",
            ".",
            "id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "response_blank_res": "These are the names of all visitors who visited some museums more than once",
        "response_toks_blank_res": [
            "These",
            "are",
            "the",
            "names",
            "of",
            "all",
            "visitors",
            "who",
            "visited",
            "some",
            "museums",
            "more",
            "than",
            "once"
        ]
    },
    {
        "database_id": "museum_visit",
        "query": "SELECT  t1.name, t1.id, t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id GROUP BY t1.id HAVING count ( * )   >  1",
        "query_toks": [
            "select",
            "t1",
            ".",
            "name",
            ",",
            "t1",
            ".",
            "id",
            ",",
            "t1",
            ".",
            "age",
            "from",
            "visitor",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "visitor_id",
            "group",
            "by",
            "t1",
            ".",
            "id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "results_raw": [
            [
                "Name",
                "ID",
                "Age"
            ],
            [
                "Arjen Robben",
                3,
                27
            ],
            [
                "Fernando Gago",
                5,
                36
            ],
            [
                "Rafael van der Vaart",
                6,
                25
            ]
        ],
        "response": "Here are the names, ids and ages of the visitors who visited some museums more than once",
        "response_toks": [
            "Here",
            "are",
            "the",
            "names",
            ",",
            "ids",
            "and",
            "ages",
            "of",
            "the",
            "visitors",
            "who",
            "visited",
            "some",
            "museums",
            "more",
            "than",
            "once"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT  t1.name, t1.id, t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id GROUP BY t1.id HAVING count ( * )   >  1",
        "query_w_results_blank_res": "SELECT  t1.name, t1.id, t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id GROUP BY t1.id HAVING count ( * )   >  1",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "name",
            ",",
            "t1",
            ".",
            "id",
            ",",
            "t1",
            ".",
            "age",
            "from",
            "visitor",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "visitor_id",
            "group",
            "by",
            "t1",
            ".",
            "id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "name",
            ",",
            "t1",
            ".",
            "id",
            ",",
            "t1",
            ".",
            "age",
            "from",
            "visitor",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "visitor_id",
            "group",
            "by",
            "t1",
            ".",
            "id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "response_blank_res": "Here are the names , ids and ages of the visitors who visited some museums more than once",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "names",
            ",",
            "ids",
            "and",
            "ages",
            "of",
            "the",
            "visitors",
            "who",
            "visited",
            "some",
            "museums",
            "more",
            "than",
            "once"
        ]
    },
    {
        "database_id": "museum_visit",
        "query": "SELECT  name, Level_of_membership FROM visitor where age > 20",
        "query_toks": [
            "select",
            "name",
            ",",
            "level_of_membership",
            "from",
            "visitor",
            "where",
            "age",
            ">",
            "20"
        ],
        "results_raw": [
            [
                "Name",
                "Level_of_membership"
            ],
            [
                "Gonzalo Higua\u00edn ",
                8
            ],
            [
                "Guti Midfielder",
                5
            ],
            [
                "Arjen Robben",
                1
            ]
        ],
        "response": "Here are the names and level of membership for all visitors over the age of 20",
        "response_toks": [
            "Here",
            "are",
            "the",
            "names",
            "and",
            "level",
            "of",
            "membership",
            "for",
            "all",
            "visitors",
            "over",
            "the",
            "age",
            "of",
            "20"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT  name, Level_of_membership FROM visitor where age > 20",
        "query_w_results_blank_res": "SELECT  name, Level_of_membership FROM visitor where age > 20",
        "query_toks_w_results": [
            "select",
            "name",
            ",",
            "level_of_membership",
            "from",
            "visitor",
            "where",
            "age",
            ">",
            "20"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            ",",
            "level_of_membership",
            "from",
            "visitor",
            "where",
            "age",
            ">",
            "20"
        ],
        "response_blank_res": "Here are the names and level of membership for all visitors over the age of 20",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "names",
            "and",
            "level",
            "of",
            "membership",
            "for",
            "all",
            "visitors",
            "over",
            "the",
            "age",
            "of",
            "20"
        ]
    },
    {
        "database_id": "museum_visit",
        "query": "SELECT  t1.name , t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id where t2.total_spent > 100",
        "query_toks": [
            "select",
            "t1",
            ".",
            "name",
            ",",
            "t1",
            ".",
            "age",
            "from",
            "visitor",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "visitor_id",
            "where",
            "t2",
            ".",
            "total_spent",
            ">",
            "100"
        ],
        "results_raw": [
            [
                "Name",
                "Age"
            ],
            [
                "Fernando Gago",
                36
            ],
            [
                "Arjen Robben",
                27
            ],
            [
                "Arjen Robben",
                27
            ]
        ],
        "response": "Here are the names and ages of all the customers who spent over 100",
        "response_toks": [
            "Here",
            "are",
            "the",
            "names",
            "and",
            "ages",
            "of",
            "all",
            "the",
            "customers",
            "who",
            "spent",
            "over",
            "100"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT  t1.name , t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id where t2.total_spent > 100",
        "query_w_results_blank_res": "SELECT  t1.name , t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id where t2.total_spent > 100",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "name",
            ",",
            "t1",
            ".",
            "age",
            "from",
            "visitor",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "visitor_id",
            "where",
            "t2",
            ".",
            "total_spent",
            ">",
            "100"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "name",
            ",",
            "t1",
            ".",
            "age",
            "from",
            "visitor",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "visitor_id",
            "where",
            "t2",
            ".",
            "total_spent",
            ">",
            "100"
        ],
        "response_blank_res": "Here are the names and ages of all the customers who spent over 100",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "names",
            "and",
            "ages",
            "of",
            "all",
            "the",
            "customers",
            "who",
            "spent",
            "over",
            "100"
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT count ( GovernmentForm )  FROM country",
        "query_toks": [
            "select",
            "count",
            "(",
            "governmentform",
            ")",
            "from",
            "country"
        ],
        "results_raw": [
            [
                "count(GovernmentForm)"
            ],
            [
                239
            ]
        ],
        "response": "There are 239 government forms.",
        "response_toks": [
            "There",
            "are",
            "239",
            "government",
            "forms",
            "."
        ],
        "results_map": {
            "result0": "239"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( GovernmentForm )  FROM country | 239 ",
        "query_w_results_blank_res": "SELECT count ( GovernmentForm )  FROM country | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "governmentform",
            ")",
            "from",
            "country",
            "239"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "governmentform",
            ")",
            "from",
            "country",
            "result0"
        ],
        "response_blank_res": "There are result0 government forms .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "government",
            "forms",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg ( LifeExpectancy )   >  72",
        "query_toks": [
            "select",
            "governmentform",
            "from",
            "country",
            "group",
            "by",
            "governmentform",
            "having",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            ">",
            "72"
        ],
        "results_raw": [
            [
                "GovernmentForm"
            ],
            [
                "Commonwealth of the US"
            ],
            [
                "Constitutional Monarchy (Emirate)"
            ],
            [
                "Constitutional Monarchy, Federation"
            ]
        ],
        "response": "Here are the government form name  whose average life expectancy is longer than 72. There are 17",
        "response_toks": [
            "Here",
            "are",
            "the",
            "government",
            "form",
            "name",
            "whose",
            "average",
            "life",
            "expectancy",
            "is",
            "longer",
            "than",
            "72",
            ".",
            "There",
            "are",
            "17"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg ( LifeExpectancy )   >  72",
        "query_w_results_blank_res": "SELECT GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg ( LifeExpectancy )   >  72",
        "query_toks_w_results": [
            "select",
            "governmentform",
            "from",
            "country",
            "group",
            "by",
            "governmentform",
            "having",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            ">",
            "72"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "governmentform",
            "from",
            "country",
            "group",
            "by",
            "governmentform",
            "having",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            ">",
            "72"
        ],
        "response_blank_res": "Here are the government form name whose average life expectancy is longer than 72 . There are 17",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "government",
            "form",
            "name",
            "whose",
            "average",
            "life",
            "expectancy",
            "is",
            "longer",
            "than",
            "72",
            ".",
            "There",
            "are",
            "17"
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT sum ( Population )  ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg ( LifeExpectancy )   >  72",
        "query_toks": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "governmentform",
            "from",
            "country",
            "group",
            "by",
            "governmentform",
            "having",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            ">",
            "72"
        ],
        "results_raw": [
            [
                "sum(Population)",
                "GovernmentForm"
            ],
            [
                3947000,
                "Commonwealth of the US"
            ],
            [
                1972000,
                "Constitutional Monarchy (Emirate)"
            ],
            [
                82516000,
                "Constitutional Monarchy, Federation"
            ]
        ],
        "response": "Here are the government form names and total population for each government form whose average life expectancy is longer than 72.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "government",
            "form",
            "names",
            "and",
            "total",
            "population",
            "for",
            "each",
            "government",
            "form",
            "whose",
            "average",
            "life",
            "expectancy",
            "is",
            "longer",
            "than",
            "72",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT sum ( Population )  ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg ( LifeExpectancy )   >  72",
        "query_w_results_blank_res": "SELECT sum ( Population )  ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg ( LifeExpectancy )   >  72",
        "query_toks_w_results": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "governmentform",
            "from",
            "country",
            "group",
            "by",
            "governmentform",
            "having",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            ">",
            "72"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "governmentform",
            "from",
            "country",
            "group",
            "by",
            "governmentform",
            "having",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            ">",
            "72"
        ],
        "response_blank_res": "Here are the government form names and total population for each government form whose average life expectancy is longer than 72 .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "government",
            "form",
            "names",
            "and",
            "total",
            "population",
            "for",
            "each",
            "government",
            "form",
            "whose",
            "average",
            "life",
            "expectancy",
            "is",
            "longer",
            "than",
            "72",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT avg ( LifeExpectancy )  FROM country GROUP BY GovernmentForm HAVING avg ( LifeExpectancy )   >  72",
        "query_toks": [
            "select",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            "from",
            "country",
            "group",
            "by",
            "governmentform",
            "having",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            ">",
            "72"
        ],
        "results_raw": [
            [
                "avg(LifeExpectancy)"
            ],
            [
                75.55
            ],
            [
                76.1
            ],
            [
                76.95
            ]
        ],
        "response": "Here is the average life expectancy for government form whose average life expectancy is longer than 72",
        "response_toks": [
            "Here",
            "is",
            "the",
            "average",
            "life",
            "expectancy",
            "for",
            "government",
            "form",
            "whose",
            "average",
            "life",
            "expectancy",
            "is",
            "longer",
            "than",
            "72"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT avg ( LifeExpectancy )  FROM country GROUP BY GovernmentForm HAVING avg ( LifeExpectancy )   >  72",
        "query_w_results_blank_res": "SELECT avg ( LifeExpectancy )  FROM country GROUP BY GovernmentForm HAVING avg ( LifeExpectancy )   >  72",
        "query_toks_w_results": [
            "select",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            "from",
            "country",
            "group",
            "by",
            "governmentform",
            "having",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            ">",
            "72"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            "from",
            "country",
            "group",
            "by",
            "governmentform",
            "having",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            ">",
            "72"
        ],
        "response_blank_res": "Here is the average life expectancy for government form whose average life expectancy is longer than 72",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "average",
            "life",
            "expectancy",
            "for",
            "government",
            "form",
            "whose",
            "average",
            "life",
            "expectancy",
            "is",
            "longer",
            "than",
            "72"
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT sum ( Population )  ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg ( LifeExpectancy )   >  72",
        "query_toks": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "governmentform",
            "from",
            "country",
            "group",
            "by",
            "governmentform",
            "having",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            ">",
            "72"
        ],
        "results_raw": [
            [
                "sum(Population)",
                "GovernmentForm"
            ],
            [
                3947000,
                "Commonwealth of the US"
            ],
            [
                1972000,
                "Constitutional Monarchy (Emirate)"
            ],
            [
                82516000,
                "Constitutional Monarchy, Federation"
            ]
        ],
        "response": "Thanks! Here is the list showing government forms and their total population for government forms having an average life expectancy over 72.",
        "response_toks": [
            "Thanks",
            "!",
            "Here",
            "is",
            "the",
            "list",
            "showing",
            "government",
            "forms",
            "and",
            "their",
            "total",
            "population",
            "for",
            "government",
            "forms",
            "having",
            "an",
            "average",
            "life",
            "expectancy",
            "over",
            "72",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT sum ( Population )  ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg ( LifeExpectancy )   >  72",
        "query_w_results_blank_res": "SELECT sum ( Population )  ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg ( LifeExpectancy )   >  72",
        "query_toks_w_results": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "governmentform",
            "from",
            "country",
            "group",
            "by",
            "governmentform",
            "having",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            ">",
            "72"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "governmentform",
            "from",
            "country",
            "group",
            "by",
            "governmentform",
            "having",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            ">",
            "72"
        ],
        "response_blank_res": "Thanks ! Here is the list showing government forms and their total population for government forms having an average life expectancy over 72 .",
        "response_toks_blank_res": [
            "Thanks",
            "!",
            "Here",
            "is",
            "the",
            "list",
            "showing",
            "government",
            "forms",
            "and",
            "their",
            "total",
            "population",
            "for",
            "government",
            "forms",
            "having",
            "an",
            "average",
            "life",
            "expectancy",
            "over",
            "72",
            "."
        ]
    },
    {
        "database_id": "museum_visit",
        "query": "SELECT Level_of_membership FROM visitor WHERE ID  =  1",
        "query_toks": [
            "select",
            "level_of_membership",
            "from",
            "visitor",
            "where",
            "id",
            "=",
            "1"
        ],
        "results_raw": [
            [
                "Level_of_membership"
            ],
            [
                8
            ]
        ],
        "response": "The Level of membership of visitor id 1 is 8",
        "response_toks": [
            "The",
            "Level",
            "of",
            "membership",
            "of",
            "visitor",
            "id",
            "1",
            "is",
            "8"
        ],
        "results_map": {
            "result0": "8"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT Level_of_membership FROM visitor WHERE ID  =  1 | 8 ",
        "query_w_results_blank_res": "SELECT Level_of_membership FROM visitor WHERE ID  =  1 | result0 ",
        "query_toks_w_results": [
            "select",
            "level_of_membership",
            "from",
            "visitor",
            "where",
            "id",
            "=",
            "1",
            "8"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "level_of_membership",
            "from",
            "visitor",
            "where",
            "id",
            "=",
            "1",
            "result0"
        ],
        "response_blank_res": "The Level of membership of visitor id 1 is result0",
        "response_toks_blank_res": [
            "The",
            "Level",
            "of",
            "membership",
            "of",
            "visitor",
            "id",
            "1",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "museum_visit",
        "query": "SELECT Name FROM visitor WHERE ID  =  1",
        "query_toks": [
            "select",
            "name",
            "from",
            "visitor",
            "where",
            "id",
            "=",
            "1"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Gonzalo Higua\u00edn "
            ]
        ],
        "response": "The name of customer id 1 is Gonzalo Higua\u00edn",
        "response_toks": [
            "The",
            "name",
            "of",
            "customer",
            "id",
            "1",
            "is",
            "Gonzalo",
            "Higua\u00edn"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Name FROM visitor WHERE ID  =  1",
        "query_w_results_blank_res": "SELECT Name FROM visitor WHERE ID  =  1",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "visitor",
            "where",
            "id",
            "=",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "visitor",
            "where",
            "id",
            "=",
            "1"
        ],
        "response_blank_res": "The name of customer id 1 is Gonzalo Higua\u00edn",
        "response_toks_blank_res": [
            "The",
            "name",
            "of",
            "customer",
            "id",
            "1",
            "is",
            "Gonzalo",
            "Higua\u00edn"
        ]
    },
    {
        "database_id": "museum_visit",
        "query": "SELECT Age FROM visitor WHERE ID  =  1",
        "query_toks": [
            "select",
            "age",
            "from",
            "visitor",
            "where",
            "id",
            "=",
            "1"
        ],
        "results_raw": [
            [
                "Age"
            ],
            [
                35
            ]
        ],
        "response": "The age of customer id 1 is 35",
        "response_toks": [
            "The",
            "age",
            "of",
            "customer",
            "id",
            "1",
            "is",
            "35"
        ],
        "results_map": {
            "result0": "35"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT Age FROM visitor WHERE ID  =  1 | 35 ",
        "query_w_results_blank_res": "SELECT Age FROM visitor WHERE ID  =  1 | result0 ",
        "query_toks_w_results": [
            "select",
            "age",
            "from",
            "visitor",
            "where",
            "id",
            "=",
            "1",
            "35"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "age",
            "from",
            "visitor",
            "where",
            "id",
            "=",
            "1",
            "result0"
        ],
        "response_blank_res": "The age of customer id 1 is result0",
        "response_toks_blank_res": [
            "The",
            "age",
            "of",
            "customer",
            "id",
            "1",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT T1.airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid   =   T2.Airline GROUP BY T1.Airline ORDER BY count ( * )  desc LIMIT 1",
        "query_toks": [
            "select",
            "t1",
            ".",
            "airline",
            "from",
            "airlines",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "uid",
            "=",
            "t2",
            ".",
            "airline",
            "group",
            "by",
            "t1",
            ".",
            "airline",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Airline"
            ],
            [
                "AirTran Airways"
            ]
        ],
        "response": "AirTran Airways is the Airline has the largest number of flights",
        "response_toks": [
            "AirTran",
            "Airways",
            "is",
            "the",
            "Airline",
            "has",
            "the",
            "largest",
            "number",
            "of",
            "flights"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid   =   T2.Airline GROUP BY T1.Airline ORDER BY count ( * )  desc LIMIT 1",
        "query_w_results_blank_res": "SELECT T1.airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid   =   T2.Airline GROUP BY T1.Airline ORDER BY count ( * )  desc LIMIT 1",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "airline",
            "from",
            "airlines",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "uid",
            "=",
            "t2",
            ".",
            "airline",
            "group",
            "by",
            "t1",
            ".",
            "airline",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "airline",
            "from",
            "airlines",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "uid",
            "=",
            "t2",
            ".",
            "airline",
            "group",
            "by",
            "t1",
            ".",
            "airline",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "response_blank_res": "AirTran Airways is the Airline has the largest number of flights",
        "response_toks_blank_res": [
            "AirTran",
            "Airways",
            "is",
            "the",
            "Airline",
            "has",
            "the",
            "largest",
            "number",
            "of",
            "flights"
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT T1.airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid   =   T2.Airline GROUP BY T1.Airline ORDER BY count ( * )  asc LIMIT 1",
        "query_toks": [
            "select",
            "t1",
            ".",
            "airline",
            "from",
            "airlines",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "uid",
            "=",
            "t2",
            ".",
            "airline",
            "group",
            "by",
            "t1",
            ".",
            "airline",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "asc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Airline"
            ],
            [
                "AirTran Airways"
            ]
        ],
        "response": "AirTran Airways  is the Airline that has the fewest number of flights",
        "response_toks": [
            "AirTran",
            "Airways",
            "is",
            "the",
            "Airline",
            "that",
            "has",
            "the",
            "fewest",
            "number",
            "of",
            "flights"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid   =   T2.Airline GROUP BY T1.Airline ORDER BY count ( * )  asc LIMIT 1",
        "query_w_results_blank_res": "SELECT T1.airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid   =   T2.Airline GROUP BY T1.Airline ORDER BY count ( * )  asc LIMIT 1",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "airline",
            "from",
            "airlines",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "uid",
            "=",
            "t2",
            ".",
            "airline",
            "group",
            "by",
            "t1",
            ".",
            "airline",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "asc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "airline",
            "from",
            "airlines",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "uid",
            "=",
            "t2",
            ".",
            "airline",
            "group",
            "by",
            "t1",
            ".",
            "airline",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "asc",
            "limit",
            "1"
        ],
        "response_blank_res": "AirTran Airways is the Airline that has the fewest number of flights",
        "response_toks_blank_res": [
            "AirTran",
            "Airways",
            "is",
            "the",
            "Airline",
            "that",
            "has",
            "the",
            "fewest",
            "number",
            "of",
            "flights"
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT abbreviation from airlines where airline =  \"AirTran Airways\"",
        "query_toks": [
            "select",
            "abbreviation",
            "from",
            "airlines",
            "where",
            "airline",
            "=",
            "\"airtran",
            "airways\""
        ],
        "results_raw": [
            [
                "Abbreviation"
            ],
            [
                "AirTran"
            ]
        ],
        "response": "the abbreviation of the airline with name AirTran Airways is AirTran",
        "response_toks": [
            "the",
            "abbreviation",
            "of",
            "the",
            "airline",
            "with",
            "name",
            "AirTran",
            "Airways",
            "is",
            "AirTran"
        ],
        "results_map": {
            "result0": "AirTran",
            "result1": "AirTran"
        },
        "results_blank_res": "result1 result1 ",
        "query_w_results": "SELECT abbreviation from airlines where airline =  \"AirTran Airways\" | AirTran AirTran ",
        "query_w_results_blank_res": "SELECT abbreviation from airlines where airline =  \"AirTran Airways\" | result1 result1 ",
        "query_toks_w_results": [
            "select",
            "abbreviation",
            "from",
            "airlines",
            "where",
            "airline",
            "=",
            "\"airtran",
            "airways\"",
            "AirTran",
            "AirTran"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "abbreviation",
            "from",
            "airlines",
            "where",
            "airline",
            "=",
            "\"airtran",
            "airways\"",
            "result1",
            "result1"
        ],
        "response_blank_res": "the abbreviation of the airline with name result1 Airways is result1",
        "response_toks_blank_res": [
            "the",
            "abbreviation",
            "of",
            "the",
            "airline",
            "with",
            "name",
            "result1",
            "Airways",
            "is",
            "result1"
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT country from airlines where airline =  \"AirTran Airways\"",
        "query_toks": [
            "select",
            "country",
            "from",
            "airlines",
            "where",
            "airline",
            "=",
            "\"airtran",
            "airways\""
        ],
        "results_raw": [
            [
                "Country"
            ],
            [
                "USA"
            ]
        ],
        "response": "the country of AirTran Airways is USA",
        "response_toks": [
            "the",
            "country",
            "of",
            "AirTran",
            "Airways",
            "is",
            "USA"
        ],
        "results_map": {
            "result0": "USA"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT country from airlines where airline =  \"AirTran Airways\" | USA ",
        "query_w_results_blank_res": "SELECT country from airlines where airline =  \"AirTran Airways\" | result0 ",
        "query_toks_w_results": [
            "select",
            "country",
            "from",
            "airlines",
            "where",
            "airline",
            "=",
            "\"airtran",
            "airways\"",
            "USA"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "country",
            "from",
            "airlines",
            "where",
            "airline",
            "=",
            "\"airtran",
            "airways\"",
            "result0"
        ],
        "response_blank_res": "the country of AirTran Airways is result0",
        "response_toks_blank_res": [
            "the",
            "country",
            "of",
            "AirTran",
            "Airways",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "battle_death",
        "query": "SELECT T1.id ,  T1.name FROM battle AS T1",
        "query_toks": [
            "select",
            "t1",
            ".",
            "id",
            ",",
            "t1",
            ".",
            "name",
            "from",
            "battle",
            "as",
            "t1"
        ],
        "results_raw": [
            [
                "id",
                "name"
            ],
            [
                1,
                "Battle of Adrianople"
            ],
            [
                2,
                "Battle of Serres"
            ],
            [
                3,
                "Battle of Rusion"
            ]
        ],
        "response": "The result table of the battle ids and the corresponding battle names is listed.",
        "response_toks": [
            "The",
            "result",
            "table",
            "of",
            "the",
            "battle",
            "ids",
            "and",
            "the",
            "corresponding",
            "battle",
            "names",
            "is",
            "listed",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.id ,  T1.name FROM battle AS T1",
        "query_w_results_blank_res": "SELECT T1.id ,  T1.name FROM battle AS T1",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "id",
            ",",
            "t1",
            ".",
            "name",
            "from",
            "battle",
            "as",
            "t1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "id",
            ",",
            "t1",
            ".",
            "name",
            "from",
            "battle",
            "as",
            "t1"
        ],
        "response_blank_res": "The result table of the battle ids and the corresponding battle names is listed .",
        "response_toks_blank_res": [
            "The",
            "result",
            "table",
            "of",
            "the",
            "battle",
            "ids",
            "and",
            "the",
            "corresponding",
            "battle",
            "names",
            "is",
            "listed",
            "."
        ]
    },
    {
        "database_id": "battle_death",
        "query": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id   =   T2.lost_in_battle JOIN death AS T3 ON T2.id   =   T3.caused_by_ship_id GROUP BY T1.id HAVING sum ( T3.killed )   >  10",
        "query_toks": [
            "select",
            "t1",
            ".",
            "id",
            ",",
            "t1",
            ".",
            "name",
            "from",
            "battle",
            "as",
            "t1",
            "join",
            "ship",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "lost_in_battle",
            "join",
            "death",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "id",
            "=",
            "t3",
            ".",
            "caused_by_ship_id",
            "group",
            "by",
            "t1",
            ".",
            "id",
            "having",
            "sum",
            "(",
            "t3",
            ".",
            "killed",
            ")",
            ">",
            "10"
        ],
        "results_raw": [
            [
                "id",
                "name"
            ],
            [
                5,
                "Battle of Messinopolis"
            ],
            [
                6,
                "Battle of Boruy"
            ],
            [
                8,
                "Siege of Constantinople"
            ]
        ],
        "response": "The result table of the battle ids and battle names of those that had more than 10 people killed in total is listed.",
        "response_toks": [
            "The",
            "result",
            "table",
            "of",
            "the",
            "battle",
            "ids",
            "and",
            "battle",
            "names",
            "of",
            "those",
            "that",
            "had",
            "more",
            "than",
            "10",
            "people",
            "killed",
            "in",
            "total",
            "is",
            "listed",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id   =   T2.lost_in_battle JOIN death AS T3 ON T2.id   =   T3.caused_by_ship_id GROUP BY T1.id HAVING sum ( T3.killed )   >  10",
        "query_w_results_blank_res": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id   =   T2.lost_in_battle JOIN death AS T3 ON T2.id   =   T3.caused_by_ship_id GROUP BY T1.id HAVING sum ( T3.killed )   >  10",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "id",
            ",",
            "t1",
            ".",
            "name",
            "from",
            "battle",
            "as",
            "t1",
            "join",
            "ship",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "lost_in_battle",
            "join",
            "death",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "id",
            "=",
            "t3",
            ".",
            "caused_by_ship_id",
            "group",
            "by",
            "t1",
            ".",
            "id",
            "having",
            "sum",
            "(",
            "t3",
            ".",
            "killed",
            ")",
            ">",
            "10"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "id",
            ",",
            "t1",
            ".",
            "name",
            "from",
            "battle",
            "as",
            "t1",
            "join",
            "ship",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "lost_in_battle",
            "join",
            "death",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "id",
            "=",
            "t3",
            ".",
            "caused_by_ship_id",
            "group",
            "by",
            "t1",
            ".",
            "id",
            "having",
            "sum",
            "(",
            "t3",
            ".",
            "killed",
            ")",
            ">",
            "10"
        ],
        "response_blank_res": "The result table of the battle ids and battle names of those that had more than 10 people killed in total is listed .",
        "response_toks_blank_res": [
            "The",
            "result",
            "table",
            "of",
            "the",
            "battle",
            "ids",
            "and",
            "battle",
            "names",
            "of",
            "those",
            "that",
            "had",
            "more",
            "than",
            "10",
            "people",
            "killed",
            "in",
            "total",
            "is",
            "listed",
            "."
        ]
    },
    {
        "database_id": "battle_death",
        "query": "SELECT T1.id ,  T1.name ,T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id   =   T2.lost_in_battle JOIN death AS T3 ON T2.id   =   T3.caused_by_ship_id GROUP BY T1.id HAVING sum ( T3.killed )   >  10",
        "query_toks": [
            "select",
            "t1",
            ".",
            "id",
            ",",
            "t1",
            ".",
            "name",
            ",",
            "t1",
            ".",
            "date",
            "from",
            "battle",
            "as",
            "t1",
            "join",
            "ship",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "lost_in_battle",
            "join",
            "death",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "id",
            "=",
            "t3",
            ".",
            "caused_by_ship_id",
            "group",
            "by",
            "t1",
            ".",
            "id",
            "having",
            "sum",
            "(",
            "t3",
            ".",
            "killed",
            ")",
            ">",
            "10"
        ],
        "results_raw": [
            [
                "id",
                "name",
                "date"
            ],
            [
                5,
                "Battle of Messinopolis",
                "4 September 1207"
            ],
            [
                6,
                "Battle of Boruy",
                "June 1205"
            ],
            [
                8,
                "Siege of Constantinople",
                "1235"
            ]
        ],
        "response": "The result table of the battle ids\uff0cbattle names and date of those that had more than 10 people killed in total is listed.",
        "response_toks": [
            "The",
            "result",
            "table",
            "of",
            "the",
            "battle",
            "ids\uff0cbattle",
            "names",
            "and",
            "date",
            "of",
            "those",
            "that",
            "had",
            "more",
            "than",
            "10",
            "people",
            "killed",
            "in",
            "total",
            "is",
            "listed",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.id ,  T1.name ,T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id   =   T2.lost_in_battle JOIN death AS T3 ON T2.id   =   T3.caused_by_ship_id GROUP BY T1.id HAVING sum ( T3.killed )   >  10",
        "query_w_results_blank_res": "SELECT T1.id ,  T1.name ,T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id   =   T2.lost_in_battle JOIN death AS T3 ON T2.id   =   T3.caused_by_ship_id GROUP BY T1.id HAVING sum ( T3.killed )   >  10",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "id",
            ",",
            "t1",
            ".",
            "name",
            ",",
            "t1",
            ".",
            "date",
            "from",
            "battle",
            "as",
            "t1",
            "join",
            "ship",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "lost_in_battle",
            "join",
            "death",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "id",
            "=",
            "t3",
            ".",
            "caused_by_ship_id",
            "group",
            "by",
            "t1",
            ".",
            "id",
            "having",
            "sum",
            "(",
            "t3",
            ".",
            "killed",
            ")",
            ">",
            "10"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "id",
            ",",
            "t1",
            ".",
            "name",
            ",",
            "t1",
            ".",
            "date",
            "from",
            "battle",
            "as",
            "t1",
            "join",
            "ship",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "lost_in_battle",
            "join",
            "death",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "id",
            "=",
            "t3",
            ".",
            "caused_by_ship_id",
            "group",
            "by",
            "t1",
            ".",
            "id",
            "having",
            "sum",
            "(",
            "t3",
            ".",
            "killed",
            ")",
            ">",
            "10"
        ],
        "response_blank_res": "The result table of the battle ids\uff0cbattle names and date of those that had more than 10 people killed in total is listed .",
        "response_toks_blank_res": [
            "The",
            "result",
            "table",
            "of",
            "the",
            "battle",
            "ids\uff0cbattle",
            "names",
            "and",
            "date",
            "of",
            "those",
            "that",
            "had",
            "more",
            "than",
            "10",
            "people",
            "killed",
            "in",
            "total",
            "is",
            "listed",
            "."
        ]
    },
    {
        "database_id": "pets_1",
        "query": "SELECT avg ( pet_age )  FROM pets WHERE PetType  =  'cat'",
        "query_toks": [
            "select",
            "avg",
            "(",
            "pet_age",
            ")",
            "from",
            "pets",
            "where",
            "pettype",
            "=",
            "'cat'"
        ],
        "results_raw": [
            [
                "avg(pet_age)"
            ],
            [
                3.0
            ]
        ],
        "response": "The average pet age for entries with pet type 'Cat' is 3.0.",
        "response_toks": [
            "The",
            "average",
            "pet",
            "age",
            "for",
            "entries",
            "with",
            "pet",
            "type",
            "'Cat",
            "'",
            "is",
            "3.0",
            "."
        ],
        "results_map": {
            "result0": "3.0"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT avg ( pet_age )  FROM pets WHERE PetType  =  'cat' | 3.0 ",
        "query_w_results_blank_res": "SELECT avg ( pet_age )  FROM pets WHERE PetType  =  'cat' | result0 ",
        "query_toks_w_results": [
            "select",
            "avg",
            "(",
            "pet_age",
            ")",
            "from",
            "pets",
            "where",
            "pettype",
            "=",
            "'cat'",
            "3.0"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "avg",
            "(",
            "pet_age",
            ")",
            "from",
            "pets",
            "where",
            "pettype",
            "=",
            "'cat'",
            "result0"
        ],
        "response_blank_res": "The average pet age for entries with pet type 'Cat ' is result0 .",
        "response_toks_blank_res": [
            "The",
            "average",
            "pet",
            "age",
            "for",
            "entries",
            "with",
            "pet",
            "type",
            "'Cat",
            "'",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "pets_1",
        "query": "SELECT avg ( pet_age )  FROM pets WHERE PetType  =  'dog'",
        "query_toks": [
            "select",
            "avg",
            "(",
            "pet_age",
            ")",
            "from",
            "pets",
            "where",
            "pettype",
            "=",
            "'dog'"
        ],
        "results_raw": [
            [
                "avg(pet_age)"
            ],
            [
                1.5
            ]
        ],
        "response": "The average pet age for entries with pet type 'dog' is 1.5.",
        "response_toks": [
            "The",
            "average",
            "pet",
            "age",
            "for",
            "entries",
            "with",
            "pet",
            "type",
            "'dog",
            "'",
            "is",
            "1.5",
            "."
        ],
        "results_map": {
            "result0": "1.5"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT avg ( pet_age )  FROM pets WHERE PetType  =  'dog' | 1.5 ",
        "query_w_results_blank_res": "SELECT avg ( pet_age )  FROM pets WHERE PetType  =  'dog' | result0 ",
        "query_toks_w_results": [
            "select",
            "avg",
            "(",
            "pet_age",
            ")",
            "from",
            "pets",
            "where",
            "pettype",
            "=",
            "'dog'",
            "1.5"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "avg",
            "(",
            "pet_age",
            ")",
            "from",
            "pets",
            "where",
            "pettype",
            "=",
            "'dog'",
            "result0"
        ],
        "response_blank_res": "The average pet age for entries with pet type 'dog ' is result0 .",
        "response_toks_blank_res": [
            "The",
            "average",
            "pet",
            "age",
            "for",
            "entries",
            "with",
            "pet",
            "type",
            "'dog",
            "'",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "pets_1",
        "query": "SELECT max ( pet_age )  FROM pets WHERE PetType  =  'dog'",
        "query_toks": [
            "select",
            "max",
            "(",
            "pet_age",
            ")",
            "from",
            "pets",
            "where",
            "pettype",
            "=",
            "'dog'"
        ],
        "results_raw": [
            [
                "max(pet_age)"
            ],
            [
                2
            ]
        ],
        "response": "The maximum pet age for entries with pet type 'dog' is 2.",
        "response_toks": [
            "The",
            "maximum",
            "pet",
            "age",
            "for",
            "entries",
            "with",
            "pet",
            "type",
            "'dog",
            "'",
            "is",
            "2",
            "."
        ],
        "results_map": {
            "result0": "2"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT max ( pet_age )  FROM pets WHERE PetType  =  'dog' | 2 ",
        "query_w_results_blank_res": "SELECT max ( pet_age )  FROM pets WHERE PetType  =  'dog' | result0 ",
        "query_toks_w_results": [
            "select",
            "max",
            "(",
            "pet_age",
            ")",
            "from",
            "pets",
            "where",
            "pettype",
            "=",
            "'dog'",
            "2"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "max",
            "(",
            "pet_age",
            ")",
            "from",
            "pets",
            "where",
            "pettype",
            "=",
            "'dog'",
            "result0"
        ],
        "response_blank_res": "The maximum pet age for entries with pet type 'dog ' is result0 .",
        "response_toks_blank_res": [
            "The",
            "maximum",
            "pet",
            "age",
            "for",
            "entries",
            "with",
            "pet",
            "type",
            "'dog",
            "'",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "pets_1",
        "query": "SELECT max ( pet_age )  ,  pettype FROM pets GROUP BY pettype",
        "query_toks": [
            "select",
            "max",
            "(",
            "pet_age",
            ")",
            ",",
            "pettype",
            "from",
            "pets",
            "group",
            "by",
            "pettype"
        ],
        "results_raw": [
            [
                "max(pet_age)",
                "PetType"
            ],
            [
                3,
                "cat"
            ],
            [
                2,
                "dog"
            ]
        ],
        "response": "Here are the results of pet type and the corresponding maximum ages.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "results",
            "of",
            "pet",
            "type",
            "and",
            "the",
            "corresponding",
            "maximum",
            "ages",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT max ( pet_age )  ,  pettype FROM pets GROUP BY pettype",
        "query_w_results_blank_res": "SELECT max ( pet_age )  ,  pettype FROM pets GROUP BY pettype",
        "query_toks_w_results": [
            "select",
            "max",
            "(",
            "pet_age",
            ")",
            ",",
            "pettype",
            "from",
            "pets",
            "group",
            "by",
            "pettype"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "max",
            "(",
            "pet_age",
            ")",
            ",",
            "pettype",
            "from",
            "pets",
            "group",
            "by",
            "pettype"
        ],
        "response_blank_res": "Here are the results of pet type and the corresponding maximum ages .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "results",
            "of",
            "pet",
            "type",
            "and",
            "the",
            "corresponding",
            "maximum",
            "ages",
            "."
        ]
    },
    {
        "database_id": "pets_1",
        "query": "SELECT max ( pet_age )  FROM pets WHERE PetType  =  'cat'",
        "query_toks": [
            "select",
            "max",
            "(",
            "pet_age",
            ")",
            "from",
            "pets",
            "where",
            "pettype",
            "=",
            "'cat'"
        ],
        "results_raw": [
            [
                "max(pet_age)"
            ],
            [
                3
            ]
        ],
        "response": "The maximum age for cats is 3.",
        "response_toks": [
            "The",
            "maximum",
            "age",
            "for",
            "cats",
            "is",
            "3",
            "."
        ],
        "results_map": {
            "result0": "3"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT max ( pet_age )  FROM pets WHERE PetType  =  'cat' | 3 ",
        "query_w_results_blank_res": "SELECT max ( pet_age )  FROM pets WHERE PetType  =  'cat' | result0 ",
        "query_toks_w_results": [
            "select",
            "max",
            "(",
            "pet_age",
            ")",
            "from",
            "pets",
            "where",
            "pettype",
            "=",
            "'cat'",
            "3"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "max",
            "(",
            "pet_age",
            ")",
            "from",
            "pets",
            "where",
            "pettype",
            "=",
            "'cat'",
            "result0"
        ],
        "response_blank_res": "The maximum age for cats is result0 .",
        "response_toks_blank_res": [
            "The",
            "maximum",
            "age",
            "for",
            "cats",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "select fullname from car_makers where maker  =  \"amc\"",
        "query_toks": [
            "select",
            "fullname",
            "from",
            "car_makers",
            "where",
            "maker",
            "=",
            "\"amc\""
        ],
        "results_raw": [
            [
                "FullName"
            ],
            [
                "American Motor Company"
            ]
        ],
        "response": "American Motor Company is the full name of the car maker amc.",
        "response_toks": [
            "American",
            "Motor",
            "Company",
            "is",
            "the",
            "full",
            "name",
            "of",
            "the",
            "car",
            "maker",
            "amc",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "select fullname from car_makers where maker  =  \"amc\"",
        "query_w_results_blank_res": "select fullname from car_makers where maker  =  \"amc\"",
        "query_toks_w_results": [
            "select",
            "fullname",
            "from",
            "car_makers",
            "where",
            "maker",
            "=",
            "\"amc\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "fullname",
            "from",
            "car_makers",
            "where",
            "maker",
            "=",
            "\"amc\""
        ],
        "response_blank_res": "American Motor Company is the full name of the car maker amc .",
        "response_toks_blank_res": [
            "American",
            "Motor",
            "Company",
            "is",
            "the",
            "full",
            "name",
            "of",
            "the",
            "car",
            "maker",
            "amc",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT T3.model FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId   =   T2.Country JOIN MODEL_LIST AS T3 ON T2.Id   =   T3.Maker WHERE T1.countryname  =  \"germany\"",
        "query_toks": [
            "select",
            "t3",
            ".",
            "model",
            "from",
            "countries",
            "as",
            "t1",
            "join",
            "car_makers",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "countryid",
            "=",
            "t2",
            ".",
            "country",
            "join",
            "model_list",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "id",
            "=",
            "t3",
            ".",
            "maker",
            "where",
            "t1",
            ".",
            "countryname",
            "=",
            "\"germany\""
        ],
        "results_raw": [
            [
                "Model"
            ],
            [
                "audi"
            ],
            [
                "bmw"
            ],
            [
                "mercedes"
            ]
        ],
        "response": "Here are the car models produced in Germany",
        "response_toks": [
            "Here",
            "are",
            "the",
            "car",
            "models",
            "produced",
            "in",
            "Germany"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T3.model FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId   =   T2.Country JOIN MODEL_LIST AS T3 ON T2.Id   =   T3.Maker WHERE T1.countryname  =  \"germany\"",
        "query_w_results_blank_res": "SELECT T3.model FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId   =   T2.Country JOIN MODEL_LIST AS T3 ON T2.Id   =   T3.Maker WHERE T1.countryname  =  \"germany\"",
        "query_toks_w_results": [
            "select",
            "t3",
            ".",
            "model",
            "from",
            "countries",
            "as",
            "t1",
            "join",
            "car_makers",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "countryid",
            "=",
            "t2",
            ".",
            "country",
            "join",
            "model_list",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "id",
            "=",
            "t3",
            ".",
            "maker",
            "where",
            "t1",
            ".",
            "countryname",
            "=",
            "\"germany\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t3",
            ".",
            "model",
            "from",
            "countries",
            "as",
            "t1",
            "join",
            "car_makers",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "countryid",
            "=",
            "t2",
            ".",
            "country",
            "join",
            "model_list",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "id",
            "=",
            "t3",
            ".",
            "maker",
            "where",
            "t1",
            ".",
            "countryname",
            "=",
            "\"germany\""
        ],
        "response_blank_res": "Here are the car models produced in Germany",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "car",
            "models",
            "produced",
            "in",
            "Germany"
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT modelid from model_list where model  =  \"bmw\"",
        "query_toks": [
            "select",
            "modelid",
            "from",
            "model_list",
            "where",
            "model",
            "=",
            "\"bmw\""
        ],
        "results_raw": [
            [
                "ModelId"
            ],
            [
                3
            ]
        ],
        "response": "The model bmw has an id 3.",
        "response_toks": [
            "The",
            "model",
            "bmw",
            "has",
            "an",
            "id",
            "3",
            "."
        ],
        "results_map": {
            "result0": "3"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT modelid from model_list where model  =  \"bmw\" | 3 ",
        "query_w_results_blank_res": "SELECT modelid from model_list where model  =  \"bmw\" | result0 ",
        "query_toks_w_results": [
            "select",
            "modelid",
            "from",
            "model_list",
            "where",
            "model",
            "=",
            "\"bmw\"",
            "3"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "modelid",
            "from",
            "model_list",
            "where",
            "model",
            "=",
            "\"bmw\"",
            "result0"
        ],
        "response_blank_res": "The model bmw has an id result0 .",
        "response_toks_blank_res": [
            "The",
            "model",
            "bmw",
            "has",
            "an",
            "id",
            "result0",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId   =   T2.Country GROUP BY T1.countryId HAVING count ( * )   >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId   =   T2.Country JOIN MODEL_LIST AS T3 ON T2.Id   =   T3.Maker WHERE T3.Model   =   'fiat'",
        "query_toks": [
            "select",
            "t1",
            ".",
            "countryid",
            ",",
            "t1",
            ".",
            "countryname",
            "from",
            "countries",
            "as",
            "t1",
            "join",
            "car_makers",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "countryid",
            "=",
            "t2",
            ".",
            "country",
            "group",
            "by",
            "t1",
            ".",
            "countryid",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "3",
            "union",
            "select",
            "t1",
            ".",
            "countryid",
            ",",
            "t1",
            ".",
            "countryname",
            "from",
            "countries",
            "as",
            "t1",
            "join",
            "car_makers",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "countryid",
            "=",
            "t2",
            ".",
            "country",
            "join",
            "model_list",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "id",
            "=",
            "t3",
            ".",
            "maker",
            "where",
            "t3",
            ".",
            "model",
            "=",
            "'fiat'"
        ],
        "results_raw": [
            [
                "CountryId",
                "CountryName"
            ],
            [
                1,
                "usa"
            ],
            [
                2,
                "germany"
            ],
            [
                4,
                "japan"
            ]
        ],
        "response": "Here are the ids and names of the countries which have more than 3 cars makers or produce the 'flat' model",
        "response_toks": [
            "Here",
            "are",
            "the",
            "ids",
            "and",
            "names",
            "of",
            "the",
            "countries",
            "which",
            "have",
            "more",
            "than",
            "3",
            "cars",
            "makers",
            "or",
            "produce",
            "the",
            "'flat",
            "'",
            "model"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId   =   T2.Country GROUP BY T1.countryId HAVING count ( * )   >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId   =   T2.Country JOIN MODEL_LIST AS T3 ON T2.Id   =   T3.Maker WHERE T3.Model   =   'fiat'",
        "query_w_results_blank_res": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId   =   T2.Country GROUP BY T1.countryId HAVING count ( * )   >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId   =   T2.Country JOIN MODEL_LIST AS T3 ON T2.Id   =   T3.Maker WHERE T3.Model   =   'fiat'",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "countryid",
            ",",
            "t1",
            ".",
            "countryname",
            "from",
            "countries",
            "as",
            "t1",
            "join",
            "car_makers",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "countryid",
            "=",
            "t2",
            ".",
            "country",
            "group",
            "by",
            "t1",
            ".",
            "countryid",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "3",
            "union",
            "select",
            "t1",
            ".",
            "countryid",
            ",",
            "t1",
            ".",
            "countryname",
            "from",
            "countries",
            "as",
            "t1",
            "join",
            "car_makers",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "countryid",
            "=",
            "t2",
            ".",
            "country",
            "join",
            "model_list",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "id",
            "=",
            "t3",
            ".",
            "maker",
            "where",
            "t3",
            ".",
            "model",
            "=",
            "'fiat'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "countryid",
            ",",
            "t1",
            ".",
            "countryname",
            "from",
            "countries",
            "as",
            "t1",
            "join",
            "car_makers",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "countryid",
            "=",
            "t2",
            ".",
            "country",
            "group",
            "by",
            "t1",
            ".",
            "countryid",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "3",
            "union",
            "select",
            "t1",
            ".",
            "countryid",
            ",",
            "t1",
            ".",
            "countryname",
            "from",
            "countries",
            "as",
            "t1",
            "join",
            "car_makers",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "countryid",
            "=",
            "t2",
            ".",
            "country",
            "join",
            "model_list",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "id",
            "=",
            "t3",
            ".",
            "maker",
            "where",
            "t3",
            ".",
            "model",
            "=",
            "'fiat'"
        ],
        "response_blank_res": "Here are the ids and names of the countries which have more than 3 cars makers or produce the 'flat ' model",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "ids",
            "and",
            "names",
            "of",
            "the",
            "countries",
            "which",
            "have",
            "more",
            "than",
            "3",
            "cars",
            "makers",
            "or",
            "produce",
            "the",
            "'flat",
            "'",
            "model"
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id GROUP BY T1.professional_id order by count ( * )   desc limit 1",
        "query_toks": [
            "select",
            "t1",
            ".",
            "cell_number",
            "from",
            "professionals",
            "as",
            "t1",
            "join",
            "treatments",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "professional_id",
            "=",
            "t2",
            ".",
            "professional_id",
            "group",
            "by",
            "t1",
            ".",
            "professional_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "cell_number"
            ],
            [
                "962-983-8109x3509"
            ]
        ],
        "response": "962-983-8109x3509 is the phone number of the professional who has done the most treatment.",
        "response_toks": [
            "962-983-8109x3509",
            "is",
            "the",
            "phone",
            "number",
            "of",
            "the",
            "professional",
            "who",
            "has",
            "done",
            "the",
            "most",
            "treatment",
            "."
        ],
        "results_map": {
            "result0": "962-983-8109x3509"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id GROUP BY T1.professional_id order by count ( * )   desc limit 1 | 962-983-8109x3509 ",
        "query_w_results_blank_res": "SELECT T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id GROUP BY T1.professional_id order by count ( * )   desc limit 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "cell_number",
            "from",
            "professionals",
            "as",
            "t1",
            "join",
            "treatments",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "professional_id",
            "=",
            "t2",
            ".",
            "professional_id",
            "group",
            "by",
            "t1",
            ".",
            "professional_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1",
            "962-983-8109x3509"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "cell_number",
            "from",
            "professionals",
            "as",
            "t1",
            "join",
            "treatments",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "professional_id",
            "=",
            "t2",
            ".",
            "professional_id",
            "group",
            "by",
            "t1",
            ".",
            "professional_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "result0 is the phone number of the professional who has done the most treatment .",
        "response_toks_blank_res": [
            "result0",
            "is",
            "the",
            "phone",
            "number",
            "of",
            "the",
            "professional",
            "who",
            "has",
            "done",
            "the",
            "most",
            "treatment",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT T1.professional_id  FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id GROUP BY T1.professional_id HAVING count ( * )    > =    2",
        "query_toks": [
            "select",
            "t1",
            ".",
            "professional_id",
            "from",
            "professionals",
            "as",
            "t1",
            "join",
            "treatments",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "professional_id",
            "=",
            "t2",
            ".",
            "professional_id",
            "group",
            "by",
            "t1",
            ".",
            "professional_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "results_raw": [
            [
                "professional_id"
            ],
            [
                4
            ],
            [
                6
            ],
            [
                8
            ]
        ],
        "response": "The following table shows the professional id of the professionals who have done at least two types of treatments",
        "response_toks": [
            "The",
            "following",
            "table",
            "shows",
            "the",
            "professional",
            "id",
            "of",
            "the",
            "professionals",
            "who",
            "have",
            "done",
            "at",
            "least",
            "two",
            "types",
            "of",
            "treatments"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.professional_id  FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id GROUP BY T1.professional_id HAVING count ( * )    > =    2",
        "query_w_results_blank_res": "SELECT T1.professional_id  FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id GROUP BY T1.professional_id HAVING count ( * )    > =    2",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "professional_id",
            "from",
            "professionals",
            "as",
            "t1",
            "join",
            "treatments",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "professional_id",
            "=",
            "t2",
            ".",
            "professional_id",
            "group",
            "by",
            "t1",
            ".",
            "professional_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "professional_id",
            "from",
            "professionals",
            "as",
            "t1",
            "join",
            "treatments",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "professional_id",
            "=",
            "t2",
            ".",
            "professional_id",
            "group",
            "by",
            "t1",
            ".",
            "professional_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "response_blank_res": "The following table shows the professional id of the professionals who have done at least two types of treatments",
        "response_toks_blank_res": [
            "The",
            "following",
            "table",
            "shows",
            "the",
            "professional",
            "id",
            "of",
            "the",
            "professionals",
            "who",
            "have",
            "done",
            "at",
            "least",
            "two",
            "types",
            "of",
            "treatments"
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "select count ( * )  from  ( SELECT *  FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id GROUP BY T1.professional_id HAVING count ( * )    =  1 ) ",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "(",
            "select",
            "*",
            "from",
            "professionals",
            "as",
            "t1",
            "join",
            "treatments",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "professional_id",
            "=",
            "t2",
            ".",
            "professional_id",
            "group",
            "by",
            "t1",
            ".",
            "professional_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "1",
            ")"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                2
            ]
        ],
        "response": "2 professionals have done only one treatment? .",
        "response_toks": [
            "2",
            "professionals",
            "have",
            "done",
            "only",
            "one",
            "treatment",
            "?",
            "."
        ],
        "results_map": {
            "result0": "2"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "select count ( * )  from  ( SELECT *  FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id GROUP BY T1.professional_id HAVING count ( * )    =  1 )  | 2 ",
        "query_w_results_blank_res": "select count ( * )  from  ( SELECT *  FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id GROUP BY T1.professional_id HAVING count ( * )    =  1 )  | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "(",
            "select",
            "*",
            "from",
            "professionals",
            "as",
            "t1",
            "join",
            "treatments",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "professional_id",
            "=",
            "t2",
            ".",
            "professional_id",
            "group",
            "by",
            "t1",
            ".",
            "professional_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "1",
            ")",
            "2"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "(",
            "select",
            "*",
            "from",
            "professionals",
            "as",
            "t1",
            "join",
            "treatments",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "professional_id",
            "=",
            "t2",
            ".",
            "professional_id",
            "group",
            "by",
            "t1",
            ".",
            "professional_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "1",
            ")",
            "result0"
        ],
        "response_blank_res": "result0 professionals have done only one treatment ? .",
        "response_toks_blank_res": [
            "result0",
            "professionals",
            "have",
            "done",
            "only",
            "one",
            "treatment",
            "?",
            "."
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count ( * )  BETWEEN 1 AND 2",
        "query_toks": [
            "select",
            "document_id",
            "from",
            "paragraphs",
            "group",
            "by",
            "document_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "between",
            "1",
            "and",
            "2"
        ],
        "results_raw": [
            [
                "Document_ID"
            ],
            [
                3
            ],
            [
                80
            ],
            [
                3830
            ]
        ],
        "response": "The table shows the document id of the documents with 1 to 2 paragraphs.",
        "response_toks": [
            "The",
            "table",
            "shows",
            "the",
            "document",
            "id",
            "of",
            "the",
            "documents",
            "with",
            "1",
            "to",
            "2",
            "paragraphs",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count ( * )  BETWEEN 1 AND 2",
        "query_w_results_blank_res": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count ( * )  BETWEEN 1 AND 2",
        "query_toks_w_results": [
            "select",
            "document_id",
            "from",
            "paragraphs",
            "group",
            "by",
            "document_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "between",
            "1",
            "and",
            "2"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "document_id",
            "from",
            "paragraphs",
            "group",
            "by",
            "document_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "between",
            "1",
            "and",
            "2"
        ],
        "response_blank_res": "The table shows the document id of the documents with 1 to 2 paragraphs .",
        "response_toks_blank_res": [
            "The",
            "table",
            "shows",
            "the",
            "document",
            "id",
            "of",
            "the",
            "documents",
            "with",
            "1",
            "to",
            "2",
            "paragraphs",
            "."
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "query": "SELECT Paragraph_Text FROM Paragraphs GROUP BY document_id HAVING count ( * )  BETWEEN 1 AND 2",
        "query_toks": [
            "select",
            "paragraph_text",
            "from",
            "paragraphs",
            "group",
            "by",
            "document_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "between",
            "1",
            "and",
            "2"
        ],
        "results_raw": [
            [
                "Paragraph_Text"
            ],
            [
                "Somalia"
            ],
            [
                "Micronesia"
            ],
            [
                "Senegal"
            ]
        ],
        "response": "The table show the paragraph text of  the document with 1 to 2 paragraphs.",
        "response_toks": [
            "The",
            "table",
            "show",
            "the",
            "paragraph",
            "text",
            "of",
            "the",
            "document",
            "with",
            "1",
            "to",
            "2",
            "paragraphs",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Paragraph_Text FROM Paragraphs GROUP BY document_id HAVING count ( * )  BETWEEN 1 AND 2",
        "query_w_results_blank_res": "SELECT Paragraph_Text FROM Paragraphs GROUP BY document_id HAVING count ( * )  BETWEEN 1 AND 2",
        "query_toks_w_results": [
            "select",
            "paragraph_text",
            "from",
            "paragraphs",
            "group",
            "by",
            "document_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "between",
            "1",
            "and",
            "2"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "paragraph_text",
            "from",
            "paragraphs",
            "group",
            "by",
            "document_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "between",
            "1",
            "and",
            "2"
        ],
        "response_blank_res": "The table show the paragraph text of the document with 1 to 2 paragraphs .",
        "response_toks_blank_res": [
            "The",
            "table",
            "show",
            "the",
            "paragraph",
            "text",
            "of",
            "the",
            "document",
            "with",
            "1",
            "to",
            "2",
            "paragraphs",
            "."
        ]
    },
    {
        "database_id": "course_teach",
        "query": "select name from teacher order by Age asc limit 1",
        "query_toks": [
            "select",
            "name",
            "from",
            "teacher",
            "order",
            "by",
            "age",
            "asc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Vicente Carretero"
            ]
        ],
        "response": "The name of the youngest teacher is \"Vicente Carretero\".",
        "response_toks": [
            "The",
            "name",
            "of",
            "the",
            "youngest",
            "teacher",
            "is",
            "``",
            "Vicente",
            "Carretero",
            "''",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "select name from teacher order by Age asc limit 1",
        "query_w_results_blank_res": "select name from teacher order by Age asc limit 1",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "teacher",
            "order",
            "by",
            "age",
            "asc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "teacher",
            "order",
            "by",
            "age",
            "asc",
            "limit",
            "1"
        ],
        "response_blank_res": "The name of the youngest teacher is `` Vicente Carretero '' .",
        "response_toks_blank_res": [
            "The",
            "name",
            "of",
            "the",
            "youngest",
            "teacher",
            "is",
            "``",
            "Vicente",
            "Carretero",
            "''",
            "."
        ]
    },
    {
        "database_id": "course_teach",
        "query": "select Hometown from teacher order by Age asc limit 1",
        "query_toks": [
            "select",
            "hometown",
            "from",
            "teacher",
            "order",
            "by",
            "age",
            "asc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Hometown"
            ],
            [
                "Farnworth Municipal Borough"
            ]
        ],
        "response": "The hometown of the youngest teacher is Farnworth Municipal Borough.",
        "response_toks": [
            "The",
            "hometown",
            "of",
            "the",
            "youngest",
            "teacher",
            "is",
            "Farnworth",
            "Municipal",
            "Borough",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "select Hometown from teacher order by Age asc limit 1",
        "query_w_results_blank_res": "select Hometown from teacher order by Age asc limit 1",
        "query_toks_w_results": [
            "select",
            "hometown",
            "from",
            "teacher",
            "order",
            "by",
            "age",
            "asc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "hometown",
            "from",
            "teacher",
            "order",
            "by",
            "age",
            "asc",
            "limit",
            "1"
        ],
        "response_blank_res": "The hometown of the youngest teacher is Farnworth Municipal Borough .",
        "response_toks_blank_res": [
            "The",
            "hometown",
            "of",
            "the",
            "youngest",
            "teacher",
            "is",
            "Farnworth",
            "Municipal",
            "Borough",
            "."
        ]
    },
    {
        "database_id": "course_teach",
        "query": "select Name from teacher where Hometown = 'Farnworth Municipal Borough' and Name not is 'Vicente Carretero'",
        "query_toks": [
            "select",
            "name",
            "from",
            "teacher",
            "where",
            "hometown",
            "=",
            "'farnworth",
            "municipal",
            "borough'",
            "and",
            "name",
            "not",
            "is",
            "'vicente",
            "carretero'"
        ],
        "results_raw": null,
        "response": "There is no other teachers from \"Farnworth Municipal Borough\" except \"Vicente Carretero\".",
        "response_toks": [
            "There",
            "is",
            "no",
            "other",
            "teachers",
            "from",
            "``",
            "Farnworth",
            "Municipal",
            "Borough",
            "''",
            "except",
            "``",
            "Vicente",
            "Carretero",
            "''",
            "."
        ],
        "results_map": null,
        "results_blank_res": null,
        "query_w_results": null,
        "query_w_results_blank_res": null,
        "query_toks_w_results": null,
        "query_toks_w_results_blank_res": null,
        "response_blank_res": null,
        "response_toks_blank_res": null
    },
    {
        "database_id": "course_teach",
        "query": "select Age from teacher where Name = 'Vicente Carretero'",
        "query_toks": [
            "select",
            "age",
            "from",
            "teacher",
            "where",
            "name",
            "=",
            "'vicente",
            "carretero'"
        ],
        "results_raw": [
            [
                "Age"
            ],
            [
                "26"
            ]
        ],
        "response": "The teacher with the name Vicente Carretero has an age of 26.",
        "response_toks": [
            "The",
            "teacher",
            "with",
            "the",
            "name",
            "Vicente",
            "Carretero",
            "has",
            "an",
            "age",
            "of",
            "26",
            "."
        ],
        "results_map": {
            "result0": "26"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "select Age from teacher where Name = 'Vicente Carretero' | 26 ",
        "query_w_results_blank_res": "select Age from teacher where Name = 'Vicente Carretero' | result0 ",
        "query_toks_w_results": [
            "select",
            "age",
            "from",
            "teacher",
            "where",
            "name",
            "=",
            "'vicente",
            "carretero'",
            "26"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "age",
            "from",
            "teacher",
            "where",
            "name",
            "=",
            "'vicente",
            "carretero'",
            "result0"
        ],
        "response_blank_res": "The teacher with the name Vicente Carretero has an age of result0 .",
        "response_toks_blank_res": [
            "The",
            "teacher",
            "with",
            "the",
            "name",
            "Vicente",
            "Carretero",
            "has",
            "an",
            "age",
            "of",
            "result0",
            "."
        ]
    },
    {
        "database_id": "course_teach",
        "query": "select Name from teacher where Age = '26'",
        "query_toks": [
            "select",
            "name",
            "from",
            "teacher",
            "where",
            "age",
            "=",
            "'26'"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Vicente Carretero"
            ]
        ],
        "response": "No, there is no other teachers whose age is 26 except \"Vicente Carretero\".",
        "response_toks": [
            "No",
            ",",
            "there",
            "is",
            "no",
            "other",
            "teachers",
            "whose",
            "age",
            "is",
            "26",
            "except",
            "``",
            "Vicente",
            "Carretero",
            "''",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "select Name from teacher where Age = '26'",
        "query_w_results_blank_res": "select Name from teacher where Age = '26'",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "teacher",
            "where",
            "age",
            "=",
            "'26'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "teacher",
            "where",
            "age",
            "=",
            "'26'"
        ],
        "response_blank_res": "No , there is no other teachers whose age is 26 except `` Vicente Carretero '' .",
        "response_toks_blank_res": [
            "No",
            ",",
            "there",
            "is",
            "no",
            "other",
            "teachers",
            "whose",
            "age",
            "is",
            "26",
            "except",
            "``",
            "Vicente",
            "Carretero",
            "''",
            "."
        ]
    },
    {
        "database_id": "pets_1",
        "query": "SELECT count ( * )  FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T2.petid   =   T3.petid WHERE T1.sex   =   'F' AND T3.pettype   =   'dog'",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "petid",
            "=",
            "t3",
            ".",
            "petid",
            "where",
            "t1",
            ".",
            "sex",
            "=",
            "'f'",
            "and",
            "t3",
            ".",
            "pettype",
            "=",
            "'dog'"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                2
            ]
        ],
        "response": "Yes, the number of dog pets raised by female students is 2.",
        "response_toks": [
            "Yes",
            ",",
            "the",
            "number",
            "of",
            "dog",
            "pets",
            "raised",
            "by",
            "female",
            "students",
            "is",
            "2",
            "."
        ],
        "results_map": {
            "result0": "2"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T2.petid   =   T3.petid WHERE T1.sex   =   'F' AND T3.pettype   =   'dog' | 2 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T2.petid   =   T3.petid WHERE T1.sex   =   'F' AND T3.pettype   =   'dog' | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "petid",
            "=",
            "t3",
            ".",
            "petid",
            "where",
            "t1",
            ".",
            "sex",
            "=",
            "'f'",
            "and",
            "t3",
            ".",
            "pettype",
            "=",
            "'dog'",
            "2"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "petid",
            "=",
            "t3",
            ".",
            "petid",
            "where",
            "t1",
            ".",
            "sex",
            "=",
            "'f'",
            "and",
            "t3",
            ".",
            "pettype",
            "=",
            "'dog'",
            "result0"
        ],
        "response_blank_res": "Yes , the number of dog pets raised by female students is result0 .",
        "response_toks_blank_res": [
            "Yes",
            ",",
            "the",
            "number",
            "of",
            "dog",
            "pets",
            "raised",
            "by",
            "female",
            "students",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "pets_1",
        "query": "SELECT fname, lname FROM student WHERE sex   =   'F'",
        "query_toks": [
            "select",
            "fname",
            ",",
            "lname",
            "from",
            "student",
            "where",
            "sex",
            "=",
            "'f'"
        ],
        "results_raw": [
            [
                "Fname",
                "LName"
            ],
            [
                "Linda",
                "Smith"
            ],
            [
                "Tracy",
                "Kim"
            ],
            [
                "Shiela",
                "Jones"
            ]
        ],
        "response": "Here is a table of the first and last name of all female students.",
        "response_toks": [
            "Here",
            "is",
            "a",
            "table",
            "of",
            "the",
            "first",
            "and",
            "last",
            "name",
            "of",
            "all",
            "female",
            "students",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT fname, lname FROM student WHERE sex   =   'F'",
        "query_w_results_blank_res": "SELECT fname, lname FROM student WHERE sex   =   'F'",
        "query_toks_w_results": [
            "select",
            "fname",
            ",",
            "lname",
            "from",
            "student",
            "where",
            "sex",
            "=",
            "'f'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "fname",
            ",",
            "lname",
            "from",
            "student",
            "where",
            "sex",
            "=",
            "'f'"
        ],
        "response_blank_res": "Here is a table of the first and last name of all female students .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "a",
            "table",
            "of",
            "the",
            "first",
            "and",
            "last",
            "name",
            "of",
            "all",
            "female",
            "students",
            "."
        ]
    },
    {
        "database_id": "pets_1",
        "query": "SELECT DISTINCT city_code FROM student",
        "query_toks": [
            "select",
            "distinct",
            "city_code",
            "from",
            "student"
        ],
        "results_raw": [
            [
                "city_code"
            ],
            [
                "BAL"
            ],
            [
                "HKG"
            ],
            [
                "WAS"
            ]
        ],
        "response": "Here is a list of the city codes for all students.",
        "response_toks": [
            "Here",
            "is",
            "a",
            "list",
            "of",
            "the",
            "city",
            "codes",
            "for",
            "all",
            "students",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT DISTINCT city_code FROM student",
        "query_w_results_blank_res": "SELECT DISTINCT city_code FROM student",
        "query_toks_w_results": [
            "select",
            "distinct",
            "city_code",
            "from",
            "student"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "city_code",
            "from",
            "student"
        ],
        "response_blank_res": "Here is a list of the city codes for all students .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "a",
            "list",
            "of",
            "the",
            "city",
            "codes",
            "for",
            "all",
            "students",
            "."
        ]
    },
    {
        "database_id": "pets_1",
        "query": "SELECT T3.weight FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T2.petid   =   T3.petid WHERE T1.sex   =   'F'",
        "query_toks": [
            "select",
            "t3",
            ".",
            "weight",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "petid",
            "=",
            "t3",
            ".",
            "petid",
            "where",
            "t1",
            ".",
            "sex",
            "=",
            "'f'"
        ],
        "results_raw": [
            [
                "weight"
            ],
            [
                12.0
            ],
            [
                13.4
            ],
            [
                9.3
            ]
        ],
        "response": "Here is a list of the weights of the pets raised by students with sex \"F\".",
        "response_toks": [
            "Here",
            "is",
            "a",
            "list",
            "of",
            "the",
            "weights",
            "of",
            "the",
            "pets",
            "raised",
            "by",
            "students",
            "with",
            "sex",
            "``",
            "F",
            "''",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T3.weight FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T2.petid   =   T3.petid WHERE T1.sex   =   'F'",
        "query_w_results_blank_res": "SELECT T3.weight FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T2.petid   =   T3.petid WHERE T1.sex   =   'F'",
        "query_toks_w_results": [
            "select",
            "t3",
            ".",
            "weight",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "petid",
            "=",
            "t3",
            ".",
            "petid",
            "where",
            "t1",
            ".",
            "sex",
            "=",
            "'f'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t3",
            ".",
            "weight",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "petid",
            "=",
            "t3",
            ".",
            "petid",
            "where",
            "t1",
            ".",
            "sex",
            "=",
            "'f'"
        ],
        "response_blank_res": "Here is a list of the weights of the pets raised by students with sex `` F '' .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "a",
            "list",
            "of",
            "the",
            "weights",
            "of",
            "the",
            "pets",
            "raised",
            "by",
            "students",
            "with",
            "sex",
            "``",
            "F",
            "''",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT id from cars_data order by horsepower limit 1",
        "query_toks": [
            "select",
            "id",
            "from",
            "cars_data",
            "order",
            "by",
            "horsepower",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Id"
            ],
            [
                41
            ]
        ],
        "response": "The id of the car with the lowest horsepower is 41.",
        "response_toks": [
            "The",
            "id",
            "of",
            "the",
            "car",
            "with",
            "the",
            "lowest",
            "horsepower",
            "is",
            "41",
            "."
        ],
        "results_map": {
            "result0": "41"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT id from cars_data order by horsepower limit 1 | 41 ",
        "query_w_results_blank_res": "SELECT id from cars_data order by horsepower limit 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "id",
            "from",
            "cars_data",
            "order",
            "by",
            "horsepower",
            "limit",
            "1",
            "41"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "id",
            "from",
            "cars_data",
            "order",
            "by",
            "horsepower",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "The id of the car with the lowest horsepower is result0 .",
        "response_toks_blank_res": [
            "The",
            "id",
            "of",
            "the",
            "car",
            "with",
            "the",
            "lowest",
            "horsepower",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT avg ( horsepower ) from cars_data",
        "query_toks": [
            "select",
            "avg",
            "(",
            "horsepower",
            ")",
            "from",
            "cars_data"
        ],
        "results_raw": [
            [
                "avg(horsepower)"
            ],
            [
                103.5295566502463
            ]
        ],
        "response": "The average of all the horsepower is 103.5295566502463.",
        "response_toks": [
            "The",
            "average",
            "of",
            "all",
            "the",
            "horsepower",
            "is",
            "103.5295566502463",
            "."
        ],
        "results_map": {
            "result0": "103.5295566502463"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT avg ( horsepower ) from cars_data | 103.5295566502463 ",
        "query_w_results_blank_res": "SELECT avg ( horsepower ) from cars_data | result0 ",
        "query_toks_w_results": [
            "select",
            "avg",
            "(",
            "horsepower",
            ")",
            "from",
            "cars_data",
            "103.5295566502463"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "avg",
            "(",
            "horsepower",
            ")",
            "from",
            "cars_data",
            "result0"
        ],
        "response_blank_res": "The average of all the horsepower is result0 .",
        "response_toks_blank_res": [
            "The",
            "average",
            "of",
            "all",
            "the",
            "horsepower",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT T1.Id FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id   =   T2.MakeId WHERE T1.Horsepower <  ( SELECT avg ( Horsepower )  FROM CARS_DATA ) ",
        "query_toks": [
            "select",
            "t1",
            ".",
            "id",
            "from",
            "cars_data",
            "as",
            "t1",
            "join",
            "car_names",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "makeid",
            "where",
            "t1",
            ".",
            "horsepower",
            "<",
            "(",
            "select",
            "avg",
            "(",
            "horsepower",
            ")",
            "from",
            "cars_data",
            ")"
        ],
        "results_raw": [
            [
                "Id"
            ],
            [
                41
            ],
            [
                43
            ],
            [
                45
            ]
        ],
        "response": "The car ids of all the cars with lower than the average horsepower are listed.",
        "response_toks": [
            "The",
            "car",
            "ids",
            "of",
            "all",
            "the",
            "cars",
            "with",
            "lower",
            "than",
            "the",
            "average",
            "horsepower",
            "are",
            "listed",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.Id FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id   =   T2.MakeId WHERE T1.Horsepower <  ( SELECT avg ( Horsepower )  FROM CARS_DATA ) ",
        "query_w_results_blank_res": "SELECT T1.Id FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id   =   T2.MakeId WHERE T1.Horsepower <  ( SELECT avg ( Horsepower )  FROM CARS_DATA ) ",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "id",
            "from",
            "cars_data",
            "as",
            "t1",
            "join",
            "car_names",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "makeid",
            "where",
            "t1",
            ".",
            "horsepower",
            "<",
            "(",
            "select",
            "avg",
            "(",
            "horsepower",
            ")",
            "from",
            "cars_data",
            ")"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "id",
            "from",
            "cars_data",
            "as",
            "t1",
            "join",
            "car_names",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "makeid",
            "where",
            "t1",
            ".",
            "horsepower",
            "<",
            "(",
            "select",
            "avg",
            "(",
            "horsepower",
            ")",
            "from",
            "cars_data",
            ")"
        ],
        "response_blank_res": "The car ids of all the cars with lower than the average horsepower are listed .",
        "response_toks_blank_res": [
            "The",
            "car",
            "ids",
            "of",
            "all",
            "the",
            "cars",
            "with",
            "lower",
            "than",
            "the",
            "average",
            "horsepower",
            "are",
            "listed",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT T1.Id ,T2.model FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id   =   T2.MakeId WHERE T1.Horsepower <  ( SELECT avg ( Horsepower )  FROM CARS_DATA ) ",
        "query_toks": [
            "select",
            "t1",
            ".",
            "id",
            ",",
            "t2",
            ".",
            "model",
            "from",
            "cars_data",
            "as",
            "t1",
            "join",
            "car_names",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "makeid",
            "where",
            "t1",
            ".",
            "horsepower",
            "<",
            "(",
            "select",
            "avg",
            "(",
            "horsepower",
            ")",
            "from",
            "cars_data",
            ")"
        ],
        "results_raw": [
            [
                "Id",
                "Model"
            ],
            [
                41,
                "amc"
            ],
            [
                43,
                "chevrolet"
            ],
            [
                45,
                "amc"
            ]
        ],
        "response": "The models and ids of all the cars with lower than the average horsepower are listed..",
        "response_toks": [
            "The",
            "models",
            "and",
            "ids",
            "of",
            "all",
            "the",
            "cars",
            "with",
            "lower",
            "than",
            "the",
            "average",
            "horsepower",
            "are",
            "listed.."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.Id ,T2.model FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id   =   T2.MakeId WHERE T1.Horsepower <  ( SELECT avg ( Horsepower )  FROM CARS_DATA ) ",
        "query_w_results_blank_res": "SELECT T1.Id ,T2.model FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id   =   T2.MakeId WHERE T1.Horsepower <  ( SELECT avg ( Horsepower )  FROM CARS_DATA ) ",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "id",
            ",",
            "t2",
            ".",
            "model",
            "from",
            "cars_data",
            "as",
            "t1",
            "join",
            "car_names",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "makeid",
            "where",
            "t1",
            ".",
            "horsepower",
            "<",
            "(",
            "select",
            "avg",
            "(",
            "horsepower",
            ")",
            "from",
            "cars_data",
            ")"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "id",
            ",",
            "t2",
            ".",
            "model",
            "from",
            "cars_data",
            "as",
            "t1",
            "join",
            "car_names",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "makeid",
            "where",
            "t1",
            ".",
            "horsepower",
            "<",
            "(",
            "select",
            "avg",
            "(",
            "horsepower",
            ")",
            "from",
            "cars_data",
            ")"
        ],
        "response_blank_res": "The models and ids of all the cars with lower than the average horsepower are listed..",
        "response_toks_blank_res": [
            "The",
            "models",
            "and",
            "ids",
            "of",
            "all",
            "the",
            "cars",
            "with",
            "lower",
            "than",
            "the",
            "average",
            "horsepower",
            "are",
            "listed.."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT transcript_id FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "query_toks": [
            "select",
            "transcript_id",
            "from",
            "transcripts",
            "order",
            "by",
            "transcript_date",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "transcript_id"
            ],
            [
                5
            ]
        ],
        "response": "The transcript ID of the latest transcript is 5.",
        "response_toks": [
            "The",
            "transcript",
            "ID",
            "of",
            "the",
            "latest",
            "transcript",
            "is",
            "5",
            "."
        ],
        "results_map": {
            "result0": "5"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT transcript_id FROM Transcripts ORDER BY transcript_date DESC LIMIT 1 | 5 ",
        "query_w_results_blank_res": "SELECT transcript_id FROM Transcripts ORDER BY transcript_date DESC LIMIT 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "transcript_id",
            "from",
            "transcripts",
            "order",
            "by",
            "transcript_date",
            "desc",
            "limit",
            "1",
            "5"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "transcript_id",
            "from",
            "transcripts",
            "order",
            "by",
            "transcript_date",
            "desc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "The transcript ID of the latest transcript is result0 .",
        "response_toks_blank_res": [
            "The",
            "transcript",
            "ID",
            "of",
            "the",
            "latest",
            "transcript",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT transcript_date FROM Transcripts WHERE transcript_id  =  5",
        "query_toks": [
            "select",
            "transcript_date",
            "from",
            "transcripts",
            "where",
            "transcript_id",
            "=",
            "5"
        ],
        "results_raw": [
            [
                "transcript_date"
            ],
            [
                "2013-06-30 13:01:40"
            ]
        ],
        "response": "The transcript date for transcript ID 5 is 2013-06-30 13:01:40.",
        "response_toks": [
            "The",
            "transcript",
            "date",
            "for",
            "transcript",
            "ID",
            "5",
            "is",
            "2013-06-30",
            "13:01:40",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT transcript_date FROM Transcripts WHERE transcript_id  =  5",
        "query_w_results_blank_res": "SELECT transcript_date FROM Transcripts WHERE transcript_id  =  5",
        "query_toks_w_results": [
            "select",
            "transcript_date",
            "from",
            "transcripts",
            "where",
            "transcript_id",
            "=",
            "5"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "transcript_date",
            "from",
            "transcripts",
            "where",
            "transcript_id",
            "=",
            "5"
        ],
        "response_blank_res": "The transcript date for transcript ID 5 is 2013-06-30 13:01:40 .",
        "response_toks_blank_res": [
            "The",
            "transcript",
            "date",
            "for",
            "transcript",
            "ID",
            "5",
            "is",
            "2013-06-30",
            "13:01:40",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id   =   T2.transcript_id GROUP BY T1.transcript_id HAVING count ( * )    > =    2",
        "query_toks": [
            "select",
            "t2",
            ".",
            "transcript_date",
            ",",
            "t1",
            ".",
            "transcript_id",
            "from",
            "transcript_contents",
            "as",
            "t1",
            "join",
            "transcripts",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "transcript_id",
            "=",
            "t2",
            ".",
            "transcript_id",
            "group",
            "by",
            "t1",
            ".",
            "transcript_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "results_raw": [
            [
                "transcript_date",
                "transcript_id"
            ],
            [
                "2013-06-30 13:01:40",
                5
            ],
            [
                "2010-12-13 10:55:15",
                6
            ],
            [
                "1975-05-06 12:04:47",
                8
            ]
        ],
        "response": "The result table of the date and id of the transcripts with at least 2 course results is shown.",
        "response_toks": [
            "The",
            "result",
            "table",
            "of",
            "the",
            "date",
            "and",
            "id",
            "of",
            "the",
            "transcripts",
            "with",
            "at",
            "least",
            "2",
            "course",
            "results",
            "is",
            "shown",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id   =   T2.transcript_id GROUP BY T1.transcript_id HAVING count ( * )    > =    2",
        "query_w_results_blank_res": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id   =   T2.transcript_id GROUP BY T1.transcript_id HAVING count ( * )    > =    2",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "transcript_date",
            ",",
            "t1",
            ".",
            "transcript_id",
            "from",
            "transcript_contents",
            "as",
            "t1",
            "join",
            "transcripts",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "transcript_id",
            "=",
            "t2",
            ".",
            "transcript_id",
            "group",
            "by",
            "t1",
            ".",
            "transcript_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "transcript_date",
            ",",
            "t1",
            ".",
            "transcript_id",
            "from",
            "transcript_contents",
            "as",
            "t1",
            "join",
            "transcripts",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "transcript_id",
            "=",
            "t2",
            ".",
            "transcript_id",
            "group",
            "by",
            "t1",
            ".",
            "transcript_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "response_blank_res": "The result table of the date and id of the transcripts with at least 2 course results is shown .",
        "response_toks_blank_res": [
            "The",
            "result",
            "table",
            "of",
            "the",
            "date",
            "and",
            "id",
            "of",
            "the",
            "transcripts",
            "with",
            "at",
            "least",
            "2",
            "course",
            "results",
            "is",
            "shown",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT T2.other_details FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id   =   T2.transcript_id GROUP BY T1.transcript_id HAVING count ( * )    > =    2",
        "query_toks": [
            "select",
            "t2",
            ".",
            "other_details",
            "from",
            "transcript_contents",
            "as",
            "t1",
            "join",
            "transcripts",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "transcript_id",
            "=",
            "t2",
            ".",
            "transcript_id",
            "group",
            "by",
            "t1",
            ".",
            "transcript_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "results_raw": [
            [
                "other_details"
            ],
            [
                null
            ],
            [
                null
            ],
            [
                null
            ]
        ],
        "response": "The other details of transcripts with at least 2 course results are listed. They are null.",
        "response_toks": [
            "The",
            "other",
            "details",
            "of",
            "transcripts",
            "with",
            "at",
            "least",
            "2",
            "course",
            "results",
            "are",
            "listed",
            ".",
            "They",
            "are",
            "null",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T2.other_details FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id   =   T2.transcript_id GROUP BY T1.transcript_id HAVING count ( * )    > =    2",
        "query_w_results_blank_res": "SELECT T2.other_details FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id   =   T2.transcript_id GROUP BY T1.transcript_id HAVING count ( * )    > =    2",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "other_details",
            "from",
            "transcript_contents",
            "as",
            "t1",
            "join",
            "transcripts",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "transcript_id",
            "=",
            "t2",
            ".",
            "transcript_id",
            "group",
            "by",
            "t1",
            ".",
            "transcript_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "other_details",
            "from",
            "transcript_contents",
            "as",
            "t1",
            "join",
            "transcripts",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "transcript_id",
            "=",
            "t2",
            ".",
            "transcript_id",
            "group",
            "by",
            "t1",
            ".",
            "transcript_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "response_blank_res": "The other details of transcripts with at least 2 course results are listed . They are null .",
        "response_toks_blank_res": [
            "The",
            "other",
            "details",
            "of",
            "transcripts",
            "with",
            "at",
            "least",
            "2",
            "course",
            "results",
            "are",
            "listed",
            ".",
            "They",
            "are",
            "null",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT T2.transcript_date FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id   =   T2.transcript_id GROUP BY T1.transcript_id HAVING count ( * )    > =    2",
        "query_toks": [
            "select",
            "t2",
            ".",
            "transcript_date",
            "from",
            "transcript_contents",
            "as",
            "t1",
            "join",
            "transcripts",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "transcript_id",
            "=",
            "t2",
            ".",
            "transcript_id",
            "group",
            "by",
            "t1",
            ".",
            "transcript_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "results_raw": [
            [
                "transcript_date"
            ],
            [
                "2013-06-30 13:01:40"
            ],
            [
                "2010-12-13 10:55:15"
            ],
            [
                "1975-05-06 12:04:47"
            ]
        ],
        "response": "The transcript dates of transcripts with at least 2 course results are listed.",
        "response_toks": [
            "The",
            "transcript",
            "dates",
            "of",
            "transcripts",
            "with",
            "at",
            "least",
            "2",
            "course",
            "results",
            "are",
            "listed",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T2.transcript_date FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id   =   T2.transcript_id GROUP BY T1.transcript_id HAVING count ( * )    > =    2",
        "query_w_results_blank_res": "SELECT T2.transcript_date FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id   =   T2.transcript_id GROUP BY T1.transcript_id HAVING count ( * )    > =    2",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "transcript_date",
            "from",
            "transcript_contents",
            "as",
            "t1",
            "join",
            "transcripts",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "transcript_id",
            "=",
            "t2",
            ".",
            "transcript_id",
            "group",
            "by",
            "t1",
            ".",
            "transcript_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "transcript_date",
            "from",
            "transcript_contents",
            "as",
            "t1",
            "join",
            "transcripts",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "transcript_id",
            "=",
            "t2",
            ".",
            "transcript_id",
            "group",
            "by",
            "t1",
            ".",
            "transcript_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "response_blank_res": "The transcript dates of transcripts with at least 2 course results are listed .",
        "response_toks_blank_res": [
            "The",
            "transcript",
            "dates",
            "of",
            "transcripts",
            "with",
            "at",
            "least",
            "2",
            "course",
            "results",
            "are",
            "listed",
            "."
        ]
    },
    {
        "database_id": "network_1",
        "query": "select student_id from Friend",
        "query_toks": [
            "select",
            "student_id",
            "from",
            "friend"
        ],
        "results_raw": [
            [
                "student_id"
            ],
            [
                1510
            ],
            [
                1510
            ],
            [
                1689
            ]
        ],
        "response": "here are  all of the ids of the high school students",
        "response_toks": [
            "here",
            "are",
            "all",
            "of",
            "the",
            "ids",
            "of",
            "the",
            "high",
            "school",
            "students"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "select student_id from Friend",
        "query_w_results_blank_res": "select student_id from Friend",
        "query_toks_w_results": [
            "select",
            "student_id",
            "from",
            "friend"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "student_id",
            "from",
            "friend"
        ],
        "response_blank_res": "here are all of the ids of the high school students",
        "response_toks_blank_res": [
            "here",
            "are",
            "all",
            "of",
            "the",
            "ids",
            "of",
            "the",
            "high",
            "school",
            "students"
        ]
    },
    {
        "database_id": "network_1",
        "query": "select count ( student_id )  from  ( select distinct student_id from Friend union select distinct student_id from Likes ) ",
        "query_toks": [
            "select",
            "count",
            "(",
            "student_id",
            ")",
            "from",
            "(",
            "select",
            "distinct",
            "student_id",
            "from",
            "friend",
            "union",
            "select",
            "distinct",
            "student_id",
            "from",
            "likes",
            ")"
        ],
        "results_raw": [
            [
                "count(student_id)"
            ],
            [
                16
            ]
        ],
        "response": "the total number of the ids of student is 16",
        "response_toks": [
            "the",
            "total",
            "number",
            "of",
            "the",
            "ids",
            "of",
            "student",
            "is",
            "16"
        ],
        "results_map": {
            "result0": "16"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "select count ( student_id )  from  ( select distinct student_id from Friend union select distinct student_id from Likes )  | 16 ",
        "query_w_results_blank_res": "select count ( student_id )  from  ( select distinct student_id from Friend union select distinct student_id from Likes )  | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "student_id",
            ")",
            "from",
            "(",
            "select",
            "distinct",
            "student_id",
            "from",
            "friend",
            "union",
            "select",
            "distinct",
            "student_id",
            "from",
            "likes",
            ")",
            "16"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "student_id",
            ")",
            "from",
            "(",
            "select",
            "distinct",
            "student_id",
            "from",
            "friend",
            "union",
            "select",
            "distinct",
            "student_id",
            "from",
            "likes",
            ")",
            "result0"
        ],
        "response_blank_res": "the total number of the ids of student is result0",
        "response_toks_blank_res": [
            "the",
            "total",
            "number",
            "of",
            "the",
            "ids",
            "of",
            "student",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT email_address FROM Professionals WHERE state   =   'Hawaii'",
        "query_toks": [
            "select",
            "email_address",
            "from",
            "professionals",
            "where",
            "state",
            "=",
            "'hawaii'"
        ],
        "results_raw": [
            [
                "email_address"
            ],
            [
                "mekhi.little@example.org"
            ]
        ],
        "response": "mekhi.little@example.org is the email  address of  the professionals who live in the state of Hawaii",
        "response_toks": [
            "mekhi.little",
            "@",
            "example.org",
            "is",
            "the",
            "email",
            "address",
            "of",
            "the",
            "professionals",
            "who",
            "live",
            "in",
            "the",
            "state",
            "of",
            "Hawaii"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT email_address FROM Professionals WHERE state   =   'Hawaii'",
        "query_w_results_blank_res": "SELECT email_address FROM Professionals WHERE state   =   'Hawaii'",
        "query_toks_w_results": [
            "select",
            "email_address",
            "from",
            "professionals",
            "where",
            "state",
            "=",
            "'hawaii'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "email_address",
            "from",
            "professionals",
            "where",
            "state",
            "=",
            "'hawaii'"
        ],
        "response_blank_res": "mekhi.little @ example.org is the email address of the professionals who live in the state of Hawaii",
        "response_toks_blank_res": [
            "mekhi.little",
            "@",
            "example.org",
            "is",
            "the",
            "email",
            "address",
            "of",
            "the",
            "professionals",
            "who",
            "live",
            "in",
            "the",
            "state",
            "of",
            "Hawaii"
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT email_address FROM Professionals WHERE state   =   'Wisconsin'",
        "query_toks": [
            "select",
            "email_address",
            "from",
            "professionals",
            "where",
            "state",
            "=",
            "'wisconsin'"
        ],
        "results_raw": [
            [
                "email_address"
            ],
            [
                "uboehm@example.org"
            ]
        ],
        "response": "uboehm@example.org is the email address of the  professionals who live in  the state of Wisconsin",
        "response_toks": [
            "uboehm",
            "@",
            "example.org",
            "is",
            "the",
            "email",
            "address",
            "of",
            "the",
            "professionals",
            "who",
            "live",
            "in",
            "the",
            "state",
            "of",
            "Wisconsin"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT email_address FROM Professionals WHERE state   =   'Wisconsin'",
        "query_w_results_blank_res": "SELECT email_address FROM Professionals WHERE state   =   'Wisconsin'",
        "query_toks_w_results": [
            "select",
            "email_address",
            "from",
            "professionals",
            "where",
            "state",
            "=",
            "'wisconsin'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "email_address",
            "from",
            "professionals",
            "where",
            "state",
            "=",
            "'wisconsin'"
        ],
        "response_blank_res": "uboehm @ example.org is the email address of the professionals who live in the state of Wisconsin",
        "response_toks_blank_res": [
            "uboehm",
            "@",
            "example.org",
            "is",
            "the",
            "email",
            "address",
            "of",
            "the",
            "professionals",
            "who",
            "live",
            "in",
            "the",
            "state",
            "of",
            "Wisconsin"
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT first_name FROM Professionals WHERE role_code   =   'Employee'",
        "query_toks": [
            "select",
            "first_name",
            "from",
            "professionals",
            "where",
            "role_code",
            "=",
            "'employee'"
        ],
        "results_raw": [
            [
                "first_name"
            ],
            [
                "Taryn"
            ],
            [
                "Jayson"
            ],
            [
                "Olaf"
            ]
        ],
        "response": "here are the first names of all employees with the role code \" Employee\"",
        "response_toks": [
            "here",
            "are",
            "the",
            "first",
            "names",
            "of",
            "all",
            "employees",
            "with",
            "the",
            "role",
            "code",
            "``",
            "Employee",
            "''"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT first_name FROM Professionals WHERE role_code   =   'Employee'",
        "query_w_results_blank_res": "SELECT first_name FROM Professionals WHERE role_code   =   'Employee'",
        "query_toks_w_results": [
            "select",
            "first_name",
            "from",
            "professionals",
            "where",
            "role_code",
            "=",
            "'employee'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "first_name",
            "from",
            "professionals",
            "where",
            "role_code",
            "=",
            "'employee'"
        ],
        "response_blank_res": "here are the first names of all employees with the role code `` Employee ''",
        "response_toks_blank_res": [
            "here",
            "are",
            "the",
            "first",
            "names",
            "of",
            "all",
            "employees",
            "with",
            "the",
            "role",
            "code",
            "``",
            "Employee",
            "''"
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT T1.semester_name, count ( * )  from semesters as T1 join student_enrolment as T2 on T1.semester_id  =  T2.semester_id group by T2.semester_id",
        "query_toks": [
            "select",
            "t1",
            ".",
            "semester_name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "semesters",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "semester_id",
            "=",
            "t2",
            ".",
            "semester_id",
            "group",
            "by",
            "t2",
            ".",
            "semester_id"
        ],
        "results_raw": [
            [
                "semester_name",
                "count(*)"
            ],
            [
                "spring 2010",
                1
            ],
            [
                "summer 2010",
                4
            ],
            [
                "winter 2010",
                1
            ]
        ],
        "response": "Here are the the semester names and their number of enrollments",
        "response_toks": [
            "Here",
            "are",
            "the",
            "the",
            "semester",
            "names",
            "and",
            "their",
            "number",
            "of",
            "enrollments"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.semester_name, count ( * )  from semesters as T1 join student_enrolment as T2 on T1.semester_id  =  T2.semester_id group by T2.semester_id",
        "query_w_results_blank_res": "SELECT T1.semester_name, count ( * )  from semesters as T1 join student_enrolment as T2 on T1.semester_id  =  T2.semester_id group by T2.semester_id",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "semester_name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "semesters",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "semester_id",
            "=",
            "t2",
            ".",
            "semester_id",
            "group",
            "by",
            "t2",
            ".",
            "semester_id"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "semester_name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "semesters",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "semester_id",
            "=",
            "t2",
            ".",
            "semester_id",
            "group",
            "by",
            "t2",
            ".",
            "semester_id"
        ],
        "response_blank_res": "Here are the the semester names and their number of enrollments",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "the",
            "semester",
            "names",
            "and",
            "their",
            "number",
            "of",
            "enrollments"
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT T1.semester_name from semesters as T1 join student_enrolment as T2 on T1.semester_id  =  T2.semester_id group by T2.semester_id order by count ( * )  desc limit 1",
        "query_toks": [
            "select",
            "t1",
            ".",
            "semester_name",
            "from",
            "semesters",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "semester_id",
            "=",
            "t2",
            ".",
            "semester_id",
            "group",
            "by",
            "t2",
            ".",
            "semester_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "semester_name"
            ],
            [
                "summer 2010"
            ]
        ],
        "response": "The name of the semester that has the most enrollments is summer 2010",
        "response_toks": [
            "The",
            "name",
            "of",
            "the",
            "semester",
            "that",
            "has",
            "the",
            "most",
            "enrollments",
            "is",
            "summer",
            "2010"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.semester_name from semesters as T1 join student_enrolment as T2 on T1.semester_id  =  T2.semester_id group by T2.semester_id order by count ( * )  desc limit 1",
        "query_w_results_blank_res": "SELECT T1.semester_name from semesters as T1 join student_enrolment as T2 on T1.semester_id  =  T2.semester_id group by T2.semester_id order by count ( * )  desc limit 1",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "semester_name",
            "from",
            "semesters",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "semester_id",
            "=",
            "t2",
            ".",
            "semester_id",
            "group",
            "by",
            "t2",
            ".",
            "semester_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "semester_name",
            "from",
            "semesters",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "semester_id",
            "=",
            "t2",
            ".",
            "semester_id",
            "group",
            "by",
            "t2",
            ".",
            "semester_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "response_blank_res": "The name of the semester that has the most enrollments is summer 2010",
        "response_toks_blank_res": [
            "The",
            "name",
            "of",
            "the",
            "semester",
            "that",
            "has",
            "the",
            "most",
            "enrollments",
            "is",
            "summer",
            "2010"
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT student_enrolment_id, degree_program_id from  Student_Enrolment",
        "query_toks": [
            "select",
            "student_enrolment_id",
            ",",
            "degree_program_id",
            "from",
            "student_enrolment"
        ],
        "results_raw": [
            [
                "student_enrolment_id",
                "degree_program_id"
            ],
            [
                1,
                12
            ],
            [
                2,
                4
            ],
            [
                3,
                10
            ]
        ],
        "response": "Here are the student enrollment ids and the degree program ids",
        "response_toks": [
            "Here",
            "are",
            "the",
            "student",
            "enrollment",
            "ids",
            "and",
            "the",
            "degree",
            "program",
            "ids"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT student_enrolment_id, degree_program_id from  Student_Enrolment",
        "query_w_results_blank_res": "SELECT student_enrolment_id, degree_program_id from  Student_Enrolment",
        "query_toks_w_results": [
            "select",
            "student_enrolment_id",
            ",",
            "degree_program_id",
            "from",
            "student_enrolment"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "student_enrolment_id",
            ",",
            "degree_program_id",
            "from",
            "student_enrolment"
        ],
        "response_blank_res": "Here are the student enrollment ids and the degree program ids",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "student",
            "enrollment",
            "ids",
            "and",
            "the",
            "degree",
            "program",
            "ids"
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "sELECT semester_name FROM Semesters WHERE semester_id NOT IN (  SELECT semester_id FROM Student_Enrolment  ) ",
        "query_toks": [
            "select",
            "semester_name",
            "from",
            "semesters",
            "where",
            "semester_id",
            "not",
            "in",
            "(",
            "select",
            "semester_id",
            "from",
            "student_enrolment",
            ")"
        ],
        "results_raw": [
            [
                "semester_name"
            ],
            [
                "fall 2010"
            ],
            [
                "spring 2013"
            ],
            [
                "spring 2014"
            ]
        ],
        "response": "Here are the names of the semesters that do not have any student enrolled",
        "response_toks": [
            "Here",
            "are",
            "the",
            "names",
            "of",
            "the",
            "semesters",
            "that",
            "do",
            "not",
            "have",
            "any",
            "student",
            "enrolled"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "sELECT semester_name FROM Semesters WHERE semester_id NOT IN (  SELECT semester_id FROM Student_Enrolment  ) ",
        "query_w_results_blank_res": "sELECT semester_name FROM Semesters WHERE semester_id NOT IN (  SELECT semester_id FROM Student_Enrolment  ) ",
        "query_toks_w_results": [
            "select",
            "semester_name",
            "from",
            "semesters",
            "where",
            "semester_id",
            "not",
            "in",
            "(",
            "select",
            "semester_id",
            "from",
            "student_enrolment",
            ")"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "semester_name",
            "from",
            "semesters",
            "where",
            "semester_id",
            "not",
            "in",
            "(",
            "select",
            "semester_id",
            "from",
            "student_enrolment",
            ")"
        ],
        "response_blank_res": "Here are the names of the semesters that do not have any student enrolled",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "names",
            "of",
            "the",
            "semesters",
            "that",
            "do",
            "not",
            "have",
            "any",
            "student",
            "enrolled"
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT name FROM country WHERE Name NOT IN  ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   \"English\" AND T2.IsOfficial   =   \"T\" ) ",
        "query_toks": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "name",
            "not",
            "in",
            "(",
            "select",
            "t1",
            ".",
            "name",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "language",
            "=",
            "\"english\"",
            "and",
            "t2",
            ".",
            "isofficial",
            "=",
            "\"t\"",
            ")"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Aruba"
            ],
            [
                "Afghanistan"
            ],
            [
                "Angola"
            ]
        ],
        "response": "Here are the names of the countries where English isn't the official language",
        "response_toks": [
            "Here",
            "are",
            "the",
            "names",
            "of",
            "the",
            "countries",
            "where",
            "English",
            "is",
            "n't",
            "the",
            "official",
            "language"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT name FROM country WHERE Name NOT IN  ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   \"English\" AND T2.IsOfficial   =   \"T\" ) ",
        "query_w_results_blank_res": "SELECT name FROM country WHERE Name NOT IN  ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   \"English\" AND T2.IsOfficial   =   \"T\" ) ",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "name",
            "not",
            "in",
            "(",
            "select",
            "t1",
            ".",
            "name",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "language",
            "=",
            "\"english\"",
            "and",
            "t2",
            ".",
            "isofficial",
            "=",
            "\"t\"",
            ")"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "name",
            "not",
            "in",
            "(",
            "select",
            "t1",
            ".",
            "name",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "language",
            "=",
            "\"english\"",
            "and",
            "t2",
            ".",
            "isofficial",
            "=",
            "\"t\"",
            ")"
        ],
        "response_blank_res": "Here are the names of the countries where English is n't the official language",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "names",
            "of",
            "the",
            "countries",
            "where",
            "English",
            "is",
            "n't",
            "the",
            "official",
            "language"
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT avg ( LifeExpectancy )  FROM country WHERE Name NOT IN  ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   \"English\" AND T2.IsOfficial   =   \"T\" ) ",
        "query_toks": [
            "select",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            "from",
            "country",
            "where",
            "name",
            "not",
            "in",
            "(",
            "select",
            "t1",
            ".",
            "name",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "language",
            "=",
            "\"english\"",
            "and",
            "t2",
            ".",
            "isofficial",
            "=",
            "\"t\"",
            ")"
        ],
        "results_raw": [
            [
                "avg(LifeExpectancy)"
            ],
            [
                65.48270270270272
            ]
        ],
        "response": "The average life expectancy in the countries where English is not the official language is 65.48270270270272",
        "response_toks": [
            "The",
            "average",
            "life",
            "expectancy",
            "in",
            "the",
            "countries",
            "where",
            "English",
            "is",
            "not",
            "the",
            "official",
            "language",
            "is",
            "65.48270270270272"
        ],
        "results_map": {
            "result0": "65.48270270270272"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT avg ( LifeExpectancy )  FROM country WHERE Name NOT IN  ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   \"English\" AND T2.IsOfficial   =   \"T\" )  | 65.48270270270272 ",
        "query_w_results_blank_res": "SELECT avg ( LifeExpectancy )  FROM country WHERE Name NOT IN  ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   \"English\" AND T2.IsOfficial   =   \"T\" )  | result0 ",
        "query_toks_w_results": [
            "select",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            "from",
            "country",
            "where",
            "name",
            "not",
            "in",
            "(",
            "select",
            "t1",
            ".",
            "name",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "language",
            "=",
            "\"english\"",
            "and",
            "t2",
            ".",
            "isofficial",
            "=",
            "\"t\"",
            ")",
            "65.48270270270272"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            "from",
            "country",
            "where",
            "name",
            "not",
            "in",
            "(",
            "select",
            "t1",
            ".",
            "name",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "language",
            "=",
            "\"english\"",
            "and",
            "t2",
            ".",
            "isofficial",
            "=",
            "\"t\"",
            ")",
            "result0"
        ],
        "response_blank_res": "The average life expectancy in the countries where English is not the official language is result0",
        "response_toks_blank_res": [
            "The",
            "average",
            "life",
            "expectancy",
            "in",
            "the",
            "countries",
            "where",
            "English",
            "is",
            "not",
            "the",
            "official",
            "language",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT avg ( LifeExpectancy )  FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   \"English\" AND T2.IsOfficial   =   \"T\"",
        "query_toks": [
            "select",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "language",
            "=",
            "\"english\"",
            "and",
            "t2",
            ".",
            "isofficial",
            "=",
            "\"t\""
        ],
        "results_raw": [
            [
                "avg(LifeExpectancy)"
            ],
            [
                71.5027027027027
            ]
        ],
        "response": "The average life expectancy in countries where English is the official language is 71.5027027027027",
        "response_toks": [
            "The",
            "average",
            "life",
            "expectancy",
            "in",
            "countries",
            "where",
            "English",
            "is",
            "the",
            "official",
            "language",
            "is",
            "71.5027027027027"
        ],
        "results_map": {
            "result0": "71.5027027027027"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT avg ( LifeExpectancy )  FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   \"English\" AND T2.IsOfficial   =   \"T\" | 71.5027027027027 ",
        "query_w_results_blank_res": "SELECT avg ( LifeExpectancy )  FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   \"English\" AND T2.IsOfficial   =   \"T\" | result0 ",
        "query_toks_w_results": [
            "select",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "language",
            "=",
            "\"english\"",
            "and",
            "t2",
            ".",
            "isofficial",
            "=",
            "\"t\"",
            "71.5027027027027"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "language",
            "=",
            "\"english\"",
            "and",
            "t2",
            ".",
            "isofficial",
            "=",
            "\"t\"",
            "result0"
        ],
        "response_blank_res": "The average life expectancy in countries where English is the official language is result0",
        "response_toks_blank_res": [
            "The",
            "average",
            "life",
            "expectancy",
            "in",
            "countries",
            "where",
            "English",
            "is",
            "the",
            "official",
            "language",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT FlightNo FROM flights where SourceAirport = \"CVO\" and DestAirport = \"SNA\"",
        "query_toks": [
            "select",
            "flightno",
            "from",
            "flights",
            "where",
            "sourceairport",
            "=",
            "\"cvo\"",
            "and",
            "destairport",
            "=",
            "\"sna\""
        ],
        "results_raw": [
            [
                "FlightNo"
            ]
        ],
        "response": "There is no flight from airport CVO and airport SNA.",
        "response_toks": [
            "There",
            "is",
            "no",
            "flight",
            "from",
            "airport",
            "CVO",
            "and",
            "airport",
            "SNA",
            "."
        ],
        "results_map": null,
        "results_blank_res": null,
        "query_w_results": null,
        "query_w_results_blank_res": null,
        "query_toks_w_results": null,
        "query_toks_w_results_blank_res": null,
        "response_blank_res": null,
        "response_toks_blank_res": null
    },
    {
        "database_id": "flight_2",
        "query": "SELECT * FROM flights where SourceAirport = \"CVO\" and DestAirport = \"DFW\"",
        "query_toks": [
            "select",
            "*",
            "from",
            "flights",
            "where",
            "sourceairport",
            "=",
            "\"cvo\"",
            "and",
            "destairport",
            "=",
            "\"dfw\""
        ],
        "results_raw": [
            [
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        ],
        "response": "There is no flight from airport CVO and airport DFW.",
        "response_toks": [
            "There",
            "is",
            "no",
            "flight",
            "from",
            "airport",
            "CVO",
            "and",
            "airport",
            "DFW",
            "."
        ],
        "results_map": null,
        "results_blank_res": null,
        "query_w_results": null,
        "query_w_results_blank_res": null,
        "query_toks_w_results": null,
        "query_toks_w_results_blank_res": null,
        "response_blank_res": null,
        "response_toks_blank_res": null
    },
    {
        "database_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid   =   T2.Airline WHERE T2.SourceAirport   =   \" CVO\"",
        "query_toks": [
            "select",
            "t1",
            ".",
            "airline",
            "from",
            "airlines",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "uid",
            "=",
            "t2",
            ".",
            "airline",
            "where",
            "t2",
            ".",
            "sourceairport",
            "=",
            "\"",
            "cvo\""
        ],
        "results_raw": [
            [
                "Airline"
            ],
            [
                "United Airlines"
            ],
            [
                "United Airlines"
            ],
            [
                "United Airlines"
            ]
        ],
        "response": "Here are the airlines having flight from CVO.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "airlines",
            "having",
            "flight",
            "from",
            "CVO",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid   =   T2.Airline WHERE T2.SourceAirport   =   \" CVO\"",
        "query_w_results_blank_res": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid   =   T2.Airline WHERE T2.SourceAirport   =   \" CVO\"",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "airline",
            "from",
            "airlines",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "uid",
            "=",
            "t2",
            ".",
            "airline",
            "where",
            "t2",
            ".",
            "sourceairport",
            "=",
            "\"",
            "cvo\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "airline",
            "from",
            "airlines",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "uid",
            "=",
            "t2",
            ".",
            "airline",
            "where",
            "t2",
            ".",
            "sourceairport",
            "=",
            "\"",
            "cvo\""
        ],
        "response_blank_res": "Here are the airlines having flight from CVO .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "airlines",
            "having",
            "flight",
            "from",
            "CVO",
            "."
        ]
    },
    {
        "database_id": "tvshow",
        "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id  =  T2.Channel WHERE T2.Episode  =  \"A Love of a Lifetime\"",
        "query_toks": [
            "select",
            "t1",
            ".",
            "series_name",
            "from",
            "tv_channel",
            "as",
            "t1",
            "join",
            "tv_series",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "channel",
            "where",
            "t2",
            ".",
            "episode",
            "=",
            "\"a",
            "love",
            "of",
            "a",
            "lifetime\""
        ],
        "results_raw": [
            [
                "series_name"
            ],
            [
                "Sky Radio"
            ]
        ],
        "response": "the TV Channel of TV series \"A love of a lifetime\" is \u201cSky Radio\u201d",
        "response_toks": [
            "the",
            "TV",
            "Channel",
            "of",
            "TV",
            "series",
            "``",
            "A",
            "love",
            "of",
            "a",
            "lifetime",
            "''",
            "is",
            "\u201c",
            "Sky",
            "Radio",
            "\u201d"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id  =  T2.Channel WHERE T2.Episode  =  \"A Love of a Lifetime\"",
        "query_w_results_blank_res": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id  =  T2.Channel WHERE T2.Episode  =  \"A Love of a Lifetime\"",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "series_name",
            "from",
            "tv_channel",
            "as",
            "t1",
            "join",
            "tv_series",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "channel",
            "where",
            "t2",
            ".",
            "episode",
            "=",
            "\"a",
            "love",
            "of",
            "a",
            "lifetime\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "series_name",
            "from",
            "tv_channel",
            "as",
            "t1",
            "join",
            "tv_series",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "channel",
            "where",
            "t2",
            ".",
            "episode",
            "=",
            "\"a",
            "love",
            "of",
            "a",
            "lifetime\""
        ],
        "response_blank_res": "the TV Channel of TV series `` A love of a lifetime '' is \u201c Sky Radio \u201d",
        "response_toks_blank_res": [
            "the",
            "TV",
            "Channel",
            "of",
            "TV",
            "series",
            "``",
            "A",
            "love",
            "of",
            "a",
            "lifetime",
            "''",
            "is",
            "\u201c",
            "Sky",
            "Radio",
            "\u201d"
        ]
    },
    {
        "database_id": "tvshow",
        "query": "SELECT  Viewers_m FROM  TV_series  where Episode  =  \"A Love of a Lifetime\"",
        "query_toks": [
            "select",
            "viewers_m",
            "from",
            "tv_series",
            "where",
            "episode",
            "=",
            "\"a",
            "love",
            "of",
            "a",
            "lifetime\""
        ],
        "results_raw": [
            [
                "Viewers_m"
            ],
            [
                "9.16"
            ]
        ],
        "response": "the  \"A love of a lifetime\" has 9.16 viewers",
        "response_toks": [
            "the",
            "``",
            "A",
            "love",
            "of",
            "a",
            "lifetime",
            "''",
            "has",
            "9.16",
            "viewers"
        ],
        "results_map": {
            "result0": "9.16"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT  Viewers_m FROM  TV_series  where Episode  =  \"A Love of a Lifetime\" | 9.16 ",
        "query_w_results_blank_res": "SELECT  Viewers_m FROM  TV_series  where Episode  =  \"A Love of a Lifetime\" | result0 ",
        "query_toks_w_results": [
            "select",
            "viewers_m",
            "from",
            "tv_series",
            "where",
            "episode",
            "=",
            "\"a",
            "love",
            "of",
            "a",
            "lifetime\"",
            "9.16"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "viewers_m",
            "from",
            "tv_series",
            "where",
            "episode",
            "=",
            "\"a",
            "love",
            "of",
            "a",
            "lifetime\"",
            "result0"
        ],
        "response_blank_res": "the `` A love of a lifetime '' has result0 viewers",
        "response_toks_blank_res": [
            "the",
            "``",
            "A",
            "love",
            "of",
            "a",
            "lifetime",
            "''",
            "has",
            "result0",
            "viewers"
        ]
    },
    {
        "database_id": "tvshow",
        "query": "SELECT  Weekly_Rank  FROM  TV_series  where Episode  =  \"A Love of a Lifetime\"",
        "query_toks": [
            "select",
            "weekly_rank",
            "from",
            "tv_series",
            "where",
            "episode",
            "=",
            "\"a",
            "love",
            "of",
            "a",
            "lifetime\""
        ],
        "results_raw": [
            [
                "Weekly_Rank"
            ],
            [
                43.0
            ]
        ],
        "response": "the rating of \"A love of a lifetime\" is 43.0",
        "response_toks": [
            "the",
            "rating",
            "of",
            "``",
            "A",
            "love",
            "of",
            "a",
            "lifetime",
            "''",
            "is",
            "43.0"
        ],
        "results_map": {
            "result0": "43.0"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT  Weekly_Rank  FROM  TV_series  where Episode  =  \"A Love of a Lifetime\" | 43.0 ",
        "query_w_results_blank_res": "SELECT  Weekly_Rank  FROM  TV_series  where Episode  =  \"A Love of a Lifetime\" | result0 ",
        "query_toks_w_results": [
            "select",
            "weekly_rank",
            "from",
            "tv_series",
            "where",
            "episode",
            "=",
            "\"a",
            "love",
            "of",
            "a",
            "lifetime\"",
            "43.0"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "weekly_rank",
            "from",
            "tv_series",
            "where",
            "episode",
            "=",
            "\"a",
            "love",
            "of",
            "a",
            "lifetime\"",
            "result0"
        ],
        "response_blank_res": "the rating of `` A love of a lifetime '' is result0",
        "response_toks_blank_res": [
            "the",
            "rating",
            "of",
            "``",
            "A",
            "love",
            "of",
            "a",
            "lifetime",
            "''",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "tvshow",
        "query": "SELECT  Air_Date  FROM  TV_series  where Episode  =  \"A Love of a Lifetime\"",
        "query_toks": [
            "select",
            "air_date",
            "from",
            "tv_series",
            "where",
            "episode",
            "=",
            "\"a",
            "love",
            "of",
            "a",
            "lifetime\""
        ],
        "results_raw": [
            [
                "Air_Date"
            ],
            [
                "September 24, 2007"
            ]
        ],
        "response": "\"A love of a lifetime\" aired in September 24, 2007",
        "response_toks": [
            "``",
            "A",
            "love",
            "of",
            "a",
            "lifetime",
            "''",
            "aired",
            "in",
            "September",
            "24",
            ",",
            "2007"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT  Air_Date  FROM  TV_series  where Episode  =  \"A Love of a Lifetime\"",
        "query_w_results_blank_res": "SELECT  Air_Date  FROM  TV_series  where Episode  =  \"A Love of a Lifetime\"",
        "query_toks_w_results": [
            "select",
            "air_date",
            "from",
            "tv_series",
            "where",
            "episode",
            "=",
            "\"a",
            "love",
            "of",
            "a",
            "lifetime\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "air_date",
            "from",
            "tv_series",
            "where",
            "episode",
            "=",
            "\"a",
            "love",
            "of",
            "a",
            "lifetime\""
        ],
        "response_blank_res": "`` A love of a lifetime '' aired in September 24 , 2007",
        "response_toks_blank_res": [
            "``",
            "A",
            "love",
            "of",
            "a",
            "lifetime",
            "''",
            "aired",
            "in",
            "September",
            "24",
            ",",
            "2007"
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT player_id FROM players ORDER BY birth_date desc LIMIT 1",
        "query_toks": [
            "select",
            "player_id",
            "from",
            "players",
            "order",
            "by",
            "birth_date",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "player_id"
            ],
            [
                200130
            ]
        ],
        "response": "The player id for the youngest player is 200130.",
        "response_toks": [
            "The",
            "player",
            "id",
            "for",
            "the",
            "youngest",
            "player",
            "is",
            "200130",
            "."
        ],
        "results_map": {
            "result0": "200130"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT player_id FROM players ORDER BY birth_date desc LIMIT 1 | 200130 ",
        "query_w_results_blank_res": "SELECT player_id FROM players ORDER BY birth_date desc LIMIT 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "player_id",
            "from",
            "players",
            "order",
            "by",
            "birth_date",
            "desc",
            "limit",
            "1",
            "200130"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "player_id",
            "from",
            "players",
            "order",
            "by",
            "birth_date",
            "desc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "The player id for the youngest player is result0 .",
        "response_toks_blank_res": [
            "The",
            "player",
            "id",
            "for",
            "the",
            "youngest",
            "player",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT player_id FROM players ORDER BY birth_date LIMIT 1",
        "query_toks": [
            "select",
            "player_id",
            "from",
            "players",
            "order",
            "by",
            "birth_date",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "player_id"
            ],
            [
                216626
            ]
        ],
        "response": "The player id for the oldest player is 216626.",
        "response_toks": [
            "The",
            "player",
            "id",
            "for",
            "the",
            "oldest",
            "player",
            "is",
            "216626",
            "."
        ],
        "results_map": {
            "result0": "216626"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT player_id FROM players ORDER BY birth_date LIMIT 1 | 216626 ",
        "query_w_results_blank_res": "SELECT player_id FROM players ORDER BY birth_date LIMIT 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "player_id",
            "from",
            "players",
            "order",
            "by",
            "birth_date",
            "limit",
            "1",
            "216626"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "player_id",
            "from",
            "players",
            "order",
            "by",
            "birth_date",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "The player id for the oldest player is result0 .",
        "response_toks_blank_res": [
            "The",
            "player",
            "id",
            "for",
            "the",
            "oldest",
            "player",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT first_name, country_code FROM players ORDER BY birth_date LIMIT 1",
        "query_toks": [
            "select",
            "first_name",
            ",",
            "country_code",
            "from",
            "players",
            "order",
            "by",
            "birth_date",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "first_name",
                "country_code"
            ],
            [
                "Thelma",
                "AUS"
            ]
        ],
        "response": "The first name and country code is of the oldest player is shown in the result table.",
        "response_toks": [
            "The",
            "first",
            "name",
            "and",
            "country",
            "code",
            "is",
            "of",
            "the",
            "oldest",
            "player",
            "is",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT first_name, country_code FROM players ORDER BY birth_date LIMIT 1",
        "query_w_results_blank_res": "SELECT first_name, country_code FROM players ORDER BY birth_date LIMIT 1",
        "query_toks_w_results": [
            "select",
            "first_name",
            ",",
            "country_code",
            "from",
            "players",
            "order",
            "by",
            "birth_date",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "first_name",
            ",",
            "country_code",
            "from",
            "players",
            "order",
            "by",
            "birth_date",
            "limit",
            "1"
        ],
        "response_blank_res": "The first name and country code is of the oldest player is shown in the result table .",
        "response_toks_blank_res": [
            "The",
            "first",
            "name",
            "and",
            "country",
            "code",
            "is",
            "of",
            "the",
            "oldest",
            "player",
            "is",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ]
    },
    {
        "database_id": "course_teach",
        "query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID   =   T2.Teacher_ID GROUP BY T2.Name HAVING COUNT ( * )    > =    2",
        "query_toks": [
            "select",
            "t2",
            ".",
            "name",
            "from",
            "course_arrange",
            "as",
            "t1",
            "join",
            "teacher",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "teacher_id",
            "=",
            "t2",
            ".",
            "teacher_id",
            "group",
            "by",
            "t2",
            ".",
            "name",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Anne Walker"
            ]
        ],
        "response": "The name of the teacher who teaches two or more courses is Anne Walker",
        "response_toks": [
            "The",
            "name",
            "of",
            "the",
            "teacher",
            "who",
            "teaches",
            "two",
            "or",
            "more",
            "courses",
            "is",
            "Anne",
            "Walker"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID   =   T2.Teacher_ID GROUP BY T2.Name HAVING COUNT ( * )    > =    2",
        "query_w_results_blank_res": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID   =   T2.Teacher_ID GROUP BY T2.Name HAVING COUNT ( * )    > =    2",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "name",
            "from",
            "course_arrange",
            "as",
            "t1",
            "join",
            "teacher",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "teacher_id",
            "=",
            "t2",
            ".",
            "teacher_id",
            "group",
            "by",
            "t2",
            ".",
            "name",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "name",
            "from",
            "course_arrange",
            "as",
            "t1",
            "join",
            "teacher",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "teacher_id",
            "=",
            "t2",
            ".",
            "teacher_id",
            "group",
            "by",
            "t2",
            ".",
            "name",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "response_blank_res": "The name of the teacher who teaches two or more courses is Anne Walker",
        "response_toks_blank_res": [
            "The",
            "name",
            "of",
            "the",
            "teacher",
            "who",
            "teaches",
            "two",
            "or",
            "more",
            "courses",
            "is",
            "Anne",
            "Walker"
        ]
    },
    {
        "database_id": "course_teach",
        "query": "SELECT T2.age, t2.hometown FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID   =   T2.Teacher_ID GROUP BY T2.Name HAVING COUNT ( * )    > =    2",
        "query_toks": [
            "select",
            "t2",
            ".",
            "age",
            ",",
            "t2",
            ".",
            "hometown",
            "from",
            "course_arrange",
            "as",
            "t1",
            "join",
            "teacher",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "teacher_id",
            "=",
            "t2",
            ".",
            "teacher_id",
            "group",
            "by",
            "t2",
            ".",
            "name",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "results_raw": [
            [
                "Age",
                "Hometown"
            ],
            [
                "41",
                "Little Lever Urban District"
            ]
        ],
        "response": "The age and hometown of the teacher who teaches two or more courses are 41 and Little Lever Urban District .",
        "response_toks": [
            "The",
            "age",
            "and",
            "hometown",
            "of",
            "the",
            "teacher",
            "who",
            "teaches",
            "two",
            "or",
            "more",
            "courses",
            "are",
            "41",
            "and",
            "Little",
            "Lever",
            "Urban",
            "District",
            "."
        ],
        "results_map": {
            "result0": "41"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT T2.age, t2.hometown FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID   =   T2.Teacher_ID GROUP BY T2.Name HAVING COUNT ( * )    > =    2 | 41 ",
        "query_w_results_blank_res": "SELECT T2.age, t2.hometown FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID   =   T2.Teacher_ID GROUP BY T2.Name HAVING COUNT ( * )    > =    2 | result0 ",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "age",
            ",",
            "t2",
            ".",
            "hometown",
            "from",
            "course_arrange",
            "as",
            "t1",
            "join",
            "teacher",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "teacher_id",
            "=",
            "t2",
            ".",
            "teacher_id",
            "group",
            "by",
            "t2",
            ".",
            "name",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2",
            "41"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "age",
            ",",
            "t2",
            ".",
            "hometown",
            "from",
            "course_arrange",
            "as",
            "t1",
            "join",
            "teacher",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "teacher_id",
            "=",
            "t2",
            ".",
            "teacher_id",
            "group",
            "by",
            "t2",
            ".",
            "name",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2",
            "result0"
        ],
        "response_blank_res": "The age and hometown of the teacher who teaches two or more courses are result0 and Little Lever Urban District .",
        "response_toks_blank_res": [
            "The",
            "age",
            "and",
            "hometown",
            "of",
            "the",
            "teacher",
            "who",
            "teaches",
            "two",
            "or",
            "more",
            "courses",
            "are",
            "result0",
            "and",
            "Little",
            "Lever",
            "Urban",
            "District",
            "."
        ]
    },
    {
        "database_id": "course_teach",
        "query": "SELECT t1.grade FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID   =   T2.Teacher_ID order by t2.age desc limit 1",
        "query_toks": [
            "select",
            "t1",
            ".",
            "grade",
            "from",
            "course_arrange",
            "as",
            "t1",
            "join",
            "teacher",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "teacher_id",
            "=",
            "t2",
            ".",
            "teacher_id",
            "order",
            "by",
            "t2",
            ".",
            "age",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Grade"
            ],
            [
                1
            ]
        ],
        "response": "The grade the oldest teacher teach is 1",
        "response_toks": [
            "The",
            "grade",
            "the",
            "oldest",
            "teacher",
            "teach",
            "is",
            "1"
        ],
        "results_map": {
            "result0": "1"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT t1.grade FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID   =   T2.Teacher_ID order by t2.age desc limit 1 | 1 ",
        "query_w_results_blank_res": "SELECT t1.grade FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID   =   T2.Teacher_ID order by t2.age desc limit 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "grade",
            "from",
            "course_arrange",
            "as",
            "t1",
            "join",
            "teacher",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "teacher_id",
            "=",
            "t2",
            ".",
            "teacher_id",
            "order",
            "by",
            "t2",
            ".",
            "age",
            "desc",
            "limit",
            "1",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "grade",
            "from",
            "course_arrange",
            "as",
            "t1",
            "join",
            "teacher",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "teacher_id",
            "=",
            "t2",
            ".",
            "teacher_id",
            "order",
            "by",
            "t2",
            ".",
            "age",
            "desc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "The grade the oldest teacher teach is result0",
        "response_toks_blank_res": [
            "The",
            "grade",
            "the",
            "oldest",
            "teacher",
            "teach",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "museum_visit",
        "query": "SELECT sum ( num_of_ticket )  FROM visit",
        "query_toks": [
            "select",
            "sum",
            "(",
            "num_of_ticket",
            ")",
            "from",
            "visit"
        ],
        "results_raw": [
            [
                "sum(num_of_ticket)"
            ],
            [
                63
            ]
        ],
        "response": "the total number of tickets bought in all visits is 63.",
        "response_toks": [
            "the",
            "total",
            "number",
            "of",
            "tickets",
            "bought",
            "in",
            "all",
            "visits",
            "is",
            "63",
            "."
        ],
        "results_map": {
            "result0": "63"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT sum ( num_of_ticket )  FROM visit | 63 ",
        "query_w_results_blank_res": "SELECT sum ( num_of_ticket )  FROM visit | result0 ",
        "query_toks_w_results": [
            "select",
            "sum",
            "(",
            "num_of_ticket",
            ")",
            "from",
            "visit",
            "63"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "sum",
            "(",
            "num_of_ticket",
            ")",
            "from",
            "visit",
            "result0"
        ],
        "response_blank_res": "the total number of tickets bought in all visits is result0 .",
        "response_toks_blank_res": [
            "the",
            "total",
            "number",
            "of",
            "tickets",
            "bought",
            "in",
            "all",
            "visits",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "museum_visit",
        "query": "SELECT max ( num_of_ticket )  FROM visit",
        "query_toks": [
            "select",
            "max",
            "(",
            "num_of_ticket",
            ")",
            "from",
            "visit"
        ],
        "results_raw": [
            [
                "max(num_of_ticket)"
            ],
            [
                24
            ]
        ],
        "response": "The maximum number of tickets bought in all visits is 24.",
        "response_toks": [
            "The",
            "maximum",
            "number",
            "of",
            "tickets",
            "bought",
            "in",
            "all",
            "visits",
            "is",
            "24",
            "."
        ],
        "results_map": {
            "result0": "24"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT max ( num_of_ticket )  FROM visit | 24 ",
        "query_w_results_blank_res": "SELECT max ( num_of_ticket )  FROM visit | result0 ",
        "query_toks_w_results": [
            "select",
            "max",
            "(",
            "num_of_ticket",
            ")",
            "from",
            "visit",
            "24"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "max",
            "(",
            "num_of_ticket",
            ")",
            "from",
            "visit",
            "result0"
        ],
        "response_blank_res": "The maximum number of tickets bought in all visits is result0 .",
        "response_toks_blank_res": [
            "The",
            "maximum",
            "number",
            "of",
            "tickets",
            "bought",
            "in",
            "all",
            "visits",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "museum_visit",
        "query": "SELECT avg ( num_of_ticket )  FROM visit",
        "query_toks": [
            "select",
            "avg",
            "(",
            "num_of_ticket",
            ")",
            "from",
            "visit"
        ],
        "results_raw": [
            [
                "avg(num_of_ticket)"
            ],
            [
                10.5
            ]
        ],
        "response": "The average number of tickets bought in all visits is 10.5.",
        "response_toks": [
            "The",
            "average",
            "number",
            "of",
            "tickets",
            "bought",
            "in",
            "all",
            "visits",
            "is",
            "10.5",
            "."
        ],
        "results_map": {
            "result0": "10.5"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT avg ( num_of_ticket )  FROM visit | 10.5 ",
        "query_w_results_blank_res": "SELECT avg ( num_of_ticket )  FROM visit | result0 ",
        "query_toks_w_results": [
            "select",
            "avg",
            "(",
            "num_of_ticket",
            ")",
            "from",
            "visit",
            "10.5"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "avg",
            "(",
            "num_of_ticket",
            ")",
            "from",
            "visit",
            "result0"
        ],
        "response_blank_res": "The average number of tickets bought in all visits is result0 .",
        "response_toks_blank_res": [
            "The",
            "average",
            "number",
            "of",
            "tickets",
            "bought",
            "in",
            "all",
            "visits",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "battle_death",
        "query": "SELECT   count ( * )   from ship",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "ship"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                7
            ]
        ],
        "response": "The  count of ships  is 7",
        "response_toks": [
            "The",
            "count",
            "of",
            "ships",
            "is",
            "7"
        ],
        "results_map": {
            "result0": "7"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT   count ( * )   from ship | 7 ",
        "query_w_results_blank_res": "SELECT   count ( * )   from ship | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "ship",
            "7"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "ship",
            "result0"
        ],
        "response_blank_res": "The count of ships is result0",
        "response_toks_blank_res": [
            "The",
            "count",
            "of",
            "ships",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "battle_death",
        "query": "SELECT  name  from ship",
        "query_toks": [
            "select",
            "name",
            "from",
            "ship"
        ],
        "results_raw": [
            [
                "name"
            ],
            [
                "Lettice"
            ],
            [
                "Bon Accord"
            ],
            [
                "Mary"
            ]
        ],
        "response": "The  names  of  ships  are  shown  in the table",
        "response_toks": [
            "The",
            "names",
            "of",
            "ships",
            "are",
            "shown",
            "in",
            "the",
            "table"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT  name  from ship",
        "query_w_results_blank_res": "SELECT  name  from ship",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "ship"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "ship"
        ],
        "response_blank_res": "The names of ships are shown in the table",
        "response_toks_blank_res": [
            "The",
            "names",
            "of",
            "ships",
            "are",
            "shown",
            "in",
            "the",
            "table"
        ]
    },
    {
        "database_id": "concert_singer",
        "query": "SELECT Name FROM singer ORDER BY age LIMIT 1",
        "query_toks": [
            "select",
            "name",
            "from",
            "singer",
            "order",
            "by",
            "age",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Tribal King"
            ]
        ],
        "response": "the name of the youngest singer is Tribal King.",
        "response_toks": [
            "the",
            "name",
            "of",
            "the",
            "youngest",
            "singer",
            "is",
            "Tribal",
            "King",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Name FROM singer ORDER BY age LIMIT 1",
        "query_w_results_blank_res": "SELECT Name FROM singer ORDER BY age LIMIT 1",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "singer",
            "order",
            "by",
            "age",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "singer",
            "order",
            "by",
            "age",
            "limit",
            "1"
        ],
        "response_blank_res": "the name of the youngest singer is Tribal King .",
        "response_toks_blank_res": [
            "the",
            "name",
            "of",
            "the",
            "youngest",
            "singer",
            "is",
            "Tribal",
            "King",
            "."
        ]
    },
    {
        "database_id": "concert_singer",
        "query": "SELECT Song_Name FROM singer where name  =  'Tribal King'",
        "query_toks": [
            "select",
            "song_name",
            "from",
            "singer",
            "where",
            "name",
            "=",
            "'tribal",
            "king'"
        ],
        "results_raw": [
            [
                "Song_Name"
            ],
            [
                "Love"
            ]
        ],
        "response": "The name of the song by the singer Tribal King is Love.",
        "response_toks": [
            "The",
            "name",
            "of",
            "the",
            "song",
            "by",
            "the",
            "singer",
            "Tribal",
            "King",
            "is",
            "Love",
            "."
        ],
        "results_map": {
            "result0": "Love"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT Song_Name FROM singer where name  =  'Tribal King' | Love ",
        "query_w_results_blank_res": "SELECT Song_Name FROM singer where name  =  'Tribal King' | result0 ",
        "query_toks_w_results": [
            "select",
            "song_name",
            "from",
            "singer",
            "where",
            "name",
            "=",
            "'tribal",
            "king'",
            "Love"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "song_name",
            "from",
            "singer",
            "where",
            "name",
            "=",
            "'tribal",
            "king'",
            "result0"
        ],
        "response_blank_res": "The name of the song by the singer Tribal King is result0 .",
        "response_toks_blank_res": [
            "The",
            "name",
            "of",
            "the",
            "song",
            "by",
            "the",
            "singer",
            "Tribal",
            "King",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "concert_singer",
        "query": "SELECT song_release_year FROM singer where name  =  'Tribal King'",
        "query_toks": [
            "select",
            "song_release_year",
            "from",
            "singer",
            "where",
            "name",
            "=",
            "'tribal",
            "king'"
        ],
        "results_raw": [
            [
                "Song_release_year"
            ],
            [
                "2016"
            ]
        ],
        "response": "The release year of the song by the singer Tribal King is 2016.",
        "response_toks": [
            "The",
            "release",
            "year",
            "of",
            "the",
            "song",
            "by",
            "the",
            "singer",
            "Tribal",
            "King",
            "is",
            "2016",
            "."
        ],
        "results_map": {
            "result0": "2016"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT song_release_year FROM singer where name  =  'Tribal King' | 2016 ",
        "query_w_results_blank_res": "SELECT song_release_year FROM singer where name  =  'Tribal King' | result0 ",
        "query_toks_w_results": [
            "select",
            "song_release_year",
            "from",
            "singer",
            "where",
            "name",
            "=",
            "'tribal",
            "king'",
            "2016"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "song_release_year",
            "from",
            "singer",
            "where",
            "name",
            "=",
            "'tribal",
            "king'",
            "result0"
        ],
        "response_blank_res": "The release year of the song by the singer Tribal King is result0 .",
        "response_toks_blank_res": [
            "The",
            "release",
            "year",
            "of",
            "the",
            "song",
            "by",
            "the",
            "singer",
            "Tribal",
            "King",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT Name FROM country WHERE continent   =   \"Europe\"",
        "query_toks": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"europe\""
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Albania"
            ],
            [
                "Andorra"
            ],
            [
                "Austria"
            ]
        ],
        "response": "The following table shows the names of the countries that are in the continent of Europe",
        "response_toks": [
            "The",
            "following",
            "table",
            "shows",
            "the",
            "names",
            "of",
            "the",
            "countries",
            "that",
            "are",
            "in",
            "the",
            "continent",
            "of",
            "Europe"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Name FROM country WHERE continent   =   \"Europe\"",
        "query_w_results_blank_res": "SELECT Name FROM country WHERE continent   =   \"Europe\"",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"europe\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"europe\""
        ],
        "response_blank_res": "The following table shows the names of the countries that are in the continent of Europe",
        "response_toks_blank_res": [
            "The",
            "following",
            "table",
            "shows",
            "the",
            "names",
            "of",
            "the",
            "countries",
            "that",
            "are",
            "in",
            "the",
            "continent",
            "of",
            "Europe"
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT Name FROM country WHERE continent   =   \"Europe\" AND Population   =   \"80000\"",
        "query_toks": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"europe\"",
            "and",
            "population",
            "=",
            "\"80000\""
        ],
        "results_raw": [
            [
                "Name"
            ]
        ],
        "response": "There are no country that are in the continent of Europe and have a population of 80000",
        "response_toks": [
            "There",
            "are",
            "no",
            "country",
            "that",
            "are",
            "in",
            "the",
            "continent",
            "of",
            "Europe",
            "and",
            "have",
            "a",
            "population",
            "of",
            "80000"
        ],
        "results_map": null,
        "results_blank_res": null,
        "query_w_results": null,
        "query_w_results_blank_res": null,
        "query_toks_w_results": null,
        "query_toks_w_results_blank_res": null,
        "response_blank_res": null,
        "response_toks_blank_res": null
    },
    {
        "database_id": "singer",
        "query": "SELECT Name FROM singer",
        "query_toks": [
            "select",
            "name",
            "from",
            "singer"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Liliane Bettencourt"
            ],
            [
                "Christy Walton"
            ],
            [
                "Alice Walton"
            ]
        ],
        "response": "this shows  singers name",
        "response_toks": [
            "this",
            "shows",
            "singers",
            "name"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Name FROM singer",
        "query_w_results_blank_res": "SELECT Name FROM singer",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "singer"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "singer"
        ],
        "response_blank_res": "this shows singers name",
        "response_toks_blank_res": [
            "this",
            "shows",
            "singers",
            "name"
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT department_name FROM Departments WHERE department_name LIKE '%computer%'",
        "query_toks": [
            "select",
            "department_name",
            "from",
            "departments",
            "where",
            "department_name",
            "like",
            "'%computer%'"
        ],
        "results_raw": [
            [
                "department_name"
            ],
            [
                "computer science"
            ]
        ],
        "response": "The full name of the department that has the substring computer in its name is computer science.",
        "response_toks": [
            "The",
            "full",
            "name",
            "of",
            "the",
            "department",
            "that",
            "has",
            "the",
            "substring",
            "computer",
            "in",
            "its",
            "name",
            "is",
            "computer",
            "science",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT department_name FROM Departments WHERE department_name LIKE '%computer%'",
        "query_w_results_blank_res": "SELECT department_name FROM Departments WHERE department_name LIKE '%computer%'",
        "query_toks_w_results": [
            "select",
            "department_name",
            "from",
            "departments",
            "where",
            "department_name",
            "like",
            "'%computer%'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "department_name",
            "from",
            "departments",
            "where",
            "department_name",
            "like",
            "'%computer%'"
        ],
        "response_blank_res": "The full name of the department that has the substring computer in its name is computer science .",
        "response_toks_blank_res": [
            "The",
            "full",
            "name",
            "of",
            "the",
            "department",
            "that",
            "has",
            "the",
            "substring",
            "computer",
            "in",
            "its",
            "name",
            "is",
            "computer",
            "science",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
        "query_toks": [
            "select",
            "department_description",
            "from",
            "departments",
            "where",
            "department_name",
            "like",
            "'%computer%'"
        ],
        "results_raw": [
            [
                "department_description"
            ],
            [
                "error"
            ]
        ],
        "response": "The description of the department that has the substring computer in its name is \"error\".",
        "response_toks": [
            "The",
            "description",
            "of",
            "the",
            "department",
            "that",
            "has",
            "the",
            "substring",
            "computer",
            "in",
            "its",
            "name",
            "is",
            "``",
            "error",
            "''",
            "."
        ],
        "results_map": {
            "result0": "error"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%' | error ",
        "query_w_results_blank_res": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%' | result0 ",
        "query_toks_w_results": [
            "select",
            "department_description",
            "from",
            "departments",
            "where",
            "department_name",
            "like",
            "'%computer%'",
            "error"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "department_description",
            "from",
            "departments",
            "where",
            "department_name",
            "like",
            "'%computer%'",
            "result0"
        ],
        "response_blank_res": "The description of the department that has the substring computer in its name is `` result0 '' .",
        "response_toks_blank_res": [
            "The",
            "description",
            "of",
            "the",
            "department",
            "that",
            "has",
            "the",
            "substring",
            "computer",
            "in",
            "its",
            "name",
            "is",
            "``",
            "result0",
            "''",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT department_id FROM Departments WHERE department_name LIKE '%computer%'",
        "query_toks": [
            "select",
            "department_id",
            "from",
            "departments",
            "where",
            "department_name",
            "like",
            "'%computer%'"
        ],
        "results_raw": [
            [
                "department_id"
            ],
            [
                1
            ]
        ],
        "response": "The department_id of the department that has the substring computer in its name is 1.",
        "response_toks": [
            "The",
            "department_id",
            "of",
            "the",
            "department",
            "that",
            "has",
            "the",
            "substring",
            "computer",
            "in",
            "its",
            "name",
            "is",
            "1",
            "."
        ],
        "results_map": {
            "result0": "1"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT department_id FROM Departments WHERE department_name LIKE '%computer%' | 1 ",
        "query_w_results_blank_res": "SELECT department_id FROM Departments WHERE department_name LIKE '%computer%' | result0 ",
        "query_toks_w_results": [
            "select",
            "department_id",
            "from",
            "departments",
            "where",
            "department_name",
            "like",
            "'%computer%'",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "department_id",
            "from",
            "departments",
            "where",
            "department_name",
            "like",
            "'%computer%'",
            "result0"
        ],
        "response_blank_res": "The department_id of the department that has the substring computer in its name is result0 .",
        "response_toks_blank_res": [
            "The",
            "department_id",
            "of",
            "the",
            "department",
            "that",
            "has",
            "the",
            "substring",
            "computer",
            "in",
            "its",
            "name",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT other_details FROM Departments WHERE department_name LIKE '%computer%'",
        "query_toks": [
            "select",
            "other_details",
            "from",
            "departments",
            "where",
            "department_name",
            "like",
            "'%computer%'"
        ],
        "results_raw": [
            [
                "other_details"
            ],
            [
                null
            ]
        ],
        "response": "Yes. The other details of the department that has the substring computer in its name is NULL",
        "response_toks": [
            "Yes",
            ".",
            "The",
            "other",
            "details",
            "of",
            "the",
            "department",
            "that",
            "has",
            "the",
            "substring",
            "computer",
            "in",
            "its",
            "name",
            "is",
            "NULL"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT other_details FROM Departments WHERE department_name LIKE '%computer%'",
        "query_w_results_blank_res": "SELECT other_details FROM Departments WHERE department_name LIKE '%computer%'",
        "query_toks_w_results": [
            "select",
            "other_details",
            "from",
            "departments",
            "where",
            "department_name",
            "like",
            "'%computer%'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "other_details",
            "from",
            "departments",
            "where",
            "department_name",
            "like",
            "'%computer%'"
        ],
        "response_blank_res": "Yes . The other details of the department that has the substring computer in its name is NULL",
        "response_toks_blank_res": [
            "Yes",
            ".",
            "The",
            "other",
            "details",
            "of",
            "the",
            "department",
            "that",
            "has",
            "the",
            "substring",
            "computer",
            "in",
            "its",
            "name",
            "is",
            "NULL"
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT other_details FROM Departments WHERE department_name  =  \"history\"",
        "query_toks": [
            "select",
            "other_details",
            "from",
            "departments",
            "where",
            "department_name",
            "=",
            "\"history\""
        ],
        "results_raw": [
            [
                "other_details"
            ],
            [
                null
            ]
        ],
        "response": "The other details for the department named history is \"NULL\"",
        "response_toks": [
            "The",
            "other",
            "details",
            "for",
            "the",
            "department",
            "named",
            "history",
            "is",
            "``",
            "NULL",
            "''"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT other_details FROM Departments WHERE department_name  =  \"history\"",
        "query_w_results_blank_res": "SELECT other_details FROM Departments WHERE department_name  =  \"history\"",
        "query_toks_w_results": [
            "select",
            "other_details",
            "from",
            "departments",
            "where",
            "department_name",
            "=",
            "\"history\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "other_details",
            "from",
            "departments",
            "where",
            "department_name",
            "=",
            "\"history\""
        ],
        "response_blank_res": "The other details for the department named history is `` NULL ''",
        "response_toks_blank_res": [
            "The",
            "other",
            "details",
            "for",
            "the",
            "department",
            "named",
            "history",
            "is",
            "``",
            "NULL",
            "''"
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT department_name FROM Departments WHERE other_details ! =  \"NULL\"",
        "query_toks": [
            "select",
            "department_name",
            "from",
            "departments",
            "where",
            "other_details",
            "!",
            "=",
            "\"null\""
        ],
        "results_raw": [
            [
                "department_name"
            ]
        ],
        "response": "No. There is no department with other details that are not the word 'NULL'.",
        "response_toks": [
            "No",
            ".",
            "There",
            "is",
            "no",
            "department",
            "with",
            "other",
            "details",
            "that",
            "are",
            "not",
            "the",
            "word",
            "'NULL",
            "'",
            "."
        ],
        "results_map": null,
        "results_blank_res": null,
        "query_w_results": null,
        "query_w_results_blank_res": null,
        "query_toks_w_results": null,
        "query_toks_w_results_blank_res": null,
        "response_blank_res": null,
        "response_toks_blank_res": null
    },
    {
        "database_id": "car_1",
        "query": "SELECT sum ( Cylinders )  FROM cars_data",
        "query_toks": [
            "select",
            "sum",
            "(",
            "cylinders",
            ")",
            "from",
            "cars_data"
        ],
        "results_raw": [
            [
                "sum(Cylinders)"
            ],
            [
                2223
            ]
        ],
        "response": "There are total 2223 cylinders in the cars_data table.",
        "response_toks": [
            "There",
            "are",
            "total",
            "2223",
            "cylinders",
            "in",
            "the",
            "cars_data",
            "table",
            "."
        ],
        "results_map": {
            "result0": "2223"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT sum ( Cylinders )  FROM cars_data | 2223 ",
        "query_w_results_blank_res": "SELECT sum ( Cylinders )  FROM cars_data | result0 ",
        "query_toks_w_results": [
            "select",
            "sum",
            "(",
            "cylinders",
            ")",
            "from",
            "cars_data",
            "2223"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "sum",
            "(",
            "cylinders",
            ")",
            "from",
            "cars_data",
            "result0"
        ],
        "response_blank_res": "There are total result0 cylinders in the cars_data table .",
        "response_toks_blank_res": [
            "There",
            "are",
            "total",
            "result0",
            "cylinders",
            "in",
            "the",
            "cars_data",
            "table",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT Weight FROM cars_data ORDER BY Weight DESC LIMIT 1",
        "query_toks": [
            "select",
            "weight",
            "from",
            "cars_data",
            "order",
            "by",
            "weight",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Weight"
            ],
            [
                5140
            ]
        ],
        "response": "This is the highest weight in the cars_data table.",
        "response_toks": [
            "This",
            "is",
            "the",
            "highest",
            "weight",
            "in",
            "the",
            "cars_data",
            "table",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Weight FROM cars_data ORDER BY Weight DESC LIMIT 1",
        "query_w_results_blank_res": "SELECT Weight FROM cars_data ORDER BY Weight DESC LIMIT 1",
        "query_toks_w_results": [
            "select",
            "weight",
            "from",
            "cars_data",
            "order",
            "by",
            "weight",
            "desc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "weight",
            "from",
            "cars_data",
            "order",
            "by",
            "weight",
            "desc",
            "limit",
            "1"
        ],
        "response_blank_res": "This is the highest weight in the cars_data table .",
        "response_toks_blank_res": [
            "This",
            "is",
            "the",
            "highest",
            "weight",
            "in",
            "the",
            "cars_data",
            "table",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT count ( * )  FROM cars_data",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "cars_data"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                406
            ]
        ],
        "response": "There are 406 years in the cars_data table.",
        "response_toks": [
            "There",
            "are",
            "406",
            "years",
            "in",
            "the",
            "cars_data",
            "table",
            "."
        ],
        "results_map": {
            "result0": "406"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM cars_data | 406 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM cars_data | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "cars_data",
            "406"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "cars_data",
            "result0"
        ],
        "response_blank_res": "There are result0 years in the cars_data table .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "years",
            "in",
            "the",
            "cars_data",
            "table",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT accelerate FROM cars_data ORDER BY accelerate DESC LIMIT 1",
        "query_toks": [
            "select",
            "accelerate",
            "from",
            "cars_data",
            "order",
            "by",
            "accelerate",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Accelerate"
            ],
            [
                24.8
            ]
        ],
        "response": "This is the highest accelerate in the cars_data table.",
        "response_toks": [
            "This",
            "is",
            "the",
            "highest",
            "accelerate",
            "in",
            "the",
            "cars_data",
            "table",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT accelerate FROM cars_data ORDER BY accelerate DESC LIMIT 1",
        "query_w_results_blank_res": "SELECT accelerate FROM cars_data ORDER BY accelerate DESC LIMIT 1",
        "query_toks_w_results": [
            "select",
            "accelerate",
            "from",
            "cars_data",
            "order",
            "by",
            "accelerate",
            "desc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "accelerate",
            "from",
            "cars_data",
            "order",
            "by",
            "accelerate",
            "desc",
            "limit",
            "1"
        ],
        "response_blank_res": "This is the highest accelerate in the cars_data table .",
        "response_toks_blank_res": [
            "This",
            "is",
            "the",
            "highest",
            "accelerate",
            "in",
            "the",
            "cars_data",
            "table",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1",
        "query_toks": [
            "select",
            "t1",
            ".",
            "horsepower",
            "from",
            "cars_data",
            "as",
            "t1",
            "order",
            "by",
            "t1",
            ".",
            "accelerate",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Horsepower"
            ],
            [
                "71"
            ]
        ],
        "response": "This is the horsepower of the car with largest accelerate.",
        "response_toks": [
            "This",
            "is",
            "the",
            "horsepower",
            "of",
            "the",
            "car",
            "with",
            "largest",
            "accelerate",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1",
        "query_w_results_blank_res": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "horsepower",
            "from",
            "cars_data",
            "as",
            "t1",
            "order",
            "by",
            "t1",
            ".",
            "accelerate",
            "desc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "horsepower",
            "from",
            "cars_data",
            "as",
            "t1",
            "order",
            "by",
            "t1",
            ".",
            "accelerate",
            "desc",
            "limit",
            "1"
        ],
        "response_blank_res": "This is the horsepower of the car with largest accelerate .",
        "response_toks_blank_res": [
            "This",
            "is",
            "the",
            "horsepower",
            "of",
            "the",
            "car",
            "with",
            "largest",
            "accelerate",
            "."
        ]
    },
    {
        "database_id": "concert_singer",
        "query": "SELECT age from singer where name  =  \"Joe Sharp\"",
        "query_toks": [
            "select",
            "age",
            "from",
            "singer",
            "where",
            "name",
            "=",
            "\"joe",
            "sharp\""
        ],
        "results_raw": [
            [
                "Age"
            ],
            [
                52
            ]
        ],
        "response": "The singer named Joe Sharp has an age of 52.",
        "response_toks": [
            "The",
            "singer",
            "named",
            "Joe",
            "Sharp",
            "has",
            "an",
            "age",
            "of",
            "52",
            "."
        ],
        "results_map": {
            "result0": "52"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT age from singer where name  =  \"Joe Sharp\" | 52 ",
        "query_w_results_blank_res": "SELECT age from singer where name  =  \"Joe Sharp\" | result0 ",
        "query_toks_w_results": [
            "select",
            "age",
            "from",
            "singer",
            "where",
            "name",
            "=",
            "\"joe",
            "sharp\"",
            "52"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "age",
            "from",
            "singer",
            "where",
            "name",
            "=",
            "\"joe",
            "sharp\"",
            "result0"
        ],
        "response_blank_res": "The singer named Joe Sharp has an age of result0 .",
        "response_toks_blank_res": [
            "The",
            "singer",
            "named",
            "Joe",
            "Sharp",
            "has",
            "an",
            "age",
            "of",
            "result0",
            "."
        ]
    },
    {
        "database_id": "concert_singer",
        "query": "select count ( * )  from singer where country  =  \"United States\"",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "singer",
            "where",
            "country",
            "=",
            "\"united",
            "states\""
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                1
            ]
        ],
        "response": "There is 1 singer from United States.",
        "response_toks": [
            "There",
            "is",
            "1",
            "singer",
            "from",
            "United",
            "States",
            "."
        ],
        "results_map": {
            "result0": "1"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "select count ( * )  from singer where country  =  \"United States\" | 1 ",
        "query_w_results_blank_res": "select count ( * )  from singer where country  =  \"United States\" | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "singer",
            "where",
            "country",
            "=",
            "\"united",
            "states\"",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "singer",
            "where",
            "country",
            "=",
            "\"united",
            "states\"",
            "result0"
        ],
        "response_blank_res": "There is result0 singer from United States .",
        "response_toks_blank_res": [
            "There",
            "is",
            "result0",
            "singer",
            "from",
            "United",
            "States",
            "."
        ]
    },
    {
        "database_id": "concert_singer",
        "query": "select count ( * )  from singer where Is_male  =  \"True\"",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "singer",
            "where",
            "is_male",
            "=",
            "\"true\""
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                0
            ]
        ],
        "response": "There are 6 male singers.",
        "response_toks": [
            "There",
            "are",
            "6",
            "male",
            "singers",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "select count ( * )  from singer where Is_male  =  \"True\"",
        "query_w_results_blank_res": "select count ( * )  from singer where Is_male  =  \"True\"",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "singer",
            "where",
            "is_male",
            "=",
            "\"true\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "singer",
            "where",
            "is_male",
            "=",
            "\"true\""
        ],
        "response_blank_res": "There are 6 male singers .",
        "response_toks_blank_res": [
            "There",
            "are",
            "6",
            "male",
            "singers",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors'",
        "query_toks": [
            "select",
            "distinct",
            "t2",
            ".",
            "model",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "model",
            "=",
            "t2",
            ".",
            "model",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "maker",
            "=",
            "t3",
            ".",
            "id",
            "join",
            "cars_data",
            "as",
            "t4",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t4",
            ".",
            "id",
            "where",
            "t3",
            ".",
            "fullname",
            "=",
            "'general",
            "motors'"
        ],
        "results_raw": [
            [
                "Model"
            ],
            [
                "chevrolet"
            ],
            [
                "buick"
            ],
            [
                "pontiac"
            ]
        ],
        "response": "Here is the list that contains all the models that are manufactured by the maker with the name \"General Motors\".",
        "response_toks": [
            "Here",
            "is",
            "the",
            "list",
            "that",
            "contains",
            "all",
            "the",
            "models",
            "that",
            "are",
            "manufactured",
            "by",
            "the",
            "maker",
            "with",
            "the",
            "name",
            "``",
            "General",
            "Motors",
            "''",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors'",
        "query_w_results_blank_res": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors'",
        "query_toks_w_results": [
            "select",
            "distinct",
            "t2",
            ".",
            "model",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "model",
            "=",
            "t2",
            ".",
            "model",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "maker",
            "=",
            "t3",
            ".",
            "id",
            "join",
            "cars_data",
            "as",
            "t4",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t4",
            ".",
            "id",
            "where",
            "t3",
            ".",
            "fullname",
            "=",
            "'general",
            "motors'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "t2",
            ".",
            "model",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "model",
            "=",
            "t2",
            ".",
            "model",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "maker",
            "=",
            "t3",
            ".",
            "id",
            "join",
            "cars_data",
            "as",
            "t4",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t4",
            ".",
            "id",
            "where",
            "t3",
            ".",
            "fullname",
            "=",
            "'general",
            "motors'"
        ],
        "response_blank_res": "Here is the list that contains all the models that are manufactured by the maker with the name `` General Motors '' .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "list",
            "that",
            "contains",
            "all",
            "the",
            "models",
            "that",
            "are",
            "manufactured",
            "by",
            "the",
            "maker",
            "with",
            "the",
            "name",
            "``",
            "General",
            "Motors",
            "''",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T4.weight  >  3500",
        "query_toks": [
            "select",
            "distinct",
            "t2",
            ".",
            "model",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "model",
            "=",
            "t2",
            ".",
            "model",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "maker",
            "=",
            "t3",
            ".",
            "id",
            "join",
            "cars_data",
            "as",
            "t4",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t4",
            ".",
            "id",
            "where",
            "t4",
            ".",
            "weight",
            ">",
            "3500"
        ],
        "results_raw": [
            [
                "Model"
            ],
            [
                "chevrolet"
            ],
            [
                "buick"
            ],
            [
                "ford"
            ]
        ],
        "response": "Here is the list that contains all the models that are manufactured by the maker with weight more than 3500.",
        "response_toks": [
            "Here",
            "is",
            "the",
            "list",
            "that",
            "contains",
            "all",
            "the",
            "models",
            "that",
            "are",
            "manufactured",
            "by",
            "the",
            "maker",
            "with",
            "weight",
            "more",
            "than",
            "3500",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T4.weight  >  3500",
        "query_w_results_blank_res": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T4.weight  >  3500",
        "query_toks_w_results": [
            "select",
            "distinct",
            "t2",
            ".",
            "model",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "model",
            "=",
            "t2",
            ".",
            "model",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "maker",
            "=",
            "t3",
            ".",
            "id",
            "join",
            "cars_data",
            "as",
            "t4",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t4",
            ".",
            "id",
            "where",
            "t4",
            ".",
            "weight",
            ">",
            "3500"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "t2",
            ".",
            "model",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "model",
            "=",
            "t2",
            ".",
            "model",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "maker",
            "=",
            "t3",
            ".",
            "id",
            "join",
            "cars_data",
            "as",
            "t4",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t4",
            ".",
            "id",
            "where",
            "t4",
            ".",
            "weight",
            ">",
            "3500"
        ],
        "response_blank_res": "Here is the list that contains all the models that are manufactured by the maker with weight more than 3500 .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "list",
            "that",
            "contains",
            "all",
            "the",
            "models",
            "that",
            "are",
            "manufactured",
            "by",
            "the",
            "maker",
            "with",
            "weight",
            "more",
            "than",
            "3500",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT DISTINCT T2.Model, T3.maker FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors' order by t4.horsepower desc limit 1",
        "query_toks": [
            "select",
            "distinct",
            "t2",
            ".",
            "model",
            ",",
            "t3",
            ".",
            "maker",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "model",
            "=",
            "t2",
            ".",
            "model",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "maker",
            "=",
            "t3",
            ".",
            "id",
            "join",
            "cars_data",
            "as",
            "t4",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t4",
            ".",
            "id",
            "where",
            "t3",
            ".",
            "fullname",
            "=",
            "'general",
            "motors'",
            "order",
            "by",
            "t4",
            ".",
            "horsepower",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Model",
                "Maker"
            ],
            [
                "pontiac",
                "gm"
            ]
        ],
        "response": "The model of the car with the largest horsepower is pontiac and the maker is gm.",
        "response_toks": [
            "The",
            "model",
            "of",
            "the",
            "car",
            "with",
            "the",
            "largest",
            "horsepower",
            "is",
            "pontiac",
            "and",
            "the",
            "maker",
            "is",
            "gm",
            "."
        ],
        "results_map": {
            "result0": "pontiac",
            "result1": "gm"
        },
        "results_blank_res": "result0 result1 ",
        "query_w_results": "SELECT DISTINCT T2.Model, T3.maker FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors' order by t4.horsepower desc limit 1 | pontiac gm ",
        "query_w_results_blank_res": "SELECT DISTINCT T2.Model, T3.maker FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors' order by t4.horsepower desc limit 1 | result0 result1 ",
        "query_toks_w_results": [
            "select",
            "distinct",
            "t2",
            ".",
            "model",
            ",",
            "t3",
            ".",
            "maker",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "model",
            "=",
            "t2",
            ".",
            "model",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "maker",
            "=",
            "t3",
            ".",
            "id",
            "join",
            "cars_data",
            "as",
            "t4",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t4",
            ".",
            "id",
            "where",
            "t3",
            ".",
            "fullname",
            "=",
            "'general",
            "motors'",
            "order",
            "by",
            "t4",
            ".",
            "horsepower",
            "desc",
            "limit",
            "1",
            "pontiac",
            "gm"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "t2",
            ".",
            "model",
            ",",
            "t3",
            ".",
            "maker",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "model",
            "=",
            "t2",
            ".",
            "model",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "maker",
            "=",
            "t3",
            ".",
            "id",
            "join",
            "cars_data",
            "as",
            "t4",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t4",
            ".",
            "id",
            "where",
            "t3",
            ".",
            "fullname",
            "=",
            "'general",
            "motors'",
            "order",
            "by",
            "t4",
            ".",
            "horsepower",
            "desc",
            "limit",
            "1",
            "result0",
            "result1"
        ],
        "response_blank_res": "The model of the car with the largest horsepower is result0 and the maker is result1 .",
        "response_toks_blank_res": [
            "The",
            "model",
            "of",
            "the",
            "car",
            "with",
            "the",
            "largest",
            "horsepower",
            "is",
            "result0",
            "and",
            "the",
            "maker",
            "is",
            "result1",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT count ( * )  FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors' and t4.mpg > 15",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "model",
            "=",
            "t2",
            ".",
            "model",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "maker",
            "=",
            "t3",
            ".",
            "id",
            "join",
            "cars_data",
            "as",
            "t4",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t4",
            ".",
            "id",
            "where",
            "t3",
            ".",
            "fullname",
            "=",
            "'general",
            "motors'",
            "and",
            "t4",
            ".",
            "mpg",
            ">",
            "15"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                67
            ]
        ],
        "response": "There are 67 cars manufactured by General Motors and with more than 15 mpg.",
        "response_toks": [
            "There",
            "are",
            "67",
            "cars",
            "manufactured",
            "by",
            "General",
            "Motors",
            "and",
            "with",
            "more",
            "than",
            "15",
            "mpg",
            "."
        ],
        "results_map": {
            "result0": "67"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors' and t4.mpg > 15 | 67 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors' and t4.mpg > 15 | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "model",
            "=",
            "t2",
            ".",
            "model",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "maker",
            "=",
            "t3",
            ".",
            "id",
            "join",
            "cars_data",
            "as",
            "t4",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t4",
            ".",
            "id",
            "where",
            "t3",
            ".",
            "fullname",
            "=",
            "'general",
            "motors'",
            "and",
            "t4",
            ".",
            "mpg",
            ">",
            "15",
            "67"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "model",
            "=",
            "t2",
            ".",
            "model",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "maker",
            "=",
            "t3",
            ".",
            "id",
            "join",
            "cars_data",
            "as",
            "t4",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t4",
            ".",
            "id",
            "where",
            "t3",
            ".",
            "fullname",
            "=",
            "'general",
            "motors'",
            "and",
            "t4",
            ".",
            "mpg",
            ">",
            "15",
            "result0"
        ],
        "response_blank_res": "There are result0 cars manufactured by General Motors and with more than 15 mpg .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "cars",
            "manufactured",
            "by",
            "General",
            "Motors",
            "and",
            "with",
            "more",
            "than",
            "15",
            "mpg",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT DISTINCT t1.make, t1.model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors' order by t4.mpg desc limit 1",
        "query_toks": [
            "select",
            "distinct",
            "t1",
            ".",
            "make",
            ",",
            "t1",
            ".",
            "model",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "model",
            "=",
            "t2",
            ".",
            "model",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "maker",
            "=",
            "t3",
            ".",
            "id",
            "join",
            "cars_data",
            "as",
            "t4",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t4",
            ".",
            "id",
            "where",
            "t3",
            ".",
            "fullname",
            "=",
            "'general",
            "motors'",
            "order",
            "by",
            "t4",
            ".",
            "mpg",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Make",
                "Model"
            ],
            [
                "chevrolet chevelle concours (sw)",
                "chevrolet"
            ]
        ],
        "response": "the make of the car manufactured by General Motors that gets the highest mpg is chevrolet chevelle concours (sw) and its model is chevrolet.",
        "response_toks": [
            "the",
            "make",
            "of",
            "the",
            "car",
            "manufactured",
            "by",
            "General",
            "Motors",
            "that",
            "gets",
            "the",
            "highest",
            "mpg",
            "is",
            "chevrolet",
            "chevelle",
            "concours",
            "(",
            "sw",
            ")",
            "and",
            "its",
            "model",
            "is",
            "chevrolet",
            "."
        ],
        "results_map": {
            "result0": "chevrolet",
            "result1": "chevrolet"
        },
        "results_blank_res": "result1 result1 ",
        "query_w_results": "SELECT DISTINCT t1.make, t1.model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors' order by t4.mpg desc limit 1 | chevrolet chevrolet ",
        "query_w_results_blank_res": "SELECT DISTINCT t1.make, t1.model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors' order by t4.mpg desc limit 1 | result1 result1 ",
        "query_toks_w_results": [
            "select",
            "distinct",
            "t1",
            ".",
            "make",
            ",",
            "t1",
            ".",
            "model",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "model",
            "=",
            "t2",
            ".",
            "model",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "maker",
            "=",
            "t3",
            ".",
            "id",
            "join",
            "cars_data",
            "as",
            "t4",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t4",
            ".",
            "id",
            "where",
            "t3",
            ".",
            "fullname",
            "=",
            "'general",
            "motors'",
            "order",
            "by",
            "t4",
            ".",
            "mpg",
            "desc",
            "limit",
            "1",
            "chevrolet",
            "chevrolet"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "t1",
            ".",
            "make",
            ",",
            "t1",
            ".",
            "model",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "model_list",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "model",
            "=",
            "t2",
            ".",
            "model",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "maker",
            "=",
            "t3",
            ".",
            "id",
            "join",
            "cars_data",
            "as",
            "t4",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t4",
            ".",
            "id",
            "where",
            "t3",
            ".",
            "fullname",
            "=",
            "'general",
            "motors'",
            "order",
            "by",
            "t4",
            ".",
            "mpg",
            "desc",
            "limit",
            "1",
            "result1",
            "result1"
        ],
        "response_blank_res": "the make of the car manufactured by General Motors that gets the highest mpg is result1 chevelle concours ( sw ) and its model is result1 .",
        "response_toks_blank_res": [
            "the",
            "make",
            "of",
            "the",
            "car",
            "manufactured",
            "by",
            "General",
            "Motors",
            "that",
            "gets",
            "the",
            "highest",
            "mpg",
            "is",
            "result1",
            "chevelle",
            "concours",
            "(",
            "sw",
            ")",
            "and",
            "its",
            "model",
            "is",
            "result1",
            "."
        ]
    },
    {
        "database_id": "network_1",
        "query": "SELECT count ( * )  FROM Highschooler",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "highschooler"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                16
            ]
        ],
        "response": "There are 16 students in the table.",
        "response_toks": [
            "There",
            "are",
            "16",
            "students",
            "in",
            "the",
            "table",
            "."
        ],
        "results_map": {
            "result0": "16"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM Highschooler | 16 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM Highschooler | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "highschooler",
            "16"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "highschooler",
            "result0"
        ],
        "response_blank_res": "There are result0 students in the table .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "students",
            "in",
            "the",
            "table",
            "."
        ]
    },
    {
        "database_id": "network_1",
        "query": "SELECT avg ( grade )  FROM Highschooler",
        "query_toks": [
            "select",
            "avg",
            "(",
            "grade",
            ")",
            "from",
            "highschooler"
        ],
        "results_raw": [
            [
                "avg(grade)"
            ],
            [
                10.5
            ]
        ],
        "response": "The average grade of all the students is 10.5",
        "response_toks": [
            "The",
            "average",
            "grade",
            "of",
            "all",
            "the",
            "students",
            "is",
            "10.5"
        ],
        "results_map": {
            "result0": "10.5"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT avg ( grade )  FROM Highschooler | 10.5 ",
        "query_w_results_blank_res": "SELECT avg ( grade )  FROM Highschooler | result0 ",
        "query_toks_w_results": [
            "select",
            "avg",
            "(",
            "grade",
            ")",
            "from",
            "highschooler",
            "10.5"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "avg",
            "(",
            "grade",
            ")",
            "from",
            "highschooler",
            "result0"
        ],
        "response_blank_res": "The average grade of all the students is result0",
        "response_toks_blank_res": [
            "The",
            "average",
            "grade",
            "of",
            "all",
            "the",
            "students",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "network_1",
        "query": "SELECT grade FROM Highschooler order by grade desc limit 1",
        "query_toks": [
            "select",
            "grade",
            "from",
            "highschooler",
            "order",
            "by",
            "grade",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "grade"
            ],
            [
                12
            ]
        ],
        "response": "The top grade of the students is 12.",
        "response_toks": [
            "The",
            "top",
            "grade",
            "of",
            "the",
            "students",
            "is",
            "12",
            "."
        ],
        "results_map": {
            "result0": "12"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT grade FROM Highschooler order by grade desc limit 1 | 12 ",
        "query_w_results_blank_res": "SELECT grade FROM Highschooler order by grade desc limit 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "grade",
            "from",
            "highschooler",
            "order",
            "by",
            "grade",
            "desc",
            "limit",
            "1",
            "12"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "grade",
            "from",
            "highschooler",
            "order",
            "by",
            "grade",
            "desc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "The top grade of the students is result0 .",
        "response_toks_blank_res": [
            "The",
            "top",
            "grade",
            "of",
            "the",
            "students",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "network_1",
        "query": "SELECT grade FROM Highschooler order by grade limit 1",
        "query_toks": [
            "select",
            "grade",
            "from",
            "highschooler",
            "order",
            "by",
            "grade",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "grade"
            ],
            [
                9
            ]
        ],
        "response": "The lowest grade of the students is 9.",
        "response_toks": [
            "The",
            "lowest",
            "grade",
            "of",
            "the",
            "students",
            "is",
            "9",
            "."
        ],
        "results_map": {
            "result0": "9"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT grade FROM Highschooler order by grade limit 1 | 9 ",
        "query_w_results_blank_res": "SELECT grade FROM Highschooler order by grade limit 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "grade",
            "from",
            "highschooler",
            "order",
            "by",
            "grade",
            "limit",
            "1",
            "9"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "grade",
            "from",
            "highschooler",
            "order",
            "by",
            "grade",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "The lowest grade of the students is result0 .",
        "response_toks_blank_res": [
            "The",
            "lowest",
            "grade",
            "of",
            "the",
            "students",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId   =   T2.Country",
        "query_toks": [
            "select",
            "t1",
            ".",
            "countryname",
            "from",
            "countries",
            "as",
            "t1",
            "join",
            "car_makers",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "countryid",
            "=",
            "t2",
            ".",
            "country"
        ],
        "results_raw": [
            [
                "CountryName"
            ],
            [
                "usa"
            ],
            [
                "germany"
            ],
            [
                "germany"
            ]
        ],
        "response": "Here is the result table of the countries that produced cars. For example, one of the countries is usa.",
        "response_toks": [
            "Here",
            "is",
            "the",
            "result",
            "table",
            "of",
            "the",
            "countries",
            "that",
            "produced",
            "cars",
            ".",
            "For",
            "example",
            ",",
            "one",
            "of",
            "the",
            "countries",
            "is",
            "usa",
            "."
        ],
        "results_map": {
            "result0": "usa"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId   =   T2.Country | usa ",
        "query_w_results_blank_res": "SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId   =   T2.Country | result0 ",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "countryname",
            "from",
            "countries",
            "as",
            "t1",
            "join",
            "car_makers",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "countryid",
            "=",
            "t2",
            ".",
            "country",
            "usa"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "countryname",
            "from",
            "countries",
            "as",
            "t1",
            "join",
            "car_makers",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "countryid",
            "=",
            "t2",
            ".",
            "country",
            "result0"
        ],
        "response_blank_res": "Here is the result table of the countries that produced cars . For example , one of the countries is result0 .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "result",
            "table",
            "of",
            "the",
            "countries",
            "that",
            "produced",
            "cars",
            ".",
            "For",
            "example",
            ",",
            "one",
            "of",
            "the",
            "countries",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId   =   T2.Country",
        "query_toks": [
            "select",
            "countryname",
            "from",
            "countries",
            "except",
            "select",
            "t1",
            ".",
            "countryname",
            "from",
            "countries",
            "as",
            "t1",
            "join",
            "car_makers",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "countryid",
            "=",
            "t2",
            ".",
            "country"
        ],
        "results_raw": [
            [
                "CountryName"
            ],
            [
                "australia"
            ],
            [
                "brazil"
            ],
            [
                "egypt"
            ]
        ],
        "response": "Here is the result table of the countries that do not produce cars. For example, one of the countries is Australia.",
        "response_toks": [
            "Here",
            "is",
            "the",
            "result",
            "table",
            "of",
            "the",
            "countries",
            "that",
            "do",
            "not",
            "produce",
            "cars",
            ".",
            "For",
            "example",
            ",",
            "one",
            "of",
            "the",
            "countries",
            "is",
            "Australia",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId   =   T2.Country",
        "query_w_results_blank_res": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId   =   T2.Country",
        "query_toks_w_results": [
            "select",
            "countryname",
            "from",
            "countries",
            "except",
            "select",
            "t1",
            ".",
            "countryname",
            "from",
            "countries",
            "as",
            "t1",
            "join",
            "car_makers",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "countryid",
            "=",
            "t2",
            ".",
            "country"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "countryname",
            "from",
            "countries",
            "except",
            "select",
            "t1",
            ".",
            "countryname",
            "from",
            "countries",
            "as",
            "t1",
            "join",
            "car_makers",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "countryid",
            "=",
            "t2",
            ".",
            "country"
        ],
        "response_blank_res": "Here is the result table of the countries that do not produce cars . For example , one of the countries is Australia .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "result",
            "table",
            "of",
            "the",
            "countries",
            "that",
            "do",
            "not",
            "produce",
            "cars",
            ".",
            "For",
            "example",
            ",",
            "one",
            "of",
            "the",
            "countries",
            "is",
            "Australia",
            "."
        ]
    },
    {
        "database_id": "network_1",
        "query": "SELECT student_id, friend_id FROM Friend",
        "query_toks": [
            "select",
            "student_id",
            ",",
            "friend_id",
            "from",
            "friend"
        ],
        "results_raw": [
            [
                "student_id",
                "friend_id"
            ],
            [
                1510,
                1381
            ],
            [
                1510,
                1689
            ],
            [
                1689,
                1709
            ]
        ],
        "response": "The table shows student IDs and their friends IDs",
        "response_toks": [
            "The",
            "table",
            "shows",
            "student",
            "IDs",
            "and",
            "their",
            "friends",
            "IDs"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT student_id, friend_id FROM Friend",
        "query_w_results_blank_res": "SELECT student_id, friend_id FROM Friend",
        "query_toks_w_results": [
            "select",
            "student_id",
            ",",
            "friend_id",
            "from",
            "friend"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "student_id",
            ",",
            "friend_id",
            "from",
            "friend"
        ],
        "response_blank_res": "The table shows student IDs and their friends IDs",
        "response_toks_blank_res": [
            "The",
            "table",
            "shows",
            "student",
            "IDs",
            "and",
            "their",
            "friends",
            "IDs"
        ]
    },
    {
        "database_id": "network_1",
        "query": "SELECT id FROM Highschooler",
        "query_toks": [
            "select",
            "id",
            "from",
            "highschooler"
        ],
        "results_raw": [
            [
                "ID"
            ],
            [
                1025
            ],
            [
                1101
            ],
            [
                1247
            ]
        ],
        "response": "The table shows the ids of all High schoolers.",
        "response_toks": [
            "The",
            "table",
            "shows",
            "the",
            "ids",
            "of",
            "all",
            "High",
            "schoolers",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT id FROM Highschooler",
        "query_w_results_blank_res": "SELECT id FROM Highschooler",
        "query_toks_w_results": [
            "select",
            "id",
            "from",
            "highschooler"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "id",
            "from",
            "highschooler"
        ],
        "response_blank_res": "The table shows the ids of all High schoolers .",
        "response_toks_blank_res": [
            "The",
            "table",
            "shows",
            "the",
            "ids",
            "of",
            "all",
            "High",
            "schoolers",
            "."
        ]
    },
    {
        "database_id": "network_1",
        "query": "SELECT id FROM Highschooler where id not in  ( SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend ) ",
        "query_toks": [
            "select",
            "id",
            "from",
            "highschooler",
            "where",
            "id",
            "not",
            "in",
            "(",
            "select",
            "student_id",
            "from",
            "friend",
            "union",
            "select",
            "friend_id",
            "from",
            "friend",
            ")"
        ],
        "results_raw": [
            [
                "ID"
            ]
        ],
        "response": "There is no ID that is on the second list but is not on the first list.",
        "response_toks": [
            "There",
            "is",
            "no",
            "ID",
            "that",
            "is",
            "on",
            "the",
            "second",
            "list",
            "but",
            "is",
            "not",
            "on",
            "the",
            "first",
            "list",
            "."
        ],
        "results_map": null,
        "results_blank_res": null,
        "query_w_results": null,
        "query_w_results_blank_res": null,
        "query_toks_w_results": null,
        "query_toks_w_results_blank_res": null,
        "response_blank_res": null,
        "response_toks_blank_res": null
    },
    {
        "database_id": "network_1",
        "query": "SELECT count ( id )  FROM Highschooler",
        "query_toks": [
            "select",
            "count",
            "(",
            "id",
            ")",
            "from",
            "highschooler"
        ],
        "results_raw": [
            [
                "count(id)"
            ],
            [
                16
            ]
        ],
        "response": "The total number of High schooler ids is 16.",
        "response_toks": [
            "The",
            "total",
            "number",
            "of",
            "High",
            "schooler",
            "ids",
            "is",
            "16",
            "."
        ],
        "results_map": {
            "result0": "16"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( id )  FROM Highschooler | 16 ",
        "query_w_results_blank_res": "SELECT count ( id )  FROM Highschooler | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "id",
            ")",
            "from",
            "highschooler",
            "16"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "id",
            ")",
            "from",
            "highschooler",
            "result0"
        ],
        "response_blank_res": "The total number of High schooler ids is result0 .",
        "response_toks_blank_res": [
            "The",
            "total",
            "number",
            "of",
            "High",
            "schooler",
            "ids",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "network_1",
        "query": "SELECT count ( distinct friend_id )  FROM Friend",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "friend_id",
            ")",
            "from",
            "friend"
        ],
        "results_raw": [
            [
                "count(distinct friend_id)"
            ],
            [
                15
            ]
        ],
        "response": "The total number of Friend IDs is 15.",
        "response_toks": [
            "The",
            "total",
            "number",
            "of",
            "Friend",
            "IDs",
            "is",
            "15",
            "."
        ],
        "results_map": {
            "result0": "15"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( distinct friend_id )  FROM Friend | 15 ",
        "query_w_results_blank_res": "SELECT count ( distinct friend_id )  FROM Friend | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "distinct",
            "friend_id",
            ")",
            "from",
            "friend",
            "15"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "distinct",
            "friend_id",
            ")",
            "from",
            "friend",
            "result0"
        ],
        "response_blank_res": "The total number of Friend IDs is result0 .",
        "response_toks_blank_res": [
            "The",
            "total",
            "number",
            "of",
            "Friend",
            "IDs",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "network_1",
        "query": "SELECT id FROM Highschooler EXCEPT SELECT friend_id FROM Friend",
        "query_toks": [
            "select",
            "id",
            "from",
            "highschooler",
            "except",
            "select",
            "friend_id",
            "from",
            "friend"
        ],
        "results_raw": [
            [
                "ID"
            ],
            [
                1510
            ]
        ],
        "response": "The id of the student who is not in the ids of friends is 1510.",
        "response_toks": [
            "The",
            "id",
            "of",
            "the",
            "student",
            "who",
            "is",
            "not",
            "in",
            "the",
            "ids",
            "of",
            "friends",
            "is",
            "1510",
            "."
        ],
        "results_map": {
            "result0": "1510"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT id FROM Highschooler EXCEPT SELECT friend_id FROM Friend | 1510 ",
        "query_w_results_blank_res": "SELECT id FROM Highschooler EXCEPT SELECT friend_id FROM Friend | result0 ",
        "query_toks_w_results": [
            "select",
            "id",
            "from",
            "highschooler",
            "except",
            "select",
            "friend_id",
            "from",
            "friend",
            "1510"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "id",
            "from",
            "highschooler",
            "except",
            "select",
            "friend_id",
            "from",
            "friend",
            "result0"
        ],
        "response_blank_res": "The id of the student who is not in the ids of friends is result0 .",
        "response_toks_blank_res": [
            "The",
            "id",
            "of",
            "the",
            "student",
            "who",
            "is",
            "not",
            "in",
            "the",
            "ids",
            "of",
            "friends",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "network_1",
        "query": "SELECT name, grade FROM Highschooler where id  =  1510",
        "query_toks": [
            "select",
            "name",
            ",",
            "grade",
            "from",
            "highschooler",
            "where",
            "id",
            "=",
            "1510"
        ],
        "results_raw": [
            [
                "name",
                "grade"
            ],
            [
                "Jordan",
                9
            ]
        ],
        "response": "The name of the student with id 1510 is Jordan, and the grade is 9.",
        "response_toks": [
            "The",
            "name",
            "of",
            "the",
            "student",
            "with",
            "id",
            "1510",
            "is",
            "Jordan",
            ",",
            "and",
            "the",
            "grade",
            "is",
            "9",
            "."
        ],
        "results_map": {
            "result0": "Jordan",
            "result1": "9"
        },
        "results_blank_res": "result0 result1 ",
        "query_w_results": "SELECT name, grade FROM Highschooler where id  =  1510 | Jordan 9 ",
        "query_w_results_blank_res": "SELECT name, grade FROM Highschooler where id  =  1510 | result0 result1 ",
        "query_toks_w_results": [
            "select",
            "name",
            ",",
            "grade",
            "from",
            "highschooler",
            "where",
            "id",
            "=",
            "1510",
            "Jordan",
            "9"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            ",",
            "grade",
            "from",
            "highschooler",
            "where",
            "id",
            "=",
            "1510",
            "result0",
            "result1"
        ],
        "response_blank_res": "The name of the student with id 1510 is result0 , and the grade is result1 .",
        "response_toks_blank_res": [
            "The",
            "name",
            "of",
            "the",
            "student",
            "with",
            "id",
            "1510",
            "is",
            "result0",
            ",",
            "and",
            "the",
            "grade",
            "is",
            "result1",
            "."
        ]
    },
    {
        "database_id": "employee_hire_evaluation",
        "query": "SELECT city FROM employee",
        "query_toks": [
            "select",
            "city",
            "from",
            "employee"
        ],
        "results_raw": [
            [
                "City"
            ],
            [
                "Bristol"
            ],
            [
                "Bath"
            ],
            [
                "Bristol"
            ]
        ],
        "response": "Here are all the cities of employees. For example, they are Bristol",
        "response_toks": [
            "Here",
            "are",
            "all",
            "the",
            "cities",
            "of",
            "employees",
            ".",
            "For",
            "example",
            ",",
            "they",
            "are",
            "Bristol"
        ],
        "results_map": {
            "result0": "Bristol"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT city FROM employee | Bristol ",
        "query_w_results_blank_res": "SELECT city FROM employee | result0 ",
        "query_toks_w_results": [
            "select",
            "city",
            "from",
            "employee",
            "Bristol"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "city",
            "from",
            "employee",
            "result0"
        ],
        "response_blank_res": "Here are all the cities of employees . For example , they are result0",
        "response_toks_blank_res": [
            "Here",
            "are",
            "all",
            "the",
            "cities",
            "of",
            "employees",
            ".",
            "For",
            "example",
            ",",
            "they",
            "are",
            "result0"
        ]
    },
    {
        "database_id": "employee_hire_evaluation",
        "query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count ( * )   >  1",
        "query_toks": [
            "select",
            "city",
            "from",
            "employee",
            "where",
            "age",
            "<",
            "30",
            "group",
            "by",
            "city",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "results_raw": [
            [
                "City"
            ],
            [
                "Bath"
            ]
        ],
        "response": "Bath is the city with more than one employee under the age of 30.",
        "response_toks": [
            "Bath",
            "is",
            "the",
            "city",
            "with",
            "more",
            "than",
            "one",
            "employee",
            "under",
            "the",
            "age",
            "of",
            "30",
            "."
        ],
        "results_map": {
            "result0": "Bath"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count ( * )   >  1 | Bath ",
        "query_w_results_blank_res": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count ( * )   >  1 | result0 ",
        "query_toks_w_results": [
            "select",
            "city",
            "from",
            "employee",
            "where",
            "age",
            "<",
            "30",
            "group",
            "by",
            "city",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1",
            "Bath"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "city",
            "from",
            "employee",
            "where",
            "age",
            "<",
            "30",
            "group",
            "by",
            "city",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1",
            "result0"
        ],
        "response_blank_res": "result0 is the city with more than one employee under the age of 30 .",
        "response_toks_blank_res": [
            "result0",
            "is",
            "the",
            "city",
            "with",
            "more",
            "than",
            "one",
            "employee",
            "under",
            "the",
            "age",
            "of",
            "30",
            "."
        ]
    },
    {
        "database_id": "employee_hire_evaluation",
        "query": "SELECT Age FROM employee WHERE city  =  'Bath'",
        "query_toks": [
            "select",
            "age",
            "from",
            "employee",
            "where",
            "city",
            "=",
            "'bath'"
        ],
        "results_raw": [
            [
                "Age"
            ],
            [
                29
            ],
            [
                29
            ],
            [
                32
            ]
        ],
        "response": "Here are the ages of employees in city Bath.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "ages",
            "of",
            "employees",
            "in",
            "city",
            "Bath",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Age FROM employee WHERE city  =  'Bath'",
        "query_w_results_blank_res": "SELECT Age FROM employee WHERE city  =  'Bath'",
        "query_toks_w_results": [
            "select",
            "age",
            "from",
            "employee",
            "where",
            "city",
            "=",
            "'bath'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "age",
            "from",
            "employee",
            "where",
            "city",
            "=",
            "'bath'"
        ],
        "response_blank_res": "Here are the ages of employees in city Bath .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "ages",
            "of",
            "employees",
            "in",
            "city",
            "Bath",
            "."
        ]
    },
    {
        "database_id": "pets_1",
        "query": "SELECT count ( * )  FROM student WHERE age  >  20",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "student",
            "where",
            "age",
            ">",
            "20"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                7
            ]
        ],
        "response": "There are 7 students older than 20.",
        "response_toks": [
            "There",
            "are",
            "7",
            "students",
            "older",
            "than",
            "20",
            "."
        ],
        "results_map": {
            "result0": "7"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM student WHERE age  >  20 | 7 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM student WHERE age  >  20 | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "student",
            "where",
            "age",
            ">",
            "20",
            "7"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "student",
            "where",
            "age",
            ">",
            "20",
            "result0"
        ],
        "response_blank_res": "There are result0 students older than 20 .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "students",
            "older",
            "than",
            "20",
            "."
        ]
    },
    {
        "database_id": "pets_1",
        "query": "SELECT count ( * )  FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid WHERE T1.age  >  20",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "where",
            "t1",
            ".",
            "age",
            ">",
            "20"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                0
            ]
        ],
        "response": "None of the students whose age is over 20 owns pets.",
        "response_toks": [
            "None",
            "of",
            "the",
            "students",
            "whose",
            "age",
            "is",
            "over",
            "20",
            "owns",
            "pets",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT count ( * )  FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid WHERE T1.age  >  20",
        "query_w_results_blank_res": "SELECT count ( * )  FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid WHERE T1.age  >  20",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "where",
            "t1",
            ".",
            "age",
            ">",
            "20"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "where",
            "t1",
            ".",
            "age",
            ">",
            "20"
        ],
        "response_blank_res": "None of the students whose age is over 20 owns pets .",
        "response_toks_blank_res": [
            "None",
            "of",
            "the",
            "students",
            "whose",
            "age",
            "is",
            "over",
            "20",
            "owns",
            "pets",
            "."
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT distinct loser_name from matches where loser_age  =  24.626967830300003",
        "query_toks": [
            "select",
            "distinct",
            "loser_name",
            "from",
            "matches",
            "where",
            "loser_age",
            "=",
            "24.626967830300003"
        ],
        "results_raw": [
            [
                "loser_name"
            ],
            [
                "Agnieszka Radwanska"
            ]
        ],
        "response": "The distinct name of the loser with age 24.626967830300003 is Agnieszka Radwanska.",
        "response_toks": [
            "The",
            "distinct",
            "name",
            "of",
            "the",
            "loser",
            "with",
            "age",
            "24.626967830300003",
            "is",
            "Agnieszka",
            "Radwanska",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT distinct loser_name from matches where loser_age  =  24.626967830300003",
        "query_w_results_blank_res": "SELECT distinct loser_name from matches where loser_age  =  24.626967830300003",
        "query_toks_w_results": [
            "select",
            "distinct",
            "loser_name",
            "from",
            "matches",
            "where",
            "loser_age",
            "=",
            "24.626967830300003"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "loser_name",
            "from",
            "matches",
            "where",
            "loser_age",
            "=",
            "24.626967830300003"
        ],
        "response_blank_res": "The distinct name of the loser with age 24.626967830300003 is Agnieszka Radwanska .",
        "response_toks_blank_res": [
            "The",
            "distinct",
            "name",
            "of",
            "the",
            "loser",
            "with",
            "age",
            "24.626967830300003",
            "is",
            "Agnieszka",
            "Radwanska",
            "."
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT count ( * )  from matches where loser_name  =  \"Petra Kvitova\" or winner_name  =  \"Petra Kvitova\"",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "matches",
            "where",
            "loser_name",
            "=",
            "\"petra",
            "kvitova\"",
            "or",
            "winner_name",
            "=",
            "\"petra",
            "kvitova\""
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                25
            ]
        ],
        "response": "The total number of matches played where either the loser's name was Petra Kvitova or the winner's name was \"Petra Kvitova\" is 25.",
        "response_toks": [
            "The",
            "total",
            "number",
            "of",
            "matches",
            "played",
            "where",
            "either",
            "the",
            "loser",
            "'s",
            "name",
            "was",
            "Petra",
            "Kvitova",
            "or",
            "the",
            "winner",
            "'s",
            "name",
            "was",
            "``",
            "Petra",
            "Kvitova",
            "''",
            "is",
            "25",
            "."
        ],
        "results_map": {
            "result0": "25"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  from matches where loser_name  =  \"Petra Kvitova\" or winner_name  =  \"Petra Kvitova\" | 25 ",
        "query_w_results_blank_res": "SELECT count ( * )  from matches where loser_name  =  \"Petra Kvitova\" or winner_name  =  \"Petra Kvitova\" | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "matches",
            "where",
            "loser_name",
            "=",
            "\"petra",
            "kvitova\"",
            "or",
            "winner_name",
            "=",
            "\"petra",
            "kvitova\"",
            "25"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "matches",
            "where",
            "loser_name",
            "=",
            "\"petra",
            "kvitova\"",
            "or",
            "winner_name",
            "=",
            "\"petra",
            "kvitova\"",
            "result0"
        ],
        "response_blank_res": "The total number of matches played where either the loser 's name was Petra Kvitova or the winner 's name was `` Petra Kvitova '' is result0 .",
        "response_toks_blank_res": [
            "The",
            "total",
            "number",
            "of",
            "matches",
            "played",
            "where",
            "either",
            "the",
            "loser",
            "'s",
            "name",
            "was",
            "Petra",
            "Kvitova",
            "or",
            "the",
            "winner",
            "'s",
            "name",
            "was",
            "``",
            "Petra",
            "Kvitova",
            "''",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT distinct loser_id from matches where loser_rank_points > 3500",
        "query_toks": [
            "select",
            "distinct",
            "loser_id",
            "from",
            "matches",
            "where",
            "loser_rank_points",
            ">",
            "3500"
        ],
        "results_raw": [
            [
                "loser_id"
            ],
            [
                201474
            ],
            [
                201520
            ],
            [
                201493
            ]
        ],
        "response": "The distinct loser ids of those with loser_rank_points higher than 3500 are shown in the result table.",
        "response_toks": [
            "The",
            "distinct",
            "loser",
            "ids",
            "of",
            "those",
            "with",
            "loser_rank_points",
            "higher",
            "than",
            "3500",
            "are",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT distinct loser_id from matches where loser_rank_points > 3500",
        "query_w_results_blank_res": "SELECT distinct loser_id from matches where loser_rank_points > 3500",
        "query_toks_w_results": [
            "select",
            "distinct",
            "loser_id",
            "from",
            "matches",
            "where",
            "loser_rank_points",
            ">",
            "3500"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "loser_id",
            "from",
            "matches",
            "where",
            "loser_rank_points",
            ">",
            "3500"
        ],
        "response_blank_res": "The distinct loser ids of those with loser_rank_points higher than 3500 are shown in the result table .",
        "response_toks_blank_res": [
            "The",
            "distinct",
            "loser",
            "ids",
            "of",
            "those",
            "with",
            "loser_rank_points",
            "higher",
            "than",
            "3500",
            "are",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count ( * )  DESC LIMIT 1",
        "query_toks": [
            "select",
            "winner_name",
            ",",
            "winner_rank_points",
            "from",
            "matches",
            "group",
            "by",
            "winner_name",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "winner_name",
                "winner_rank_points"
            ],
            [
                "Angelique Kerber",
                7340
            ]
        ],
        "response": "The name and rank points of the winner who won the most times is shown in the result table.",
        "response_toks": [
            "The",
            "name",
            "and",
            "rank",
            "points",
            "of",
            "the",
            "winner",
            "who",
            "won",
            "the",
            "most",
            "times",
            "is",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count ( * )  DESC LIMIT 1",
        "query_w_results_blank_res": "SELECT winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count ( * )  DESC LIMIT 1",
        "query_toks_w_results": [
            "select",
            "winner_name",
            ",",
            "winner_rank_points",
            "from",
            "matches",
            "group",
            "by",
            "winner_name",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "winner_name",
            ",",
            "winner_rank_points",
            "from",
            "matches",
            "group",
            "by",
            "winner_name",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "response_blank_res": "The name and rank points of the winner who won the most times is shown in the result table .",
        "response_toks_blank_res": [
            "The",
            "name",
            "and",
            "rank",
            "points",
            "of",
            "the",
            "winner",
            "who",
            "won",
            "the",
            "most",
            "times",
            "is",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ]
    },
    {
        "database_id": "network_1",
        "query": "SELECT name FROM Highschooler",
        "query_toks": [
            "select",
            "name",
            "from",
            "highschooler"
        ],
        "results_raw": [
            [
                "name"
            ],
            [
                "Jordan"
            ],
            [
                "Gabriel"
            ],
            [
                "Tiffany"
            ]
        ],
        "response": "the names of all of the high schoolers are shown  in  the table",
        "response_toks": [
            "the",
            "names",
            "of",
            "all",
            "of",
            "the",
            "high",
            "schoolers",
            "are",
            "shown",
            "in",
            "the",
            "table"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT name FROM Highschooler",
        "query_w_results_blank_res": "SELECT name FROM Highschooler",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "highschooler"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "highschooler"
        ],
        "response_blank_res": "the names of all of the high schoolers are shown in the table",
        "response_toks_blank_res": [
            "the",
            "names",
            "of",
            "all",
            "of",
            "the",
            "high",
            "schoolers",
            "are",
            "shown",
            "in",
            "the",
            "table"
        ]
    },
    {
        "database_id": "network_1",
        "query": "SELECT count ( * )  from  Likes  group by student_id order by  count ( * )  desc limit  1",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "likes",
            "group",
            "by",
            "student_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                1
            ]
        ],
        "response": "The amount of the greatest number of likes for each high schooler is 1.",
        "response_toks": [
            "The",
            "amount",
            "of",
            "the",
            "greatest",
            "number",
            "of",
            "likes",
            "for",
            "each",
            "high",
            "schooler",
            "is",
            "1",
            "."
        ],
        "results_map": {
            "result0": "1"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  from  Likes  group by student_id order by  count ( * )  desc limit  1 | 1 ",
        "query_w_results_blank_res": "SELECT count ( * )  from  Likes  group by student_id order by  count ( * )  desc limit  1 | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "likes",
            "group",
            "by",
            "student_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "likes",
            "group",
            "by",
            "student_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "The amount of the greatest number of likes for each high schooler is result0 .",
        "response_toks_blank_res": [
            "The",
            "amount",
            "of",
            "the",
            "greatest",
            "number",
            "of",
            "likes",
            "for",
            "each",
            "high",
            "schooler",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "network_1",
        "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count ( * )  DESC limit 1",
        "query_toks": [
            "select",
            "t2",
            ".",
            "name",
            "from",
            "likes",
            "as",
            "t1",
            "join",
            "highschooler",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "id",
            "group",
            "by",
            "t1",
            ".",
            "student_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "name"
            ],
            [
                "John"
            ]
        ],
        "response": "the name of the high schooler who has the greatest number of likes is John",
        "response_toks": [
            "the",
            "name",
            "of",
            "the",
            "high",
            "schooler",
            "who",
            "has",
            "the",
            "greatest",
            "number",
            "of",
            "likes",
            "is",
            "John"
        ],
        "results_map": {
            "result0": "John"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count ( * )  DESC limit 1 | John ",
        "query_w_results_blank_res": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count ( * )  DESC limit 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "name",
            "from",
            "likes",
            "as",
            "t1",
            "join",
            "highschooler",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "id",
            "group",
            "by",
            "t1",
            ".",
            "student_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1",
            "John"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "name",
            "from",
            "likes",
            "as",
            "t1",
            "join",
            "highschooler",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "id",
            "group",
            "by",
            "t1",
            ".",
            "student_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "the name of the high schooler who has the greatest number of likes is result0",
        "response_toks_blank_res": [
            "the",
            "name",
            "of",
            "the",
            "high",
            "schooler",
            "who",
            "has",
            "the",
            "greatest",
            "number",
            "of",
            "likes",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "real_estate_properties",
        "query": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code   =   T2.feature_type_code WHERE T1.feature_name   =   \"AirCon\"",
        "query_toks": [
            "select",
            "t2",
            ".",
            "feature_type_name",
            "from",
            "other_available_features",
            "as",
            "t1",
            "join",
            "ref_feature_types",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "feature_type_code",
            "=",
            "t2",
            ".",
            "feature_type_code",
            "where",
            "t1",
            ".",
            "feature_name",
            "=",
            "\"aircon\""
        ],
        "results_raw": [
            [
                "feature_type_name"
            ],
            [
                "Amenity, eg Pool."
            ]
        ],
        "response": "Amenity, eg Pool is the feature type name of the feature AirCon.",
        "response_toks": [
            "Amenity",
            ",",
            "eg",
            "Pool",
            "is",
            "the",
            "feature",
            "type",
            "name",
            "of",
            "the",
            "feature",
            "AirCon",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code   =   T2.feature_type_code WHERE T1.feature_name   =   \"AirCon\"",
        "query_w_results_blank_res": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code   =   T2.feature_type_code WHERE T1.feature_name   =   \"AirCon\"",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "feature_type_name",
            "from",
            "other_available_features",
            "as",
            "t1",
            "join",
            "ref_feature_types",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "feature_type_code",
            "=",
            "t2",
            ".",
            "feature_type_code",
            "where",
            "t1",
            ".",
            "feature_name",
            "=",
            "\"aircon\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "feature_type_name",
            "from",
            "other_available_features",
            "as",
            "t1",
            "join",
            "ref_feature_types",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "feature_type_code",
            "=",
            "t2",
            ".",
            "feature_type_code",
            "where",
            "t1",
            ".",
            "feature_name",
            "=",
            "\"aircon\""
        ],
        "response_blank_res": "Amenity , eg Pool is the feature type name of the feature AirCon .",
        "response_toks_blank_res": [
            "Amenity",
            ",",
            "eg",
            "Pool",
            "is",
            "the",
            "feature",
            "type",
            "name",
            "of",
            "the",
            "feature",
            "AirCon",
            "."
        ]
    },
    {
        "database_id": "real_estate_properties",
        "query": "select feature_description from Other_Available_Features  where feature_name  =  \"AirCon\"",
        "query_toks": [
            "select",
            "feature_description",
            "from",
            "other_available_features",
            "where",
            "feature_name",
            "=",
            "\"aircon\""
        ],
        "results_raw": [
            [
                "feature_description"
            ],
            [
                "Air Conditioning."
            ]
        ],
        "response": "Air Conditioning is the full feature description of the feature with name AirCon.",
        "response_toks": [
            "Air",
            "Conditioning",
            "is",
            "the",
            "full",
            "feature",
            "description",
            "of",
            "the",
            "feature",
            "with",
            "name",
            "AirCon",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "select feature_description from Other_Available_Features  where feature_name  =  \"AirCon\"",
        "query_w_results_blank_res": "select feature_description from Other_Available_Features  where feature_name  =  \"AirCon\"",
        "query_toks_w_results": [
            "select",
            "feature_description",
            "from",
            "other_available_features",
            "where",
            "feature_name",
            "=",
            "\"aircon\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "feature_description",
            "from",
            "other_available_features",
            "where",
            "feature_name",
            "=",
            "\"aircon\""
        ],
        "response_blank_res": "Air Conditioning is the full feature description of the feature with name AirCon .",
        "response_toks_blank_res": [
            "Air",
            "Conditioning",
            "is",
            "the",
            "full",
            "feature",
            "description",
            "of",
            "the",
            "feature",
            "with",
            "name",
            "AirCon",
            "."
        ]
    },
    {
        "database_id": "real_estate_properties",
        "query": "select count ( * )  from  ( select distinct feature_id from Other_Available_Features  ) ",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "(",
            "select",
            "distinct",
            "feature_id",
            "from",
            "other_available_features",
            ")"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                3
            ]
        ],
        "response": "There are 3 different feature ids.",
        "response_toks": [
            "There",
            "are",
            "3",
            "different",
            "feature",
            "ids",
            "."
        ],
        "results_map": {
            "result0": "3"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "select count ( * )  from  ( select distinct feature_id from Other_Available_Features  )  | 3 ",
        "query_w_results_blank_res": "select count ( * )  from  ( select distinct feature_id from Other_Available_Features  )  | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "(",
            "select",
            "distinct",
            "feature_id",
            "from",
            "other_available_features",
            ")",
            "3"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "(",
            "select",
            "distinct",
            "feature_id",
            "from",
            "other_available_features",
            ")",
            "result0"
        ],
        "response_blank_res": "There are result0 different feature ids .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "different",
            "feature",
            "ids",
            "."
        ]
    },
    {
        "database_id": "real_estate_properties",
        "query": "select feature_type_code from Other_Available_Features  where feature_name  =  \"AirCon\"",
        "query_toks": [
            "select",
            "feature_type_code",
            "from",
            "other_available_features",
            "where",
            "feature_name",
            "=",
            "\"aircon\""
        ],
        "results_raw": [
            [
                "feature_type_code"
            ],
            [
                "Amenity"
            ]
        ],
        "response": "Amenity is the feature type code that associated with the feature with name Aircon.",
        "response_toks": [
            "Amenity",
            "is",
            "the",
            "feature",
            "type",
            "code",
            "that",
            "associated",
            "with",
            "the",
            "feature",
            "with",
            "name",
            "Aircon",
            "."
        ],
        "results_map": {
            "result0": "Amenity"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "select feature_type_code from Other_Available_Features  where feature_name  =  \"AirCon\" | Amenity ",
        "query_w_results_blank_res": "select feature_type_code from Other_Available_Features  where feature_name  =  \"AirCon\" | result0 ",
        "query_toks_w_results": [
            "select",
            "feature_type_code",
            "from",
            "other_available_features",
            "where",
            "feature_name",
            "=",
            "\"aircon\"",
            "Amenity"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "feature_type_code",
            "from",
            "other_available_features",
            "where",
            "feature_name",
            "=",
            "\"aircon\"",
            "result0"
        ],
        "response_blank_res": "result0 is the feature type code that associated with the feature with name Aircon .",
        "response_toks_blank_res": [
            "result0",
            "is",
            "the",
            "feature",
            "type",
            "code",
            "that",
            "associated",
            "with",
            "the",
            "feature",
            "with",
            "name",
            "Aircon",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT transcript_date FROM Transcripts group by transcript_date order by count ( * )  asc limit 1",
        "query_toks": [
            "select",
            "transcript_date",
            "from",
            "transcripts",
            "group",
            "by",
            "transcript_date",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "asc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "transcript_date"
            ],
            [
                "1975-05-06 12:04:47"
            ]
        ],
        "response": "1975-05-06 12:04:47 is the transcript date that appears least often.",
        "response_toks": [
            "1975-05-06",
            "12:04:47",
            "is",
            "the",
            "transcript",
            "date",
            "that",
            "appears",
            "least",
            "often",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT transcript_date FROM Transcripts group by transcript_date order by count ( * )  asc limit 1",
        "query_w_results_blank_res": "SELECT transcript_date FROM Transcripts group by transcript_date order by count ( * )  asc limit 1",
        "query_toks_w_results": [
            "select",
            "transcript_date",
            "from",
            "transcripts",
            "group",
            "by",
            "transcript_date",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "asc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "transcript_date",
            "from",
            "transcripts",
            "group",
            "by",
            "transcript_date",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "asc",
            "limit",
            "1"
        ],
        "response_blank_res": "1975-05-06 12:04:47 is the transcript date that appears least often .",
        "response_toks_blank_res": [
            "1975-05-06",
            "12:04:47",
            "is",
            "the",
            "transcript",
            "date",
            "that",
            "appears",
            "least",
            "often",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT count ( * )  FROM Transcripts Where transcript_date  =  \"1975-05-06 12:04:47\"",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "transcripts",
            "where",
            "transcript_date",
            "=",
            "\"1975-05-06",
            "12:04:47\""
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                1
            ]
        ],
        "response": "There is one transcript with a date 1975-05-06 12:04:47.",
        "response_toks": [
            "There",
            "is",
            "one",
            "transcript",
            "with",
            "a",
            "date",
            "1975-05-06",
            "12:04:47",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT count ( * )  FROM Transcripts Where transcript_date  =  \"1975-05-06 12:04:47\"",
        "query_w_results_blank_res": "SELECT count ( * )  FROM Transcripts Where transcript_date  =  \"1975-05-06 12:04:47\"",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "transcripts",
            "where",
            "transcript_date",
            "=",
            "\"1975-05-06",
            "12:04:47\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "transcripts",
            "where",
            "transcript_date",
            "=",
            "\"1975-05-06",
            "12:04:47\""
        ],
        "response_blank_res": "There is one transcript with a date 1975-05-06 12:04:47 .",
        "response_toks_blank_res": [
            "There",
            "is",
            "one",
            "transcript",
            "with",
            "a",
            "date",
            "1975-05-06",
            "12:04:47",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT transcript_date FROM Transcripts GROUP BY transcript_date ORDER BY count ( * )  desc limit 1",
        "query_toks": [
            "select",
            "transcript_date",
            "from",
            "transcripts",
            "group",
            "by",
            "transcript_date",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "transcript_date"
            ],
            [
                "1975-05-06 12:04:47"
            ]
        ],
        "response": "1975-05-06 12:04:47 is the transcript date that shows up the most number of times.",
        "response_toks": [
            "1975-05-06",
            "12:04:47",
            "is",
            "the",
            "transcript",
            "date",
            "that",
            "shows",
            "up",
            "the",
            "most",
            "number",
            "of",
            "times",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT transcript_date FROM Transcripts GROUP BY transcript_date ORDER BY count ( * )  desc limit 1",
        "query_w_results_blank_res": "SELECT transcript_date FROM Transcripts GROUP BY transcript_date ORDER BY count ( * )  desc limit 1",
        "query_toks_w_results": [
            "select",
            "transcript_date",
            "from",
            "transcripts",
            "group",
            "by",
            "transcript_date",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "transcript_date",
            "from",
            "transcripts",
            "group",
            "by",
            "transcript_date",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "response_blank_res": "1975-05-06 12:04:47 is the transcript date that shows up the most number of times .",
        "response_toks_blank_res": [
            "1975-05-06",
            "12:04:47",
            "is",
            "the",
            "transcript",
            "date",
            "that",
            "shows",
            "up",
            "the",
            "most",
            "number",
            "of",
            "times",
            "."
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT T2.DestAirport FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T1.Airline  =  \"United Airlines\"",
        "query_toks": [
            "select",
            "t2",
            ".",
            "destairport",
            "from",
            "airlines",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "uid",
            "=",
            "t2",
            ".",
            "airline",
            "where",
            "t1",
            ".",
            "airline",
            "=",
            "\"united",
            "airlines\""
        ],
        "results_raw": [
            [
                "DestAirport"
            ],
            [
                " ASY"
            ],
            [
                " APG"
            ],
            [
                " ACV"
            ]
        ],
        "response": "These are the destination airports of the flights for United Airlines.",
        "response_toks": [
            "These",
            "are",
            "the",
            "destination",
            "airports",
            "of",
            "the",
            "flights",
            "for",
            "United",
            "Airlines",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T2.DestAirport FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T1.Airline  =  \"United Airlines\"",
        "query_w_results_blank_res": "SELECT T2.DestAirport FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T1.Airline  =  \"United Airlines\"",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "destairport",
            "from",
            "airlines",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "uid",
            "=",
            "t2",
            ".",
            "airline",
            "where",
            "t1",
            ".",
            "airline",
            "=",
            "\"united",
            "airlines\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "destairport",
            "from",
            "airlines",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "uid",
            "=",
            "t2",
            ".",
            "airline",
            "where",
            "t1",
            ".",
            "airline",
            "=",
            "\"united",
            "airlines\""
        ],
        "response_blank_res": "These are the destination airports of the flights for United Airlines .",
        "response_toks_blank_res": [
            "These",
            "are",
            "the",
            "destination",
            "airports",
            "of",
            "the",
            "flights",
            "for",
            "United",
            "Airlines",
            "."
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT COUNT ( T1.Airline )  FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.sourceAirport like \"%APG%\"",
        "query_toks": [
            "select",
            "count",
            "(",
            "t1",
            ".",
            "airline",
            ")",
            "from",
            "airlines",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "uid",
            "=",
            "t2",
            ".",
            "airline",
            "where",
            "t2",
            ".",
            "sourceairport",
            "like",
            "\"%apg%\""
        ],
        "results_raw": [
            [
                "COUNT(T1.Airline)"
            ],
            [
                11
            ]
        ],
        "response": "11 airlines have flights departing from APG.",
        "response_toks": [
            "11",
            "airlines",
            "have",
            "flights",
            "departing",
            "from",
            "APG",
            "."
        ],
        "results_map": {
            "result0": "11"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT COUNT ( T1.Airline )  FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.sourceAirport like \"%APG%\" | 11 ",
        "query_w_results_blank_res": "SELECT COUNT ( T1.Airline )  FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.sourceAirport like \"%APG%\" | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "t1",
            ".",
            "airline",
            ")",
            "from",
            "airlines",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "uid",
            "=",
            "t2",
            ".",
            "airline",
            "where",
            "t2",
            ".",
            "sourceairport",
            "like",
            "\"%apg%\"",
            "11"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "t1",
            ".",
            "airline",
            ")",
            "from",
            "airlines",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "uid",
            "=",
            "t2",
            ".",
            "airline",
            "where",
            "t2",
            ".",
            "sourceairport",
            "like",
            "\"%apg%\"",
            "result0"
        ],
        "response_blank_res": "result0 airlines have flights departing from APG .",
        "response_toks_blank_res": [
            "result0",
            "airlines",
            "have",
            "flights",
            "departing",
            "from",
            "APG",
            "."
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT T2.FlightNo FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T1.Airline  =  \"Delta Airlines\"",
        "query_toks": [
            "select",
            "t2",
            ".",
            "flightno",
            "from",
            "airlines",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "uid",
            "=",
            "t2",
            ".",
            "airline",
            "where",
            "t1",
            ".",
            "airline",
            "=",
            "\"delta",
            "airlines\""
        ],
        "results_raw": [
            [
                "FlightNo"
            ],
            [
                2
            ],
            [
                3
            ],
            [
                26
            ]
        ],
        "response": "These are the flight numbers of all flights on Delta Airlines.",
        "response_toks": [
            "These",
            "are",
            "the",
            "flight",
            "numbers",
            "of",
            "all",
            "flights",
            "on",
            "Delta",
            "Airlines",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T2.FlightNo FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T1.Airline  =  \"Delta Airlines\"",
        "query_w_results_blank_res": "SELECT T2.FlightNo FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T1.Airline  =  \"Delta Airlines\"",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "flightno",
            "from",
            "airlines",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "uid",
            "=",
            "t2",
            ".",
            "airline",
            "where",
            "t1",
            ".",
            "airline",
            "=",
            "\"delta",
            "airlines\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "flightno",
            "from",
            "airlines",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "uid",
            "=",
            "t2",
            ".",
            "airline",
            "where",
            "t1",
            ".",
            "airline",
            "=",
            "\"delta",
            "airlines\""
        ],
        "response_blank_res": "These are the flight numbers of all flights on Delta Airlines .",
        "response_toks_blank_res": [
            "These",
            "are",
            "the",
            "flight",
            "numbers",
            "of",
            "all",
            "flights",
            "on",
            "Delta",
            "Airlines",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT count ( * )  FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker   =   T2.Id JOIN COUNTRIES AS T3 ON T2.Country   =   T3.CountryId WHERE T3.CountryName   =   'usa'",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "model_list",
            "as",
            "t1",
            "join",
            "car_makers",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "maker",
            "=",
            "t2",
            ".",
            "id",
            "join",
            "countries",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "country",
            "=",
            "t3",
            ".",
            "countryid",
            "where",
            "t3",
            ".",
            "countryname",
            "=",
            "'usa'"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                13
            ]
        ],
        "response": "There are 13 car models produced by makers in the usa.",
        "response_toks": [
            "There",
            "are",
            "13",
            "car",
            "models",
            "produced",
            "by",
            "makers",
            "in",
            "the",
            "usa",
            "."
        ],
        "results_map": {
            "result0": "13"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker   =   T2.Id JOIN COUNTRIES AS T3 ON T2.Country   =   T3.CountryId WHERE T3.CountryName   =   'usa' | 13 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker   =   T2.Id JOIN COUNTRIES AS T3 ON T2.Country   =   T3.CountryId WHERE T3.CountryName   =   'usa' | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "model_list",
            "as",
            "t1",
            "join",
            "car_makers",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "maker",
            "=",
            "t2",
            ".",
            "id",
            "join",
            "countries",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "country",
            "=",
            "t3",
            ".",
            "countryid",
            "where",
            "t3",
            ".",
            "countryname",
            "=",
            "'usa'",
            "13"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "model_list",
            "as",
            "t1",
            "join",
            "car_makers",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "maker",
            "=",
            "t2",
            ".",
            "id",
            "join",
            "countries",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "country",
            "=",
            "t3",
            ".",
            "countryid",
            "where",
            "t3",
            ".",
            "countryname",
            "=",
            "'usa'",
            "result0"
        ],
        "response_blank_res": "There are result0 car models produced by makers in the usa .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "car",
            "models",
            "produced",
            "by",
            "makers",
            "in",
            "the",
            "usa",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT distinct t1.maker FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country   =   T2.CountryId WHERE T2.CountryName   =   'usa'",
        "query_toks": [
            "select",
            "distinct",
            "t1",
            ".",
            "maker",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "countries",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "country",
            "=",
            "t2",
            ".",
            "countryid",
            "where",
            "t2",
            ".",
            "countryname",
            "=",
            "'usa'"
        ],
        "results_raw": [
            [
                "Maker"
            ],
            [
                "amc"
            ],
            [
                "gm"
            ],
            [
                "ford"
            ]
        ],
        "response": "Here is the list that contains all the car makers that are in the USA.",
        "response_toks": [
            "Here",
            "is",
            "the",
            "list",
            "that",
            "contains",
            "all",
            "the",
            "car",
            "makers",
            "that",
            "are",
            "in",
            "the",
            "USA",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT distinct t1.maker FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country   =   T2.CountryId WHERE T2.CountryName   =   'usa'",
        "query_w_results_blank_res": "SELECT distinct t1.maker FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country   =   T2.CountryId WHERE T2.CountryName   =   'usa'",
        "query_toks_w_results": [
            "select",
            "distinct",
            "t1",
            ".",
            "maker",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "countries",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "country",
            "=",
            "t2",
            ".",
            "countryid",
            "where",
            "t2",
            ".",
            "countryname",
            "=",
            "'usa'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "t1",
            ".",
            "maker",
            "from",
            "car_makers",
            "as",
            "t1",
            "join",
            "countries",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "country",
            "=",
            "t2",
            ".",
            "countryid",
            "where",
            "t2",
            ".",
            "countryname",
            "=",
            "'usa'"
        ],
        "response_blank_res": "Here is the list that contains all the car makers that are in the USA .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "list",
            "that",
            "contains",
            "all",
            "the",
            "car",
            "makers",
            "that",
            "are",
            "in",
            "the",
            "USA",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "select count (  * )  from model_list as t1 join car_makers as t2 where t1.maker  =  t2.id and t2.maker  =  \"ford\"",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "model_list",
            "as",
            "t1",
            "join",
            "car_makers",
            "as",
            "t2",
            "where",
            "t1",
            ".",
            "maker",
            "=",
            "t2",
            ".",
            "id",
            "and",
            "t2",
            ".",
            "maker",
            "=",
            "\"ford\""
        ],
        "results_raw": [
            [
                "count( *)"
            ],
            [
                3
            ]
        ],
        "response": "There are three models that are produced by ford maker.",
        "response_toks": [
            "There",
            "are",
            "three",
            "models",
            "that",
            "are",
            "produced",
            "by",
            "ford",
            "maker",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "select count (  * )  from model_list as t1 join car_makers as t2 where t1.maker  =  t2.id and t2.maker  =  \"ford\"",
        "query_w_results_blank_res": "select count (  * )  from model_list as t1 join car_makers as t2 where t1.maker  =  t2.id and t2.maker  =  \"ford\"",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "model_list",
            "as",
            "t1",
            "join",
            "car_makers",
            "as",
            "t2",
            "where",
            "t1",
            ".",
            "maker",
            "=",
            "t2",
            ".",
            "id",
            "and",
            "t2",
            ".",
            "maker",
            "=",
            "\"ford\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "model_list",
            "as",
            "t1",
            "join",
            "car_makers",
            "as",
            "t2",
            "where",
            "t1",
            ".",
            "maker",
            "=",
            "t2",
            ".",
            "id",
            "and",
            "t2",
            ".",
            "maker",
            "=",
            "\"ford\""
        ],
        "response_blank_res": "There are three models that are produced by ford maker .",
        "response_toks_blank_res": [
            "There",
            "are",
            "three",
            "models",
            "that",
            "are",
            "produced",
            "by",
            "ford",
            "maker",
            "."
        ]
    },
    {
        "database_id": "network_1",
        "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id   =   T2.id GROUP BY T1.student_id HAVING count ( * )    > =    2",
        "query_toks": [
            "select",
            "t2",
            ".",
            "name",
            "from",
            "likes",
            "as",
            "t1",
            "join",
            "highschooler",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "id",
            "group",
            "by",
            "t1",
            ".",
            "student_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "results_raw": [
            [
                "name"
            ]
        ],
        "response": "There isn't any student who has at least 2 likes.",
        "response_toks": [
            "There",
            "is",
            "n't",
            "any",
            "student",
            "who",
            "has",
            "at",
            "least",
            "2",
            "likes",
            "."
        ],
        "results_map": null,
        "results_blank_res": null,
        "query_w_results": null,
        "query_w_results_blank_res": null,
        "query_toks_w_results": null,
        "query_toks_w_results_blank_res": null,
        "response_blank_res": null,
        "response_toks_blank_res": null
    },
    {
        "database_id": "network_1",
        "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id   =   T2.id GROUP BY T1.student_id HAVING count ( * )    > =    1",
        "query_toks": [
            "select",
            "t2",
            ".",
            "name",
            "from",
            "likes",
            "as",
            "t1",
            "join",
            "highschooler",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "id",
            "group",
            "by",
            "t1",
            ".",
            "student_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "1"
        ],
        "results_raw": [
            [
                "name"
            ],
            [
                "John"
            ],
            [
                "Alexis"
            ],
            [
                "Austin"
            ]
        ],
        "response": "Here are the names of students who have at least 1 like",
        "response_toks": [
            "Here",
            "are",
            "the",
            "names",
            "of",
            "students",
            "who",
            "have",
            "at",
            "least",
            "1",
            "like"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id   =   T2.id GROUP BY T1.student_id HAVING count ( * )    > =    1",
        "query_w_results_blank_res": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id   =   T2.id GROUP BY T1.student_id HAVING count ( * )    > =    1",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "name",
            "from",
            "likes",
            "as",
            "t1",
            "join",
            "highschooler",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "id",
            "group",
            "by",
            "t1",
            ".",
            "student_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "name",
            "from",
            "likes",
            "as",
            "t1",
            "join",
            "highschooler",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "id",
            "group",
            "by",
            "t1",
            ".",
            "student_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "1"
        ],
        "response_blank_res": "Here are the names of students who have at least 1 like",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "names",
            "of",
            "students",
            "who",
            "have",
            "at",
            "least",
            "1",
            "like"
        ]
    },
    {
        "database_id": "network_1",
        "query": "SELECT T2.id FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id   =   T2.id GROUP BY T1.student_id HAVING count ( * )    > =    1",
        "query_toks": [
            "select",
            "t2",
            ".",
            "id",
            "from",
            "likes",
            "as",
            "t1",
            "join",
            "highschooler",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "id",
            "group",
            "by",
            "t1",
            ".",
            "student_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "1"
        ],
        "results_raw": [
            [
                "ID"
            ],
            [
                1025
            ],
            [
                1247
            ],
            [
                1316
            ]
        ],
        "response": "Here are the ids of students who have at least 1 like",
        "response_toks": [
            "Here",
            "are",
            "the",
            "ids",
            "of",
            "students",
            "who",
            "have",
            "at",
            "least",
            "1",
            "like"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T2.id FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id   =   T2.id GROUP BY T1.student_id HAVING count ( * )    > =    1",
        "query_w_results_blank_res": "SELECT T2.id FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id   =   T2.id GROUP BY T1.student_id HAVING count ( * )    > =    1",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "id",
            "from",
            "likes",
            "as",
            "t1",
            "join",
            "highschooler",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "id",
            "group",
            "by",
            "t1",
            ".",
            "student_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "id",
            "from",
            "likes",
            "as",
            "t1",
            "join",
            "highschooler",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "id",
            "group",
            "by",
            "t1",
            ".",
            "student_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "1"
        ],
        "response_blank_res": "Here are the ids of students who have at least 1 like",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "ids",
            "of",
            "students",
            "who",
            "have",
            "at",
            "least",
            "1",
            "like"
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT DestAirport FROM flights WHERE airline   =   \"1\"",
        "query_toks": [
            "select",
            "destairport",
            "from",
            "flights",
            "where",
            "airline",
            "=",
            "\"1\""
        ],
        "results_raw": [
            [
                "DestAirport"
            ],
            [
                " ASY"
            ],
            [
                " APG"
            ],
            [
                " ACV"
            ]
        ],
        "response": "Here is the result table of the dest airports of airline 1. For example, one of them is ASY.",
        "response_toks": [
            "Here",
            "is",
            "the",
            "result",
            "table",
            "of",
            "the",
            "dest",
            "airports",
            "of",
            "airline",
            "1",
            ".",
            "For",
            "example",
            ",",
            "one",
            "of",
            "them",
            "is",
            "ASY",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT DestAirport FROM flights WHERE airline   =   \"1\"",
        "query_w_results_blank_res": "SELECT DestAirport FROM flights WHERE airline   =   \"1\"",
        "query_toks_w_results": [
            "select",
            "destairport",
            "from",
            "flights",
            "where",
            "airline",
            "=",
            "\"1\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "destairport",
            "from",
            "flights",
            "where",
            "airline",
            "=",
            "\"1\""
        ],
        "response_blank_res": "Here is the result table of the dest airports of airline 1 . For example , one of them is ASY .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "result",
            "table",
            "of",
            "the",
            "dest",
            "airports",
            "of",
            "airline",
            "1",
            ".",
            "For",
            "example",
            ",",
            "one",
            "of",
            "them",
            "is",
            "ASY",
            "."
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT COUNTRY FROM AIRLINES WHERE AIRLINE   =   \"United Airlines\"",
        "query_toks": [
            "select",
            "country",
            "from",
            "airlines",
            "where",
            "airline",
            "=",
            "\"united",
            "airlines\""
        ],
        "results_raw": [
            [
                "Country"
            ],
            [
                "USA"
            ]
        ],
        "response": "the country of united airlines is USA",
        "response_toks": [
            "the",
            "country",
            "of",
            "united",
            "airlines",
            "is",
            "USA"
        ],
        "results_map": {
            "result0": "USA"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT COUNTRY FROM AIRLINES WHERE AIRLINE   =   \"United Airlines\" | USA ",
        "query_w_results_blank_res": "SELECT COUNTRY FROM AIRLINES WHERE AIRLINE   =   \"United Airlines\" | result0 ",
        "query_toks_w_results": [
            "select",
            "country",
            "from",
            "airlines",
            "where",
            "airline",
            "=",
            "\"united",
            "airlines\"",
            "USA"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "country",
            "from",
            "airlines",
            "where",
            "airline",
            "=",
            "\"united",
            "airlines\"",
            "result0"
        ],
        "response_blank_res": "the country of united airlines is result0",
        "response_toks_blank_res": [
            "the",
            "country",
            "of",
            "united",
            "airlines",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT SourceAirport FROM flights WHERE DestAirport   =   \"ASY\"",
        "query_toks": [
            "select",
            "sourceairport",
            "from",
            "flights",
            "where",
            "destairport",
            "=",
            "\"asy\""
        ],
        "results_raw": [
            [
                "SourceAirport"
            ]
        ],
        "response": "There is no destination airport for ASY.",
        "response_toks": [
            "There",
            "is",
            "no",
            "destination",
            "airport",
            "for",
            "ASY",
            "."
        ],
        "results_map": null,
        "results_blank_res": null,
        "query_w_results": null,
        "query_w_results_blank_res": null,
        "query_toks_w_results": null,
        "query_toks_w_results_blank_res": null,
        "response_blank_res": null,
        "response_toks_blank_res": null
    },
    {
        "database_id": "flight_2",
        "query": "SELECT country FROM Airlines WHERE Airline   =   \"US Airways\"",
        "query_toks": [
            "select",
            "country",
            "from",
            "airlines",
            "where",
            "airline",
            "=",
            "\"us",
            "airways\""
        ],
        "results_raw": [
            [
                "Country"
            ],
            [
                "USA"
            ]
        ],
        "response": "the country of us airways is the USA",
        "response_toks": [
            "the",
            "country",
            "of",
            "us",
            "airways",
            "is",
            "the",
            "USA"
        ],
        "results_map": {
            "result0": "USA"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT country FROM Airlines WHERE Airline   =   \"US Airways\" | USA ",
        "query_w_results_blank_res": "SELECT country FROM Airlines WHERE Airline   =   \"US Airways\" | result0 ",
        "query_toks_w_results": [
            "select",
            "country",
            "from",
            "airlines",
            "where",
            "airline",
            "=",
            "\"us",
            "airways\"",
            "USA"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "country",
            "from",
            "airlines",
            "where",
            "airline",
            "=",
            "\"us",
            "airways\"",
            "result0"
        ],
        "response_blank_res": "the country of us airways is the result0",
        "response_toks_blank_res": [
            "the",
            "country",
            "of",
            "us",
            "airways",
            "is",
            "the",
            "result0"
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT Airline FROM Airlines WHERE country   =   \"USA\"",
        "query_toks": [
            "select",
            "airline",
            "from",
            "airlines",
            "where",
            "country",
            "=",
            "\"usa\""
        ],
        "results_raw": [
            [
                "Airline"
            ],
            [
                "United Airlines"
            ],
            [
                "US Airways"
            ],
            [
                "Delta Airlines"
            ]
        ],
        "response": "Here is the result table of the airlines of country usa. For example, one of them is United Airlines.",
        "response_toks": [
            "Here",
            "is",
            "the",
            "result",
            "table",
            "of",
            "the",
            "airlines",
            "of",
            "country",
            "usa",
            ".",
            "For",
            "example",
            ",",
            "one",
            "of",
            "them",
            "is",
            "United",
            "Airlines",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Airline FROM Airlines WHERE country   =   \"USA\"",
        "query_w_results_blank_res": "SELECT Airline FROM Airlines WHERE country   =   \"USA\"",
        "query_toks_w_results": [
            "select",
            "airline",
            "from",
            "airlines",
            "where",
            "country",
            "=",
            "\"usa\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "airline",
            "from",
            "airlines",
            "where",
            "country",
            "=",
            "\"usa\""
        ],
        "response_blank_res": "Here is the result table of the airlines of country usa . For example , one of them is United Airlines .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "result",
            "table",
            "of",
            "the",
            "airlines",
            "of",
            "country",
            "usa",
            ".",
            "For",
            "example",
            ",",
            "one",
            "of",
            "them",
            "is",
            "United",
            "Airlines",
            "."
        ]
    },
    {
        "database_id": "network_1",
        "query": "SELECT AVG ( grade )  FROM Highschooler",
        "query_toks": [
            "select",
            "avg",
            "(",
            "grade",
            ")",
            "from",
            "highschooler"
        ],
        "results_raw": [
            [
                "AVG(grade)"
            ],
            [
                10.5
            ]
        ],
        "response": "The average grade is 10.5.",
        "response_toks": [
            "The",
            "average",
            "grade",
            "is",
            "10.5",
            "."
        ],
        "results_map": {
            "result0": "10.5"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT AVG ( grade )  FROM Highschooler | 10.5 ",
        "query_w_results_blank_res": "SELECT AVG ( grade )  FROM Highschooler | result0 ",
        "query_toks_w_results": [
            "select",
            "avg",
            "(",
            "grade",
            ")",
            "from",
            "highschooler",
            "10.5"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "avg",
            "(",
            "grade",
            ")",
            "from",
            "highschooler",
            "result0"
        ],
        "response_blank_res": "The average grade is result0 .",
        "response_toks_blank_res": [
            "The",
            "average",
            "grade",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "network_1",
        "query": "SELECT AVG ( grade )  FROM Highschooler",
        "query_toks": [
            "select",
            "avg",
            "(",
            "grade",
            ")",
            "from",
            "highschooler"
        ],
        "results_raw": [
            [
                "AVG(grade)"
            ],
            [
                10.5
            ]
        ],
        "response": "These are the names of highschoolers that start with 'A'",
        "response_toks": [
            "These",
            "are",
            "the",
            "names",
            "of",
            "highschoolers",
            "that",
            "start",
            "with",
            "'A",
            "'"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT AVG ( grade )  FROM Highschooler",
        "query_w_results_blank_res": "SELECT AVG ( grade )  FROM Highschooler",
        "query_toks_w_results": [
            "select",
            "avg",
            "(",
            "grade",
            ")",
            "from",
            "highschooler"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "avg",
            "(",
            "grade",
            ")",
            "from",
            "highschooler"
        ],
        "response_blank_res": "These are the names of highschoolers that start with 'A '",
        "response_toks_blank_res": [
            "These",
            "are",
            "the",
            "names",
            "of",
            "highschoolers",
            "that",
            "start",
            "with",
            "'A",
            "'"
        ]
    },
    {
        "database_id": "network_1",
        "query": "SELECT MAX ( grade )  FROM Highschooler",
        "query_toks": [
            "select",
            "max",
            "(",
            "grade",
            ")",
            "from",
            "highschooler"
        ],
        "results_raw": [
            [
                "MAX(grade)"
            ],
            [
                12
            ]
        ],
        "response": "The highest grade is 12.",
        "response_toks": [
            "The",
            "highest",
            "grade",
            "is",
            "12",
            "."
        ],
        "results_map": {
            "result0": "12"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT MAX ( grade )  FROM Highschooler | 12 ",
        "query_w_results_blank_res": "SELECT MAX ( grade )  FROM Highschooler | result0 ",
        "query_toks_w_results": [
            "select",
            "max",
            "(",
            "grade",
            ")",
            "from",
            "highschooler",
            "12"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "max",
            "(",
            "grade",
            ")",
            "from",
            "highschooler",
            "result0"
        ],
        "response_blank_res": "The highest grade is result0 .",
        "response_toks_blank_res": [
            "The",
            "highest",
            "grade",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "poker_player",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T2.Final_Table_Made",
        "query_toks": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "people",
            "as",
            "t1",
            "join",
            "poker_player",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "people_id",
            "=",
            "t2",
            ".",
            "people_id",
            "order",
            "by",
            "t2",
            ".",
            "final_table_made"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Teodor Salparov"
            ],
            [
                "Maksim Botin"
            ],
            [
                "Yevgeni Sivozhelez"
            ]
        ],
        "response": "Here is the table of the names of the poker players in ascending order of final tables.",
        "response_toks": [
            "Here",
            "is",
            "the",
            "table",
            "of",
            "the",
            "names",
            "of",
            "the",
            "poker",
            "players",
            "in",
            "ascending",
            "order",
            "of",
            "final",
            "tables",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T2.Final_Table_Made",
        "query_w_results_blank_res": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T2.Final_Table_Made",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "people",
            "as",
            "t1",
            "join",
            "poker_player",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "people_id",
            "=",
            "t2",
            ".",
            "people_id",
            "order",
            "by",
            "t2",
            ".",
            "final_table_made"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "people",
            "as",
            "t1",
            "join",
            "poker_player",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "people_id",
            "=",
            "t2",
            ".",
            "people_id",
            "order",
            "by",
            "t2",
            ".",
            "final_table_made"
        ],
        "response_blank_res": "Here is the table of the names of the poker players in ascending order of final tables .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "table",
            "of",
            "the",
            "names",
            "of",
            "the",
            "poker",
            "players",
            "in",
            "ascending",
            "order",
            "of",
            "final",
            "tables",
            "."
        ]
    },
    {
        "database_id": "poker_player",
        "query": "SELECT T1.Nationality FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T2.Final_Table_Made",
        "query_toks": [
            "select",
            "t1",
            ".",
            "nationality",
            "from",
            "people",
            "as",
            "t1",
            "join",
            "poker_player",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "people_id",
            "=",
            "t2",
            ".",
            "people_id",
            "order",
            "by",
            "t2",
            ".",
            "final_table_made"
        ],
        "results_raw": [
            [
                "Nationality"
            ],
            [
                "Bulgaria"
            ],
            [
                "Russia"
            ],
            [
                "Russia"
            ]
        ],
        "response": "Here is the table of their nationalities ordered by the final tables in ascending order.",
        "response_toks": [
            "Here",
            "is",
            "the",
            "table",
            "of",
            "their",
            "nationalities",
            "ordered",
            "by",
            "the",
            "final",
            "tables",
            "in",
            "ascending",
            "order",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.Nationality FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T2.Final_Table_Made",
        "query_w_results_blank_res": "SELECT T1.Nationality FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T2.Final_Table_Made",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "nationality",
            "from",
            "people",
            "as",
            "t1",
            "join",
            "poker_player",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "people_id",
            "=",
            "t2",
            ".",
            "people_id",
            "order",
            "by",
            "t2",
            ".",
            "final_table_made"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "nationality",
            "from",
            "people",
            "as",
            "t1",
            "join",
            "poker_player",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "people_id",
            "=",
            "t2",
            ".",
            "people_id",
            "order",
            "by",
            "t2",
            ".",
            "final_table_made"
        ],
        "response_blank_res": "Here is the table of their nationalities ordered by the final tables in ascending order .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "table",
            "of",
            "their",
            "nationalities",
            "ordered",
            "by",
            "the",
            "final",
            "tables",
            "in",
            "ascending",
            "order",
            "."
        ]
    },
    {
        "database_id": "poker_player",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T2.Earnings desc limit 1",
        "query_toks": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "people",
            "as",
            "t1",
            "join",
            "poker_player",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "people_id",
            "=",
            "t2",
            ".",
            "people_id",
            "order",
            "by",
            "t2",
            ".",
            "earnings",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Maksim Botin"
            ]
        ],
        "response": "Maksim Botin is the poker player with the highest earnings",
        "response_toks": [
            "Maksim",
            "Botin",
            "is",
            "the",
            "poker",
            "player",
            "with",
            "the",
            "highest",
            "earnings"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T2.Earnings desc limit 1",
        "query_w_results_blank_res": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T2.Earnings desc limit 1",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "people",
            "as",
            "t1",
            "join",
            "poker_player",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "people_id",
            "=",
            "t2",
            ".",
            "people_id",
            "order",
            "by",
            "t2",
            ".",
            "earnings",
            "desc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "people",
            "as",
            "t1",
            "join",
            "poker_player",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "people_id",
            "=",
            "t2",
            ".",
            "people_id",
            "order",
            "by",
            "t2",
            ".",
            "earnings",
            "desc",
            "limit",
            "1"
        ],
        "response_blank_res": "Maksim Botin is the poker player with the highest earnings",
        "response_toks_blank_res": [
            "Maksim",
            "Botin",
            "is",
            "the",
            "poker",
            "player",
            "with",
            "the",
            "highest",
            "earnings"
        ]
    },
    {
        "database_id": "poker_player",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T2.Earnings limit 1",
        "query_toks": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "people",
            "as",
            "t1",
            "join",
            "poker_player",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "people_id",
            "=",
            "t2",
            ".",
            "people_id",
            "order",
            "by",
            "t2",
            ".",
            "earnings",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Yevgeni Sivozhelez"
            ]
        ],
        "response": "The poker player with the lowest earnings is Yevgeni Sivozhelez",
        "response_toks": [
            "The",
            "poker",
            "player",
            "with",
            "the",
            "lowest",
            "earnings",
            "is",
            "Yevgeni",
            "Sivozhelez"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T2.Earnings limit 1",
        "query_w_results_blank_res": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T2.Earnings limit 1",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "people",
            "as",
            "t1",
            "join",
            "poker_player",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "people_id",
            "=",
            "t2",
            ".",
            "people_id",
            "order",
            "by",
            "t2",
            ".",
            "earnings",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "name",
            "from",
            "people",
            "as",
            "t1",
            "join",
            "poker_player",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "people_id",
            "=",
            "t2",
            ".",
            "people_id",
            "order",
            "by",
            "t2",
            ".",
            "earnings",
            "limit",
            "1"
        ],
        "response_blank_res": "The poker player with the lowest earnings is Yevgeni Sivozhelez",
        "response_toks_blank_res": [
            "The",
            "poker",
            "player",
            "with",
            "the",
            "lowest",
            "earnings",
            "is",
            "Yevgeni",
            "Sivozhelez"
        ]
    },
    {
        "database_id": "poker_player",
        "query": "SELECT T2.Best_Finish FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T2.Earnings  limit 1",
        "query_toks": [
            "select",
            "t2",
            ".",
            "best_finish",
            "from",
            "people",
            "as",
            "t1",
            "join",
            "poker_player",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "people_id",
            "=",
            "t2",
            ".",
            "people_id",
            "order",
            "by",
            "t2",
            ".",
            "earnings",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Best_Finish"
            ],
            [
                1.0
            ]
        ],
        "response": "The best finish of the poker player with the lowest earning is 1.0.",
        "response_toks": [
            "The",
            "best",
            "finish",
            "of",
            "the",
            "poker",
            "player",
            "with",
            "the",
            "lowest",
            "earning",
            "is",
            "1.0",
            "."
        ],
        "results_map": {
            "result0": "1.0"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT T2.Best_Finish FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T2.Earnings  limit 1 | 1.0 ",
        "query_w_results_blank_res": "SELECT T2.Best_Finish FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T2.Earnings  limit 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "best_finish",
            "from",
            "people",
            "as",
            "t1",
            "join",
            "poker_player",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "people_id",
            "=",
            "t2",
            ".",
            "people_id",
            "order",
            "by",
            "t2",
            ".",
            "earnings",
            "limit",
            "1",
            "1.0"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "best_finish",
            "from",
            "people",
            "as",
            "t1",
            "join",
            "poker_player",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "people_id",
            "=",
            "t2",
            ".",
            "people_id",
            "order",
            "by",
            "t2",
            ".",
            "earnings",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "The best finish of the poker player with the lowest earning is result0 .",
        "response_toks_blank_res": [
            "The",
            "best",
            "finish",
            "of",
            "the",
            "poker",
            "player",
            "with",
            "the",
            "lowest",
            "earning",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "select transcript_date from Transcripts",
        "query_toks": [
            "select",
            "transcript_date",
            "from",
            "transcripts"
        ],
        "results_raw": [
            [
                "transcript_date"
            ],
            [
                "1988-04-30 01:19:47"
            ],
            [
                "1975-10-28 15:16:51"
            ],
            [
                "1984-12-19 00:37:21"
            ]
        ],
        "response": "this shows the release dates for transcripts",
        "response_toks": [
            "this",
            "shows",
            "the",
            "release",
            "dates",
            "for",
            "transcripts"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "select transcript_date from Transcripts",
        "query_w_results_blank_res": "select transcript_date from Transcripts",
        "query_toks_w_results": [
            "select",
            "transcript_date",
            "from",
            "transcripts"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "transcript_date",
            "from",
            "transcripts"
        ],
        "response_blank_res": "this shows the release dates for transcripts",
        "response_toks_blank_res": [
            "this",
            "shows",
            "the",
            "release",
            "dates",
            "for",
            "transcripts"
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "query_toks": [
            "select",
            "transcript_date",
            "from",
            "transcripts",
            "order",
            "by",
            "transcript_date",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "transcript_date"
            ],
            [
                "2013-06-30 13:01:40"
            ]
        ],
        "response": "the most recent date for release of transcripts is 2013-06-30 13:01:40",
        "response_toks": [
            "the",
            "most",
            "recent",
            "date",
            "for",
            "release",
            "of",
            "transcripts",
            "is",
            "2013-06-30",
            "13:01:40"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "query_w_results_blank_res": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "query_toks_w_results": [
            "select",
            "transcript_date",
            "from",
            "transcripts",
            "order",
            "by",
            "transcript_date",
            "desc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "transcript_date",
            "from",
            "transcripts",
            "order",
            "by",
            "transcript_date",
            "desc",
            "limit",
            "1"
        ],
        "response_blank_res": "the most recent date for release of transcripts is 2013-06-30 13:01:40",
        "response_toks_blank_res": [
            "the",
            "most",
            "recent",
            "date",
            "for",
            "release",
            "of",
            "transcripts",
            "is",
            "2013-06-30",
            "13:01:40"
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "query_toks": [
            "select",
            "transcript_date",
            "from",
            "transcripts",
            "order",
            "by",
            "transcript_date",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "transcript_date"
            ],
            [
                "2013-06-30 13:01:40"
            ]
        ],
        "response": "The last transcript release date is 2013-06-30 13:01:40",
        "response_toks": [
            "The",
            "last",
            "transcript",
            "release",
            "date",
            "is",
            "2013-06-30",
            "13:01:40"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "query_w_results_blank_res": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "query_toks_w_results": [
            "select",
            "transcript_date",
            "from",
            "transcripts",
            "order",
            "by",
            "transcript_date",
            "desc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "transcript_date",
            "from",
            "transcripts",
            "order",
            "by",
            "transcript_date",
            "desc",
            "limit",
            "1"
        ],
        "response_blank_res": "The last transcript release date is 2013-06-30 13:01:40",
        "response_toks_blank_res": [
            "The",
            "last",
            "transcript",
            "release",
            "date",
            "is",
            "2013-06-30",
            "13:01:40"
        ]
    },
    {
        "database_id": "tvshow",
        "query": "SELECT Title FROM cartoon ORDER BY original_air_date LIMIT 1",
        "query_toks": [
            "select",
            "title",
            "from",
            "cartoon",
            "order",
            "by",
            "original_air_date",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Title"
            ],
            [
                "Invasion of the Secret Santas!"
            ]
        ],
        "response": "This is the most recently aired cartoon.",
        "response_toks": [
            "This",
            "is",
            "the",
            "most",
            "recently",
            "aired",
            "cartoon",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Title FROM cartoon ORDER BY original_air_date LIMIT 1",
        "query_w_results_blank_res": "SELECT Title FROM cartoon ORDER BY original_air_date LIMIT 1",
        "query_toks_w_results": [
            "select",
            "title",
            "from",
            "cartoon",
            "order",
            "by",
            "original_air_date",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "title",
            "from",
            "cartoon",
            "order",
            "by",
            "original_air_date",
            "limit",
            "1"
        ],
        "response_blank_res": "This is the most recently aired cartoon .",
        "response_toks_blank_res": [
            "This",
            "is",
            "the",
            "most",
            "recently",
            "aired",
            "cartoon",
            "."
        ]
    },
    {
        "database_id": "tvshow",
        "query": "SELECT Channel FROM cartoon ORDER BY original_air_date LIMIT 1",
        "query_toks": [
            "select",
            "channel",
            "from",
            "cartoon",
            "order",
            "by",
            "original_air_date",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Channel"
            ],
            [
                "705"
            ]
        ],
        "response": "This is the channel of the most recently aired cartoon.",
        "response_toks": [
            "This",
            "is",
            "the",
            "channel",
            "of",
            "the",
            "most",
            "recently",
            "aired",
            "cartoon",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Channel FROM cartoon ORDER BY original_air_date LIMIT 1",
        "query_w_results_blank_res": "SELECT Channel FROM cartoon ORDER BY original_air_date LIMIT 1",
        "query_toks_w_results": [
            "select",
            "channel",
            "from",
            "cartoon",
            "order",
            "by",
            "original_air_date",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "channel",
            "from",
            "cartoon",
            "order",
            "by",
            "original_air_date",
            "limit",
            "1"
        ],
        "response_blank_res": "This is the channel of the most recently aired cartoon .",
        "response_toks_blank_res": [
            "This",
            "is",
            "the",
            "channel",
            "of",
            "the",
            "most",
            "recently",
            "aired",
            "cartoon",
            "."
        ]
    },
    {
        "database_id": "tvshow",
        "query": "SELECT production_code ,  channel, original_air_date FROM cartoon ORDER BY original_air_date desc LIMIT 1",
        "query_toks": [
            "select",
            "production_code",
            ",",
            "channel",
            ",",
            "original_air_date",
            "from",
            "cartoon",
            "order",
            "by",
            "original_air_date",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Production_code",
                "Channel",
                "Original_air_date"
            ],
            [
                102.0,
                "701",
                "November21,2008"
            ]
        ],
        "response": "These are the production code and channel of the most recently aired cartoon.",
        "response_toks": [
            "These",
            "are",
            "the",
            "production",
            "code",
            "and",
            "channel",
            "of",
            "the",
            "most",
            "recently",
            "aired",
            "cartoon",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT production_code ,  channel, original_air_date FROM cartoon ORDER BY original_air_date desc LIMIT 1",
        "query_w_results_blank_res": "SELECT production_code ,  channel, original_air_date FROM cartoon ORDER BY original_air_date desc LIMIT 1",
        "query_toks_w_results": [
            "select",
            "production_code",
            ",",
            "channel",
            ",",
            "original_air_date",
            "from",
            "cartoon",
            "order",
            "by",
            "original_air_date",
            "desc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "production_code",
            ",",
            "channel",
            ",",
            "original_air_date",
            "from",
            "cartoon",
            "order",
            "by",
            "original_air_date",
            "desc",
            "limit",
            "1"
        ],
        "response_blank_res": "These are the production code and channel of the most recently aired cartoon .",
        "response_toks_blank_res": [
            "These",
            "are",
            "the",
            "production",
            "code",
            "and",
            "channel",
            "of",
            "the",
            "most",
            "recently",
            "aired",
            "cartoon",
            "."
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "query": "SELECT Version_Number from Templates where Template_ID  =  3",
        "query_toks": [
            "select",
            "version_number",
            "from",
            "templates",
            "where",
            "template_id",
            "=",
            "3"
        ],
        "results_raw": [
            [
                "Version_Number"
            ]
        ],
        "response": "The table doesn't contain any information about the version number of template id 3.",
        "response_toks": [
            "The",
            "table",
            "does",
            "n't",
            "contain",
            "any",
            "information",
            "about",
            "the",
            "version",
            "number",
            "of",
            "template",
            "id",
            "3",
            "."
        ],
        "results_map": null,
        "results_blank_res": null,
        "query_w_results": null,
        "query_w_results_blank_res": null,
        "query_toks_w_results": null,
        "query_toks_w_results_blank_res": null,
        "response_blank_res": null,
        "response_toks_blank_res": null
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "query": "SELECT t2.Document_Name from Templates as t1 join Documents as t2 on t1.Template_ID  =  t2.Template_ID where t1.Template_ID  =  25",
        "query_toks": [
            "select",
            "t2",
            ".",
            "document_name",
            "from",
            "templates",
            "as",
            "t1",
            "join",
            "documents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "template_id",
            "=",
            "t2",
            ".",
            "template_id",
            "where",
            "t1",
            ".",
            "template_id",
            "=",
            "25"
        ],
        "results_raw": [
            [
                "Document_Name"
            ],
            [
                "Understanding DB"
            ],
            [
                "A history of Arts"
            ]
        ],
        "response": "The table shows the document name of template id 25, which are Understanding DB and A history of Arts.",
        "response_toks": [
            "The",
            "table",
            "shows",
            "the",
            "document",
            "name",
            "of",
            "template",
            "id",
            "25",
            ",",
            "which",
            "are",
            "Understanding",
            "DB",
            "and",
            "A",
            "history",
            "of",
            "Arts",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT t2.Document_Name from Templates as t1 join Documents as t2 on t1.Template_ID  =  t2.Template_ID where t1.Template_ID  =  25",
        "query_w_results_blank_res": "SELECT t2.Document_Name from Templates as t1 join Documents as t2 on t1.Template_ID  =  t2.Template_ID where t1.Template_ID  =  25",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "document_name",
            "from",
            "templates",
            "as",
            "t1",
            "join",
            "documents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "template_id",
            "=",
            "t2",
            ".",
            "template_id",
            "where",
            "t1",
            ".",
            "template_id",
            "=",
            "25"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "document_name",
            "from",
            "templates",
            "as",
            "t1",
            "join",
            "documents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "template_id",
            "=",
            "t2",
            ".",
            "template_id",
            "where",
            "t1",
            ".",
            "template_id",
            "=",
            "25"
        ],
        "response_blank_res": "The table shows the document name of template id 25 , which are Understanding DB and A history of Arts .",
        "response_toks_blank_res": [
            "The",
            "table",
            "shows",
            "the",
            "document",
            "name",
            "of",
            "template",
            "id",
            "25",
            ",",
            "which",
            "are",
            "Understanding",
            "DB",
            "and",
            "A",
            "history",
            "of",
            "Arts",
            "."
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
        "query_toks": [
            "select",
            "template_type_code",
            "from",
            "templates",
            "except",
            "select",
            "template_type_code",
            "from",
            "templates",
            "as",
            "t1",
            "join",
            "documents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "template_id",
            "=",
            "t2",
            ".",
            "template_id"
        ],
        "results_raw": [
            [
                "Template_Type_Code"
            ],
            [
                "CV"
            ]
        ],
        "response": "CV is the only template types codes that are not used by any document.",
        "response_toks": [
            "CV",
            "is",
            "the",
            "only",
            "template",
            "types",
            "codes",
            "that",
            "are",
            "not",
            "used",
            "by",
            "any",
            "document",
            "."
        ],
        "results_map": {
            "result0": "CV"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id | CV ",
        "query_w_results_blank_res": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id | result0 ",
        "query_toks_w_results": [
            "select",
            "template_type_code",
            "from",
            "templates",
            "except",
            "select",
            "template_type_code",
            "from",
            "templates",
            "as",
            "t1",
            "join",
            "documents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "template_id",
            "=",
            "t2",
            ".",
            "template_id",
            "CV"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "template_type_code",
            "from",
            "templates",
            "except",
            "select",
            "template_type_code",
            "from",
            "templates",
            "as",
            "t1",
            "join",
            "documents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "template_id",
            "=",
            "t2",
            ".",
            "template_id",
            "result0"
        ],
        "response_blank_res": "result0 is the only template types codes that are not used by any document .",
        "response_toks_blank_res": [
            "result0",
            "is",
            "the",
            "only",
            "template",
            "types",
            "codes",
            "that",
            "are",
            "not",
            "used",
            "by",
            "any",
            "document",
            "."
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "query": "SELECT Version_Number from Templates where Template_ID  =  4",
        "query_toks": [
            "select",
            "version_number",
            "from",
            "templates",
            "where",
            "template_id",
            "=",
            "4"
        ],
        "results_raw": [
            [
                "Version_Number"
            ],
            [
                4
            ]
        ],
        "response": "The version number of template id 4 is 4.",
        "response_toks": [
            "The",
            "version",
            "number",
            "of",
            "template",
            "id",
            "4",
            "is",
            "4",
            "."
        ],
        "results_map": {
            "result0": "4",
            "result1": "4"
        },
        "results_blank_res": "result1 result1 ",
        "query_w_results": "SELECT Version_Number from Templates where Template_ID  =  4 | 4 4 ",
        "query_w_results_blank_res": "SELECT Version_Number from Templates where Template_ID  =  4 | result1 result1 ",
        "query_toks_w_results": [
            "select",
            "version_number",
            "from",
            "templates",
            "where",
            "template_id",
            "=",
            "4",
            "4",
            "4"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "version_number",
            "from",
            "templates",
            "where",
            "template_id",
            "=",
            "4",
            "result1",
            "result1"
        ],
        "response_blank_res": "The version number of template id result1 is result1 .",
        "response_toks_blank_res": [
            "The",
            "version",
            "number",
            "of",
            "template",
            "id",
            "result1",
            "is",
            "result1",
            "."
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport   =  \"AHD\"",
        "query_toks": [
            "select",
            "flightno",
            "from",
            "flights",
            "where",
            "sourceairport",
            "=",
            "\"ahd\""
        ],
        "results_raw": [
            [
                "FlightNo"
            ]
        ],
        "response": "There is no flight that has a source airport value of AHD.",
        "response_toks": [
            "There",
            "is",
            "no",
            "flight",
            "that",
            "has",
            "a",
            "source",
            "airport",
            "value",
            "of",
            "AHD",
            "."
        ],
        "results_map": null,
        "results_blank_res": null,
        "query_w_results": null,
        "query_w_results_blank_res": null,
        "query_toks_w_results": null,
        "query_toks_w_results_blank_res": null,
        "response_blank_res": null,
        "response_toks_blank_res": null
    },
    {
        "database_id": "flight_2",
        "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \" AHD\"",
        "query_toks": [
            "select",
            "flightno",
            "from",
            "flights",
            "where",
            "sourceairport",
            "=",
            "\"",
            "ahd\""
        ],
        "results_raw": [
            [
                "FlightNo"
            ],
            [
                54
            ],
            [
                557
            ],
            [
                787
            ]
        ],
        "response": "Yes. there are all the flight numbers that have a source airport value of AHD.",
        "response_toks": [
            "Yes",
            ".",
            "there",
            "are",
            "all",
            "the",
            "flight",
            "numbers",
            "that",
            "have",
            "a",
            "source",
            "airport",
            "value",
            "of",
            "AHD",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \" AHD\"",
        "query_w_results_blank_res": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \" AHD\"",
        "query_toks_w_results": [
            "select",
            "flightno",
            "from",
            "flights",
            "where",
            "sourceairport",
            "=",
            "\"",
            "ahd\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "flightno",
            "from",
            "flights",
            "where",
            "sourceairport",
            "=",
            "\"",
            "ahd\""
        ],
        "response_blank_res": "Yes . there are all the flight numbers that have a source airport value of AHD .",
        "response_toks_blank_res": [
            "Yes",
            ".",
            "there",
            "are",
            "all",
            "the",
            "flight",
            "numbers",
            "that",
            "have",
            "a",
            "source",
            "airport",
            "value",
            "of",
            "AHD",
            "."
        ]
    },
    {
        "database_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid   =   T2.Airline WHERE T2.SourceAirport   =   \" AHD\"",
        "query_toks": [
            "select",
            "t1",
            ".",
            "airline",
            "from",
            "airlines",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "uid",
            "=",
            "t2",
            ".",
            "airline",
            "where",
            "t2",
            ".",
            "sourceairport",
            "=",
            "\"",
            "ahd\""
        ],
        "results_raw": [
            [
                "Airline"
            ],
            [
                "United Airlines"
            ],
            [
                "United Airlines"
            ],
            [
                "United Airlines"
            ]
        ],
        "response": "There are all airlines that have some source airport value of 'AHD'.",
        "response_toks": [
            "There",
            "are",
            "all",
            "airlines",
            "that",
            "have",
            "some",
            "source",
            "airport",
            "value",
            "of",
            "'AHD",
            "'",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid   =   T2.Airline WHERE T2.SourceAirport   =   \" AHD\"",
        "query_w_results_blank_res": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid   =   T2.Airline WHERE T2.SourceAirport   =   \" AHD\"",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "airline",
            "from",
            "airlines",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "uid",
            "=",
            "t2",
            ".",
            "airline",
            "where",
            "t2",
            ".",
            "sourceairport",
            "=",
            "\"",
            "ahd\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "airline",
            "from",
            "airlines",
            "as",
            "t1",
            "join",
            "flights",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "uid",
            "=",
            "t2",
            ".",
            "airline",
            "where",
            "t2",
            ".",
            "sourceairport",
            "=",
            "\"",
            "ahd\""
        ],
        "response_blank_res": "There are all airlines that have some source airport value of 'AHD ' .",
        "response_toks_blank_res": [
            "There",
            "are",
            "all",
            "airlines",
            "that",
            "have",
            "some",
            "source",
            "airport",
            "value",
            "of",
            "'AHD",
            "'",
            "."
        ]
    },
    {
        "database_id": "concert_singer",
        "query": "SELECT count ( * )  FROM stadium WHERE average > 1000",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "stadium",
            "where",
            "average",
            ">",
            "1000"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                2
            ]
        ],
        "response": "The number of stadiums can accommodate more than 1000 people on average is 2.",
        "response_toks": [
            "The",
            "number",
            "of",
            "stadiums",
            "can",
            "accommodate",
            "more",
            "than",
            "1000",
            "people",
            "on",
            "average",
            "is",
            "2",
            "."
        ],
        "results_map": {
            "result0": "2"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM stadium WHERE average > 1000 | 2 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM stadium WHERE average > 1000 | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "stadium",
            "where",
            "average",
            ">",
            "1000",
            "2"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "stadium",
            "where",
            "average",
            ">",
            "1000",
            "result0"
        ],
        "response_blank_res": "The number of stadiums can accommodate more than 1000 people on average is result0 .",
        "response_toks_blank_res": [
            "The",
            "number",
            "of",
            "stadiums",
            "can",
            "accommodate",
            "more",
            "than",
            "1000",
            "people",
            "on",
            "average",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "concert_singer",
        "query": "SELECT name FROM stadium ORDER BY average LIMIT 1",
        "query_toks": [
            "select",
            "name",
            "from",
            "stadium",
            "order",
            "by",
            "average",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Glebe Park"
            ]
        ],
        "response": "The name of the stadium with the lowest attendance in average is \"Glebe Park\".",
        "response_toks": [
            "The",
            "name",
            "of",
            "the",
            "stadium",
            "with",
            "the",
            "lowest",
            "attendance",
            "in",
            "average",
            "is",
            "``",
            "Glebe",
            "Park",
            "''",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT name FROM stadium ORDER BY average LIMIT 1",
        "query_w_results_blank_res": "SELECT name FROM stadium ORDER BY average LIMIT 1",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "stadium",
            "order",
            "by",
            "average",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "stadium",
            "order",
            "by",
            "average",
            "limit",
            "1"
        ],
        "response_blank_res": "The name of the stadium with the lowest attendance in average is `` Glebe Park '' .",
        "response_toks_blank_res": [
            "The",
            "name",
            "of",
            "the",
            "stadium",
            "with",
            "the",
            "lowest",
            "attendance",
            "in",
            "average",
            "is",
            "``",
            "Glebe",
            "Park",
            "''",
            "."
        ]
    },
    {
        "database_id": "concert_singer",
        "query": "SELECT name FROM stadium ORDER BY average DESC LIMIT 1",
        "query_toks": [
            "select",
            "name",
            "from",
            "stadium",
            "order",
            "by",
            "average",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Stark's Park"
            ]
        ],
        "response": "The name of the stadium with the highest average attendance is \"Stark's Park\".",
        "response_toks": [
            "The",
            "name",
            "of",
            "the",
            "stadium",
            "with",
            "the",
            "highest",
            "average",
            "attendance",
            "is",
            "``",
            "Stark",
            "'s",
            "Park",
            "''",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT name FROM stadium ORDER BY average DESC LIMIT 1",
        "query_w_results_blank_res": "SELECT name FROM stadium ORDER BY average DESC LIMIT 1",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "stadium",
            "order",
            "by",
            "average",
            "desc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "stadium",
            "order",
            "by",
            "average",
            "desc",
            "limit",
            "1"
        ],
        "response_blank_res": "The name of the stadium with the highest average attendance is `` Stark 's Park '' .",
        "response_toks_blank_res": [
            "The",
            "name",
            "of",
            "the",
            "stadium",
            "with",
            "the",
            "highest",
            "average",
            "attendance",
            "is",
            "``",
            "Stark",
            "'s",
            "Park",
            "''",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT Name FROM country WHERE Continent   =   \"Africa\"  AND population  <   ( SELECT min ( population )  FROM country WHERE Continent   =   \"Asia\" ) ",
        "query_toks": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"africa\"",
            "and",
            "population",
            "<",
            "(",
            "select",
            "min",
            "(",
            "population",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"asia\"",
            ")"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "British Indian Ocean Territory"
            ],
            [
                "Mayotte"
            ],
            [
                "Saint Helena"
            ]
        ],
        "response": "Here is the result table of  African countries that have a smaller population than that of any Asian country. For example, one of the African countries is British Indian Ocean Territory.",
        "response_toks": [
            "Here",
            "is",
            "the",
            "result",
            "table",
            "of",
            "African",
            "countries",
            "that",
            "have",
            "a",
            "smaller",
            "population",
            "than",
            "that",
            "of",
            "any",
            "Asian",
            "country",
            ".",
            "For",
            "example",
            ",",
            "one",
            "of",
            "the",
            "African",
            "countries",
            "is",
            "British",
            "Indian",
            "Ocean",
            "Territory",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Name FROM country WHERE Continent   =   \"Africa\"  AND population  <   ( SELECT min ( population )  FROM country WHERE Continent   =   \"Asia\" ) ",
        "query_w_results_blank_res": "SELECT Name FROM country WHERE Continent   =   \"Africa\"  AND population  <   ( SELECT min ( population )  FROM country WHERE Continent   =   \"Asia\" ) ",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"africa\"",
            "and",
            "population",
            "<",
            "(",
            "select",
            "min",
            "(",
            "population",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"asia\"",
            ")"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"africa\"",
            "and",
            "population",
            "<",
            "(",
            "select",
            "min",
            "(",
            "population",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"asia\"",
            ")"
        ],
        "response_blank_res": "Here is the result table of African countries that have a smaller population than that of any Asian country . For example , one of the African countries is British Indian Ocean Territory .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "result",
            "table",
            "of",
            "African",
            "countries",
            "that",
            "have",
            "a",
            "smaller",
            "population",
            "than",
            "that",
            "of",
            "any",
            "Asian",
            "country",
            ".",
            "For",
            "example",
            ",",
            "one",
            "of",
            "the",
            "African",
            "countries",
            "is",
            "British",
            "Indian",
            "Ocean",
            "Territory",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT Name FROM country WHERE Continent   =   \"Asia\"  AND population  <   ( SELECT min ( population )  FROM country WHERE Continent   =   \"Africa\" ) ",
        "query_toks": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"asia\"",
            "and",
            "population",
            "<",
            "(",
            "select",
            "min",
            "(",
            "population",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"africa\"",
            ")"
        ],
        "results_raw": [
            [
                "Name"
            ]
        ],
        "response": "No Asian countries have a smaller population than that of any African country.",
        "response_toks": [
            "No",
            "Asian",
            "countries",
            "have",
            "a",
            "smaller",
            "population",
            "than",
            "that",
            "of",
            "any",
            "African",
            "country",
            "."
        ],
        "results_map": null,
        "results_blank_res": null,
        "query_w_results": null,
        "query_w_results_blank_res": null,
        "query_toks_w_results": null,
        "query_toks_w_results_blank_res": null,
        "response_blank_res": null,
        "response_toks_blank_res": null
    },
    {
        "database_id": "world_1",
        "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy DESC LIMIT 1",
        "query_toks": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"asia\"",
            "order",
            "by",
            "lifeexpectancy",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Macao"
            ]
        ],
        "response": "The Asian country with the highest life expectancy is Macao.",
        "response_toks": [
            "The",
            "Asian",
            "country",
            "with",
            "the",
            "highest",
            "life",
            "expectancy",
            "is",
            "Macao",
            "."
        ],
        "results_map": {
            "result0": "Macao"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy DESC LIMIT 1 | Macao ",
        "query_w_results_blank_res": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy DESC LIMIT 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"asia\"",
            "order",
            "by",
            "lifeexpectancy",
            "desc",
            "limit",
            "1",
            "Macao"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"asia\"",
            "order",
            "by",
            "lifeexpectancy",
            "desc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "The Asian country with the highest life expectancy is result0 .",
        "response_toks_blank_res": [
            "The",
            "Asian",
            "country",
            "with",
            "the",
            "highest",
            "life",
            "expectancy",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT count ( * )  FROM Dogs WHERE dog_id NOT IN  (  SELECT dog_id FROM Treatments  ) ",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "dogs",
            "where",
            "dog_id",
            "not",
            "in",
            "(",
            "select",
            "dog_id",
            "from",
            "treatments",
            ")"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                6
            ]
        ],
        "response": "There are 6 dogs have not gone through any treatment.",
        "response_toks": [
            "There",
            "are",
            "6",
            "dogs",
            "have",
            "not",
            "gone",
            "through",
            "any",
            "treatment",
            "."
        ],
        "results_map": {
            "result0": "6"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM Dogs WHERE dog_id NOT IN  (  SELECT dog_id FROM Treatments  )  | 6 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM Dogs WHERE dog_id NOT IN  (  SELECT dog_id FROM Treatments  )  | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "dogs",
            "where",
            "dog_id",
            "not",
            "in",
            "(",
            "select",
            "dog_id",
            "from",
            "treatments",
            ")",
            "6"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "dogs",
            "where",
            "dog_id",
            "not",
            "in",
            "(",
            "select",
            "dog_id",
            "from",
            "treatments",
            ")",
            "result0"
        ],
        "response_blank_res": "There are result0 dogs have not gone through any treatment .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "dogs",
            "have",
            "not",
            "gone",
            "through",
            "any",
            "treatment",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT count ( * )  FROM Dogs WHERE abandoned_yn  =  1 AND dog_id NOT IN  (  SELECT dog_id FROM Treatments  ) ",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "dogs",
            "where",
            "abandoned_yn",
            "=",
            "1",
            "and",
            "dog_id",
            "not",
            "in",
            "(",
            "select",
            "dog_id",
            "from",
            "treatments",
            ")"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                0
            ]
        ],
        "response": "There are 0 dogs have not gone through any treatment and were abandoned.",
        "response_toks": [
            "There",
            "are",
            "0",
            "dogs",
            "have",
            "not",
            "gone",
            "through",
            "any",
            "treatment",
            "and",
            "were",
            "abandoned",
            "."
        ],
        "results_map": {
            "result0": "0"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM Dogs WHERE abandoned_yn  =  1 AND dog_id NOT IN  (  SELECT dog_id FROM Treatments  )  | 0 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM Dogs WHERE abandoned_yn  =  1 AND dog_id NOT IN  (  SELECT dog_id FROM Treatments  )  | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "dogs",
            "where",
            "abandoned_yn",
            "=",
            "1",
            "and",
            "dog_id",
            "not",
            "in",
            "(",
            "select",
            "dog_id",
            "from",
            "treatments",
            ")",
            "0"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "dogs",
            "where",
            "abandoned_yn",
            "=",
            "1",
            "and",
            "dog_id",
            "not",
            "in",
            "(",
            "select",
            "dog_id",
            "from",
            "treatments",
            ")",
            "result0"
        ],
        "response_blank_res": "There are result0 dogs have not gone through any treatment and were abandoned .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "dogs",
            "have",
            "not",
            "gone",
            "through",
            "any",
            "treatment",
            "and",
            "were",
            "abandoned",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT T1.dog_id, T2.treatment_type_code FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE abandoned_yn  =  1",
        "query_toks": [
            "select",
            "t1",
            ".",
            "dog_id",
            ",",
            "t2",
            ".",
            "treatment_type_code",
            "from",
            "dogs",
            "as",
            "t1",
            "join",
            "treatments",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "dog_id",
            "=",
            "t2",
            ".",
            "dog_id",
            "where",
            "abandoned_yn",
            "=",
            "1"
        ],
        "results_raw": [
            [
                "dog_id",
                "treatment_type_code"
            ],
            [
                14,
                "WALK"
            ],
            [
                14,
                "EXAM"
            ],
            [
                15,
                "EXAM"
            ]
        ],
        "response": "All the dog ids of the abandoned dogs and their associated treatment type code are listed in the result table. For example, dog id 14 has treatment type code WALK",
        "response_toks": [
            "All",
            "the",
            "dog",
            "ids",
            "of",
            "the",
            "abandoned",
            "dogs",
            "and",
            "their",
            "associated",
            "treatment",
            "type",
            "code",
            "are",
            "listed",
            "in",
            "the",
            "result",
            "table",
            ".",
            "For",
            "example",
            ",",
            "dog",
            "id",
            "14",
            "has",
            "treatment",
            "type",
            "code",
            "WALK"
        ],
        "results_map": {
            "result0": "14",
            "result1": "WALK"
        },
        "results_blank_res": "result0 result1 ",
        "query_w_results": "SELECT T1.dog_id, T2.treatment_type_code FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE abandoned_yn  =  1 | 14 WALK ",
        "query_w_results_blank_res": "SELECT T1.dog_id, T2.treatment_type_code FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE abandoned_yn  =  1 | result0 result1 ",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "dog_id",
            ",",
            "t2",
            ".",
            "treatment_type_code",
            "from",
            "dogs",
            "as",
            "t1",
            "join",
            "treatments",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "dog_id",
            "=",
            "t2",
            ".",
            "dog_id",
            "where",
            "abandoned_yn",
            "=",
            "1",
            "14",
            "WALK"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "dog_id",
            ",",
            "t2",
            ".",
            "treatment_type_code",
            "from",
            "dogs",
            "as",
            "t1",
            "join",
            "treatments",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "dog_id",
            "=",
            "t2",
            ".",
            "dog_id",
            "where",
            "abandoned_yn",
            "=",
            "1",
            "result0",
            "result1"
        ],
        "response_blank_res": "All the dog ids of the abandoned dogs and their associated treatment type code are listed in the result table . For example , dog id result0 has treatment type code result1",
        "response_toks_blank_res": [
            "All",
            "the",
            "dog",
            "ids",
            "of",
            "the",
            "abandoned",
            "dogs",
            "and",
            "their",
            "associated",
            "treatment",
            "type",
            "code",
            "are",
            "listed",
            "in",
            "the",
            "result",
            "table",
            ".",
            "For",
            "example",
            ",",
            "dog",
            "id",
            "result0",
            "has",
            "treatment",
            "type",
            "code",
            "result1"
        ]
    },
    {
        "database_id": "employee_hire_evaluation",
        "query": "select age from employee where name  =  \"George Chuter\"",
        "query_toks": [
            "select",
            "age",
            "from",
            "employee",
            "where",
            "name",
            "=",
            "\"george",
            "chuter\""
        ],
        "results_raw": [
            [
                "Age"
            ],
            [
                23
            ]
        ],
        "response": "the age of the employee named George Chuter is 23.",
        "response_toks": [
            "the",
            "age",
            "of",
            "the",
            "employee",
            "named",
            "George",
            "Chuter",
            "is",
            "23",
            "."
        ],
        "results_map": {
            "result0": "23"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "select age from employee where name  =  \"George Chuter\" | 23 ",
        "query_w_results_blank_res": "select age from employee where name  =  \"George Chuter\" | result0 ",
        "query_toks_w_results": [
            "select",
            "age",
            "from",
            "employee",
            "where",
            "name",
            "=",
            "\"george",
            "chuter\"",
            "23"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "age",
            "from",
            "employee",
            "where",
            "name",
            "=",
            "\"george",
            "chuter\"",
            "result0"
        ],
        "response_blank_res": "the age of the employee named George Chuter is result0 .",
        "response_toks_blank_res": [
            "the",
            "age",
            "of",
            "the",
            "employee",
            "named",
            "George",
            "Chuter",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "employee_hire_evaluation",
        "query": "select sum ( bonus )  from evaluation where employee_id  =  1",
        "query_toks": [
            "select",
            "sum",
            "(",
            "bonus",
            ")",
            "from",
            "evaluation",
            "where",
            "employee_id",
            "=",
            "1"
        ],
        "results_raw": [
            [
                "sum(bonus)"
            ],
            [
                5900.0
            ]
        ],
        "response": "The employee with employee id 1 got a total amount of 5900.0 bonus.",
        "response_toks": [
            "The",
            "employee",
            "with",
            "employee",
            "id",
            "1",
            "got",
            "a",
            "total",
            "amount",
            "of",
            "5900.0",
            "bonus",
            "."
        ],
        "results_map": {
            "result0": "5900.0"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "select sum ( bonus )  from evaluation where employee_id  =  1 | 5900.0 ",
        "query_w_results_blank_res": "select sum ( bonus )  from evaluation where employee_id  =  1 | result0 ",
        "query_toks_w_results": [
            "select",
            "sum",
            "(",
            "bonus",
            ")",
            "from",
            "evaluation",
            "where",
            "employee_id",
            "=",
            "1",
            "5900.0"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "sum",
            "(",
            "bonus",
            ")",
            "from",
            "evaluation",
            "where",
            "employee_id",
            "=",
            "1",
            "result0"
        ],
        "response_blank_res": "The employee with employee id 1 got a total amount of result0 bonus .",
        "response_toks_blank_res": [
            "The",
            "employee",
            "with",
            "employee",
            "id",
            "1",
            "got",
            "a",
            "total",
            "amount",
            "of",
            "result0",
            "bonus",
            "."
        ]
    },
    {
        "database_id": "employee_hire_evaluation",
        "query": "select city from employee where name  =  \"Lee Mears\"",
        "query_toks": [
            "select",
            "city",
            "from",
            "employee",
            "where",
            "name",
            "=",
            "\"lee",
            "mears\""
        ],
        "results_raw": [
            [
                "City"
            ],
            [
                "Bath"
            ]
        ],
        "response": "the employee named Lee Mears is from the city of Bath.",
        "response_toks": [
            "the",
            "employee",
            "named",
            "Lee",
            "Mears",
            "is",
            "from",
            "the",
            "city",
            "of",
            "Bath",
            "."
        ],
        "results_map": {
            "result0": "Bath"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "select city from employee where name  =  \"Lee Mears\" | Bath ",
        "query_w_results_blank_res": "select city from employee where name  =  \"Lee Mears\" | result0 ",
        "query_toks_w_results": [
            "select",
            "city",
            "from",
            "employee",
            "where",
            "name",
            "=",
            "\"lee",
            "mears\"",
            "Bath"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "city",
            "from",
            "employee",
            "where",
            "name",
            "=",
            "\"lee",
            "mears\"",
            "result0"
        ],
        "response_blank_res": "the employee named Lee Mears is from the city of result0 .",
        "response_toks_blank_res": [
            "the",
            "employee",
            "named",
            "Lee",
            "Mears",
            "is",
            "from",
            "the",
            "city",
            "of",
            "result0",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id   =   T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count ( * )  DESC LIMIT 1",
        "query_toks": [
            "select",
            "t1",
            ".",
            "degree_program_id",
            ",",
            "t1",
            ".",
            "degree_summary_name",
            "from",
            "degree_programs",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "degree_program_id",
            "=",
            "t2",
            ".",
            "degree_program_id",
            "group",
            "by",
            "t1",
            ".",
            "degree_program_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "degree_program_id",
                "degree_summary_name"
            ],
            [
                9,
                "Bachelor"
            ]
        ],
        "response": "the id and the summary of the program which most number of students are enrolled in is 9, Bachelor.",
        "response_toks": [
            "the",
            "id",
            "and",
            "the",
            "summary",
            "of",
            "the",
            "program",
            "which",
            "most",
            "number",
            "of",
            "students",
            "are",
            "enrolled",
            "in",
            "is",
            "9",
            ",",
            "Bachelor",
            "."
        ],
        "results_map": {
            "result0": "9",
            "result1": "Bachelor"
        },
        "results_blank_res": "result0 result1 ",
        "query_w_results": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id   =   T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count ( * )  DESC LIMIT 1 | 9 Bachelor ",
        "query_w_results_blank_res": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id   =   T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count ( * )  DESC LIMIT 1 | result0 result1 ",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "degree_program_id",
            ",",
            "t1",
            ".",
            "degree_summary_name",
            "from",
            "degree_programs",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "degree_program_id",
            "=",
            "t2",
            ".",
            "degree_program_id",
            "group",
            "by",
            "t1",
            ".",
            "degree_program_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1",
            "9",
            "Bachelor"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "degree_program_id",
            ",",
            "t1",
            ".",
            "degree_summary_name",
            "from",
            "degree_programs",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "degree_program_id",
            "=",
            "t2",
            ".",
            "degree_program_id",
            "group",
            "by",
            "t1",
            ".",
            "degree_program_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1",
            "result0",
            "result1"
        ],
        "response_blank_res": "the id and the summary of the program which most number of students are enrolled in is result0 , result1 .",
        "response_toks_blank_res": [
            "the",
            "id",
            "and",
            "the",
            "summary",
            "of",
            "the",
            "program",
            "which",
            "most",
            "number",
            "of",
            "students",
            "are",
            "enrolled",
            "in",
            "is",
            "result0",
            ",",
            "result1",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT T1.degree_program_id  FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id   =   T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count ( * )  DESC LIMIT 1",
        "query_toks": [
            "select",
            "t1",
            ".",
            "degree_program_id",
            "from",
            "degree_programs",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "degree_program_id",
            "=",
            "t2",
            ".",
            "degree_program_id",
            "group",
            "by",
            "t1",
            ".",
            "degree_program_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "degree_program_id"
            ],
            [
                9
            ]
        ],
        "response": "The program with id 9 has the most students.",
        "response_toks": [
            "The",
            "program",
            "with",
            "id",
            "9",
            "has",
            "the",
            "most",
            "students",
            "."
        ],
        "results_map": {
            "result0": "9"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT T1.degree_program_id  FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id   =   T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count ( * )  DESC LIMIT 1 | 9 ",
        "query_w_results_blank_res": "SELECT T1.degree_program_id  FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id   =   T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count ( * )  DESC LIMIT 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "degree_program_id",
            "from",
            "degree_programs",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "degree_program_id",
            "=",
            "t2",
            ".",
            "degree_program_id",
            "group",
            "by",
            "t1",
            ".",
            "degree_program_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1",
            "9"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "degree_program_id",
            "from",
            "degree_programs",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "degree_program_id",
            "=",
            "t2",
            ".",
            "degree_program_id",
            "group",
            "by",
            "t1",
            ".",
            "degree_program_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "The program with id result0 has the most students .",
        "response_toks_blank_res": [
            "The",
            "program",
            "with",
            "id",
            "result0",
            "has",
            "the",
            "most",
            "students",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT COUNT ( * )  FROM Student_Enrolment WHERE degree_program_id  =  \"9\"",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "student_enrolment",
            "where",
            "degree_program_id",
            "=",
            "\"9\""
        ],
        "results_raw": [
            [
                "COUNT(*)"
            ],
            [
                3
            ]
        ],
        "response": "Three students are in program with id 9.",
        "response_toks": [
            "Three",
            "students",
            "are",
            "in",
            "program",
            "with",
            "id",
            "9",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT COUNT ( * )  FROM Student_Enrolment WHERE degree_program_id  =  \"9\"",
        "query_w_results_blank_res": "SELECT COUNT ( * )  FROM Student_Enrolment WHERE degree_program_id  =  \"9\"",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "student_enrolment",
            "where",
            "degree_program_id",
            "=",
            "\"9\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "student_enrolment",
            "where",
            "degree_program_id",
            "=",
            "\"9\""
        ],
        "response_blank_res": "Three students are in program with id 9 .",
        "response_toks_blank_res": [
            "Three",
            "students",
            "are",
            "in",
            "program",
            "with",
            "id",
            "9",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT COUNT ( * )  FROM Degree_Programs WHERE degree_summary_name  =  \"Master\" AND degree_program_id  =  \"9\"",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "degree_programs",
            "where",
            "degree_summary_name",
            "=",
            "\"master\"",
            "and",
            "degree_program_id",
            "=",
            "\"9\""
        ],
        "results_raw": [
            [
                "COUNT(*)"
            ],
            [
                0
            ]
        ],
        "response": "Zero masters are in program with id 9.",
        "response_toks": [
            "Zero",
            "masters",
            "are",
            "in",
            "program",
            "with",
            "id",
            "9",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT COUNT ( * )  FROM Degree_Programs WHERE degree_summary_name  =  \"Master\" AND degree_program_id  =  \"9\"",
        "query_w_results_blank_res": "SELECT COUNT ( * )  FROM Degree_Programs WHERE degree_summary_name  =  \"Master\" AND degree_program_id  =  \"9\"",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "degree_programs",
            "where",
            "degree_summary_name",
            "=",
            "\"master\"",
            "and",
            "degree_program_id",
            "=",
            "\"9\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "degree_programs",
            "where",
            "degree_summary_name",
            "=",
            "\"master\"",
            "and",
            "degree_program_id",
            "=",
            "\"9\""
        ],
        "response_blank_res": "Zero masters are in program with id 9 .",
        "response_toks_blank_res": [
            "Zero",
            "masters",
            "are",
            "in",
            "program",
            "with",
            "id",
            "9",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id   =   T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count ( * )  limit 1",
        "query_toks": [
            "select",
            "t1",
            ".",
            "degree_program_id",
            ",",
            "t1",
            ".",
            "degree_summary_name",
            "from",
            "degree_programs",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "degree_program_id",
            "=",
            "t2",
            ".",
            "degree_program_id",
            "group",
            "by",
            "t1",
            ".",
            "degree_program_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "degree_program_id",
                "degree_summary_name"
            ],
            [
                3,
                "Master"
            ]
        ],
        "response": "Program with id 3 has the least students.",
        "response_toks": [
            "Program",
            "with",
            "id",
            "3",
            "has",
            "the",
            "least",
            "students",
            "."
        ],
        "results_map": {
            "result0": "3"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id   =   T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count ( * )  limit 1 | 3 ",
        "query_w_results_blank_res": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id   =   T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count ( * )  limit 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "degree_program_id",
            ",",
            "t1",
            ".",
            "degree_summary_name",
            "from",
            "degree_programs",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "degree_program_id",
            "=",
            "t2",
            ".",
            "degree_program_id",
            "group",
            "by",
            "t1",
            ".",
            "degree_program_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "limit",
            "1",
            "3"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "degree_program_id",
            ",",
            "t1",
            ".",
            "degree_summary_name",
            "from",
            "degree_programs",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "degree_program_id",
            "=",
            "t2",
            ".",
            "degree_program_id",
            "group",
            "by",
            "t1",
            ".",
            "degree_program_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "Program with id result0 has the least students .",
        "response_toks_blank_res": [
            "Program",
            "with",
            "id",
            "result0",
            "has",
            "the",
            "least",
            "students",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT COUNT ( * )  FROM Student_Enrolment where degree_program_id  =  \"3\"",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "student_enrolment",
            "where",
            "degree_program_id",
            "=",
            "\"3\""
        ],
        "results_raw": [
            [
                "COUNT(*)"
            ],
            [
                1
            ]
        ],
        "response": "The program with id 3 has One student.",
        "response_toks": [
            "The",
            "program",
            "with",
            "id",
            "3",
            "has",
            "One",
            "student",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT COUNT ( * )  FROM Student_Enrolment where degree_program_id  =  \"3\"",
        "query_w_results_blank_res": "SELECT COUNT ( * )  FROM Student_Enrolment where degree_program_id  =  \"3\"",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "student_enrolment",
            "where",
            "degree_program_id",
            "=",
            "\"3\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "student_enrolment",
            "where",
            "degree_program_id",
            "=",
            "\"3\""
        ],
        "response_blank_res": "The program with id 3 has One student .",
        "response_toks_blank_res": [
            "The",
            "program",
            "with",
            "id",
            "3",
            "has",
            "One",
            "student",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT sum ( cost_of_treatment )  from treatments",
        "query_toks": [
            "select",
            "sum",
            "(",
            "cost_of_treatment",
            ")",
            "from",
            "treatments"
        ],
        "results_raw": [
            [
                "sum(cost_of_treatment)"
            ],
            [
                7361
            ]
        ],
        "response": "the total cost of treatment is 7361",
        "response_toks": [
            "the",
            "total",
            "cost",
            "of",
            "treatment",
            "is",
            "7361"
        ],
        "results_map": {
            "result0": "7361"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT sum ( cost_of_treatment )  from treatments | 7361 ",
        "query_w_results_blank_res": "SELECT sum ( cost_of_treatment )  from treatments | result0 ",
        "query_toks_w_results": [
            "select",
            "sum",
            "(",
            "cost_of_treatment",
            ")",
            "from",
            "treatments",
            "7361"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "sum",
            "(",
            "cost_of_treatment",
            ")",
            "from",
            "treatments",
            "result0"
        ],
        "response_blank_res": "the total cost of treatment is result0",
        "response_toks_blank_res": [
            "the",
            "total",
            "cost",
            "of",
            "treatment",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "select T1.first_name, T1.last_name from Professionals as T1 join Treatments as T2 on T1.professional_id  =  T2.professional_id order by T2.cost_of_treatment asc limit 1",
        "query_toks": [
            "select",
            "t1",
            ".",
            "first_name",
            ",",
            "t1",
            ".",
            "last_name",
            "from",
            "professionals",
            "as",
            "t1",
            "join",
            "treatments",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "professional_id",
            "=",
            "t2",
            ".",
            "professional_id",
            "order",
            "by",
            "t2",
            ".",
            "cost_of_treatment",
            "asc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "first_name",
                "last_name"
            ],
            [
                "Domenica",
                "Jacobs"
            ]
        ],
        "response": "Domenica Jacobs provides lowest cost of treatment",
        "response_toks": [
            "Domenica",
            "Jacobs",
            "provides",
            "lowest",
            "cost",
            "of",
            "treatment"
        ],
        "results_map": {
            "result0": "Domenica",
            "result1": "Jacobs"
        },
        "results_blank_res": "result0 result1 ",
        "query_w_results": "select T1.first_name, T1.last_name from Professionals as T1 join Treatments as T2 on T1.professional_id  =  T2.professional_id order by T2.cost_of_treatment asc limit 1 | Domenica Jacobs ",
        "query_w_results_blank_res": "select T1.first_name, T1.last_name from Professionals as T1 join Treatments as T2 on T1.professional_id  =  T2.professional_id order by T2.cost_of_treatment asc limit 1 | result0 result1 ",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "first_name",
            ",",
            "t1",
            ".",
            "last_name",
            "from",
            "professionals",
            "as",
            "t1",
            "join",
            "treatments",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "professional_id",
            "=",
            "t2",
            ".",
            "professional_id",
            "order",
            "by",
            "t2",
            ".",
            "cost_of_treatment",
            "asc",
            "limit",
            "1",
            "Domenica",
            "Jacobs"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "first_name",
            ",",
            "t1",
            ".",
            "last_name",
            "from",
            "professionals",
            "as",
            "t1",
            "join",
            "treatments",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "professional_id",
            "=",
            "t2",
            ".",
            "professional_id",
            "order",
            "by",
            "t2",
            ".",
            "cost_of_treatment",
            "asc",
            "limit",
            "1",
            "result0",
            "result1"
        ],
        "response_blank_res": "result0 result1 provides lowest cost of treatment",
        "response_toks_blank_res": [
            "result0",
            "result1",
            "provides",
            "lowest",
            "cost",
            "of",
            "treatment"
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "select dog_id from treatments order by cost_of_treatment asc limit 1",
        "query_toks": [
            "select",
            "dog_id",
            "from",
            "treatments",
            "order",
            "by",
            "cost_of_treatment",
            "asc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "dog_id"
            ],
            [
                14
            ]
        ],
        "response": "The dog id of lowest cost treatment is 14",
        "response_toks": [
            "The",
            "dog",
            "id",
            "of",
            "lowest",
            "cost",
            "treatment",
            "is",
            "14"
        ],
        "results_map": {
            "result0": "14"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "select dog_id from treatments order by cost_of_treatment asc limit 1 | 14 ",
        "query_w_results_blank_res": "select dog_id from treatments order by cost_of_treatment asc limit 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "dog_id",
            "from",
            "treatments",
            "order",
            "by",
            "cost_of_treatment",
            "asc",
            "limit",
            "1",
            "14"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "dog_id",
            "from",
            "treatments",
            "order",
            "by",
            "cost_of_treatment",
            "asc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "The dog id of lowest cost treatment is result0",
        "response_toks_blank_res": [
            "The",
            "dog",
            "id",
            "of",
            "lowest",
            "cost",
            "treatment",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT ContId ,  Continent  FROM CONTINENTS",
        "query_toks": [
            "select",
            "contid",
            ",",
            "continent",
            "from",
            "continents"
        ],
        "results_raw": [
            [
                "ContId",
                "Continent"
            ],
            [
                1,
                "america"
            ],
            [
                2,
                "europe"
            ],
            [
                3,
                "asia"
            ]
        ],
        "response": "Here is the table of continents and their corresponding continent ID.",
        "response_toks": [
            "Here",
            "is",
            "the",
            "table",
            "of",
            "continents",
            "and",
            "their",
            "corresponding",
            "continent",
            "ID",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT ContId ,  Continent  FROM CONTINENTS",
        "query_w_results_blank_res": "SELECT ContId ,  Continent  FROM CONTINENTS",
        "query_toks_w_results": [
            "select",
            "contid",
            ",",
            "continent",
            "from",
            "continents"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "contid",
            ",",
            "continent",
            "from",
            "continents"
        ],
        "response_blank_res": "Here is the table of continents and their corresponding continent ID .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "table",
            "of",
            "continents",
            "and",
            "their",
            "corresponding",
            "continent",
            "ID",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT T1.Continent ,  count ( * )  FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId   =   T2.Continent GROUP BY T1.ContId",
        "query_toks": [
            "select",
            "t1",
            ".",
            "continent",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "continents",
            "as",
            "t1",
            "join",
            "countries",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "contid",
            "=",
            "t2",
            ".",
            "continent",
            "group",
            "by",
            "t1",
            ".",
            "contid"
        ],
        "results_raw": [
            [
                "Continent",
                "count(*)"
            ],
            [
                "america",
                3
            ],
            [
                "europe",
                6
            ],
            [
                "asia",
                2
            ]
        ],
        "response": "Here are the counts of countries corresponding to each continent name.  For example, america has 3 countries.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "counts",
            "of",
            "countries",
            "corresponding",
            "to",
            "each",
            "continent",
            "name",
            ".",
            "For",
            "example",
            ",",
            "america",
            "has",
            "3",
            "countries",
            "."
        ],
        "results_map": {
            "result0": "america",
            "result1": "3"
        },
        "results_blank_res": "result0 result1 ",
        "query_w_results": "SELECT T1.Continent ,  count ( * )  FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId   =   T2.Continent GROUP BY T1.ContId | america 3 ",
        "query_w_results_blank_res": "SELECT T1.Continent ,  count ( * )  FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId   =   T2.Continent GROUP BY T1.ContId | result0 result1 ",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "continent",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "continents",
            "as",
            "t1",
            "join",
            "countries",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "contid",
            "=",
            "t2",
            ".",
            "continent",
            "group",
            "by",
            "t1",
            ".",
            "contid",
            "america",
            "3"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "continent",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "continents",
            "as",
            "t1",
            "join",
            "countries",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "contid",
            "=",
            "t2",
            ".",
            "continent",
            "group",
            "by",
            "t1",
            ".",
            "contid",
            "result0",
            "result1"
        ],
        "response_blank_res": "Here are the counts of countries corresponding to each continent name . For example , result0 has result1 countries .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "counts",
            "of",
            "countries",
            "corresponding",
            "to",
            "each",
            "continent",
            "name",
            ".",
            "For",
            "example",
            ",",
            "result0",
            "has",
            "result1",
            "countries",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT T1.Continent ,  count ( * )  FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId   =   T2.Continent GROUP BY T1.ContId ORDER BY count ( * )  DESC LIMIT 1",
        "query_toks": [
            "select",
            "t1",
            ".",
            "continent",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "continents",
            "as",
            "t1",
            "join",
            "countries",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "contid",
            "=",
            "t2",
            ".",
            "continent",
            "group",
            "by",
            "t1",
            ".",
            "contid",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Continent",
                "count(*)"
            ],
            [
                "europe",
                6
            ]
        ],
        "response": "The continent that has the highest number of countries is Europe.",
        "response_toks": [
            "The",
            "continent",
            "that",
            "has",
            "the",
            "highest",
            "number",
            "of",
            "countries",
            "is",
            "Europe",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.Continent ,  count ( * )  FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId   =   T2.Continent GROUP BY T1.ContId ORDER BY count ( * )  DESC LIMIT 1",
        "query_w_results_blank_res": "SELECT T1.Continent ,  count ( * )  FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId   =   T2.Continent GROUP BY T1.ContId ORDER BY count ( * )  DESC LIMIT 1",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "continent",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "continents",
            "as",
            "t1",
            "join",
            "countries",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "contid",
            "=",
            "t2",
            ".",
            "continent",
            "group",
            "by",
            "t1",
            ".",
            "contid",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "continent",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "continents",
            "as",
            "t1",
            "join",
            "countries",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "contid",
            "=",
            "t2",
            ".",
            "continent",
            "group",
            "by",
            "t1",
            ".",
            "contid",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "response_blank_res": "The continent that has the highest number of countries is Europe .",
        "response_toks_blank_res": [
            "The",
            "continent",
            "that",
            "has",
            "the",
            "highest",
            "number",
            "of",
            "countries",
            "is",
            "Europe",
            "."
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.document_id ,  T2.document_name ,  count ( * )  FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id   =   T2.document_id GROUP BY T1.document_id",
        "query_toks": [
            "select",
            "t1",
            ".",
            "document_id",
            ",",
            "t2",
            ".",
            "document_name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "paragraphs",
            "as",
            "t1",
            "join",
            "documents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "document_id",
            "=",
            "t2",
            ".",
            "document_id",
            "group",
            "by",
            "t1",
            ".",
            "document_id"
        ],
        "results_raw": [
            [
                "Document_ID",
                "Document_Name",
                "count(*)"
            ],
            [
                3,
                "Summer Show",
                1
            ],
            [
                80,
                "Welcome to NY",
                2
            ],
            [
                2394,
                "Customer reviews",
                3
            ]
        ],
        "response": "Hi! Welcome. Here is the result table of all the document IDs and their corresponding document names and number of paragraphs. For example, Document ID 3 corresponds to  the document name Summer Show and 1 paragraph.",
        "response_toks": [
            "Hi",
            "!",
            "Welcome",
            ".",
            "Here",
            "is",
            "the",
            "result",
            "table",
            "of",
            "all",
            "the",
            "document",
            "IDs",
            "and",
            "their",
            "corresponding",
            "document",
            "names",
            "and",
            "number",
            "of",
            "paragraphs",
            ".",
            "For",
            "example",
            ",",
            "Document",
            "ID",
            "3",
            "corresponds",
            "to",
            "the",
            "document",
            "name",
            "Summer",
            "Show",
            "and",
            "1",
            "paragraph",
            "."
        ],
        "results_map": {
            "result0": "3",
            "result1": "1"
        },
        "results_blank_res": "result0 result1 ",
        "query_w_results": "SELECT T1.document_id ,  T2.document_name ,  count ( * )  FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id   =   T2.document_id GROUP BY T1.document_id | 3 1 ",
        "query_w_results_blank_res": "SELECT T1.document_id ,  T2.document_name ,  count ( * )  FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id   =   T2.document_id GROUP BY T1.document_id | result0 result1 ",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "document_id",
            ",",
            "t2",
            ".",
            "document_name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "paragraphs",
            "as",
            "t1",
            "join",
            "documents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "document_id",
            "=",
            "t2",
            ".",
            "document_id",
            "group",
            "by",
            "t1",
            ".",
            "document_id",
            "3",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "document_id",
            ",",
            "t2",
            ".",
            "document_name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "paragraphs",
            "as",
            "t1",
            "join",
            "documents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "document_id",
            "=",
            "t2",
            ".",
            "document_id",
            "group",
            "by",
            "t1",
            ".",
            "document_id",
            "result0",
            "result1"
        ],
        "response_blank_res": "Hi ! Welcome . Here is the result table of all the document IDs and their corresponding document names and number of paragraphs . For example , Document ID result0 corresponds to the document name Summer Show and result1 paragraph .",
        "response_toks_blank_res": [
            "Hi",
            "!",
            "Welcome",
            ".",
            "Here",
            "is",
            "the",
            "result",
            "table",
            "of",
            "all",
            "the",
            "document",
            "IDs",
            "and",
            "their",
            "corresponding",
            "document",
            "names",
            "and",
            "number",
            "of",
            "paragraphs",
            ".",
            "For",
            "example",
            ",",
            "Document",
            "ID",
            "result0",
            "corresponds",
            "to",
            "the",
            "document",
            "name",
            "Summer",
            "Show",
            "and",
            "result1",
            "paragraph",
            "."
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "query": "SELECT Paragraph_Text FROM Paragraphs",
        "query_toks": [
            "select",
            "paragraph_text",
            "from",
            "paragraphs"
        ],
        "results_raw": [
            [
                "Paragraph_Text"
            ],
            [
                "Korea"
            ],
            [
                "Somalia"
            ],
            [
                "Palestinian Territory"
            ]
        ],
        "response": "The following table shows a list of all the paragraph text values.",
        "response_toks": [
            "The",
            "following",
            "table",
            "shows",
            "a",
            "list",
            "of",
            "all",
            "the",
            "paragraph",
            "text",
            "values",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Paragraph_Text FROM Paragraphs",
        "query_w_results_blank_res": "SELECT Paragraph_Text FROM Paragraphs",
        "query_toks_w_results": [
            "select",
            "paragraph_text",
            "from",
            "paragraphs"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "paragraph_text",
            "from",
            "paragraphs"
        ],
        "response_blank_res": "The following table shows a list of all the paragraph text values .",
        "response_toks_blank_res": [
            "The",
            "following",
            "table",
            "shows",
            "a",
            "list",
            "of",
            "all",
            "the",
            "paragraph",
            "text",
            "values",
            "."
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "query": "SELECT Paragraph_Text FROM Paragraphs WHERE Other_Details ! =  \"NULL\"",
        "query_toks": [
            "select",
            "paragraph_text",
            "from",
            "paragraphs",
            "where",
            "other_details",
            "!",
            "=",
            "\"null\""
        ],
        "results_raw": [
            [
                "Paragraph_Text"
            ]
        ],
        "response": "There are no paragraph texts with a non NULL other details.",
        "response_toks": [
            "There",
            "are",
            "no",
            "paragraph",
            "texts",
            "with",
            "a",
            "non",
            "NULL",
            "other",
            "details",
            "."
        ],
        "results_map": null,
        "results_blank_res": null,
        "query_w_results": null,
        "query_w_results_blank_res": null,
        "query_toks_w_results": null,
        "query_toks_w_results_blank_res": null,
        "response_blank_res": null,
        "response_toks_blank_res": null
    },
    {
        "database_id": "tvshow",
        "query": "select * from Cartoon where Written_by  =  'Todd Casey'",
        "query_toks": [
            "select",
            "*",
            "from",
            "cartoon",
            "where",
            "written_by",
            "=",
            "'todd",
            "casey'"
        ],
        "results_raw": [
            [
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ],
            [
                6.0,
                "Enter the Outsiders!",
                "Michael Chang",
                "Todd Casey",
                "January9,2009",
                106.0,
                "706"
            ],
            [
                11.0,
                "Return of the Fearsome Fangs!",
                "Brandon Vietti",
                "Todd Casey",
                "February20,2009",
                111.0,
                "700"
            ]
        ],
        "response": "Here is the list of all cartoons written by Todd Casey.",
        "response_toks": [
            "Here",
            "is",
            "the",
            "list",
            "of",
            "all",
            "cartoons",
            "written",
            "by",
            "Todd",
            "Casey",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "select * from Cartoon where Written_by  =  'Todd Casey'",
        "query_w_results_blank_res": "select * from Cartoon where Written_by  =  'Todd Casey'",
        "query_toks_w_results": [
            "select",
            "*",
            "from",
            "cartoon",
            "where",
            "written_by",
            "=",
            "'todd",
            "casey'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "*",
            "from",
            "cartoon",
            "where",
            "written_by",
            "=",
            "'todd",
            "casey'"
        ],
        "response_blank_res": "Here is the list of all cartoons written by Todd Casey .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "list",
            "of",
            "all",
            "cartoons",
            "written",
            "by",
            "Todd",
            "Casey",
            "."
        ]
    },
    {
        "database_id": "tvshow",
        "query": "select Title from Cartoon where Written_by  =  'Todd Casey'",
        "query_toks": [
            "select",
            "title",
            "from",
            "cartoon",
            "where",
            "written_by",
            "=",
            "'todd",
            "casey'"
        ],
        "results_raw": [
            [
                "Title"
            ],
            [
                "Enter the Outsiders!"
            ],
            [
                "Return of the Fearsome Fangs!"
            ]
        ],
        "response": "Here are the titles which are cartoons written by Todd Casey.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "titles",
            "which",
            "are",
            "cartoons",
            "written",
            "by",
            "Todd",
            "Casey",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "select Title from Cartoon where Written_by  =  'Todd Casey'",
        "query_w_results_blank_res": "select Title from Cartoon where Written_by  =  'Todd Casey'",
        "query_toks_w_results": [
            "select",
            "title",
            "from",
            "cartoon",
            "where",
            "written_by",
            "=",
            "'todd",
            "casey'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "title",
            "from",
            "cartoon",
            "where",
            "written_by",
            "=",
            "'todd",
            "casey'"
        ],
        "response_blank_res": "Here are the titles which are cartoons written by Todd Casey .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "titles",
            "which",
            "are",
            "cartoons",
            "written",
            "by",
            "Todd",
            "Casey",
            "."
        ]
    },
    {
        "database_id": "tvshow",
        "query": "SELECT T1.id FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "query_toks": [
            "select",
            "t1",
            ".",
            "id",
            "from",
            "tv_channel",
            "as",
            "t1",
            "join",
            "cartoon",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "channel",
            "where",
            "t2",
            ".",
            "written_by",
            "=",
            "'todd",
            "casey'"
        ],
        "results_raw": [
            [
                "id"
            ],
            [
                "706"
            ],
            [
                "700"
            ]
        ],
        "response": "The table shows the corresponding television channel of the cartoon written by Todd Casey.",
        "response_toks": [
            "The",
            "table",
            "shows",
            "the",
            "corresponding",
            "television",
            "channel",
            "of",
            "the",
            "cartoon",
            "written",
            "by",
            "Todd",
            "Casey",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.id FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "query_w_results_blank_res": "SELECT T1.id FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "id",
            "from",
            "tv_channel",
            "as",
            "t1",
            "join",
            "cartoon",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "channel",
            "where",
            "t2",
            ".",
            "written_by",
            "=",
            "'todd",
            "casey'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "id",
            "from",
            "tv_channel",
            "as",
            "t1",
            "join",
            "cartoon",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "channel",
            "where",
            "t2",
            ".",
            "written_by",
            "=",
            "'todd",
            "casey'"
        ],
        "response_blank_res": "The table shows the corresponding television channel of the cartoon written by Todd Casey .",
        "response_toks_blank_res": [
            "The",
            "table",
            "shows",
            "the",
            "corresponding",
            "television",
            "channel",
            "of",
            "the",
            "cartoon",
            "written",
            "by",
            "Todd",
            "Casey",
            "."
        ]
    },
    {
        "database_id": "museum_visit",
        "query": "SELECT sum ( t2.Total_spent )  FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id WHERE t1.Level_of_membership   =   1",
        "query_toks": [
            "select",
            "sum",
            "(",
            "t2",
            ".",
            "total_spent",
            ")",
            "from",
            "visitor",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "visitor_id",
            "where",
            "t1",
            ".",
            "level_of_membership",
            "=",
            "1"
        ],
        "results_raw": [
            [
                "sum(t2.Total_spent)"
            ],
            [
                570.84
            ]
        ],
        "response": "The total ticket spent of the visitors whose membership level is 1 is 570.84",
        "response_toks": [
            "The",
            "total",
            "ticket",
            "spent",
            "of",
            "the",
            "visitors",
            "whose",
            "membership",
            "level",
            "is",
            "1",
            "is",
            "570.84"
        ],
        "results_map": {
            "result0": "570.84"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT sum ( t2.Total_spent )  FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id WHERE t1.Level_of_membership   =   1 | 570.84 ",
        "query_w_results_blank_res": "SELECT sum ( t2.Total_spent )  FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id WHERE t1.Level_of_membership   =   1 | result0 ",
        "query_toks_w_results": [
            "select",
            "sum",
            "(",
            "t2",
            ".",
            "total_spent",
            ")",
            "from",
            "visitor",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "visitor_id",
            "where",
            "t1",
            ".",
            "level_of_membership",
            "=",
            "1",
            "570.84"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "sum",
            "(",
            "t2",
            ".",
            "total_spent",
            ")",
            "from",
            "visitor",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "visitor_id",
            "where",
            "t1",
            ".",
            "level_of_membership",
            "=",
            "1",
            "result0"
        ],
        "response_blank_res": "The total ticket spent of the visitors whose membership level is 1 is result0",
        "response_toks_blank_res": [
            "The",
            "total",
            "ticket",
            "spent",
            "of",
            "the",
            "visitors",
            "whose",
            "membership",
            "level",
            "is",
            "1",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "museum_visit",
        "query": "SELECT COUNT ( id )  FROM visitor WHERE Level_of_membership  =  1",
        "query_toks": [
            "select",
            "count",
            "(",
            "id",
            ")",
            "from",
            "visitor",
            "where",
            "level_of_membership",
            "=",
            "1"
        ],
        "results_raw": [
            [
                "COUNT(id)"
            ],
            [
                2
            ]
        ],
        "response": "There are 2 visitors at membership level 1.",
        "response_toks": [
            "There",
            "are",
            "2",
            "visitors",
            "at",
            "membership",
            "level",
            "1",
            "."
        ],
        "results_map": {
            "result0": "2"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT COUNT ( id )  FROM visitor WHERE Level_of_membership  =  1 | 2 ",
        "query_w_results_blank_res": "SELECT COUNT ( id )  FROM visitor WHERE Level_of_membership  =  1 | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "id",
            ")",
            "from",
            "visitor",
            "where",
            "level_of_membership",
            "=",
            "1",
            "2"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "id",
            ")",
            "from",
            "visitor",
            "where",
            "level_of_membership",
            "=",
            "1",
            "result0"
        ],
        "response_blank_res": "There are result0 visitors at membership level 1 .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "visitors",
            "at",
            "membership",
            "level",
            "1",
            "."
        ]
    },
    {
        "database_id": "museum_visit",
        "query": "SELECT COUNT ( DISTINCT level_of_membership )  FROM visitor",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "level_of_membership",
            ")",
            "from",
            "visitor"
        ],
        "results_raw": [
            [
                "COUNT(DISTINCT level_of_membership)"
            ],
            [
                5
            ]
        ],
        "response": "There are 5 different level of membership",
        "response_toks": [
            "There",
            "are",
            "5",
            "different",
            "level",
            "of",
            "membership"
        ],
        "results_map": {
            "result0": "5"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT COUNT ( DISTINCT level_of_membership )  FROM visitor | 5 ",
        "query_w_results_blank_res": "SELECT COUNT ( DISTINCT level_of_membership )  FROM visitor | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "distinct",
            "level_of_membership",
            ")",
            "from",
            "visitor",
            "5"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "distinct",
            "level_of_membership",
            ")",
            "from",
            "visitor",
            "result0"
        ],
        "response_blank_res": "There are result0 different level of membership",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "different",
            "level",
            "of",
            "membership"
        ]
    },
    {
        "database_id": "museum_visit",
        "query": "SELECT name FROM visitor WHERE Level_of_membership  =  1",
        "query_toks": [
            "select",
            "name",
            "from",
            "visitor",
            "where",
            "level_of_membership",
            "=",
            "1"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Arjen Robben"
            ],
            [
                "Rafael van der Vaart"
            ]
        ],
        "response": "The names of visitors with level of membership 1 are Arjen Robben and Rafael van der Vaart",
        "response_toks": [
            "The",
            "names",
            "of",
            "visitors",
            "with",
            "level",
            "of",
            "membership",
            "1",
            "are",
            "Arjen",
            "Robben",
            "and",
            "Rafael",
            "van",
            "der",
            "Vaart"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT name FROM visitor WHERE Level_of_membership  =  1",
        "query_w_results_blank_res": "SELECT name FROM visitor WHERE Level_of_membership  =  1",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "visitor",
            "where",
            "level_of_membership",
            "=",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "visitor",
            "where",
            "level_of_membership",
            "=",
            "1"
        ],
        "response_blank_res": "The names of visitors with level of membership 1 are Arjen Robben and Rafael van der Vaart",
        "response_toks_blank_res": [
            "The",
            "names",
            "of",
            "visitors",
            "with",
            "level",
            "of",
            "membership",
            "1",
            "are",
            "Arjen",
            "Robben",
            "and",
            "Rafael",
            "van",
            "der",
            "Vaart"
        ]
    },
    {
        "database_id": "museum_visit",
        "query": "SELECT  t1.level_of_membership, sum ( Total_spent )  FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id group by Level_of_membership",
        "query_toks": [
            "select",
            "t1",
            ".",
            "level_of_membership",
            ",",
            "sum",
            "(",
            "total_spent",
            ")",
            "from",
            "visitor",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "visitor_id",
            "group",
            "by",
            "level_of_membership"
        ],
        "results_raw": [
            [
                "Level_of_membership",
                "sum(Total_spent)"
            ],
            [
                1,
                570.84
            ],
            [
                6,
                410.12
            ]
        ],
        "response": "The total spent at level of membership 1 is 570.84 and the total spent at level of membership 6 is 410.12",
        "response_toks": [
            "The",
            "total",
            "spent",
            "at",
            "level",
            "of",
            "membership",
            "1",
            "is",
            "570.84",
            "and",
            "the",
            "total",
            "spent",
            "at",
            "level",
            "of",
            "membership",
            "6",
            "is",
            "410.12"
        ],
        "results_map": {
            "result0": "1",
            "result1": "570.84",
            "result2": "6",
            "result3": "410.12"
        },
        "results_blank_res": "result0 result1 result2 result3 ",
        "query_w_results": "SELECT  t1.level_of_membership, sum ( Total_spent )  FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id group by Level_of_membership | 1 570.84 6 410.12 ",
        "query_w_results_blank_res": "SELECT  t1.level_of_membership, sum ( Total_spent )  FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id group by Level_of_membership | result0 result1 result2 result3 ",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "level_of_membership",
            ",",
            "sum",
            "(",
            "total_spent",
            ")",
            "from",
            "visitor",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "visitor_id",
            "group",
            "by",
            "level_of_membership",
            "1",
            "570.84",
            "6",
            "410.12"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "level_of_membership",
            ",",
            "sum",
            "(",
            "total_spent",
            ")",
            "from",
            "visitor",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "visitor_id",
            "group",
            "by",
            "level_of_membership",
            "result0",
            "result1",
            "result2",
            "result3"
        ],
        "response_blank_res": "The total spent at level of membership result0 is result1 and the total spent at level of membership result2 is result3",
        "response_toks_blank_res": [
            "The",
            "total",
            "spent",
            "at",
            "level",
            "of",
            "membership",
            "result0",
            "is",
            "result1",
            "and",
            "the",
            "total",
            "spent",
            "at",
            "level",
            "of",
            "membership",
            "result2",
            "is",
            "result3"
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT first_name FROM players WHERE player_id  =  200001",
        "query_toks": [
            "select",
            "first_name",
            "from",
            "players",
            "where",
            "player_id",
            "=",
            "200001"
        ],
        "results_raw": [
            [
                "first_name"
            ],
            [
                "Martina"
            ]
        ],
        "response": "Martina is the first name of player id 200001.",
        "response_toks": [
            "Martina",
            "is",
            "the",
            "first",
            "name",
            "of",
            "player",
            "id",
            "200001",
            "."
        ],
        "results_map": {
            "result0": "Martina"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT first_name FROM players WHERE player_id  =  200001 | Martina ",
        "query_w_results_blank_res": "SELECT first_name FROM players WHERE player_id  =  200001 | result0 ",
        "query_toks_w_results": [
            "select",
            "first_name",
            "from",
            "players",
            "where",
            "player_id",
            "=",
            "200001",
            "Martina"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "first_name",
            "from",
            "players",
            "where",
            "player_id",
            "=",
            "200001",
            "result0"
        ],
        "response_blank_res": "result0 is the first name of player id 200001 .",
        "response_toks_blank_res": [
            "result0",
            "is",
            "the",
            "first",
            "name",
            "of",
            "player",
            "id",
            "200001",
            "."
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT birth_date FROM players WHERE player_id  =  200001",
        "query_toks": [
            "select",
            "birth_date",
            "from",
            "players",
            "where",
            "player_id",
            "=",
            "200001"
        ],
        "results_raw": [
            [
                "birth_date"
            ],
            [
                19800930
            ]
        ],
        "response": "The birth date of player_id with \"200001\" is 19800930",
        "response_toks": [
            "The",
            "birth",
            "date",
            "of",
            "player_id",
            "with",
            "``",
            "200001",
            "''",
            "is",
            "19800930"
        ],
        "results_map": {
            "result0": "19800930"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT birth_date FROM players WHERE player_id  =  200001 | 19800930 ",
        "query_w_results_blank_res": "SELECT birth_date FROM players WHERE player_id  =  200001 | result0 ",
        "query_toks_w_results": [
            "select",
            "birth_date",
            "from",
            "players",
            "where",
            "player_id",
            "=",
            "200001",
            "19800930"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "birth_date",
            "from",
            "players",
            "where",
            "player_id",
            "=",
            "200001",
            "result0"
        ],
        "response_blank_res": "The birth date of player_id with `` 200001 '' is result0",
        "response_toks_blank_res": [
            "The",
            "birth",
            "date",
            "of",
            "player_id",
            "with",
            "``",
            "200001",
            "''",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT country_code FROM players WHERE player_id  =  200003",
        "query_toks": [
            "select",
            "country_code",
            "from",
            "players",
            "where",
            "player_id",
            "=",
            "200003"
        ],
        "results_raw": [
            [
                "country_code"
            ],
            [
                "BEL"
            ]
        ],
        "response": "BEL is the country code for player id 200003",
        "response_toks": [
            "BEL",
            "is",
            "the",
            "country",
            "code",
            "for",
            "player",
            "id",
            "200003"
        ],
        "results_map": {
            "result0": "BEL"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT country_code FROM players WHERE player_id  =  200003 | BEL ",
        "query_w_results_blank_res": "SELECT country_code FROM players WHERE player_id  =  200003 | result0 ",
        "query_toks_w_results": [
            "select",
            "country_code",
            "from",
            "players",
            "where",
            "player_id",
            "=",
            "200003",
            "BEL"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "country_code",
            "from",
            "players",
            "where",
            "player_id",
            "=",
            "200003",
            "result0"
        ],
        "response_blank_res": "result0 is the country code for player id 200003",
        "response_toks_blank_res": [
            "result0",
            "is",
            "the",
            "country",
            "code",
            "for",
            "player",
            "id",
            "200003"
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT last_name FROM players WHERE player_id  =  200003",
        "query_toks": [
            "select",
            "last_name",
            "from",
            "players",
            "where",
            "player_id",
            "=",
            "200003"
        ],
        "results_raw": [
            [
                "last_name"
            ],
            [
                "Henin"
            ]
        ],
        "response": "The last name of the player with id 200003 is Henin",
        "response_toks": [
            "The",
            "last",
            "name",
            "of",
            "the",
            "player",
            "with",
            "id",
            "200003",
            "is",
            "Henin"
        ],
        "results_map": {
            "result0": "Henin"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT last_name FROM players WHERE player_id  =  200003 | Henin ",
        "query_w_results_blank_res": "SELECT last_name FROM players WHERE player_id  =  200003 | result0 ",
        "query_toks_w_results": [
            "select",
            "last_name",
            "from",
            "players",
            "where",
            "player_id",
            "=",
            "200003",
            "Henin"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "last_name",
            "from",
            "players",
            "where",
            "player_id",
            "=",
            "200003",
            "result0"
        ],
        "response_blank_res": "The last name of the player with id 200003 is result0",
        "response_toks_blank_res": [
            "The",
            "last",
            "name",
            "of",
            "the",
            "player",
            "with",
            "id",
            "200003",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count ( * )  FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id   =   T2.document_id WHERE T2.Document_Name   =   'Welcome to NY'",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "paragraphs",
            "as",
            "t1",
            "join",
            "documents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "document_id",
            "=",
            "t2",
            ".",
            "document_id",
            "where",
            "t2",
            ".",
            "document_name",
            "=",
            "'welcome",
            "to",
            "ny'"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                2
            ]
        ],
        "response": "Two paragraphs are associated with document 'Welcome to NY'.",
        "response_toks": [
            "Two",
            "paragraphs",
            "are",
            "associated",
            "with",
            "document",
            "'Welcome",
            "to",
            "NY",
            "'",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT count ( * )  FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id   =   T2.document_id WHERE T2.Document_Name   =   'Welcome to NY'",
        "query_w_results_blank_res": "SELECT count ( * )  FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id   =   T2.document_id WHERE T2.Document_Name   =   'Welcome to NY'",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "paragraphs",
            "as",
            "t1",
            "join",
            "documents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "document_id",
            "=",
            "t2",
            ".",
            "document_id",
            "where",
            "t2",
            ".",
            "document_name",
            "=",
            "'welcome",
            "to",
            "ny'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "paragraphs",
            "as",
            "t1",
            "join",
            "documents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "document_id",
            "=",
            "t2",
            ".",
            "document_id",
            "where",
            "t2",
            ".",
            "document_name",
            "=",
            "'welcome",
            "to",
            "ny'"
        ],
        "response_blank_res": "Two paragraphs are associated with document 'Welcome to NY ' .",
        "response_toks_blank_res": [
            "Two",
            "paragraphs",
            "are",
            "associated",
            "with",
            "document",
            "'Welcome",
            "to",
            "NY",
            "'",
            "."
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id   =   T2.document_id WHERE T2.Document_Name   =   'Welcome to NY'",
        "query_toks": [
            "select",
            "t1",
            ".",
            "paragraph_text",
            "from",
            "paragraphs",
            "as",
            "t1",
            "join",
            "documents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "document_id",
            "=",
            "t2",
            ".",
            "document_id",
            "where",
            "t2",
            ".",
            "document_name",
            "=",
            "'welcome",
            "to",
            "ny'"
        ],
        "results_raw": [
            [
                "Paragraph_Text"
            ],
            [
                "Japan"
            ],
            [
                "Micronesia"
            ]
        ],
        "response": "The following table shows paragraph texts associated with document 'Welcome to NY'.",
        "response_toks": [
            "The",
            "following",
            "table",
            "shows",
            "paragraph",
            "texts",
            "associated",
            "with",
            "document",
            "'Welcome",
            "to",
            "NY",
            "'",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id   =   T2.document_id WHERE T2.Document_Name   =   'Welcome to NY'",
        "query_w_results_blank_res": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id   =   T2.document_id WHERE T2.Document_Name   =   'Welcome to NY'",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "paragraph_text",
            "from",
            "paragraphs",
            "as",
            "t1",
            "join",
            "documents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "document_id",
            "=",
            "t2",
            ".",
            "document_id",
            "where",
            "t2",
            ".",
            "document_name",
            "=",
            "'welcome",
            "to",
            "ny'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "paragraph_text",
            "from",
            "paragraphs",
            "as",
            "t1",
            "join",
            "documents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "document_id",
            "=",
            "t2",
            ".",
            "document_id",
            "where",
            "t2",
            ".",
            "document_name",
            "=",
            "'welcome",
            "to",
            "ny'"
        ],
        "response_blank_res": "The following table shows paragraph texts associated with document 'Welcome to NY ' .",
        "response_toks_blank_res": [
            "The",
            "following",
            "table",
            "shows",
            "paragraph",
            "texts",
            "associated",
            "with",
            "document",
            "'Welcome",
            "to",
            "NY",
            "'",
            "."
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.paragraph_id FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id   =   T2.document_id WHERE T2.Document_Name   =   'Welcome to NY'",
        "query_toks": [
            "select",
            "t1",
            ".",
            "paragraph_id",
            "from",
            "paragraphs",
            "as",
            "t1",
            "join",
            "documents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "document_id",
            "=",
            "t2",
            ".",
            "document_id",
            "where",
            "t2",
            ".",
            "document_name",
            "=",
            "'welcome",
            "to",
            "ny'"
        ],
        "results_raw": [
            [
                "Paragraph_ID"
            ],
            [
                16615
            ],
            [
                608931827
            ]
        ],
        "response": "The following table shows paragraph ids associated with document 'Welcome to NY'.",
        "response_toks": [
            "The",
            "following",
            "table",
            "shows",
            "paragraph",
            "ids",
            "associated",
            "with",
            "document",
            "'Welcome",
            "to",
            "NY",
            "'",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.paragraph_id FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id   =   T2.document_id WHERE T2.Document_Name   =   'Welcome to NY'",
        "query_w_results_blank_res": "SELECT T1.paragraph_id FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id   =   T2.document_id WHERE T2.Document_Name   =   'Welcome to NY'",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "paragraph_id",
            "from",
            "paragraphs",
            "as",
            "t1",
            "join",
            "documents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "document_id",
            "=",
            "t2",
            ".",
            "document_id",
            "where",
            "t2",
            ".",
            "document_name",
            "=",
            "'welcome",
            "to",
            "ny'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "paragraph_id",
            "from",
            "paragraphs",
            "as",
            "t1",
            "join",
            "documents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "document_id",
            "=",
            "t2",
            ".",
            "document_id",
            "where",
            "t2",
            ".",
            "document_name",
            "=",
            "'welcome",
            "to",
            "ny'"
        ],
        "response_blank_res": "The following table shows paragraph ids associated with document 'Welcome to NY ' .",
        "response_toks_blank_res": [
            "The",
            "following",
            "table",
            "shows",
            "paragraph",
            "ids",
            "associated",
            "with",
            "document",
            "'Welcome",
            "to",
            "NY",
            "'",
            "."
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT sum ( ranking_points )  ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id   =   T2.player_id GROUP BY T1.first_name",
        "query_toks": [
            "select",
            "sum",
            "(",
            "ranking_points",
            ")",
            ",",
            "t1",
            ".",
            "first_name",
            "from",
            "players",
            "as",
            "t1",
            "join",
            "rankings",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "player_id",
            "=",
            "t2",
            ".",
            "player_id",
            "group",
            "by",
            "t1",
            ".",
            "first_name"
        ],
        "results_raw": [
            [
                "sum(ranking_points)",
                "first_name"
            ],
            [
                68,
                "Aastha"
            ],
            [
                304,
                "Abbi"
            ],
            [
                5214,
                "Abbie"
            ]
        ],
        "response": "Here is the result table of the total ranking point for each player and their first name. For example, one of the players is Aastha with the total ranking point being 68.",
        "response_toks": [
            "Here",
            "is",
            "the",
            "result",
            "table",
            "of",
            "the",
            "total",
            "ranking",
            "point",
            "for",
            "each",
            "player",
            "and",
            "their",
            "first",
            "name",
            ".",
            "For",
            "example",
            ",",
            "one",
            "of",
            "the",
            "players",
            "is",
            "Aastha",
            "with",
            "the",
            "total",
            "ranking",
            "point",
            "being",
            "68",
            "."
        ],
        "results_map": {
            "result0": "Aastha",
            "result1": "68"
        },
        "results_blank_res": "result0 result1 ",
        "query_w_results": "SELECT sum ( ranking_points )  ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id   =   T2.player_id GROUP BY T1.first_name | Aastha 68 ",
        "query_w_results_blank_res": "SELECT sum ( ranking_points )  ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id   =   T2.player_id GROUP BY T1.first_name | result0 result1 ",
        "query_toks_w_results": [
            "select",
            "sum",
            "(",
            "ranking_points",
            ")",
            ",",
            "t1",
            ".",
            "first_name",
            "from",
            "players",
            "as",
            "t1",
            "join",
            "rankings",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "player_id",
            "=",
            "t2",
            ".",
            "player_id",
            "group",
            "by",
            "t1",
            ".",
            "first_name",
            "Aastha",
            "68"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "sum",
            "(",
            "ranking_points",
            ")",
            ",",
            "t1",
            ".",
            "first_name",
            "from",
            "players",
            "as",
            "t1",
            "join",
            "rankings",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "player_id",
            "=",
            "t2",
            ".",
            "player_id",
            "group",
            "by",
            "t1",
            ".",
            "first_name",
            "result0",
            "result1"
        ],
        "response_blank_res": "Here is the result table of the total ranking point for each player and their first name . For example , one of the players is result0 with the total ranking point being result1 .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "result",
            "table",
            "of",
            "the",
            "total",
            "ranking",
            "point",
            "for",
            "each",
            "player",
            "and",
            "their",
            "first",
            "name",
            ".",
            "For",
            "example",
            ",",
            "one",
            "of",
            "the",
            "players",
            "is",
            "result0",
            "with",
            "the",
            "total",
            "ranking",
            "point",
            "being",
            "result1",
            "."
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT distinct T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id   =   T2.player_id WHERE T2.ranking  =  1",
        "query_toks": [
            "select",
            "distinct",
            "t1",
            ".",
            "first_name",
            "from",
            "players",
            "as",
            "t1",
            "join",
            "rankings",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "player_id",
            "=",
            "t2",
            ".",
            "player_id",
            "where",
            "t2",
            ".",
            "ranking",
            "=",
            "1"
        ],
        "results_raw": [
            [
                "first_name"
            ],
            [
                "Venus"
            ],
            [
                "Serena"
            ],
            [
                "Maria"
            ]
        ],
        "response": "Here is the table of the different first names of players who got the first rank. For example, one of them is Serena",
        "response_toks": [
            "Here",
            "is",
            "the",
            "table",
            "of",
            "the",
            "different",
            "first",
            "names",
            "of",
            "players",
            "who",
            "got",
            "the",
            "first",
            "rank",
            ".",
            "For",
            "example",
            ",",
            "one",
            "of",
            "them",
            "is",
            "Serena"
        ],
        "results_map": {
            "result0": "Serena"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT distinct T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id   =   T2.player_id WHERE T2.ranking  =  1 | Serena ",
        "query_w_results_blank_res": "SELECT distinct T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id   =   T2.player_id WHERE T2.ranking  =  1 | result0 ",
        "query_toks_w_results": [
            "select",
            "distinct",
            "t1",
            ".",
            "first_name",
            "from",
            "players",
            "as",
            "t1",
            "join",
            "rankings",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "player_id",
            "=",
            "t2",
            ".",
            "player_id",
            "where",
            "t2",
            ".",
            "ranking",
            "=",
            "1",
            "Serena"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "t1",
            ".",
            "first_name",
            "from",
            "players",
            "as",
            "t1",
            "join",
            "rankings",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "player_id",
            "=",
            "t2",
            ".",
            "player_id",
            "where",
            "t2",
            ".",
            "ranking",
            "=",
            "1",
            "result0"
        ],
        "response_blank_res": "Here is the table of the different first names of players who got the first rank . For example , one of them is result0",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "table",
            "of",
            "the",
            "different",
            "first",
            "names",
            "of",
            "players",
            "who",
            "got",
            "the",
            "first",
            "rank",
            ".",
            "For",
            "example",
            ",",
            "one",
            "of",
            "them",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT distinct T1.first_name, T2.ranking FROM players AS T1 JOIN rankings AS T2 ON T1.player_id   =   T2.player_id WHERE T2.ranking  =  1",
        "query_toks": [
            "select",
            "distinct",
            "t1",
            ".",
            "first_name",
            ",",
            "t2",
            ".",
            "ranking",
            "from",
            "players",
            "as",
            "t1",
            "join",
            "rankings",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "player_id",
            "=",
            "t2",
            ".",
            "player_id",
            "where",
            "t2",
            ".",
            "ranking",
            "=",
            "1"
        ],
        "results_raw": [
            [
                "first_name",
                "ranking"
            ],
            [
                "Venus",
                1
            ],
            [
                "Serena",
                1
            ],
            [
                "Maria",
                1
            ]
        ],
        "response": "Yes. Here are the distinct first names of players who got the first rank.",
        "response_toks": [
            "Yes",
            ".",
            "Here",
            "are",
            "the",
            "distinct",
            "first",
            "names",
            "of",
            "players",
            "who",
            "got",
            "the",
            "first",
            "rank",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT distinct T1.first_name, T2.ranking FROM players AS T1 JOIN rankings AS T2 ON T1.player_id   =   T2.player_id WHERE T2.ranking  =  1",
        "query_w_results_blank_res": "SELECT distinct T1.first_name, T2.ranking FROM players AS T1 JOIN rankings AS T2 ON T1.player_id   =   T2.player_id WHERE T2.ranking  =  1",
        "query_toks_w_results": [
            "select",
            "distinct",
            "t1",
            ".",
            "first_name",
            ",",
            "t2",
            ".",
            "ranking",
            "from",
            "players",
            "as",
            "t1",
            "join",
            "rankings",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "player_id",
            "=",
            "t2",
            ".",
            "player_id",
            "where",
            "t2",
            ".",
            "ranking",
            "=",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "t1",
            ".",
            "first_name",
            ",",
            "t2",
            ".",
            "ranking",
            "from",
            "players",
            "as",
            "t1",
            "join",
            "rankings",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "player_id",
            "=",
            "t2",
            ".",
            "player_id",
            "where",
            "t2",
            ".",
            "ranking",
            "=",
            "1"
        ],
        "response_blank_res": "Yes . Here are the distinct first names of players who got the first rank .",
        "response_toks_blank_res": [
            "Yes",
            ".",
            "Here",
            "are",
            "the",
            "distinct",
            "first",
            "names",
            "of",
            "players",
            "who",
            "got",
            "the",
            "first",
            "rank",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT Name FROM country WHERE Continent  =  \"Africa\" order by population desc limit 1",
        "query_toks": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"africa\"",
            "order",
            "by",
            "population",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Nigeria"
            ]
        ],
        "response": "the  African country which has the largest population is Nigeria",
        "response_toks": [
            "the",
            "African",
            "country",
            "which",
            "has",
            "the",
            "largest",
            "population",
            "is",
            "Nigeria"
        ],
        "results_map": {
            "result0": "Nigeria"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT Name FROM country WHERE Continent  =  \"Africa\" order by population desc limit 1 | Nigeria ",
        "query_w_results_blank_res": "SELECT Name FROM country WHERE Continent  =  \"Africa\" order by population desc limit 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"africa\"",
            "order",
            "by",
            "population",
            "desc",
            "limit",
            "1",
            "Nigeria"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"africa\"",
            "order",
            "by",
            "population",
            "desc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "the African country which has the largest population is result0",
        "response_toks_blank_res": [
            "the",
            "African",
            "country",
            "which",
            "has",
            "the",
            "largest",
            "population",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "world_1",
        "query": "select population from country where Name  =  'Nigeria'",
        "query_toks": [
            "select",
            "population",
            "from",
            "country",
            "where",
            "name",
            "=",
            "'nigeria'"
        ],
        "results_raw": [
            [
                "Population"
            ],
            [
                111506000
            ]
        ],
        "response": "the population of Nigeria is 111506000",
        "response_toks": [
            "the",
            "population",
            "of",
            "Nigeria",
            "is",
            "111506000"
        ],
        "results_map": {
            "result0": "111506000"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "select population from country where Name  =  'Nigeria' | 111506000 ",
        "query_w_results_blank_res": "select population from country where Name  =  'Nigeria' | result0 ",
        "query_toks_w_results": [
            "select",
            "population",
            "from",
            "country",
            "where",
            "name",
            "=",
            "'nigeria'",
            "111506000"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "population",
            "from",
            "country",
            "where",
            "name",
            "=",
            "'nigeria'",
            "result0"
        ],
        "response_blank_res": "the population of Nigeria is result0",
        "response_toks_blank_res": [
            "the",
            "population",
            "of",
            "Nigeria",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT Name FROM country WHERE Continent   =   \"Asia\"  order by population desc limit 1",
        "query_toks": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"asia\"",
            "order",
            "by",
            "population",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "China"
            ]
        ],
        "response": "the Asian country has the largest population is China",
        "response_toks": [
            "the",
            "Asian",
            "country",
            "has",
            "the",
            "largest",
            "population",
            "is",
            "China"
        ],
        "results_map": {
            "result0": "China"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT Name FROM country WHERE Continent   =   \"Asia\"  order by population desc limit 1 | China ",
        "query_w_results_blank_res": "SELECT Name FROM country WHERE Continent   =   \"Asia\"  order by population desc limit 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"asia\"",
            "order",
            "by",
            "population",
            "desc",
            "limit",
            "1",
            "China"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"asia\"",
            "order",
            "by",
            "population",
            "desc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "the Asian country has the largest population is result0",
        "response_toks_blank_res": [
            "the",
            "Asian",
            "country",
            "has",
            "the",
            "largest",
            "population",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT population from country where name  =  'China'",
        "query_toks": [
            "select",
            "population",
            "from",
            "country",
            "where",
            "name",
            "=",
            "'china'"
        ],
        "results_raw": [
            [
                "Population"
            ],
            [
                1277558000
            ]
        ],
        "response": "China's population is 1277558000",
        "response_toks": [
            "China",
            "'s",
            "population",
            "is",
            "1277558000"
        ],
        "results_map": {
            "result0": "1277558000"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT population from country where name  =  'China' | 1277558000 ",
        "query_w_results_blank_res": "SELECT population from country where name  =  'China' | result0 ",
        "query_toks_w_results": [
            "select",
            "population",
            "from",
            "country",
            "where",
            "name",
            "=",
            "'china'",
            "1277558000"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "population",
            "from",
            "country",
            "where",
            "name",
            "=",
            "'china'",
            "result0"
        ],
        "response_blank_res": "China 's population is result0",
        "response_toks_blank_res": [
            "China",
            "'s",
            "population",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT count ( Name )  FROM country WHERE Continent   =   \"Asia\"  AND population >  ( SELECT population FROM country WHERE name  =  'Nigeria' ) ",
        "query_toks": [
            "select",
            "count",
            "(",
            "name",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"asia\"",
            "and",
            "population",
            ">",
            "(",
            "select",
            "population",
            "from",
            "country",
            "where",
            "name",
            "=",
            "'nigeria'",
            ")"
        ],
        "results_raw": [
            [
                "count(Name)"
            ],
            [
                6
            ]
        ],
        "response": "there are 6 Asian countries which have a population greater than that of Nigeria",
        "response_toks": [
            "there",
            "are",
            "6",
            "Asian",
            "countries",
            "which",
            "have",
            "a",
            "population",
            "greater",
            "than",
            "that",
            "of",
            "Nigeria"
        ],
        "results_map": {
            "result0": "6"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( Name )  FROM country WHERE Continent   =   \"Asia\"  AND population >  ( SELECT population FROM country WHERE name  =  'Nigeria' )  | 6 ",
        "query_w_results_blank_res": "SELECT count ( Name )  FROM country WHERE Continent   =   \"Asia\"  AND population >  ( SELECT population FROM country WHERE name  =  'Nigeria' )  | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "name",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"asia\"",
            "and",
            "population",
            ">",
            "(",
            "select",
            "population",
            "from",
            "country",
            "where",
            "name",
            "=",
            "'nigeria'",
            ")",
            "6"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "name",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"asia\"",
            "and",
            "population",
            ">",
            "(",
            "select",
            "population",
            "from",
            "country",
            "where",
            "name",
            "=",
            "'nigeria'",
            ")",
            "result0"
        ],
        "response_blank_res": "there are result0 Asian countries which have a population greater than that of Nigeria",
        "response_toks_blank_res": [
            "there",
            "are",
            "result0",
            "Asian",
            "countries",
            "which",
            "have",
            "a",
            "population",
            "greater",
            "than",
            "that",
            "of",
            "Nigeria"
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT Name FROM country WHERE Continent   =   \"Asia\"  AND population >  ( SELECT population FROM country WHERE name  =  'Nigeria' ) ",
        "query_toks": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"asia\"",
            "and",
            "population",
            ">",
            "(",
            "select",
            "population",
            "from",
            "country",
            "where",
            "name",
            "=",
            "'nigeria'",
            ")"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Bangladesh"
            ],
            [
                "China"
            ],
            [
                "Indonesia"
            ]
        ],
        "response": "here are the name of  the Asian countries which have a population greater than that of Nigeria",
        "response_toks": [
            "here",
            "are",
            "the",
            "name",
            "of",
            "the",
            "Asian",
            "countries",
            "which",
            "have",
            "a",
            "population",
            "greater",
            "than",
            "that",
            "of",
            "Nigeria"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Name FROM country WHERE Continent   =   \"Asia\"  AND population >  ( SELECT population FROM country WHERE name  =  'Nigeria' ) ",
        "query_w_results_blank_res": "SELECT Name FROM country WHERE Continent   =   \"Asia\"  AND population >  ( SELECT population FROM country WHERE name  =  'Nigeria' ) ",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"asia\"",
            "and",
            "population",
            ">",
            "(",
            "select",
            "population",
            "from",
            "country",
            "where",
            "name",
            "=",
            "'nigeria'",
            ")"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "\"asia\"",
            "and",
            "population",
            ">",
            "(",
            "select",
            "population",
            "from",
            "country",
            "where",
            "name",
            "=",
            "'nigeria'",
            ")"
        ],
        "response_blank_res": "here are the name of the Asian countries which have a population greater than that of Nigeria",
        "response_toks_blank_res": [
            "here",
            "are",
            "the",
            "name",
            "of",
            "the",
            "Asian",
            "countries",
            "which",
            "have",
            "a",
            "population",
            "greater",
            "than",
            "that",
            "of",
            "Nigeria"
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode JOIN city AS T3 ON T1.Code   =   T3.CountryCode WHERE T1.Continent   =   \"Asia\"",
        "query_toks": [
            "select",
            "distinct",
            "t3",
            ".",
            "name",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "join",
            "city",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t3",
            ".",
            "countrycode",
            "where",
            "t1",
            ".",
            "continent",
            "=",
            "\"asia\""
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Kabul"
            ],
            [
                "Qandahar"
            ],
            [
                "Herat"
            ]
        ],
        "response": "Here is the table of unique cities in Asian countries.  For example, they are Kabul.",
        "response_toks": [
            "Here",
            "is",
            "the",
            "table",
            "of",
            "unique",
            "cities",
            "in",
            "Asian",
            "countries",
            ".",
            "For",
            "example",
            ",",
            "they",
            "are",
            "Kabul",
            "."
        ],
        "results_map": {
            "result0": "Kabul"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode JOIN city AS T3 ON T1.Code   =   T3.CountryCode WHERE T1.Continent   =   \"Asia\" | Kabul ",
        "query_w_results_blank_res": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode JOIN city AS T3 ON T1.Code   =   T3.CountryCode WHERE T1.Continent   =   \"Asia\" | result0 ",
        "query_toks_w_results": [
            "select",
            "distinct",
            "t3",
            ".",
            "name",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "join",
            "city",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t3",
            ".",
            "countrycode",
            "where",
            "t1",
            ".",
            "continent",
            "=",
            "\"asia\"",
            "Kabul"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "t3",
            ".",
            "name",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "join",
            "city",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t3",
            ".",
            "countrycode",
            "where",
            "t1",
            ".",
            "continent",
            "=",
            "\"asia\"",
            "result0"
        ],
        "response_blank_res": "Here is the table of unique cities in Asian countries . For example , they are result0 .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "table",
            "of",
            "unique",
            "cities",
            "in",
            "Asian",
            "countries",
            ".",
            "For",
            "example",
            ",",
            "they",
            "are",
            "result0",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode JOIN city AS T3 ON T1.Code   =   T3.CountryCode WHERE T2.IsOfficial   =   'T' AND T2.Language   =   'Chinese' AND T1.Continent   =   \"Asia\"",
        "query_toks": [
            "select",
            "distinct",
            "t3",
            ".",
            "name",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "join",
            "city",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t3",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "isofficial",
            "=",
            "'t'",
            "and",
            "t2",
            ".",
            "language",
            "=",
            "'chinese'",
            "and",
            "t1",
            ".",
            "continent",
            "=",
            "\"asia\""
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Shanghai"
            ],
            [
                "Peking"
            ],
            [
                "Chongqing"
            ]
        ],
        "response": "Here is the table whose Asian cities have Chinese as their official language. For example, it is Shanghai",
        "response_toks": [
            "Here",
            "is",
            "the",
            "table",
            "whose",
            "Asian",
            "cities",
            "have",
            "Chinese",
            "as",
            "their",
            "official",
            "language",
            ".",
            "For",
            "example",
            ",",
            "it",
            "is",
            "Shanghai"
        ],
        "results_map": {
            "result0": "Shanghai"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode JOIN city AS T3 ON T1.Code   =   T3.CountryCode WHERE T2.IsOfficial   =   'T' AND T2.Language   =   'Chinese' AND T1.Continent   =   \"Asia\" | Shanghai ",
        "query_w_results_blank_res": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode JOIN city AS T3 ON T1.Code   =   T3.CountryCode WHERE T2.IsOfficial   =   'T' AND T2.Language   =   'Chinese' AND T1.Continent   =   \"Asia\" | result0 ",
        "query_toks_w_results": [
            "select",
            "distinct",
            "t3",
            ".",
            "name",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "join",
            "city",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t3",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "isofficial",
            "=",
            "'t'",
            "and",
            "t2",
            ".",
            "language",
            "=",
            "'chinese'",
            "and",
            "t1",
            ".",
            "continent",
            "=",
            "\"asia\"",
            "Shanghai"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "t3",
            ".",
            "name",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "join",
            "city",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t3",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "isofficial",
            "=",
            "'t'",
            "and",
            "t2",
            ".",
            "language",
            "=",
            "'chinese'",
            "and",
            "t1",
            ".",
            "continent",
            "=",
            "\"asia\"",
            "result0"
        ],
        "response_blank_res": "Here is the table whose Asian cities have Chinese as their official language . For example , it is result0",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "table",
            "whose",
            "Asian",
            "cities",
            "have",
            "Chinese",
            "as",
            "their",
            "official",
            "language",
            ".",
            "For",
            "example",
            ",",
            "it",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode JOIN city AS T3 ON T1.Code   =   T3.CountryCode WHERE T3.Population >200000",
        "query_toks": [
            "select",
            "distinct",
            "t3",
            ".",
            "name",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "join",
            "city",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t3",
            ".",
            "countrycode",
            "where",
            "t3",
            ".",
            "population",
            ">",
            "200000"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Kabul"
            ],
            [
                "Qandahar"
            ],
            [
                "Amsterdam"
            ]
        ],
        "response": "Here is a table of Asian cities have a population over 200,000. For example, it is  Kabul",
        "response_toks": [
            "Here",
            "is",
            "a",
            "table",
            "of",
            "Asian",
            "cities",
            "have",
            "a",
            "population",
            "over",
            "200,000",
            ".",
            "For",
            "example",
            ",",
            "it",
            "is",
            "Kabul"
        ],
        "results_map": {
            "result0": "Kabul"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode JOIN city AS T3 ON T1.Code   =   T3.CountryCode WHERE T3.Population >200000 | Kabul ",
        "query_w_results_blank_res": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode JOIN city AS T3 ON T1.Code   =   T3.CountryCode WHERE T3.Population >200000 | result0 ",
        "query_toks_w_results": [
            "select",
            "distinct",
            "t3",
            ".",
            "name",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "join",
            "city",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t3",
            ".",
            "countrycode",
            "where",
            "t3",
            ".",
            "population",
            ">",
            "200000",
            "Kabul"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "t3",
            ".",
            "name",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "join",
            "city",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t3",
            ".",
            "countrycode",
            "where",
            "t3",
            ".",
            "population",
            ">",
            "200000",
            "result0"
        ],
        "response_blank_res": "Here is a table of Asian cities have a population over 200,000 . For example , it is result0",
        "response_toks_blank_res": [
            "Here",
            "is",
            "a",
            "table",
            "of",
            "Asian",
            "cities",
            "have",
            "a",
            "population",
            "over",
            "200,000",
            ".",
            "For",
            "example",
            ",",
            "it",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT avg ( T3.Population )  FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode JOIN city AS T3 ON T1.Code   =   T3.CountryCode WHERE T1.Name  =  \"China\"",
        "query_toks": [
            "select",
            "avg",
            "(",
            "t3",
            ".",
            "population",
            ")",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "join",
            "city",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t3",
            ".",
            "countrycode",
            "where",
            "t1",
            ".",
            "name",
            "=",
            "\"china\""
        ],
        "results_raw": [
            [
                "avg(T3.Population)"
            ],
            [
                484720.6997245179
            ]
        ],
        "response": "The average population of all cities in China is 484720.6997245179",
        "response_toks": [
            "The",
            "average",
            "population",
            "of",
            "all",
            "cities",
            "in",
            "China",
            "is",
            "484720.6997245179"
        ],
        "results_map": {
            "result0": "484720.6997245179"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT avg ( T3.Population )  FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode JOIN city AS T3 ON T1.Code   =   T3.CountryCode WHERE T1.Name  =  \"China\" | 484720.6997245179 ",
        "query_w_results_blank_res": "SELECT avg ( T3.Population )  FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode JOIN city AS T3 ON T1.Code   =   T3.CountryCode WHERE T1.Name  =  \"China\" | result0 ",
        "query_toks_w_results": [
            "select",
            "avg",
            "(",
            "t3",
            ".",
            "population",
            ")",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "join",
            "city",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t3",
            ".",
            "countrycode",
            "where",
            "t1",
            ".",
            "name",
            "=",
            "\"china\"",
            "484720.6997245179"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "avg",
            "(",
            "t3",
            ".",
            "population",
            ")",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "join",
            "city",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t3",
            ".",
            "countrycode",
            "where",
            "t1",
            ".",
            "name",
            "=",
            "\"china\"",
            "result0"
        ],
        "response_blank_res": "The average population of all cities in China is result0",
        "response_toks_blank_res": [
            "The",
            "average",
            "population",
            "of",
            "all",
            "cities",
            "in",
            "China",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT avg ( T3.Population )  FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode JOIN city AS T3 ON T1.Code   =   T3.CountryCode WHERE T2.Language  =  \"Dutch\"",
        "query_toks": [
            "select",
            "avg",
            "(",
            "t3",
            ".",
            "population",
            ")",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "join",
            "city",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t3",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "language",
            "=",
            "\"dutch\""
        ],
        "results_raw": [
            [
                "avg(T3.Population)"
            ],
            [
                221529.43181818182
            ]
        ],
        "response": "The average population of all cities seaking dutch is 221529.43181818182",
        "response_toks": [
            "The",
            "average",
            "population",
            "of",
            "all",
            "cities",
            "seaking",
            "dutch",
            "is",
            "221529.43181818182"
        ],
        "results_map": {
            "result0": "221529.43181818182"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT avg ( T3.Population )  FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode JOIN city AS T3 ON T1.Code   =   T3.CountryCode WHERE T2.Language  =  \"Dutch\" | 221529.43181818182 ",
        "query_w_results_blank_res": "SELECT avg ( T3.Population )  FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode JOIN city AS T3 ON T1.Code   =   T3.CountryCode WHERE T2.Language  =  \"Dutch\" | result0 ",
        "query_toks_w_results": [
            "select",
            "avg",
            "(",
            "t3",
            ".",
            "population",
            ")",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "join",
            "city",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t3",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "language",
            "=",
            "\"dutch\"",
            "221529.43181818182"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "avg",
            "(",
            "t3",
            ".",
            "population",
            ")",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "join",
            "city",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t3",
            ".",
            "countrycode",
            "where",
            "t2",
            ".",
            "language",
            "=",
            "\"dutch\"",
            "result0"
        ],
        "response_blank_res": "The average population of all cities seaking dutch is result0",
        "response_toks_blank_res": [
            "The",
            "average",
            "population",
            "of",
            "all",
            "cities",
            "seaking",
            "dutch",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "museum_visit",
        "query": "SELECT count ( * )  from visitor",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "visitor"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                6
            ]
        ],
        "response": "There are 6 visitors.",
        "response_toks": [
            "There",
            "are",
            "6",
            "visitors",
            "."
        ],
        "results_map": {
            "result0": "6"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  from visitor | 6 ",
        "query_w_results_blank_res": "SELECT count ( * )  from visitor | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "visitor",
            "6"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "visitor",
            "result0"
        ],
        "response_blank_res": "There are result0 visitors .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "visitors",
            "."
        ]
    },
    {
        "database_id": "museum_visit",
        "query": "SELECT count ( * )  FROM visitor WHERE Level_of_membership  >  4",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "visitor",
            "where",
            "level_of_membership",
            ">",
            "4"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                3
            ]
        ],
        "response": "There are 3 visitors that have membership levels higher than 4.",
        "response_toks": [
            "There",
            "are",
            "3",
            "visitors",
            "that",
            "have",
            "membership",
            "levels",
            "higher",
            "than",
            "4",
            "."
        ],
        "results_map": {
            "result0": "3"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM visitor WHERE Level_of_membership  >  4 | 3 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM visitor WHERE Level_of_membership  >  4 | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "visitor",
            "where",
            "level_of_membership",
            ">",
            "4",
            "3"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "visitor",
            "where",
            "level_of_membership",
            ">",
            "4",
            "result0"
        ],
        "response_blank_res": "There are result0 visitors that have membership levels higher than 4 .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "visitors",
            "that",
            "have",
            "membership",
            "levels",
            "higher",
            "than",
            "4",
            "."
        ]
    },
    {
        "database_id": "museum_visit",
        "query": "SELECT name FROM visitor WHERE Level_of_membership  >  4",
        "query_toks": [
            "select",
            "name",
            "from",
            "visitor",
            "where",
            "level_of_membership",
            ">",
            "4"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Gonzalo Higua\u00edn "
            ],
            [
                "Guti Midfielder"
            ],
            [
                "Fernando Gago"
            ]
        ],
        "response": "The names of the 3 visitors that have membership levels higher than 4 are shown in the result table.",
        "response_toks": [
            "The",
            "names",
            "of",
            "the",
            "3",
            "visitors",
            "that",
            "have",
            "membership",
            "levels",
            "higher",
            "than",
            "4",
            "are",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT name FROM visitor WHERE Level_of_membership  >  4",
        "query_w_results_blank_res": "SELECT name FROM visitor WHERE Level_of_membership  >  4",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "visitor",
            "where",
            "level_of_membership",
            ">",
            "4"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "visitor",
            "where",
            "level_of_membership",
            ">",
            "4"
        ],
        "response_blank_res": "The names of the 3 visitors that have membership levels higher than 4 are shown in the result table .",
        "response_toks_blank_res": [
            "The",
            "names",
            "of",
            "the",
            "3",
            "visitors",
            "that",
            "have",
            "membership",
            "levels",
            "higher",
            "than",
            "4",
            "are",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ]
    },
    {
        "database_id": "museum_visit",
        "query": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC",
        "query_toks": [
            "select",
            "name",
            "from",
            "visitor",
            "where",
            "level_of_membership",
            ">",
            "4",
            "order",
            "by",
            "level_of_membership",
            "desc"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Gonzalo Higua\u00edn "
            ],
            [
                "Fernando Gago"
            ],
            [
                "Guti Midfielder"
            ]
        ],
        "response": "The names of the 3 visitors that have membership levels higher than 4 ranked from high to low is shown in the result table.",
        "response_toks": [
            "The",
            "names",
            "of",
            "the",
            "3",
            "visitors",
            "that",
            "have",
            "membership",
            "levels",
            "higher",
            "than",
            "4",
            "ranked",
            "from",
            "high",
            "to",
            "low",
            "is",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC",
        "query_w_results_blank_res": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "visitor",
            "where",
            "level_of_membership",
            ">",
            "4",
            "order",
            "by",
            "level_of_membership",
            "desc"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "visitor",
            "where",
            "level_of_membership",
            ">",
            "4",
            "order",
            "by",
            "level_of_membership",
            "desc"
        ],
        "response_blank_res": "The names of the 3 visitors that have membership levels higher than 4 ranked from high to low is shown in the result table .",
        "response_toks_blank_res": [
            "The",
            "names",
            "of",
            "the",
            "3",
            "visitors",
            "that",
            "have",
            "membership",
            "levels",
            "higher",
            "than",
            "4",
            "ranked",
            "from",
            "high",
            "to",
            "low",
            "is",
            "shown",
            "in",
            "the",
            "result",
            "table",
            "."
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT avg ( ranking )  ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id   =   T2.player_id GROUP BY T1.player_id",
        "query_toks": [
            "select",
            "avg",
            "(",
            "ranking",
            ")",
            ",",
            "t1",
            ".",
            "first_name",
            "from",
            "players",
            "as",
            "t1",
            "join",
            "rankings",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "player_id",
            "=",
            "t2",
            ".",
            "player_id",
            "group",
            "by",
            "t1",
            ".",
            "player_id"
        ],
        "results_raw": [
            [
                "avg(ranking)",
                "first_name"
            ],
            [
                186.76587795765877,
                "Mirjana"
            ],
            [
                121.82273948075202,
                "Tamarine"
            ],
            [
                196.02280912364947,
                "Katarina"
            ]
        ],
        "response": "Here is the table that lists all the first name of each player and their average ranking.",
        "response_toks": [
            "Here",
            "is",
            "the",
            "table",
            "that",
            "lists",
            "all",
            "the",
            "first",
            "name",
            "of",
            "each",
            "player",
            "and",
            "their",
            "average",
            "ranking",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT avg ( ranking )  ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id   =   T2.player_id GROUP BY T1.player_id",
        "query_w_results_blank_res": "SELECT avg ( ranking )  ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id   =   T2.player_id GROUP BY T1.player_id",
        "query_toks_w_results": [
            "select",
            "avg",
            "(",
            "ranking",
            ")",
            ",",
            "t1",
            ".",
            "first_name",
            "from",
            "players",
            "as",
            "t1",
            "join",
            "rankings",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "player_id",
            "=",
            "t2",
            ".",
            "player_id",
            "group",
            "by",
            "t1",
            ".",
            "player_id"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "avg",
            "(",
            "ranking",
            ")",
            ",",
            "t1",
            ".",
            "first_name",
            "from",
            "players",
            "as",
            "t1",
            "join",
            "rankings",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "player_id",
            "=",
            "t2",
            ".",
            "player_id",
            "group",
            "by",
            "t1",
            ".",
            "player_id"
        ],
        "response_blank_res": "Here is the table that lists all the first name of each player and their average ranking .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "table",
            "that",
            "lists",
            "all",
            "the",
            "first",
            "name",
            "of",
            "each",
            "player",
            "and",
            "their",
            "average",
            "ranking",
            "."
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT avg ( ranking )  ,  T1.first_name, t1.last_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id   =   T2.player_id GROUP BY T1.player_id",
        "query_toks": [
            "select",
            "avg",
            "(",
            "ranking",
            ")",
            ",",
            "t1",
            ".",
            "first_name",
            ",",
            "t1",
            ".",
            "last_name",
            "from",
            "players",
            "as",
            "t1",
            "join",
            "rankings",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "player_id",
            "=",
            "t2",
            ".",
            "player_id",
            "group",
            "by",
            "t1",
            ".",
            "player_id"
        ],
        "results_raw": [
            [
                "avg(ranking)",
                "first_name",
                "last_name"
            ],
            [
                186.76587795765877,
                "Mirjana",
                "Lucic"
            ],
            [
                121.82273948075202,
                "Tamarine",
                "Tanasugarn"
            ],
            [
                196.02280912364947,
                "Katarina",
                "Srebotnik"
            ]
        ],
        "response": "Here is the table that lists all the first name and the last name of each player and their average ranking.",
        "response_toks": [
            "Here",
            "is",
            "the",
            "table",
            "that",
            "lists",
            "all",
            "the",
            "first",
            "name",
            "and",
            "the",
            "last",
            "name",
            "of",
            "each",
            "player",
            "and",
            "their",
            "average",
            "ranking",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT avg ( ranking )  ,  T1.first_name, t1.last_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id   =   T2.player_id GROUP BY T1.player_id",
        "query_w_results_blank_res": "SELECT avg ( ranking )  ,  T1.first_name, t1.last_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id   =   T2.player_id GROUP BY T1.player_id",
        "query_toks_w_results": [
            "select",
            "avg",
            "(",
            "ranking",
            ")",
            ",",
            "t1",
            ".",
            "first_name",
            ",",
            "t1",
            ".",
            "last_name",
            "from",
            "players",
            "as",
            "t1",
            "join",
            "rankings",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "player_id",
            "=",
            "t2",
            ".",
            "player_id",
            "group",
            "by",
            "t1",
            ".",
            "player_id"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "avg",
            "(",
            "ranking",
            ")",
            ",",
            "t1",
            ".",
            "first_name",
            ",",
            "t1",
            ".",
            "last_name",
            "from",
            "players",
            "as",
            "t1",
            "join",
            "rankings",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "player_id",
            "=",
            "t2",
            ".",
            "player_id",
            "group",
            "by",
            "t1",
            ".",
            "player_id"
        ],
        "response_blank_res": "Here is the table that lists all the first name and the last name of each player and their average ranking .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "table",
            "that",
            "lists",
            "all",
            "the",
            "first",
            "name",
            "and",
            "the",
            "last",
            "name",
            "of",
            "each",
            "player",
            "and",
            "their",
            "average",
            "ranking",
            "."
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT  T1.first_name, t1.last_name FROM players AS T1 where t1.hand  =  \"L\"",
        "query_toks": [
            "select",
            "t1",
            ".",
            "first_name",
            ",",
            "t1",
            ".",
            "last_name",
            "from",
            "players",
            "as",
            "t1",
            "where",
            "t1",
            ".",
            "hand",
            "=",
            "\"l\""
        ],
        "results_raw": [
            [
                "first_name",
                "last_name"
            ],
            [
                "Florencia",
                "Labat"
            ],
            [
                "Magui",
                "Serna"
            ],
            [
                "Amanda",
                "Grahame"
            ]
        ],
        "response": "Here is the table that lists the first and last names of all the left-handed players.",
        "response_toks": [
            "Here",
            "is",
            "the",
            "table",
            "that",
            "lists",
            "the",
            "first",
            "and",
            "last",
            "names",
            "of",
            "all",
            "the",
            "left-handed",
            "players",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT  T1.first_name, t1.last_name FROM players AS T1 where t1.hand  =  \"L\"",
        "query_w_results_blank_res": "SELECT  T1.first_name, t1.last_name FROM players AS T1 where t1.hand  =  \"L\"",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "first_name",
            ",",
            "t1",
            ".",
            "last_name",
            "from",
            "players",
            "as",
            "t1",
            "where",
            "t1",
            ".",
            "hand",
            "=",
            "\"l\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "first_name",
            ",",
            "t1",
            ".",
            "last_name",
            "from",
            "players",
            "as",
            "t1",
            "where",
            "t1",
            ".",
            "hand",
            "=",
            "\"l\""
        ],
        "response_blank_res": "Here is the table that lists the first and last names of all the left-handed players .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "table",
            "that",
            "lists",
            "the",
            "first",
            "and",
            "last",
            "names",
            "of",
            "all",
            "the",
            "left-handed",
            "players",
            "."
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT T1.last_name FROM players AS T1 where t1.hand  =  \"L\"",
        "query_toks": [
            "select",
            "t1",
            ".",
            "last_name",
            "from",
            "players",
            "as",
            "t1",
            "where",
            "t1",
            ".",
            "hand",
            "=",
            "\"l\""
        ],
        "results_raw": [
            [
                "last_name"
            ],
            [
                "Labat"
            ],
            [
                "Serna"
            ],
            [
                "Grahame"
            ]
        ],
        "response": "Here is the table that lists all the last name of all left-handed players.",
        "response_toks": [
            "Here",
            "is",
            "the",
            "table",
            "that",
            "lists",
            "all",
            "the",
            "last",
            "name",
            "of",
            "all",
            "left-handed",
            "players",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.last_name FROM players AS T1 where t1.hand  =  \"L\"",
        "query_w_results_blank_res": "SELECT T1.last_name FROM players AS T1 where t1.hand  =  \"L\"",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "last_name",
            "from",
            "players",
            "as",
            "t1",
            "where",
            "t1",
            ".",
            "hand",
            "=",
            "\"l\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "last_name",
            "from",
            "players",
            "as",
            "t1",
            "where",
            "t1",
            ".",
            "hand",
            "=",
            "\"l\""
        ],
        "response_blank_res": "Here is the table that lists all the last name of all left-handed players .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "table",
            "that",
            "lists",
            "all",
            "the",
            "last",
            "name",
            "of",
            "all",
            "left-handed",
            "players",
            "."
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT avg ( ranking )  ,  T1.last_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id   =   T2.player_id where T1.hand  =  \"L\" GROUP BY T1.first_name",
        "query_toks": [
            "select",
            "avg",
            "(",
            "ranking",
            ")",
            ",",
            "t1",
            ".",
            "last_name",
            "from",
            "players",
            "as",
            "t1",
            "join",
            "rankings",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "player_id",
            "=",
            "t2",
            ".",
            "player_id",
            "where",
            "t1",
            ".",
            "hand",
            "=",
            "\"l\"",
            "group",
            "by",
            "t1",
            ".",
            "first_name"
        ],
        "results_raw": [
            [
                "avg(ranking)",
                "last_name"
            ],
            [
                943.7397959183673,
                "Atucha Gomez"
            ],
            [
                1068.35,
                "Rodgers"
            ],
            [
                876.4279069767442,
                "Cazeaux"
            ]
        ],
        "response": "Here is the table that lists all the last name and the average ranking of all left-handed players",
        "response_toks": [
            "Here",
            "is",
            "the",
            "table",
            "that",
            "lists",
            "all",
            "the",
            "last",
            "name",
            "and",
            "the",
            "average",
            "ranking",
            "of",
            "all",
            "left-handed",
            "players"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT avg ( ranking )  ,  T1.last_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id   =   T2.player_id where T1.hand  =  \"L\" GROUP BY T1.first_name",
        "query_w_results_blank_res": "SELECT avg ( ranking )  ,  T1.last_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id   =   T2.player_id where T1.hand  =  \"L\" GROUP BY T1.first_name",
        "query_toks_w_results": [
            "select",
            "avg",
            "(",
            "ranking",
            ")",
            ",",
            "t1",
            ".",
            "last_name",
            "from",
            "players",
            "as",
            "t1",
            "join",
            "rankings",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "player_id",
            "=",
            "t2",
            ".",
            "player_id",
            "where",
            "t1",
            ".",
            "hand",
            "=",
            "\"l\"",
            "group",
            "by",
            "t1",
            ".",
            "first_name"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "avg",
            "(",
            "ranking",
            ")",
            ",",
            "t1",
            ".",
            "last_name",
            "from",
            "players",
            "as",
            "t1",
            "join",
            "rankings",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "player_id",
            "=",
            "t2",
            ".",
            "player_id",
            "where",
            "t1",
            ".",
            "hand",
            "=",
            "\"l\"",
            "group",
            "by",
            "t1",
            ".",
            "first_name"
        ],
        "response_blank_res": "Here is the table that lists all the last name and the average ranking of all left-handed players",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "table",
            "that",
            "lists",
            "all",
            "the",
            "last",
            "name",
            "and",
            "the",
            "average",
            "ranking",
            "of",
            "all",
            "left-handed",
            "players"
        ]
    },
    {
        "database_id": "network_1",
        "query": "SELECT avg ( grade )  FROM Highschooler WHERE id IN  ( SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id   =   T2.id ) ",
        "query_toks": [
            "select",
            "avg",
            "(",
            "grade",
            ")",
            "from",
            "highschooler",
            "where",
            "id",
            "in",
            "(",
            "select",
            "t1",
            ".",
            "student_id",
            "from",
            "friend",
            "as",
            "t1",
            "join",
            "highschooler",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "id",
            ")"
        ],
        "results_raw": [
            [
                "avg(grade)"
            ],
            [
                10.428571428571429
            ]
        ],
        "response": "10.4 is the average grade of all students who have some friends.",
        "response_toks": [
            "10.4",
            "is",
            "the",
            "average",
            "grade",
            "of",
            "all",
            "students",
            "who",
            "have",
            "some",
            "friends",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT avg ( grade )  FROM Highschooler WHERE id IN  ( SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id   =   T2.id ) ",
        "query_w_results_blank_res": "SELECT avg ( grade )  FROM Highschooler WHERE id IN  ( SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id   =   T2.id ) ",
        "query_toks_w_results": [
            "select",
            "avg",
            "(",
            "grade",
            ")",
            "from",
            "highschooler",
            "where",
            "id",
            "in",
            "(",
            "select",
            "t1",
            ".",
            "student_id",
            "from",
            "friend",
            "as",
            "t1",
            "join",
            "highschooler",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "id",
            ")"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "avg",
            "(",
            "grade",
            ")",
            "from",
            "highschooler",
            "where",
            "id",
            "in",
            "(",
            "select",
            "t1",
            ".",
            "student_id",
            "from",
            "friend",
            "as",
            "t1",
            "join",
            "highschooler",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "id",
            ")"
        ],
        "response_blank_res": "10.4 is the average grade of all students who have some friends .",
        "response_toks_blank_res": [
            "10.4",
            "is",
            "the",
            "average",
            "grade",
            "of",
            "all",
            "students",
            "who",
            "have",
            "some",
            "friends",
            "."
        ]
    },
    {
        "database_id": "network_1",
        "query": "SELECT * FROM Highschooler WHERE id not IN  ( SELECT student_id FROM Friend ) ",
        "query_toks": [
            "select",
            "*",
            "from",
            "highschooler",
            "where",
            "id",
            "not",
            "in",
            "(",
            "select",
            "student_id",
            "from",
            "friend",
            ")"
        ],
        "results_raw": [
            [
                "ID",
                "name",
                "grade"
            ],
            [
                1641,
                "Brittany",
                10
            ],
            [
                1025,
                "John",
                12
            ]
        ],
        "response": "Yes. Here is the info for students with no friend.",
        "response_toks": [
            "Yes",
            ".",
            "Here",
            "is",
            "the",
            "info",
            "for",
            "students",
            "with",
            "no",
            "friend",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT * FROM Highschooler WHERE id not IN  ( SELECT student_id FROM Friend ) ",
        "query_w_results_blank_res": "SELECT * FROM Highschooler WHERE id not IN  ( SELECT student_id FROM Friend ) ",
        "query_toks_w_results": [
            "select",
            "*",
            "from",
            "highschooler",
            "where",
            "id",
            "not",
            "in",
            "(",
            "select",
            "student_id",
            "from",
            "friend",
            ")"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "*",
            "from",
            "highschooler",
            "where",
            "id",
            "not",
            "in",
            "(",
            "select",
            "student_id",
            "from",
            "friend",
            ")"
        ],
        "response_blank_res": "Yes . Here is the info for students with no friend .",
        "response_toks_blank_res": [
            "Yes",
            ".",
            "Here",
            "is",
            "the",
            "info",
            "for",
            "students",
            "with",
            "no",
            "friend",
            "."
        ]
    },
    {
        "database_id": "network_1",
        "query": "SELECT grade FROM Highschooler WHERE id not IN  ( SELECT student_id FROM Friend ) ",
        "query_toks": [
            "select",
            "grade",
            "from",
            "highschooler",
            "where",
            "id",
            "not",
            "in",
            "(",
            "select",
            "student_id",
            "from",
            "friend",
            ")"
        ],
        "results_raw": [
            [
                "grade"
            ],
            [
                10
            ],
            [
                12
            ]
        ],
        "response": "The grades for students with no friend is 10 and 12",
        "response_toks": [
            "The",
            "grades",
            "for",
            "students",
            "with",
            "no",
            "friend",
            "is",
            "10",
            "and",
            "12"
        ],
        "results_map": {
            "result0": "10",
            "result1": "12"
        },
        "results_blank_res": "result0 result1 ",
        "query_w_results": "SELECT grade FROM Highschooler WHERE id not IN  ( SELECT student_id FROM Friend )  | 10 12 ",
        "query_w_results_blank_res": "SELECT grade FROM Highschooler WHERE id not IN  ( SELECT student_id FROM Friend )  | result0 result1 ",
        "query_toks_w_results": [
            "select",
            "grade",
            "from",
            "highschooler",
            "where",
            "id",
            "not",
            "in",
            "(",
            "select",
            "student_id",
            "from",
            "friend",
            ")",
            "10",
            "12"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "grade",
            "from",
            "highschooler",
            "where",
            "id",
            "not",
            "in",
            "(",
            "select",
            "student_id",
            "from",
            "friend",
            ")",
            "result0",
            "result1"
        ],
        "response_blank_res": "The grades for students with no friend is result0 and result1",
        "response_toks_blank_res": [
            "The",
            "grades",
            "for",
            "students",
            "with",
            "no",
            "friend",
            "is",
            "result0",
            "and",
            "result1"
        ]
    },
    {
        "database_id": "network_1",
        "query": "SELECT name FROM Highschooler WHERE id not IN  ( SELECT student_id FROM Friend ) ",
        "query_toks": [
            "select",
            "name",
            "from",
            "highschooler",
            "where",
            "id",
            "not",
            "in",
            "(",
            "select",
            "student_id",
            "from",
            "friend",
            ")"
        ],
        "results_raw": [
            [
                "name"
            ],
            [
                "Brittany"
            ],
            [
                "John"
            ]
        ],
        "response": "The names for students with no friend are Brittany and John",
        "response_toks": [
            "The",
            "names",
            "for",
            "students",
            "with",
            "no",
            "friend",
            "are",
            "Brittany",
            "and",
            "John"
        ],
        "results_map": {
            "result0": "Brittany",
            "result1": "John"
        },
        "results_blank_res": "result0 result1 ",
        "query_w_results": "SELECT name FROM Highschooler WHERE id not IN  ( SELECT student_id FROM Friend )  | Brittany John ",
        "query_w_results_blank_res": "SELECT name FROM Highschooler WHERE id not IN  ( SELECT student_id FROM Friend )  | result0 result1 ",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "highschooler",
            "where",
            "id",
            "not",
            "in",
            "(",
            "select",
            "student_id",
            "from",
            "friend",
            ")",
            "Brittany",
            "John"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "highschooler",
            "where",
            "id",
            "not",
            "in",
            "(",
            "select",
            "student_id",
            "from",
            "friend",
            ")",
            "result0",
            "result1"
        ],
        "response_blank_res": "The names for students with no friend are result0 and result1",
        "response_toks_blank_res": [
            "The",
            "names",
            "for",
            "students",
            "with",
            "no",
            "friend",
            "are",
            "result0",
            "and",
            "result1"
        ]
    },
    {
        "database_id": "network_1",
        "query": "SELECT name FROM Highschooler WHERE id IN  ( SELECT student_id FROM Friend ) ",
        "query_toks": [
            "select",
            "name",
            "from",
            "highschooler",
            "where",
            "id",
            "in",
            "(",
            "select",
            "student_id",
            "from",
            "friend",
            ")"
        ],
        "results_raw": [
            [
                "name"
            ],
            [
                "Haley"
            ],
            [
                "Alexis"
            ],
            [
                "Jordan"
            ]
        ],
        "response": "Here is the list of names of  the students with friends.",
        "response_toks": [
            "Here",
            "is",
            "the",
            "list",
            "of",
            "names",
            "of",
            "the",
            "students",
            "with",
            "friends",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT name FROM Highschooler WHERE id IN  ( SELECT student_id FROM Friend ) ",
        "query_w_results_blank_res": "SELECT name FROM Highschooler WHERE id IN  ( SELECT student_id FROM Friend ) ",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "highschooler",
            "where",
            "id",
            "in",
            "(",
            "select",
            "student_id",
            "from",
            "friend",
            ")"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "highschooler",
            "where",
            "id",
            "in",
            "(",
            "select",
            "student_id",
            "from",
            "friend",
            ")"
        ],
        "response_blank_res": "Here is the list of names of the students with friends .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "list",
            "of",
            "names",
            "of",
            "the",
            "students",
            "with",
            "friends",
            "."
        ]
    },
    {
        "database_id": "network_1",
        "query": "select count ( * )  from highschooler",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "highschooler"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                16
            ]
        ],
        "response": "There are 16 students in total.",
        "response_toks": [
            "There",
            "are",
            "16",
            "students",
            "in",
            "total",
            "."
        ],
        "results_map": {
            "result0": "16"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "select count ( * )  from highschooler | 16 ",
        "query_w_results_blank_res": "select count ( * )  from highschooler | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "highschooler",
            "16"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "highschooler",
            "result0"
        ],
        "response_blank_res": "There are result0 students in total .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "students",
            "in",
            "total",
            "."
        ]
    },
    {
        "database_id": "network_1",
        "query": "SELECT count ( * )  FROM highschooler WHERE grade   =   9",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "highschooler",
            "where",
            "grade",
            "=",
            "9"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                4
            ]
        ],
        "response": "There are four students whose grade is 9.",
        "response_toks": [
            "There",
            "are",
            "four",
            "students",
            "whose",
            "grade",
            "is",
            "9",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT count ( * )  FROM highschooler WHERE grade   =   9",
        "query_w_results_blank_res": "SELECT count ( * )  FROM highschooler WHERE grade   =   9",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "highschooler",
            "where",
            "grade",
            "=",
            "9"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "highschooler",
            "where",
            "grade",
            "=",
            "9"
        ],
        "response_blank_res": "There are four students whose grade is 9 .",
        "response_toks_blank_res": [
            "There",
            "are",
            "four",
            "students",
            "whose",
            "grade",
            "is",
            "9",
            "."
        ]
    },
    {
        "database_id": "network_1",
        "query": "SELECT name FROM Highschooler WHERE grade   =   9",
        "query_toks": [
            "select",
            "name",
            "from",
            "highschooler",
            "where",
            "grade",
            "=",
            "9"
        ],
        "results_raw": [
            [
                "name"
            ],
            [
                "Jordan"
            ],
            [
                "Gabriel"
            ],
            [
                "Tiffany"
            ]
        ],
        "response": "No. Kyle is not a student with grade 9.",
        "response_toks": [
            "No",
            ".",
            "Kyle",
            "is",
            "not",
            "a",
            "student",
            "with",
            "grade",
            "9",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT name FROM Highschooler WHERE grade   =   9",
        "query_w_results_blank_res": "SELECT name FROM Highschooler WHERE grade   =   9",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "highschooler",
            "where",
            "grade",
            "=",
            "9"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "highschooler",
            "where",
            "grade",
            "=",
            "9"
        ],
        "response_blank_res": "No . Kyle is not a student with grade 9 .",
        "response_toks_blank_res": [
            "No",
            ".",
            "Kyle",
            "is",
            "not",
            "a",
            "student",
            "with",
            "grade",
            "9",
            "."
        ]
    },
    {
        "database_id": "network_1",
        "query": "SELECT grade from highschooler where name  =  \"Kyle\"",
        "query_toks": [
            "select",
            "grade",
            "from",
            "highschooler",
            "where",
            "name",
            "=",
            "\"kyle\""
        ],
        "results_raw": [
            [
                "grade"
            ],
            [
                12
            ]
        ],
        "response": "Kyle's grade is 12.",
        "response_toks": [
            "Kyle",
            "'s",
            "grade",
            "is",
            "12",
            "."
        ],
        "results_map": {
            "result0": "12"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT grade from highschooler where name  =  \"Kyle\" | 12 ",
        "query_w_results_blank_res": "SELECT grade from highschooler where name  =  \"Kyle\" | result0 ",
        "query_toks_w_results": [
            "select",
            "grade",
            "from",
            "highschooler",
            "where",
            "name",
            "=",
            "\"kyle\"",
            "12"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "grade",
            "from",
            "highschooler",
            "where",
            "name",
            "=",
            "\"kyle\"",
            "result0"
        ],
        "response_blank_res": "Kyle 's grade is result0 .",
        "response_toks_blank_res": [
            "Kyle",
            "'s",
            "grade",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "network_1",
        "query": "SELECT count ( * )  FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "likes",
            "as",
            "t1",
            "join",
            "highschooler",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "id",
            "where",
            "t2",
            ".",
            "name",
            "=",
            "\"kyle\""
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                1
            ]
        ],
        "response": "Kyle only has one like.",
        "response_toks": [
            "Kyle",
            "only",
            "has",
            "one",
            "like",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT count ( * )  FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "query_w_results_blank_res": "SELECT count ( * )  FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "likes",
            "as",
            "t1",
            "join",
            "highschooler",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "id",
            "where",
            "t2",
            ".",
            "name",
            "=",
            "\"kyle\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "likes",
            "as",
            "t1",
            "join",
            "highschooler",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "id",
            "where",
            "t2",
            ".",
            "name",
            "=",
            "\"kyle\""
        ],
        "response_blank_res": "Kyle only has one like .",
        "response_toks_blank_res": [
            "Kyle",
            "only",
            "has",
            "one",
            "like",
            "."
        ]
    },
    {
        "database_id": "concert_singer",
        "query": "SELECT name FROM stadium WHERE stadium_id NOT IN  ( SELECT stadium_id FROM concert ) ",
        "query_toks": [
            "select",
            "name",
            "from",
            "stadium",
            "where",
            "stadium_id",
            "not",
            "in",
            "(",
            "select",
            "stadium_id",
            "from",
            "concert",
            ")"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Bayview Stadium"
            ],
            [
                "Hampden Park"
            ],
            [
                "Forthbank Stadium"
            ]
        ],
        "response": "here are the names of the stadium without any concern.",
        "response_toks": [
            "here",
            "are",
            "the",
            "names",
            "of",
            "the",
            "stadium",
            "without",
            "any",
            "concern",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT name FROM stadium WHERE stadium_id NOT IN  ( SELECT stadium_id FROM concert ) ",
        "query_w_results_blank_res": "SELECT name FROM stadium WHERE stadium_id NOT IN  ( SELECT stadium_id FROM concert ) ",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "stadium",
            "where",
            "stadium_id",
            "not",
            "in",
            "(",
            "select",
            "stadium_id",
            "from",
            "concert",
            ")"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "stadium",
            "where",
            "stadium_id",
            "not",
            "in",
            "(",
            "select",
            "stadium_id",
            "from",
            "concert",
            ")"
        ],
        "response_blank_res": "here are the names of the stadium without any concern .",
        "response_toks_blank_res": [
            "here",
            "are",
            "the",
            "names",
            "of",
            "the",
            "stadium",
            "without",
            "any",
            "concern",
            "."
        ]
    },
    {
        "database_id": "concert_singer",
        "query": "SELECT name FROM stadium ORDER BY Highest DESC LIMIT 1",
        "query_toks": [
            "select",
            "name",
            "from",
            "stadium",
            "order",
            "by",
            "highest",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Stark's Park"
            ]
        ],
        "response": "If you meant which football stadium has held the highest number of audience, that would be this one.",
        "response_toks": [
            "If",
            "you",
            "meant",
            "which",
            "football",
            "stadium",
            "has",
            "held",
            "the",
            "highest",
            "number",
            "of",
            "audience",
            ",",
            "that",
            "would",
            "be",
            "this",
            "one",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT name FROM stadium ORDER BY Highest DESC LIMIT 1",
        "query_w_results_blank_res": "SELECT name FROM stadium ORDER BY Highest DESC LIMIT 1",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "stadium",
            "order",
            "by",
            "highest",
            "desc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "stadium",
            "order",
            "by",
            "highest",
            "desc",
            "limit",
            "1"
        ],
        "response_blank_res": "If you meant which football stadium has held the highest number of audience , that would be this one .",
        "response_toks_blank_res": [
            "If",
            "you",
            "meant",
            "which",
            "football",
            "stadium",
            "has",
            "held",
            "the",
            "highest",
            "number",
            "of",
            "audience",
            ",",
            "that",
            "would",
            "be",
            "this",
            "one",
            "."
        ]
    },
    {
        "database_id": "concert_singer",
        "query": "SELECT name FROM stadium ORDER BY Highest DESC LIMIT 1",
        "query_toks": [
            "select",
            "name",
            "from",
            "stadium",
            "order",
            "by",
            "highest",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Stark's Park"
            ]
        ],
        "response": "Yes, here is the football stadium which has held the highest number of audience",
        "response_toks": [
            "Yes",
            ",",
            "here",
            "is",
            "the",
            "football",
            "stadium",
            "which",
            "has",
            "held",
            "the",
            "highest",
            "number",
            "of",
            "audience"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT name FROM stadium ORDER BY Highest DESC LIMIT 1",
        "query_w_results_blank_res": "SELECT name FROM stadium ORDER BY Highest DESC LIMIT 1",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "stadium",
            "order",
            "by",
            "highest",
            "desc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "stadium",
            "order",
            "by",
            "highest",
            "desc",
            "limit",
            "1"
        ],
        "response_blank_res": "Yes , here is the football stadium which has held the highest number of audience",
        "response_toks_blank_res": [
            "Yes",
            ",",
            "here",
            "is",
            "the",
            "football",
            "stadium",
            "which",
            "has",
            "held",
            "the",
            "highest",
            "number",
            "of",
            "audience"
        ]
    },
    {
        "database_id": "singer",
        "query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT ( * )  DESC LIMIT 1",
        "query_toks": [
            "select",
            "citizenship",
            "from",
            "singer",
            "group",
            "by",
            "citizenship",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Citizenship"
            ],
            [
                "United States"
            ]
        ],
        "response": "The United States is the most common citizenship of singers.",
        "response_toks": [
            "The",
            "United",
            "States",
            "is",
            "the",
            "most",
            "common",
            "citizenship",
            "of",
            "singers",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT ( * )  DESC LIMIT 1",
        "query_w_results_blank_res": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT ( * )  DESC LIMIT 1",
        "query_toks_w_results": [
            "select",
            "citizenship",
            "from",
            "singer",
            "group",
            "by",
            "citizenship",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "citizenship",
            "from",
            "singer",
            "group",
            "by",
            "citizenship",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "response_blank_res": "The United States is the most common citizenship of singers .",
        "response_toks_blank_res": [
            "The",
            "United",
            "States",
            "is",
            "the",
            "most",
            "common",
            "citizenship",
            "of",
            "singers",
            "."
        ]
    },
    {
        "database_id": "singer",
        "query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT ( * )  ASC LIMIT 1",
        "query_toks": [
            "select",
            "citizenship",
            "from",
            "singer",
            "group",
            "by",
            "citizenship",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "asc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Citizenship"
            ],
            [
                "Australia"
            ]
        ],
        "response": "Australia is the least common citizenship of singers.",
        "response_toks": [
            "Australia",
            "is",
            "the",
            "least",
            "common",
            "citizenship",
            "of",
            "singers",
            "."
        ],
        "results_map": {
            "result0": "Australia"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT ( * )  ASC LIMIT 1 | Australia ",
        "query_w_results_blank_res": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT ( * )  ASC LIMIT 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "citizenship",
            "from",
            "singer",
            "group",
            "by",
            "citizenship",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "asc",
            "limit",
            "1",
            "Australia"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "citizenship",
            "from",
            "singer",
            "group",
            "by",
            "citizenship",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "asc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "result0 is the least common citizenship of singers .",
        "response_toks_blank_res": [
            "result0",
            "is",
            "the",
            "least",
            "common",
            "citizenship",
            "of",
            "singers",
            "."
        ]
    },
    {
        "database_id": "singer",
        "query": "SELECT name FROM singer where Citizenship = 'Australia'",
        "query_toks": [
            "select",
            "name",
            "from",
            "singer",
            "where",
            "citizenship",
            "=",
            "'australia'"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Gina Rinehart"
            ]
        ],
        "response": "Here is the list of names of all the singers from Australia. Gina Rinehart is the only one.",
        "response_toks": [
            "Here",
            "is",
            "the",
            "list",
            "of",
            "names",
            "of",
            "all",
            "the",
            "singers",
            "from",
            "Australia",
            ".",
            "Gina",
            "Rinehart",
            "is",
            "the",
            "only",
            "one",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT name FROM singer where Citizenship = 'Australia'",
        "query_w_results_blank_res": "SELECT name FROM singer where Citizenship = 'Australia'",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "singer",
            "where",
            "citizenship",
            "=",
            "'australia'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "singer",
            "where",
            "citizenship",
            "=",
            "'australia'"
        ],
        "response_blank_res": "Here is the list of names of all the singers from Australia . Gina Rinehart is the only one .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "list",
            "of",
            "names",
            "of",
            "all",
            "the",
            "singers",
            "from",
            "Australia",
            ".",
            "Gina",
            "Rinehart",
            "is",
            "the",
            "only",
            "one",
            "."
        ]
    },
    {
        "database_id": "poker_player",
        "query": "SELECT Nationality FROM people where People_ID = 1",
        "query_toks": [
            "select",
            "nationality",
            "from",
            "people",
            "where",
            "people_id",
            "=",
            "1"
        ],
        "results_raw": [
            [
                "Nationality"
            ],
            [
                "Russia"
            ]
        ],
        "response": "People with id 1 has the nationality Russia.",
        "response_toks": [
            "People",
            "with",
            "id",
            "1",
            "has",
            "the",
            "nationality",
            "Russia",
            "."
        ],
        "results_map": {
            "result0": "Russia"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT Nationality FROM people where People_ID = 1 | Russia ",
        "query_w_results_blank_res": "SELECT Nationality FROM people where People_ID = 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "nationality",
            "from",
            "people",
            "where",
            "people_id",
            "=",
            "1",
            "Russia"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "nationality",
            "from",
            "people",
            "where",
            "people_id",
            "=",
            "1",
            "result0"
        ],
        "response_blank_res": "People with id 1 has the nationality result0 .",
        "response_toks_blank_res": [
            "People",
            "with",
            "id",
            "1",
            "has",
            "the",
            "nationality",
            "result0",
            "."
        ]
    },
    {
        "database_id": "poker_player",
        "query": "SELECT Birth_Date FROM people where Name = \"Teodor Salparov\"",
        "query_toks": [
            "select",
            "birth_date",
            "from",
            "people",
            "where",
            "name",
            "=",
            "\"teodor",
            "salparov\""
        ],
        "results_raw": [
            [
                "Birth_Date"
            ],
            [
                "August 16, 1982"
            ]
        ],
        "response": "the birthday date of Teodor Salparov is August 16, 1982",
        "response_toks": [
            "the",
            "birthday",
            "date",
            "of",
            "Teodor",
            "Salparov",
            "is",
            "August",
            "16",
            ",",
            "1982"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Birth_Date FROM people where Name = \"Teodor Salparov\"",
        "query_w_results_blank_res": "SELECT Birth_Date FROM people where Name = \"Teodor Salparov\"",
        "query_toks_w_results": [
            "select",
            "birth_date",
            "from",
            "people",
            "where",
            "name",
            "=",
            "\"teodor",
            "salparov\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "birth_date",
            "from",
            "people",
            "where",
            "name",
            "=",
            "\"teodor",
            "salparov\""
        ],
        "response_blank_res": "the birthday date of Teodor Salparov is August 16 , 1982",
        "response_toks_blank_res": [
            "the",
            "birthday",
            "date",
            "of",
            "Teodor",
            "Salparov",
            "is",
            "August",
            "16",
            ",",
            "1982"
        ]
    },
    {
        "database_id": "poker_player",
        "query": "SELECT Earnings FROM poker_player where People_ID   =   5",
        "query_toks": [
            "select",
            "earnings",
            "from",
            "poker_player",
            "where",
            "people_id",
            "=",
            "5"
        ],
        "results_raw": [
            [
                "Earnings"
            ],
            [
                104871.0
            ]
        ],
        "response": "the earnings of the people id 5 is 104871.0",
        "response_toks": [
            "the",
            "earnings",
            "of",
            "the",
            "people",
            "id",
            "5",
            "is",
            "104871.0"
        ],
        "results_map": {
            "result0": "104871.0"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT Earnings FROM poker_player where People_ID   =   5 | 104871.0 ",
        "query_w_results_blank_res": "SELECT Earnings FROM poker_player where People_ID   =   5 | result0 ",
        "query_toks_w_results": [
            "select",
            "earnings",
            "from",
            "poker_player",
            "where",
            "people_id",
            "=",
            "5",
            "104871.0"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "earnings",
            "from",
            "poker_player",
            "where",
            "people_id",
            "=",
            "5",
            "result0"
        ],
        "response_blank_res": "the earnings of the people id 5 is result0",
        "response_toks_blank_res": [
            "the",
            "earnings",
            "of",
            "the",
            "people",
            "id",
            "5",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "poker_player",
        "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "query_toks": [
            "select",
            "t2",
            ".",
            "money_rank",
            "from",
            "people",
            "as",
            "t1",
            "join",
            "poker_player",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "people_id",
            "=",
            "t2",
            ".",
            "people_id",
            "order",
            "by",
            "t1",
            ".",
            "height",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Money_Rank"
            ],
            [
                68.0
            ]
        ],
        "response": "the money rank of the tallest poker player is 68.0",
        "response_toks": [
            "the",
            "money",
            "rank",
            "of",
            "the",
            "tallest",
            "poker",
            "player",
            "is",
            "68.0"
        ],
        "results_map": {
            "result0": "68.0"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T1.Height DESC LIMIT 1 | 68.0 ",
        "query_w_results_blank_res": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T1.Height DESC LIMIT 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "money_rank",
            "from",
            "people",
            "as",
            "t1",
            "join",
            "poker_player",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "people_id",
            "=",
            "t2",
            ".",
            "people_id",
            "order",
            "by",
            "t1",
            ".",
            "height",
            "desc",
            "limit",
            "1",
            "68.0"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "money_rank",
            "from",
            "people",
            "as",
            "t1",
            "join",
            "poker_player",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "people_id",
            "=",
            "t2",
            ".",
            "people_id",
            "order",
            "by",
            "t1",
            ".",
            "height",
            "desc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "the money rank of the tallest poker player is result0",
        "response_toks_blank_res": [
            "the",
            "money",
            "rank",
            "of",
            "the",
            "tallest",
            "poker",
            "player",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id   =   T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count ( * )  DESC LIMIT 1",
        "query_toks": [
            "select",
            "t1",
            ".",
            "degree_summary_name",
            "from",
            "degree_programs",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "degree_program_id",
            "=",
            "t2",
            ".",
            "degree_program_id",
            "group",
            "by",
            "t1",
            ".",
            "degree_summary_name",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "degree_summary_name"
            ],
            [
                "Bachelor"
            ]
        ],
        "response": "Bachelor is the program that had the least number of students enrolled",
        "response_toks": [
            "Bachelor",
            "is",
            "the",
            "program",
            "that",
            "had",
            "the",
            "least",
            "number",
            "of",
            "students",
            "enrolled"
        ],
        "results_map": {
            "result0": "Bachelor"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id   =   T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count ( * )  DESC LIMIT 1 | Bachelor ",
        "query_w_results_blank_res": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id   =   T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count ( * )  DESC LIMIT 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "degree_summary_name",
            "from",
            "degree_programs",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "degree_program_id",
            "=",
            "t2",
            ".",
            "degree_program_id",
            "group",
            "by",
            "t1",
            ".",
            "degree_summary_name",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1",
            "Bachelor"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "degree_summary_name",
            "from",
            "degree_programs",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "degree_program_id",
            "=",
            "t2",
            ".",
            "degree_program_id",
            "group",
            "by",
            "t1",
            ".",
            "degree_summary_name",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "result0 is the program that had the least number of students enrolled",
        "response_toks_blank_res": [
            "result0",
            "is",
            "the",
            "program",
            "that",
            "had",
            "the",
            "least",
            "number",
            "of",
            "students",
            "enrolled"
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "select avg ( ct )  from  ( SELECT count ( student_enrolment_id )  as ct from Student_Enrolment group by degree_program_id ) ",
        "query_toks": [
            "select",
            "avg",
            "(",
            "ct",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "student_enrolment_id",
            ")",
            "as",
            "ct",
            "from",
            "student_enrolment",
            "group",
            "by",
            "degree_program_id",
            ")"
        ],
        "results_raw": [
            [
                "avg(ct)"
            ],
            [
                1.6666666666666667
            ]
        ],
        "response": "The average number of students enrolled in all programs is 1.6666666666666667.",
        "response_toks": [
            "The",
            "average",
            "number",
            "of",
            "students",
            "enrolled",
            "in",
            "all",
            "programs",
            "is",
            "1.6666666666666667",
            "."
        ],
        "results_map": {
            "result0": "1.6666666666666667"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "select avg ( ct )  from  ( SELECT count ( student_enrolment_id )  as ct from Student_Enrolment group by degree_program_id )  | 1.6666666666666667 ",
        "query_w_results_blank_res": "select avg ( ct )  from  ( SELECT count ( student_enrolment_id )  as ct from Student_Enrolment group by degree_program_id )  | result0 ",
        "query_toks_w_results": [
            "select",
            "avg",
            "(",
            "ct",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "student_enrolment_id",
            ")",
            "as",
            "ct",
            "from",
            "student_enrolment",
            "group",
            "by",
            "degree_program_id",
            ")",
            "1.6666666666666667"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "avg",
            "(",
            "ct",
            ")",
            "from",
            "(",
            "select",
            "count",
            "(",
            "student_enrolment_id",
            ")",
            "as",
            "ct",
            "from",
            "student_enrolment",
            "group",
            "by",
            "degree_program_id",
            ")",
            "result0"
        ],
        "response_blank_res": "The average number of students enrolled in all programs is result0 .",
        "response_toks_blank_res": [
            "The",
            "average",
            "number",
            "of",
            "students",
            "enrolled",
            "in",
            "all",
            "programs",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT degree_program_id from Degree_Programs where degree_summary_description  =  'architecto'",
        "query_toks": [
            "select",
            "degree_program_id",
            "from",
            "degree_programs",
            "where",
            "degree_summary_description",
            "=",
            "'architecto'"
        ],
        "results_raw": [
            [
                "degree_program_id"
            ],
            [
                1
            ]
        ],
        "response": "The degree ID for architecto is 1",
        "response_toks": [
            "The",
            "degree",
            "ID",
            "for",
            "architecto",
            "is",
            "1"
        ],
        "results_map": {
            "result0": "1"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT degree_program_id from Degree_Programs where degree_summary_description  =  'architecto' | 1 ",
        "query_w_results_blank_res": "SELECT degree_program_id from Degree_Programs where degree_summary_description  =  'architecto' | result0 ",
        "query_toks_w_results": [
            "select",
            "degree_program_id",
            "from",
            "degree_programs",
            "where",
            "degree_summary_description",
            "=",
            "'architecto'",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "degree_program_id",
            "from",
            "degree_programs",
            "where",
            "degree_summary_description",
            "=",
            "'architecto'",
            "result0"
        ],
        "response_blank_res": "The degree ID for architecto is result0",
        "response_toks_blank_res": [
            "The",
            "degree",
            "ID",
            "for",
            "architecto",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT degree_program_id from Degree_Programs where degree_summary_description  =  'camque'",
        "query_toks": [
            "select",
            "degree_program_id",
            "from",
            "degree_programs",
            "where",
            "degree_summary_description",
            "=",
            "'camque'"
        ],
        "results_raw": [
            [
                "degree_program_id"
            ]
        ],
        "response": "The degree ID for camque is NULL",
        "response_toks": [
            "The",
            "degree",
            "ID",
            "for",
            "camque",
            "is",
            "NULL"
        ],
        "results_map": null,
        "results_blank_res": null,
        "query_w_results": null,
        "query_w_results_blank_res": null,
        "query_toks_w_results": null,
        "query_toks_w_results_blank_res": null,
        "response_blank_res": null,
        "response_toks_blank_res": null
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT T2.degree_program_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id WHERE T1.first_name  =  \"Timmothy\"",
        "query_toks": [
            "select",
            "t2",
            ".",
            "degree_program_id",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "student_id",
            "where",
            "t1",
            ".",
            "first_name",
            "=",
            "\"timmothy\""
        ],
        "results_raw": [
            [
                "degree_program_id"
            ],
            [
                3
            ]
        ],
        "response": "3 is the id of the degree program where the student by the first name Timmothy has enrolled in.",
        "response_toks": [
            "3",
            "is",
            "the",
            "id",
            "of",
            "the",
            "degree",
            "program",
            "where",
            "the",
            "student",
            "by",
            "the",
            "first",
            "name",
            "Timmothy",
            "has",
            "enrolled",
            "in",
            "."
        ],
        "results_map": {
            "result0": "3"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT T2.degree_program_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id WHERE T1.first_name  =  \"Timmothy\" | 3 ",
        "query_w_results_blank_res": "SELECT T2.degree_program_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id WHERE T1.first_name  =  \"Timmothy\" | result0 ",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "degree_program_id",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "student_id",
            "where",
            "t1",
            ".",
            "first_name",
            "=",
            "\"timmothy\"",
            "3"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "degree_program_id",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "student_enrolment",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "student_id",
            "where",
            "t1",
            ".",
            "first_name",
            "=",
            "\"timmothy\"",
            "result0"
        ],
        "response_blank_res": "result0 is the id of the degree program where the student by the first name Timmothy has enrolled in .",
        "response_toks_blank_res": [
            "result0",
            "is",
            "the",
            "id",
            "of",
            "the",
            "degree",
            "program",
            "where",
            "the",
            "student",
            "by",
            "the",
            "first",
            "name",
            "Timmothy",
            "has",
            "enrolled",
            "in",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT date_first_registered, date_left FROM Students WHERE first_name  =  \"Timmothy\"",
        "query_toks": [
            "select",
            "date_first_registered",
            ",",
            "date_left",
            "from",
            "students",
            "where",
            "first_name",
            "=",
            "\"timmothy\""
        ],
        "results_raw": [
            [
                "date_first_registered",
                "date_left"
            ],
            [
                "1971-02-05 07:28:23",
                "1971-05-17 19:28:49"
            ]
        ],
        "response": "Timmothy first registered on 1971-02-05 07:28:23 and left on 1971-05-17 19:28:49.",
        "response_toks": [
            "Timmothy",
            "first",
            "registered",
            "on",
            "1971-02-05",
            "07:28:23",
            "and",
            "left",
            "on",
            "1971-05-17",
            "19:28:49",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT date_first_registered, date_left FROM Students WHERE first_name  =  \"Timmothy\"",
        "query_w_results_blank_res": "SELECT date_first_registered, date_left FROM Students WHERE first_name  =  \"Timmothy\"",
        "query_toks_w_results": [
            "select",
            "date_first_registered",
            ",",
            "date_left",
            "from",
            "students",
            "where",
            "first_name",
            "=",
            "\"timmothy\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "date_first_registered",
            ",",
            "date_left",
            "from",
            "students",
            "where",
            "first_name",
            "=",
            "\"timmothy\""
        ],
        "response_blank_res": "Timmothy first registered on 1971-02-05 07:28:23 and left on 1971-05-17 19:28:49 .",
        "response_toks_blank_res": [
            "Timmothy",
            "first",
            "registered",
            "on",
            "1971-02-05",
            "07:28:23",
            "and",
            "left",
            "on",
            "1971-05-17",
            "19:28:49",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT middle_name FROM Students WHERE email_address  =  \"johns.unique@example.net\"",
        "query_toks": [
            "select",
            "middle_name",
            "from",
            "students",
            "where",
            "email_address",
            "=",
            "\"johns.unique@example.net\""
        ],
        "results_raw": [
            [
                "middle_name"
            ],
            [
                "Violet"
            ]
        ],
        "response": "The middle name of this student is Violet.",
        "response_toks": [
            "The",
            "middle",
            "name",
            "of",
            "this",
            "student",
            "is",
            "Violet",
            "."
        ],
        "results_map": {
            "result0": "Violet"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT middle_name FROM Students WHERE email_address  =  \"johns.unique@example.net\" | Violet ",
        "query_w_results_blank_res": "SELECT middle_name FROM Students WHERE email_address  =  \"johns.unique@example.net\" | result0 ",
        "query_toks_w_results": [
            "select",
            "middle_name",
            "from",
            "students",
            "where",
            "email_address",
            "=",
            "\"johns.unique@example.net\"",
            "Violet"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "middle_name",
            "from",
            "students",
            "where",
            "email_address",
            "=",
            "\"johns.unique@example.net\"",
            "result0"
        ],
        "response_blank_res": "The middle name of this student is result0 .",
        "response_toks_blank_res": [
            "The",
            "middle",
            "name",
            "of",
            "this",
            "student",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "pets_1",
        "query": "SELECT distinct PetType from Pets",
        "query_toks": [
            "select",
            "distinct",
            "pettype",
            "from",
            "pets"
        ],
        "results_raw": [
            [
                "PetType"
            ],
            [
                "cat"
            ],
            [
                "dog"
            ]
        ],
        "response": "Here are the different types of pets",
        "response_toks": [
            "Here",
            "are",
            "the",
            "different",
            "types",
            "of",
            "pets"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT distinct PetType from Pets",
        "query_w_results_blank_res": "SELECT distinct PetType from Pets",
        "query_toks_w_results": [
            "select",
            "distinct",
            "pettype",
            "from",
            "pets"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "pettype",
            "from",
            "pets"
        ],
        "response_blank_res": "Here are the different types of pets",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "different",
            "types",
            "of",
            "pets"
        ]
    },
    {
        "database_id": "pets_1",
        "query": "SELECT count ( * )   from Pets where PetType = \"dog\"",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "pets",
            "where",
            "pettype",
            "=",
            "\"dog\""
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                2
            ]
        ],
        "response": "2 pets are of type dog",
        "response_toks": [
            "2",
            "pets",
            "are",
            "of",
            "type",
            "dog"
        ],
        "results_map": {
            "result0": "2"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )   from Pets where PetType = \"dog\" | 2 ",
        "query_w_results_blank_res": "SELECT count ( * )   from Pets where PetType = \"dog\" | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "pets",
            "where",
            "pettype",
            "=",
            "\"dog\"",
            "2"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "pets",
            "where",
            "pettype",
            "=",
            "\"dog\"",
            "result0"
        ],
        "response_blank_res": "result0 pets are of type dog",
        "response_toks_blank_res": [
            "result0",
            "pets",
            "are",
            "of",
            "type",
            "dog"
        ]
    },
    {
        "database_id": "pets_1",
        "query": "SELECT pet_age  from Pets where PetType = \"dog\"",
        "query_toks": [
            "select",
            "pet_age",
            "from",
            "pets",
            "where",
            "pettype",
            "=",
            "\"dog\""
        ],
        "results_raw": [
            [
                "pet_age"
            ],
            [
                2
            ],
            [
                1
            ]
        ],
        "response": "Here are the ages of the 2 pets with type dog",
        "response_toks": [
            "Here",
            "are",
            "the",
            "ages",
            "of",
            "the",
            "2",
            "pets",
            "with",
            "type",
            "dog"
        ],
        "results_map": {
            "result0": "2"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT pet_age  from Pets where PetType = \"dog\" | 2 ",
        "query_w_results_blank_res": "SELECT pet_age  from Pets where PetType = \"dog\" | result0 ",
        "query_toks_w_results": [
            "select",
            "pet_age",
            "from",
            "pets",
            "where",
            "pettype",
            "=",
            "\"dog\"",
            "2"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "pet_age",
            "from",
            "pets",
            "where",
            "pettype",
            "=",
            "\"dog\"",
            "result0"
        ],
        "response_blank_res": "Here are the ages of the result0 pets with type dog",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "ages",
            "of",
            "the",
            "result0",
            "pets",
            "with",
            "type",
            "dog"
        ]
    },
    {
        "database_id": "pets_1",
        "query": "SELECT weight  from Pets where PetType = \"dog\" and pet_age  =   ( select min ( pet_age )  from Pets where PetType = \"dog\" ) ",
        "query_toks": [
            "select",
            "weight",
            "from",
            "pets",
            "where",
            "pettype",
            "=",
            "\"dog\"",
            "and",
            "pet_age",
            "=",
            "(",
            "select",
            "min",
            "(",
            "pet_age",
            ")",
            "from",
            "pets",
            "where",
            "pettype",
            "=",
            "\"dog\"",
            ")"
        ],
        "results_raw": [
            [
                "weight"
            ],
            [
                9.3
            ]
        ],
        "response": "The pet with the type of dog and the smallest age weighs 9.3",
        "response_toks": [
            "The",
            "pet",
            "with",
            "the",
            "type",
            "of",
            "dog",
            "and",
            "the",
            "smallest",
            "age",
            "weighs",
            "9.3"
        ],
        "results_map": {
            "result0": "9.3"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT weight  from Pets where PetType = \"dog\" and pet_age  =   ( select min ( pet_age )  from Pets where PetType = \"dog\" )  | 9.3 ",
        "query_w_results_blank_res": "SELECT weight  from Pets where PetType = \"dog\" and pet_age  =   ( select min ( pet_age )  from Pets where PetType = \"dog\" )  | result0 ",
        "query_toks_w_results": [
            "select",
            "weight",
            "from",
            "pets",
            "where",
            "pettype",
            "=",
            "\"dog\"",
            "and",
            "pet_age",
            "=",
            "(",
            "select",
            "min",
            "(",
            "pet_age",
            ")",
            "from",
            "pets",
            "where",
            "pettype",
            "=",
            "\"dog\"",
            ")",
            "9.3"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "weight",
            "from",
            "pets",
            "where",
            "pettype",
            "=",
            "\"dog\"",
            "and",
            "pet_age",
            "=",
            "(",
            "select",
            "min",
            "(",
            "pet_age",
            ")",
            "from",
            "pets",
            "where",
            "pettype",
            "=",
            "\"dog\"",
            ")",
            "result0"
        ],
        "response_blank_res": "The pet with the type of dog and the smallest age weighs result0",
        "response_toks_blank_res": [
            "The",
            "pet",
            "with",
            "the",
            "type",
            "of",
            "dog",
            "and",
            "the",
            "smallest",
            "age",
            "weighs",
            "result0"
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id   =   T2.address_id WHERE T2.state_province_county   =   'NorthCarolina'",
        "query_toks": [
            "select",
            "t1",
            ".",
            "last_name",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "addresses",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "current_address_id",
            "=",
            "t2",
            ".",
            "address_id",
            "where",
            "t2",
            ".",
            "state_province_county",
            "=",
            "'northcarolina'"
        ],
        "results_raw": [
            [
                "last_name"
            ],
            [
                "Gleichner"
            ],
            [
                "Christiansen"
            ],
            [
                "Weimann"
            ]
        ],
        "response": "The last name of students who live in North Carolina are Gleichner , Christiansen and Weimann",
        "response_toks": [
            "The",
            "last",
            "name",
            "of",
            "students",
            "who",
            "live",
            "in",
            "North",
            "Carolina",
            "are",
            "Gleichner",
            ",",
            "Christiansen",
            "and",
            "Weimann"
        ],
        "results_map": {
            "result0": "Gleichner",
            "result1": "Christiansen",
            "result2": "Weimann"
        },
        "results_blank_res": "result0 result1 result2 ",
        "query_w_results": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id   =   T2.address_id WHERE T2.state_province_county   =   'NorthCarolina' | Gleichner Christiansen Weimann ",
        "query_w_results_blank_res": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id   =   T2.address_id WHERE T2.state_province_county   =   'NorthCarolina' | result0 result1 result2 ",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "last_name",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "addresses",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "current_address_id",
            "=",
            "t2",
            ".",
            "address_id",
            "where",
            "t2",
            ".",
            "state_province_county",
            "=",
            "'northcarolina'",
            "Gleichner",
            "Christiansen",
            "Weimann"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "last_name",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "addresses",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "current_address_id",
            "=",
            "t2",
            ".",
            "address_id",
            "where",
            "t2",
            ".",
            "state_province_county",
            "=",
            "'northcarolina'",
            "result0",
            "result1",
            "result2"
        ],
        "response_blank_res": "The last name of students who live in North Carolina are result0 , result1 and result2",
        "response_toks_blank_res": [
            "The",
            "last",
            "name",
            "of",
            "students",
            "who",
            "live",
            "in",
            "North",
            "Carolina",
            "are",
            "result0",
            ",",
            "result1",
            "and",
            "result2"
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id   =   T2.address_id WHERE T2.state_province_county   =   'NorthCarolina'",
        "query_toks": [
            "select",
            "t1",
            ".",
            "first_name",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "addresses",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "current_address_id",
            "=",
            "t2",
            ".",
            "address_id",
            "where",
            "t2",
            ".",
            "state_province_county",
            "=",
            "'northcarolina'"
        ],
        "results_raw": [
            [
                "first_name"
            ],
            [
                "Warren"
            ],
            [
                "Milton"
            ],
            [
                "Deon"
            ]
        ],
        "response": "The first name of student live in north carolina are Warren, Milton and Deon",
        "response_toks": [
            "The",
            "first",
            "name",
            "of",
            "student",
            "live",
            "in",
            "north",
            "carolina",
            "are",
            "Warren",
            ",",
            "Milton",
            "and",
            "Deon"
        ],
        "results_map": {
            "result0": "Warren",
            "result1": "Milton",
            "result2": "Deon"
        },
        "results_blank_res": "result0 result1 result2 ",
        "query_w_results": "SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id   =   T2.address_id WHERE T2.state_province_county   =   'NorthCarolina' | Warren Milton Deon ",
        "query_w_results_blank_res": "SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id   =   T2.address_id WHERE T2.state_province_county   =   'NorthCarolina' | result0 result1 result2 ",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "first_name",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "addresses",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "current_address_id",
            "=",
            "t2",
            ".",
            "address_id",
            "where",
            "t2",
            ".",
            "state_province_county",
            "=",
            "'northcarolina'",
            "Warren",
            "Milton",
            "Deon"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "first_name",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "addresses",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "current_address_id",
            "=",
            "t2",
            ".",
            "address_id",
            "where",
            "t2",
            ".",
            "state_province_county",
            "=",
            "'northcarolina'",
            "result0",
            "result1",
            "result2"
        ],
        "response_blank_res": "The first name of student live in north carolina are result0 , result1 and result2",
        "response_toks_blank_res": [
            "The",
            "first",
            "name",
            "of",
            "student",
            "live",
            "in",
            "north",
            "carolina",
            "are",
            "result0",
            ",",
            "result1",
            "and",
            "result2"
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id   =   T2.address_id WHERE T2.state_province_county   =   'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id   =   T4.student_id",
        "query_toks": [
            "select",
            "t1",
            ".",
            "last_name",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "addresses",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "current_address_id",
            "=",
            "t2",
            ".",
            "address_id",
            "where",
            "t2",
            ".",
            "state_province_county",
            "=",
            "'northcarolina'",
            "except",
            "select",
            "distinct",
            "t3",
            ".",
            "last_name",
            "from",
            "students",
            "as",
            "t3",
            "join",
            "student_enrolment",
            "as",
            "t4",
            "on",
            "t3",
            ".",
            "student_id",
            "=",
            "t4",
            ".",
            "student_id"
        ],
        "results_raw": [
            [
                "last_name"
            ],
            [
                "Gleichner"
            ],
            [
                "Weimann"
            ]
        ],
        "response": "The last name of studetns who live in Norh Carolina but not in degree are Gleichner and Weimann",
        "response_toks": [
            "The",
            "last",
            "name",
            "of",
            "studetns",
            "who",
            "live",
            "in",
            "Norh",
            "Carolina",
            "but",
            "not",
            "in",
            "degree",
            "are",
            "Gleichner",
            "and",
            "Weimann"
        ],
        "results_map": {
            "result0": "Gleichner",
            "result1": "Weimann"
        },
        "results_blank_res": "result0 result1 ",
        "query_w_results": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id   =   T2.address_id WHERE T2.state_province_county   =   'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id   =   T4.student_id | Gleichner Weimann ",
        "query_w_results_blank_res": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id   =   T2.address_id WHERE T2.state_province_county   =   'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id   =   T4.student_id | result0 result1 ",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "last_name",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "addresses",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "current_address_id",
            "=",
            "t2",
            ".",
            "address_id",
            "where",
            "t2",
            ".",
            "state_province_county",
            "=",
            "'northcarolina'",
            "except",
            "select",
            "distinct",
            "t3",
            ".",
            "last_name",
            "from",
            "students",
            "as",
            "t3",
            "join",
            "student_enrolment",
            "as",
            "t4",
            "on",
            "t3",
            ".",
            "student_id",
            "=",
            "t4",
            ".",
            "student_id",
            "Gleichner",
            "Weimann"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "last_name",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "addresses",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "current_address_id",
            "=",
            "t2",
            ".",
            "address_id",
            "where",
            "t2",
            ".",
            "state_province_county",
            "=",
            "'northcarolina'",
            "except",
            "select",
            "distinct",
            "t3",
            ".",
            "last_name",
            "from",
            "students",
            "as",
            "t3",
            "join",
            "student_enrolment",
            "as",
            "t4",
            "on",
            "t3",
            ".",
            "student_id",
            "=",
            "t4",
            ".",
            "student_id",
            "result0",
            "result1"
        ],
        "response_blank_res": "The last name of studetns who live in Norh Carolina but not in degree are result0 and result1",
        "response_toks_blank_res": [
            "The",
            "last",
            "name",
            "of",
            "studetns",
            "who",
            "live",
            "in",
            "Norh",
            "Carolina",
            "but",
            "not",
            "in",
            "degree",
            "are",
            "result0",
            "and",
            "result1"
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id   =   T2.address_id WHERE T2.state_province_county   =   'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id   =   T4.student_id",
        "query_toks": [
            "select",
            "t1",
            ".",
            "first_name",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "addresses",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "current_address_id",
            "=",
            "t2",
            ".",
            "address_id",
            "where",
            "t2",
            ".",
            "state_province_county",
            "=",
            "'northcarolina'",
            "except",
            "select",
            "distinct",
            "t3",
            ".",
            "last_name",
            "from",
            "students",
            "as",
            "t3",
            "join",
            "student_enrolment",
            "as",
            "t4",
            "on",
            "t3",
            ".",
            "student_id",
            "=",
            "t4",
            ".",
            "student_id"
        ],
        "results_raw": [
            [
                "first_name"
            ],
            [
                "Deon"
            ],
            [
                "Milton"
            ],
            [
                "Warren"
            ]
        ],
        "response": "Their first name who live in Norh Carolina but not in degree are Deon, Milton and Warren",
        "response_toks": [
            "Their",
            "first",
            "name",
            "who",
            "live",
            "in",
            "Norh",
            "Carolina",
            "but",
            "not",
            "in",
            "degree",
            "are",
            "Deon",
            ",",
            "Milton",
            "and",
            "Warren"
        ],
        "results_map": {
            "result0": "Deon",
            "result1": "Milton",
            "result2": "Warren"
        },
        "results_blank_res": "result0 result1 result2 ",
        "query_w_results": "SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id   =   T2.address_id WHERE T2.state_province_county   =   'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id   =   T4.student_id | Deon Milton Warren ",
        "query_w_results_blank_res": "SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id   =   T2.address_id WHERE T2.state_province_county   =   'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id   =   T4.student_id | result0 result1 result2 ",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "first_name",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "addresses",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "current_address_id",
            "=",
            "t2",
            ".",
            "address_id",
            "where",
            "t2",
            ".",
            "state_province_county",
            "=",
            "'northcarolina'",
            "except",
            "select",
            "distinct",
            "t3",
            ".",
            "last_name",
            "from",
            "students",
            "as",
            "t3",
            "join",
            "student_enrolment",
            "as",
            "t4",
            "on",
            "t3",
            ".",
            "student_id",
            "=",
            "t4",
            ".",
            "student_id",
            "Deon",
            "Milton",
            "Warren"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "first_name",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "addresses",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "current_address_id",
            "=",
            "t2",
            ".",
            "address_id",
            "where",
            "t2",
            ".",
            "state_province_county",
            "=",
            "'northcarolina'",
            "except",
            "select",
            "distinct",
            "t3",
            ".",
            "last_name",
            "from",
            "students",
            "as",
            "t3",
            "join",
            "student_enrolment",
            "as",
            "t4",
            "on",
            "t3",
            ".",
            "student_id",
            "=",
            "t4",
            ".",
            "student_id",
            "result0",
            "result1",
            "result2"
        ],
        "response_blank_res": "Their first name who live in Norh Carolina but not in degree are result0 , result1 and result2",
        "response_toks_blank_res": [
            "Their",
            "first",
            "name",
            "who",
            "live",
            "in",
            "Norh",
            "Carolina",
            "but",
            "not",
            "in",
            "degree",
            "are",
            "result0",
            ",",
            "result1",
            "and",
            "result2"
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT T1.date_first_registered FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id   =   T2.address_id WHERE T2.country  =   'Iceland'",
        "query_toks": [
            "select",
            "t1",
            ".",
            "date_first_registered",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "addresses",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "current_address_id",
            "=",
            "t2",
            ".",
            "address_id",
            "where",
            "t2",
            ".",
            "country",
            "=",
            "'iceland'"
        ],
        "results_raw": [
            [
                "date_first_registered"
            ],
            [
                "1982-02-14 08:46:35"
            ]
        ],
        "response": "The first registered date of student from iceland is 1982-02-14 08:46:35",
        "response_toks": [
            "The",
            "first",
            "registered",
            "date",
            "of",
            "student",
            "from",
            "iceland",
            "is",
            "1982-02-14",
            "08:46:35"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.date_first_registered FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id   =   T2.address_id WHERE T2.country  =   'Iceland'",
        "query_w_results_blank_res": "SELECT T1.date_first_registered FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id   =   T2.address_id WHERE T2.country  =   'Iceland'",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "date_first_registered",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "addresses",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "current_address_id",
            "=",
            "t2",
            ".",
            "address_id",
            "where",
            "t2",
            ".",
            "country",
            "=",
            "'iceland'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "date_first_registered",
            "from",
            "students",
            "as",
            "t1",
            "join",
            "addresses",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "current_address_id",
            "=",
            "t2",
            ".",
            "address_id",
            "where",
            "t2",
            ".",
            "country",
            "=",
            "'iceland'"
        ],
        "response_blank_res": "The first registered date of student from iceland is 1982-02-14 08:46:35",
        "response_toks_blank_res": [
            "The",
            "first",
            "registered",
            "date",
            "of",
            "student",
            "from",
            "iceland",
            "is",
            "1982-02-14",
            "08:46:35"
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
        "query_toks": [
            "select",
            "winner_name",
            ",",
            "loser_name",
            "from",
            "matches",
            "order",
            "by",
            "minutes",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "winner_name",
                "loser_name"
            ],
            [
                "Petra Kvitova",
                "Angelique Kerber"
            ]
        ],
        "response": "find the name of loser who played in the match with the greatest number of minutes is Angelique Kerber and The name of the winner is Petra Kvitova.",
        "response_toks": [
            "find",
            "the",
            "name",
            "of",
            "loser",
            "who",
            "played",
            "in",
            "the",
            "match",
            "with",
            "the",
            "greatest",
            "number",
            "of",
            "minutes",
            "is",
            "Angelique",
            "Kerber",
            "and",
            "The",
            "name",
            "of",
            "the",
            "winner",
            "is",
            "Petra",
            "Kvitova",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
        "query_w_results_blank_res": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
        "query_toks_w_results": [
            "select",
            "winner_name",
            ",",
            "loser_name",
            "from",
            "matches",
            "order",
            "by",
            "minutes",
            "desc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "winner_name",
            ",",
            "loser_name",
            "from",
            "matches",
            "order",
            "by",
            "minutes",
            "desc",
            "limit",
            "1"
        ],
        "response_blank_res": "find the name of loser who played in the match with the greatest number of minutes is Angelique Kerber and The name of the winner is Petra Kvitova .",
        "response_toks_blank_res": [
            "find",
            "the",
            "name",
            "of",
            "loser",
            "who",
            "played",
            "in",
            "the",
            "match",
            "with",
            "the",
            "greatest",
            "number",
            "of",
            "minutes",
            "is",
            "Angelique",
            "Kerber",
            "and",
            "The",
            "name",
            "of",
            "the",
            "winner",
            "is",
            "Petra",
            "Kvitova",
            "."
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT score FROM matches ORDER BY minutes DESC LIMIT 1",
        "query_toks": [
            "select",
            "score",
            "from",
            "matches",
            "order",
            "by",
            "minutes",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "score"
            ],
            [
                "6-7(10) 7-5 6-4"
            ]
        ],
        "response": "the score of the match with the greatest number of minutes is 6-7(10) 7-5 6-4.",
        "response_toks": [
            "the",
            "score",
            "of",
            "the",
            "match",
            "with",
            "the",
            "greatest",
            "number",
            "of",
            "minutes",
            "is",
            "6-7",
            "(",
            "10",
            ")",
            "7-5",
            "6-4",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT score FROM matches ORDER BY minutes DESC LIMIT 1",
        "query_w_results_blank_res": "SELECT score FROM matches ORDER BY minutes DESC LIMIT 1",
        "query_toks_w_results": [
            "select",
            "score",
            "from",
            "matches",
            "order",
            "by",
            "minutes",
            "desc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "score",
            "from",
            "matches",
            "order",
            "by",
            "minutes",
            "desc",
            "limit",
            "1"
        ],
        "response_blank_res": "the score of the match with the greatest number of minutes is 6-7 ( 10 ) 7-5 6-4 .",
        "response_toks_blank_res": [
            "the",
            "score",
            "of",
            "the",
            "match",
            "with",
            "the",
            "greatest",
            "number",
            "of",
            "minutes",
            "is",
            "6-7",
            "(",
            "10",
            ")",
            "7-5",
            "6-4",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "select distinct Model from car_names",
        "query_toks": [
            "select",
            "distinct",
            "model",
            "from",
            "car_names"
        ],
        "results_raw": [
            [
                "Model"
            ],
            [
                "chevrolet"
            ],
            [
                "buick"
            ],
            [
                "plymouth"
            ]
        ],
        "response": "here are all the different car models available",
        "response_toks": [
            "here",
            "are",
            "all",
            "the",
            "different",
            "car",
            "models",
            "available"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "select distinct Model from car_names",
        "query_w_results_blank_res": "select distinct Model from car_names",
        "query_toks_w_results": [
            "select",
            "distinct",
            "model",
            "from",
            "car_names"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "model",
            "from",
            "car_names"
        ],
        "response_blank_res": "here are all the different car models available",
        "response_toks_blank_res": [
            "here",
            "are",
            "all",
            "the",
            "different",
            "car",
            "models",
            "available"
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model   =   T2.model JOIN CARS_DATA AS T3 ON T2.MakeId   =   T3.id WHERE T3.year  >  1980",
        "query_toks": [
            "select",
            "distinct",
            "t1",
            ".",
            "model",
            "from",
            "model_list",
            "as",
            "t1",
            "join",
            "car_names",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "model",
            "=",
            "t2",
            ".",
            "model",
            "join",
            "cars_data",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "makeid",
            "=",
            "t3",
            ".",
            "id",
            "where",
            "t3",
            ".",
            "year",
            ">",
            "1980"
        ],
        "results_raw": [
            [
                "Model"
            ],
            [
                "plymouth"
            ],
            [
                "buick"
            ],
            [
                "dodge"
            ]
        ],
        "response": "here are distinct car models which are the produced after 1980",
        "response_toks": [
            "here",
            "are",
            "distinct",
            "car",
            "models",
            "which",
            "are",
            "the",
            "produced",
            "after",
            "1980"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model   =   T2.model JOIN CARS_DATA AS T3 ON T2.MakeId   =   T3.id WHERE T3.year  >  1980",
        "query_w_results_blank_res": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model   =   T2.model JOIN CARS_DATA AS T3 ON T2.MakeId   =   T3.id WHERE T3.year  >  1980",
        "query_toks_w_results": [
            "select",
            "distinct",
            "t1",
            ".",
            "model",
            "from",
            "model_list",
            "as",
            "t1",
            "join",
            "car_names",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "model",
            "=",
            "t2",
            ".",
            "model",
            "join",
            "cars_data",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "makeid",
            "=",
            "t3",
            ".",
            "id",
            "where",
            "t3",
            ".",
            "year",
            ">",
            "1980"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "t1",
            ".",
            "model",
            "from",
            "model_list",
            "as",
            "t1",
            "join",
            "car_names",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "model",
            "=",
            "t2",
            ".",
            "model",
            "join",
            "cars_data",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "makeid",
            "=",
            "t3",
            ".",
            "id",
            "where",
            "t3",
            ".",
            "year",
            ">",
            "1980"
        ],
        "response_blank_res": "here are distinct car models which are the produced after 1980",
        "response_toks_blank_res": [
            "here",
            "are",
            "distinct",
            "car",
            "models",
            "which",
            "are",
            "the",
            "produced",
            "after",
            "1980"
        ]
    },
    {
        "database_id": "network_1",
        "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count ( * )  DESC LIMIT 1",
        "query_toks": [
            "select",
            "grade",
            "from",
            "highschooler",
            "group",
            "by",
            "grade",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "grade"
            ],
            [
                9
            ]
        ],
        "response": "The grade with the most high schoolers is 9.",
        "response_toks": [
            "The",
            "grade",
            "with",
            "the",
            "most",
            "high",
            "schoolers",
            "is",
            "9",
            "."
        ],
        "results_map": {
            "result0": "9"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count ( * )  DESC LIMIT 1 | 9 ",
        "query_w_results_blank_res": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count ( * )  DESC LIMIT 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "grade",
            "from",
            "highschooler",
            "group",
            "by",
            "grade",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1",
            "9"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "grade",
            "from",
            "highschooler",
            "group",
            "by",
            "grade",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "The grade with the most high schoolers is result0 .",
        "response_toks_blank_res": [
            "The",
            "grade",
            "with",
            "the",
            "most",
            "high",
            "schoolers",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "network_1",
        "query": "SELECT name FROM Highschooler WHERE grade  =  9",
        "query_toks": [
            "select",
            "name",
            "from",
            "highschooler",
            "where",
            "grade",
            "=",
            "9"
        ],
        "results_raw": [
            [
                "name"
            ],
            [
                "Jordan"
            ],
            [
                "Gabriel"
            ],
            [
                "Tiffany"
            ]
        ],
        "response": "Here is a list of the names of the high schoolers in grade 9.",
        "response_toks": [
            "Here",
            "is",
            "a",
            "list",
            "of",
            "the",
            "names",
            "of",
            "the",
            "high",
            "schoolers",
            "in",
            "grade",
            "9",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT name FROM Highschooler WHERE grade  =  9",
        "query_w_results_blank_res": "SELECT name FROM Highschooler WHERE grade  =  9",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "highschooler",
            "where",
            "grade",
            "=",
            "9"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "highschooler",
            "where",
            "grade",
            "=",
            "9"
        ],
        "response_blank_res": "Here is a list of the names of the high schoolers in grade 9 .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "a",
            "list",
            "of",
            "the",
            "names",
            "of",
            "the",
            "high",
            "schoolers",
            "in",
            "grade",
            "9",
            "."
        ]
    },
    {
        "database_id": "network_1",
        "query": "SELECT grade FROM Highschooler WHERE name  =  \"Tiffany\"",
        "query_toks": [
            "select",
            "grade",
            "from",
            "highschooler",
            "where",
            "name",
            "=",
            "\"tiffany\""
        ],
        "results_raw": [
            [
                "grade"
            ],
            [
                9
            ]
        ],
        "response": "The grade of Tiffany is 9.",
        "response_toks": [
            "The",
            "grade",
            "of",
            "Tiffany",
            "is",
            "9",
            "."
        ],
        "results_map": {
            "result0": "9"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT grade FROM Highschooler WHERE name  =  \"Tiffany\" | 9 ",
        "query_w_results_blank_res": "SELECT grade FROM Highschooler WHERE name  =  \"Tiffany\" | result0 ",
        "query_toks_w_results": [
            "select",
            "grade",
            "from",
            "highschooler",
            "where",
            "name",
            "=",
            "\"tiffany\"",
            "9"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "grade",
            "from",
            "highschooler",
            "where",
            "name",
            "=",
            "\"tiffany\"",
            "result0"
        ],
        "response_blank_res": "The grade of Tiffany is result0 .",
        "response_toks_blank_res": [
            "The",
            "grade",
            "of",
            "Tiffany",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "network_1",
        "query": "SELECT count ( * )  FROM Highschooler WHERE grade  =  9",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "highschooler",
            "where",
            "grade",
            "=",
            "9"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                4
            ]
        ],
        "response": "The number of high schoolers in grade 9 is 4.",
        "response_toks": [
            "The",
            "number",
            "of",
            "high",
            "schoolers",
            "in",
            "grade",
            "9",
            "is",
            "4",
            "."
        ],
        "results_map": {
            "result0": "4"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM Highschooler WHERE grade  =  9 | 4 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM Highschooler WHERE grade  =  9 | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "highschooler",
            "where",
            "grade",
            "=",
            "9",
            "4"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "highschooler",
            "where",
            "grade",
            "=",
            "9",
            "result0"
        ],
        "response_blank_res": "The number of high schoolers in grade 9 is result0 .",
        "response_toks_blank_res": [
            "The",
            "number",
            "of",
            "high",
            "schoolers",
            "in",
            "grade",
            "9",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "network_1",
        "query": "SELECT grade FROM Highschooler WHERE name  =  \"Gabriel\" AND ID  =  1689",
        "query_toks": [
            "select",
            "grade",
            "from",
            "highschooler",
            "where",
            "name",
            "=",
            "\"gabriel\"",
            "and",
            "id",
            "=",
            "1689"
        ],
        "results_raw": [
            [
                "grade"
            ],
            [
                9
            ]
        ],
        "response": "The grade of Gabriel with ID 1689 is 9.",
        "response_toks": [
            "The",
            "grade",
            "of",
            "Gabriel",
            "with",
            "ID",
            "1689",
            "is",
            "9",
            "."
        ],
        "results_map": {
            "result0": "9"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT grade FROM Highschooler WHERE name  =  \"Gabriel\" AND ID  =  1689 | 9 ",
        "query_w_results_blank_res": "SELECT grade FROM Highschooler WHERE name  =  \"Gabriel\" AND ID  =  1689 | result0 ",
        "query_toks_w_results": [
            "select",
            "grade",
            "from",
            "highschooler",
            "where",
            "name",
            "=",
            "\"gabriel\"",
            "and",
            "id",
            "=",
            "1689",
            "9"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "grade",
            "from",
            "highschooler",
            "where",
            "name",
            "=",
            "\"gabriel\"",
            "and",
            "id",
            "=",
            "1689",
            "result0"
        ],
        "response_blank_res": "The grade of Gabriel with ID 1689 is result0 .",
        "response_toks_blank_res": [
            "The",
            "grade",
            "of",
            "Gabriel",
            "with",
            "ID",
            "1689",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "network_1",
        "query": "SELECT ID FROM Highschooler WHERE name  =  \"Tiffany\"",
        "query_toks": [
            "select",
            "id",
            "from",
            "highschooler",
            "where",
            "name",
            "=",
            "\"tiffany\""
        ],
        "results_raw": [
            [
                "ID"
            ],
            [
                1381
            ]
        ],
        "response": "The ID of Tiffany is 1381.",
        "response_toks": [
            "The",
            "ID",
            "of",
            "Tiffany",
            "is",
            "1381",
            "."
        ],
        "results_map": {
            "result0": "1381"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT ID FROM Highschooler WHERE name  =  \"Tiffany\" | 1381 ",
        "query_w_results_blank_res": "SELECT ID FROM Highschooler WHERE name  =  \"Tiffany\" | result0 ",
        "query_toks_w_results": [
            "select",
            "id",
            "from",
            "highschooler",
            "where",
            "name",
            "=",
            "\"tiffany\"",
            "1381"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "id",
            "from",
            "highschooler",
            "where",
            "name",
            "=",
            "\"tiffany\"",
            "result0"
        ],
        "response_blank_res": "The ID of Tiffany is result0 .",
        "response_toks_blank_res": [
            "The",
            "ID",
            "of",
            "Tiffany",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "network_1",
        "query": "SELECT name FROM Highschooler WHERE ID  =  1510",
        "query_toks": [
            "select",
            "name",
            "from",
            "highschooler",
            "where",
            "id",
            "=",
            "1510"
        ],
        "results_raw": [
            [
                "name"
            ],
            [
                "Jordan"
            ]
        ],
        "response": "The name of the high schooler with ID 1510 is Jordan.",
        "response_toks": [
            "The",
            "name",
            "of",
            "the",
            "high",
            "schooler",
            "with",
            "ID",
            "1510",
            "is",
            "Jordan",
            "."
        ],
        "results_map": {
            "result0": "Jordan"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT name FROM Highschooler WHERE ID  =  1510 | Jordan ",
        "query_w_results_blank_res": "SELECT name FROM Highschooler WHERE ID  =  1510 | result0 ",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "highschooler",
            "where",
            "id",
            "=",
            "1510",
            "Jordan"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "highschooler",
            "where",
            "id",
            "=",
            "1510",
            "result0"
        ],
        "response_blank_res": "The name of the high schooler with ID 1510 is result0 .",
        "response_toks_blank_res": [
            "The",
            "name",
            "of",
            "the",
            "high",
            "schooler",
            "with",
            "ID",
            "1510",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT T1.first_name , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T1.owner_id   =  1",
        "query_toks": [
            "select",
            "t1",
            ".",
            "first_name",
            ",",
            "t1",
            ".",
            "last_name",
            "from",
            "owners",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "owner_id",
            "=",
            "t2",
            ".",
            "owner_id",
            "where",
            "t1",
            ".",
            "owner_id",
            "=",
            "1"
        ],
        "results_raw": [
            [
                "first_name",
                "last_name"
            ],
            [
                "Nora",
                "Haley"
            ]
        ],
        "response": "Here are the first and last names of the owner with id is 1.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "first",
            "and",
            "last",
            "names",
            "of",
            "the",
            "owner",
            "with",
            "id",
            "is",
            "1",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.first_name , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T1.owner_id   =  1",
        "query_w_results_blank_res": "SELECT T1.first_name , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T1.owner_id   =  1",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "first_name",
            ",",
            "t1",
            ".",
            "last_name",
            "from",
            "owners",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "owner_id",
            "=",
            "t2",
            ".",
            "owner_id",
            "where",
            "t1",
            ".",
            "owner_id",
            "=",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "first_name",
            ",",
            "t1",
            ".",
            "last_name",
            "from",
            "owners",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "owner_id",
            "=",
            "t2",
            ".",
            "owner_id",
            "where",
            "t1",
            ".",
            "owner_id",
            "=",
            "1"
        ],
        "response_blank_res": "Here are the first and last names of the owner with id is 1 .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "first",
            "and",
            "last",
            "names",
            "of",
            "the",
            "owner",
            "with",
            "id",
            "is",
            "1",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT name  FROM Dogs  WHERE age  =  6",
        "query_toks": [
            "select",
            "name",
            "from",
            "dogs",
            "where",
            "age",
            "=",
            "6"
        ],
        "results_raw": [
            [
                "name"
            ],
            [
                "Kacey"
            ]
        ],
        "response": "The dog aged 6 has a name Kacey.",
        "response_toks": [
            "The",
            "dog",
            "aged",
            "6",
            "has",
            "a",
            "name",
            "Kacey",
            "."
        ],
        "results_map": {
            "result0": "Kacey"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT name  FROM Dogs  WHERE age  =  6 | Kacey ",
        "query_w_results_blank_res": "SELECT name  FROM Dogs  WHERE age  =  6 | result0 ",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "dogs",
            "where",
            "age",
            "=",
            "6",
            "Kacey"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "dogs",
            "where",
            "age",
            "=",
            "6",
            "result0"
        ],
        "response_blank_res": "The dog aged 6 has a name result0 .",
        "response_toks_blank_res": [
            "The",
            "dog",
            "aged",
            "6",
            "has",
            "a",
            "name",
            "result0",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT  name  FROM  Dogs WHERE age >5",
        "query_toks": [
            "select",
            "name",
            "from",
            "dogs",
            "where",
            "age",
            ">",
            "5"
        ],
        "results_raw": [
            [
                "name"
            ],
            [
                "Kacey"
            ],
            [
                "Hipolito"
            ],
            [
                "Mavis"
            ]
        ],
        "response": "Here is the table of the names of dogs older than 5.",
        "response_toks": [
            "Here",
            "is",
            "the",
            "table",
            "of",
            "the",
            "names",
            "of",
            "dogs",
            "older",
            "than",
            "5",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT  name  FROM  Dogs WHERE age >5",
        "query_w_results_blank_res": "SELECT  name  FROM  Dogs WHERE age >5",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "dogs",
            "where",
            "age",
            ">",
            "5"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "dogs",
            "where",
            "age",
            ">",
            "5"
        ],
        "response_blank_res": "Here is the table of the names of dogs older than 5 .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "table",
            "of",
            "the",
            "names",
            "of",
            "dogs",
            "older",
            "than",
            "5",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT T2.name  FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T1.state   = \"Virginia\"",
        "query_toks": [
            "select",
            "t2",
            ".",
            "name",
            "from",
            "owners",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "owner_id",
            "=",
            "t2",
            ".",
            "owner_id",
            "where",
            "t1",
            ".",
            "state",
            "=",
            "\"virginia\""
        ],
        "results_raw": [
            [
                "name"
            ],
            [
                "Bessie"
            ]
        ],
        "response": "Bessie is owned by someone lives in virginia",
        "response_toks": [
            "Bessie",
            "is",
            "owned",
            "by",
            "someone",
            "lives",
            "in",
            "virginia"
        ],
        "results_map": {
            "result0": "Bessie"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT T2.name  FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T1.state   = \"Virginia\" | Bessie ",
        "query_w_results_blank_res": "SELECT T2.name  FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T1.state   = \"Virginia\" | result0 ",
        "query_toks_w_results": [
            "select",
            "t2",
            ".",
            "name",
            "from",
            "owners",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "owner_id",
            "=",
            "t2",
            ".",
            "owner_id",
            "where",
            "t1",
            ".",
            "state",
            "=",
            "\"virginia\"",
            "Bessie"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t2",
            ".",
            "name",
            "from",
            "owners",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "owner_id",
            "=",
            "t2",
            ".",
            "owner_id",
            "where",
            "t1",
            ".",
            "state",
            "=",
            "\"virginia\"",
            "result0"
        ],
        "response_blank_res": "result0 is owned by someone lives in virginia",
        "response_toks_blank_res": [
            "result0",
            "is",
            "owned",
            "by",
            "someone",
            "lives",
            "in",
            "virginia"
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id   =   T2.course_id GROUP BY T1.course_name ORDER BY count ( * )  LIMIT 1",
        "query_toks": [
            "select",
            "t1",
            ".",
            "course_name",
            "from",
            "courses",
            "as",
            "t1",
            "join",
            "student_enrolment_courses",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "course_id",
            "=",
            "t2",
            ".",
            "course_id",
            "group",
            "by",
            "t1",
            ".",
            "course_name",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "course_name"
            ],
            [
                "ai"
            ]
        ],
        "response": "The course name of the course that has the least enrollment is ai.",
        "response_toks": [
            "The",
            "course",
            "name",
            "of",
            "the",
            "course",
            "that",
            "has",
            "the",
            "least",
            "enrollment",
            "is",
            "ai",
            "."
        ],
        "results_map": {
            "result0": "ai"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id   =   T2.course_id GROUP BY T1.course_name ORDER BY count ( * )  LIMIT 1 | ai ",
        "query_w_results_blank_res": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id   =   T2.course_id GROUP BY T1.course_name ORDER BY count ( * )  LIMIT 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "course_name",
            "from",
            "courses",
            "as",
            "t1",
            "join",
            "student_enrolment_courses",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "course_id",
            "=",
            "t2",
            ".",
            "course_id",
            "group",
            "by",
            "t1",
            ".",
            "course_name",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "limit",
            "1",
            "ai"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "course_name",
            "from",
            "courses",
            "as",
            "t1",
            "join",
            "student_enrolment_courses",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "course_id",
            "=",
            "t2",
            ".",
            "course_id",
            "group",
            "by",
            "t1",
            ".",
            "course_name",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "The course name of the course that has the least enrollment is result0 .",
        "response_toks_blank_res": [
            "The",
            "course",
            "name",
            "of",
            "the",
            "course",
            "that",
            "has",
            "the",
            "least",
            "enrollment",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT course_id from courses where course_name  =  \"math\"",
        "query_toks": [
            "select",
            "course_id",
            "from",
            "courses",
            "where",
            "course_name",
            "=",
            "\"math\""
        ],
        "results_raw": [
            [
                "course_id"
            ],
            [
                2
            ]
        ],
        "response": "the course ID of Math is 2",
        "response_toks": [
            "the",
            "course",
            "ID",
            "of",
            "Math",
            "is",
            "2"
        ],
        "results_map": {
            "result0": "2"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT course_id from courses where course_name  =  \"math\" | 2 ",
        "query_w_results_blank_res": "SELECT course_id from courses where course_name  =  \"math\" | result0 ",
        "query_toks_w_results": [
            "select",
            "course_id",
            "from",
            "courses",
            "where",
            "course_name",
            "=",
            "\"math\"",
            "2"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "course_id",
            "from",
            "courses",
            "where",
            "course_name",
            "=",
            "\"math\"",
            "result0"
        ],
        "response_blank_res": "the course ID of Math is result0",
        "response_toks_blank_res": [
            "the",
            "course",
            "ID",
            "of",
            "Math",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "query": "SELECT  count ( * )  FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id   =   T2.course_id GROUP BY T1.course_name having T1.course_id  =  14",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "courses",
            "as",
            "t1",
            "join",
            "student_enrolment_courses",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "course_id",
            "=",
            "t2",
            ".",
            "course_id",
            "group",
            "by",
            "t1",
            ".",
            "course_name",
            "having",
            "t1",
            ".",
            "course_id",
            "=",
            "14"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                2
            ]
        ],
        "response": "The number of students enrolled a course with the id of 14 is 2.",
        "response_toks": [
            "The",
            "number",
            "of",
            "students",
            "enrolled",
            "a",
            "course",
            "with",
            "the",
            "id",
            "of",
            "14",
            "is",
            "2",
            "."
        ],
        "results_map": {
            "result0": "2"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT  count ( * )  FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id   =   T2.course_id GROUP BY T1.course_name having T1.course_id  =  14 | 2 ",
        "query_w_results_blank_res": "SELECT  count ( * )  FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id   =   T2.course_id GROUP BY T1.course_name having T1.course_id  =  14 | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "courses",
            "as",
            "t1",
            "join",
            "student_enrolment_courses",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "course_id",
            "=",
            "t2",
            ".",
            "course_id",
            "group",
            "by",
            "t1",
            ".",
            "course_name",
            "having",
            "t1",
            ".",
            "course_id",
            "=",
            "14",
            "2"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "courses",
            "as",
            "t1",
            "join",
            "student_enrolment_courses",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "course_id",
            "=",
            "t2",
            ".",
            "course_id",
            "group",
            "by",
            "t1",
            ".",
            "course_name",
            "having",
            "t1",
            ".",
            "course_id",
            "=",
            "14",
            "result0"
        ],
        "response_blank_res": "The number of students enrolled a course with the id of 14 is result0 .",
        "response_toks_blank_res": [
            "The",
            "number",
            "of",
            "students",
            "enrolled",
            "a",
            "course",
            "with",
            "the",
            "id",
            "of",
            "14",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT count ( distinct  Language )  from countrylanguage",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "language",
            ")",
            "from",
            "countrylanguage"
        ],
        "results_raw": [
            [
                "count(distinct  Language)"
            ],
            [
                457
            ]
        ],
        "response": "There  are  457 different languages.",
        "response_toks": [
            "There",
            "are",
            "457",
            "different",
            "languages",
            "."
        ],
        "results_map": {
            "result0": "457"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( distinct  Language )  from countrylanguage | 457 ",
        "query_w_results_blank_res": "SELECT count ( distinct  Language )  from countrylanguage | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "distinct",
            "language",
            ")",
            "from",
            "countrylanguage",
            "457"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "distinct",
            "language",
            ")",
            "from",
            "countrylanguage",
            "result0"
        ],
        "response_blank_res": "There are result0 different languages .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "different",
            "languages",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT max ( Percentage )  from countrylanguage",
        "query_toks": [
            "select",
            "max",
            "(",
            "percentage",
            ")",
            "from",
            "countrylanguage"
        ],
        "results_raw": [
            [
                "max(Percentage)"
            ],
            [
                100.0
            ]
        ],
        "response": "The max  percentage  in the countrylanguage table is 100.0",
        "response_toks": [
            "The",
            "max",
            "percentage",
            "in",
            "the",
            "countrylanguage",
            "table",
            "is",
            "100.0"
        ],
        "results_map": {
            "result0": "100.0"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT max ( Percentage )  from countrylanguage | 100.0 ",
        "query_w_results_blank_res": "SELECT max ( Percentage )  from countrylanguage | result0 ",
        "query_toks_w_results": [
            "select",
            "max",
            "(",
            "percentage",
            ")",
            "from",
            "countrylanguage",
            "100.0"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "max",
            "(",
            "percentage",
            ")",
            "from",
            "countrylanguage",
            "result0"
        ],
        "response_blank_res": "The max percentage in the countrylanguage table is result0",
        "response_toks_blank_res": [
            "The",
            "max",
            "percentage",
            "in",
            "the",
            "countrylanguage",
            "table",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "network_1",
        "query": "select name from highschooler",
        "query_toks": [
            "select",
            "name",
            "from",
            "highschooler"
        ],
        "results_raw": [
            [
                "name"
            ],
            [
                "Jordan"
            ],
            [
                "Gabriel"
            ],
            [
                "Tiffany"
            ]
        ],
        "response": "Here are the names of all the highschoolers",
        "response_toks": [
            "Here",
            "are",
            "the",
            "names",
            "of",
            "all",
            "the",
            "highschoolers"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "select name from highschooler",
        "query_w_results_blank_res": "select name from highschooler",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "highschooler"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "highschooler"
        ],
        "response_blank_res": "Here are the names of all the highschoolers",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "names",
            "of",
            "all",
            "the",
            "highschoolers"
        ]
    },
    {
        "database_id": "network_1",
        "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
        "query_toks": [
            "select",
            "t3",
            ".",
            "name",
            "from",
            "friend",
            "as",
            "t1",
            "join",
            "highschooler",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "id",
            "join",
            "highschooler",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "friend_id",
            "=",
            "t3",
            ".",
            "id",
            "where",
            "t2",
            ".",
            "name",
            "=",
            "\"kyle\""
        ],
        "results_raw": [
            [
                "name"
            ],
            [
                "Jordan"
            ]
        ],
        "response": "Here is the name of the high schooler that is friend with Kyle",
        "response_toks": [
            "Here",
            "is",
            "the",
            "name",
            "of",
            "the",
            "high",
            "schooler",
            "that",
            "is",
            "friend",
            "with",
            "Kyle"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
        "query_w_results_blank_res": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
        "query_toks_w_results": [
            "select",
            "t3",
            ".",
            "name",
            "from",
            "friend",
            "as",
            "t1",
            "join",
            "highschooler",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "id",
            "join",
            "highschooler",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "friend_id",
            "=",
            "t3",
            ".",
            "id",
            "where",
            "t2",
            ".",
            "name",
            "=",
            "\"kyle\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t3",
            ".",
            "name",
            "from",
            "friend",
            "as",
            "t1",
            "join",
            "highschooler",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "id",
            "join",
            "highschooler",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "friend_id",
            "=",
            "t3",
            ".",
            "id",
            "where",
            "t2",
            ".",
            "name",
            "=",
            "\"kyle\""
        ],
        "response_blank_res": "Here is the name of the high schooler that is friend with Kyle",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "name",
            "of",
            "the",
            "high",
            "schooler",
            "that",
            "is",
            "friend",
            "with",
            "Kyle"
        ]
    },
    {
        "database_id": "network_1",
        "query": "SELECT id FROM highschooler where name  =  \"Kyle\"",
        "query_toks": [
            "select",
            "id",
            "from",
            "highschooler",
            "where",
            "name",
            "=",
            "\"kyle\""
        ],
        "results_raw": [
            [
                "ID"
            ],
            [
                1934
            ]
        ],
        "response": "The id of the high schooler with name Kyle is 1934",
        "response_toks": [
            "The",
            "id",
            "of",
            "the",
            "high",
            "schooler",
            "with",
            "name",
            "Kyle",
            "is",
            "1934"
        ],
        "results_map": {
            "result0": "1934"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT id FROM highschooler where name  =  \"Kyle\" | 1934 ",
        "query_w_results_blank_res": "SELECT id FROM highschooler where name  =  \"Kyle\" | result0 ",
        "query_toks_w_results": [
            "select",
            "id",
            "from",
            "highschooler",
            "where",
            "name",
            "=",
            "\"kyle\"",
            "1934"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "id",
            "from",
            "highschooler",
            "where",
            "name",
            "=",
            "\"kyle\"",
            "result0"
        ],
        "response_blank_res": "The id of the high schooler with name Kyle is result0",
        "response_toks_blank_res": [
            "The",
            "id",
            "of",
            "the",
            "high",
            "schooler",
            "with",
            "name",
            "Kyle",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "network_1",
        "query": "SELECT name FROM highschooler where id  =  1709",
        "query_toks": [
            "select",
            "name",
            "from",
            "highschooler",
            "where",
            "id",
            "=",
            "1709"
        ],
        "results_raw": [
            [
                "name"
            ],
            [
                "Cassandra"
            ]
        ],
        "response": "The name of the high schooler with id 1709 is Cassandra",
        "response_toks": [
            "The",
            "name",
            "of",
            "the",
            "high",
            "schooler",
            "with",
            "id",
            "1709",
            "is",
            "Cassandra"
        ],
        "results_map": {
            "result0": "Cassandra"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT name FROM highschooler where id  =  1709 | Cassandra ",
        "query_w_results_blank_res": "SELECT name FROM highschooler where id  =  1709 | result0 ",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "highschooler",
            "where",
            "id",
            "=",
            "1709",
            "Cassandra"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "highschooler",
            "where",
            "id",
            "=",
            "1709",
            "result0"
        ],
        "response_blank_res": "The name of the high schooler with id 1709 is result0",
        "response_toks_blank_res": [
            "The",
            "name",
            "of",
            "the",
            "high",
            "schooler",
            "with",
            "id",
            "1709",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "network_1",
        "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Jordan\"",
        "query_toks": [
            "select",
            "t3",
            ".",
            "name",
            "from",
            "friend",
            "as",
            "t1",
            "join",
            "highschooler",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "id",
            "join",
            "highschooler",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "friend_id",
            "=",
            "t3",
            ".",
            "id",
            "where",
            "t2",
            ".",
            "name",
            "=",
            "\"jordan\""
        ],
        "results_raw": [
            [
                "name"
            ],
            [
                "Tiffany"
            ],
            [
                "Gabriel"
            ],
            [
                "Logan"
            ]
        ],
        "response": "Here is the list of the name of the high schooler that is friend with Jordan",
        "response_toks": [
            "Here",
            "is",
            "the",
            "list",
            "of",
            "the",
            "name",
            "of",
            "the",
            "high",
            "schooler",
            "that",
            "is",
            "friend",
            "with",
            "Jordan"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Jordan\"",
        "query_w_results_blank_res": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Jordan\"",
        "query_toks_w_results": [
            "select",
            "t3",
            ".",
            "name",
            "from",
            "friend",
            "as",
            "t1",
            "join",
            "highschooler",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "id",
            "join",
            "highschooler",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "friend_id",
            "=",
            "t3",
            ".",
            "id",
            "where",
            "t2",
            ".",
            "name",
            "=",
            "\"jordan\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t3",
            ".",
            "name",
            "from",
            "friend",
            "as",
            "t1",
            "join",
            "highschooler",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "id",
            "join",
            "highschooler",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "friend_id",
            "=",
            "t3",
            ".",
            "id",
            "where",
            "t2",
            ".",
            "name",
            "=",
            "\"jordan\""
        ],
        "response_blank_res": "Here is the list of the name of the high schooler that is friend with Jordan",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "list",
            "of",
            "the",
            "name",
            "of",
            "the",
            "high",
            "schooler",
            "that",
            "is",
            "friend",
            "with",
            "Jordan"
        ]
    },
    {
        "database_id": "network_1",
        "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Gabriel\"",
        "query_toks": [
            "select",
            "t3",
            ".",
            "name",
            "from",
            "friend",
            "as",
            "t1",
            "join",
            "highschooler",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "id",
            "join",
            "highschooler",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "friend_id",
            "=",
            "t3",
            ".",
            "id",
            "where",
            "t2",
            ".",
            "name",
            "=",
            "\"gabriel\""
        ],
        "results_raw": [
            [
                "name"
            ],
            [
                "Cassandra"
            ],
            [
                "Andrew"
            ],
            [
                "Jessica"
            ]
        ],
        "response": "Here is the list of the name of the high schooler that is friend with Gabriel",
        "response_toks": [
            "Here",
            "is",
            "the",
            "list",
            "of",
            "the",
            "name",
            "of",
            "the",
            "high",
            "schooler",
            "that",
            "is",
            "friend",
            "with",
            "Gabriel"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Gabriel\"",
        "query_w_results_blank_res": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Gabriel\"",
        "query_toks_w_results": [
            "select",
            "t3",
            ".",
            "name",
            "from",
            "friend",
            "as",
            "t1",
            "join",
            "highschooler",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "id",
            "join",
            "highschooler",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "friend_id",
            "=",
            "t3",
            ".",
            "id",
            "where",
            "t2",
            ".",
            "name",
            "=",
            "\"gabriel\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t3",
            ".",
            "name",
            "from",
            "friend",
            "as",
            "t1",
            "join",
            "highschooler",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "student_id",
            "=",
            "t2",
            ".",
            "id",
            "join",
            "highschooler",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "friend_id",
            "=",
            "t3",
            ".",
            "id",
            "where",
            "t2",
            ".",
            "name",
            "=",
            "\"gabriel\""
        ],
        "response_blank_res": "Here is the list of the name of the high schooler that is friend with Gabriel",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "list",
            "of",
            "the",
            "name",
            "of",
            "the",
            "high",
            "schooler",
            "that",
            "is",
            "friend",
            "with",
            "Gabriel"
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT distinct T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent   =   T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId   =   T3.Country WHERE T2.Continent   =   'europe'",
        "query_toks": [
            "select",
            "distinct",
            "t1",
            ".",
            "countryname",
            "from",
            "countries",
            "as",
            "t1",
            "join",
            "continents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "continent",
            "=",
            "t2",
            ".",
            "contid",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "countryid",
            "=",
            "t3",
            ".",
            "country",
            "where",
            "t2",
            ".",
            "continent",
            "=",
            "'europe'"
        ],
        "results_raw": [
            [
                "CountryName"
            ],
            [
                "germany"
            ],
            [
                "france"
            ],
            [
                "italy"
            ]
        ],
        "response": "Here is a list of countries in Europe.",
        "response_toks": [
            "Here",
            "is",
            "a",
            "list",
            "of",
            "countries",
            "in",
            "Europe",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT distinct T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent   =   T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId   =   T3.Country WHERE T2.Continent   =   'europe'",
        "query_w_results_blank_res": "SELECT distinct T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent   =   T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId   =   T3.Country WHERE T2.Continent   =   'europe'",
        "query_toks_w_results": [
            "select",
            "distinct",
            "t1",
            ".",
            "countryname",
            "from",
            "countries",
            "as",
            "t1",
            "join",
            "continents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "continent",
            "=",
            "t2",
            ".",
            "contid",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "countryid",
            "=",
            "t3",
            ".",
            "country",
            "where",
            "t2",
            ".",
            "continent",
            "=",
            "'europe'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "t1",
            ".",
            "countryname",
            "from",
            "countries",
            "as",
            "t1",
            "join",
            "continents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "continent",
            "=",
            "t2",
            ".",
            "contid",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "countryid",
            "=",
            "t3",
            ".",
            "country",
            "where",
            "t2",
            ".",
            "continent",
            "=",
            "'europe'"
        ],
        "response_blank_res": "Here is a list of countries in Europe .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "a",
            "list",
            "of",
            "countries",
            "in",
            "Europe",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT T1.CountryName, count ( * )  FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent   =   T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId   =   T3.Country WHERE T2.Continent   =   'europe' GROUP BY T1.CountryName",
        "query_toks": [
            "select",
            "t1",
            ".",
            "countryname",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "countries",
            "as",
            "t1",
            "join",
            "continents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "continent",
            "=",
            "t2",
            ".",
            "contid",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "countryid",
            "=",
            "t3",
            ".",
            "country",
            "where",
            "t2",
            ".",
            "continent",
            "=",
            "'europe'",
            "group",
            "by",
            "t1",
            ".",
            "countryname"
        ],
        "results_raw": [
            [
                "CountryName",
                "count(*)"
            ],
            [
                "france",
                3
            ],
            [
                "germany",
                4
            ],
            [
                "italy",
                1
            ]
        ],
        "response": "Here is a table of the names of countries in Europe and the number of car manufacturers in each. For example, france has 3.",
        "response_toks": [
            "Here",
            "is",
            "a",
            "table",
            "of",
            "the",
            "names",
            "of",
            "countries",
            "in",
            "Europe",
            "and",
            "the",
            "number",
            "of",
            "car",
            "manufacturers",
            "in",
            "each",
            ".",
            "For",
            "example",
            ",",
            "france",
            "has",
            "3",
            "."
        ],
        "results_map": {
            "result0": "france",
            "result1": "3"
        },
        "results_blank_res": "result0 result1 ",
        "query_w_results": "SELECT T1.CountryName, count ( * )  FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent   =   T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId   =   T3.Country WHERE T2.Continent   =   'europe' GROUP BY T1.CountryName | france 3 ",
        "query_w_results_blank_res": "SELECT T1.CountryName, count ( * )  FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent   =   T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId   =   T3.Country WHERE T2.Continent   =   'europe' GROUP BY T1.CountryName | result0 result1 ",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "countryname",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "countries",
            "as",
            "t1",
            "join",
            "continents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "continent",
            "=",
            "t2",
            ".",
            "contid",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "countryid",
            "=",
            "t3",
            ".",
            "country",
            "where",
            "t2",
            ".",
            "continent",
            "=",
            "'europe'",
            "group",
            "by",
            "t1",
            ".",
            "countryname",
            "france",
            "3"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "countryname",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "countries",
            "as",
            "t1",
            "join",
            "continents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "continent",
            "=",
            "t2",
            ".",
            "contid",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "countryid",
            "=",
            "t3",
            ".",
            "country",
            "where",
            "t2",
            ".",
            "continent",
            "=",
            "'europe'",
            "group",
            "by",
            "t1",
            ".",
            "countryname",
            "result0",
            "result1"
        ],
        "response_blank_res": "Here is a table of the names of countries in Europe and the number of car manufacturers in each . For example , result0 has result1 .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "a",
            "table",
            "of",
            "the",
            "names",
            "of",
            "countries",
            "in",
            "Europe",
            "and",
            "the",
            "number",
            "of",
            "car",
            "manufacturers",
            "in",
            "each",
            ".",
            "For",
            "example",
            ",",
            "result0",
            "has",
            "result1",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent   =   T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId   =   T3.Country WHERE T2.Continent   =   'europe' GROUP BY T1.CountryName HAVING count ( * )    > =    3",
        "query_toks": [
            "select",
            "t1",
            ".",
            "countryname",
            "from",
            "countries",
            "as",
            "t1",
            "join",
            "continents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "continent",
            "=",
            "t2",
            ".",
            "contid",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "countryid",
            "=",
            "t3",
            ".",
            "country",
            "where",
            "t2",
            ".",
            "continent",
            "=",
            "'europe'",
            "group",
            "by",
            "t1",
            ".",
            "countryname",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "3"
        ],
        "results_raw": [
            [
                "CountryName"
            ],
            [
                "france"
            ],
            [
                "germany"
            ]
        ],
        "response": "Here is a list of countries that have at least three car manufacturers.",
        "response_toks": [
            "Here",
            "is",
            "a",
            "list",
            "of",
            "countries",
            "that",
            "have",
            "at",
            "least",
            "three",
            "car",
            "manufacturers",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent   =   T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId   =   T3.Country WHERE T2.Continent   =   'europe' GROUP BY T1.CountryName HAVING count ( * )    > =    3",
        "query_w_results_blank_res": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent   =   T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId   =   T3.Country WHERE T2.Continent   =   'europe' GROUP BY T1.CountryName HAVING count ( * )    > =    3",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "countryname",
            "from",
            "countries",
            "as",
            "t1",
            "join",
            "continents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "continent",
            "=",
            "t2",
            ".",
            "contid",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "countryid",
            "=",
            "t3",
            ".",
            "country",
            "where",
            "t2",
            ".",
            "continent",
            "=",
            "'europe'",
            "group",
            "by",
            "t1",
            ".",
            "countryname",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "3"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "countryname",
            "from",
            "countries",
            "as",
            "t1",
            "join",
            "continents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "continent",
            "=",
            "t2",
            ".",
            "contid",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "countryid",
            "=",
            "t3",
            ".",
            "country",
            "where",
            "t2",
            ".",
            "continent",
            "=",
            "'europe'",
            "group",
            "by",
            "t1",
            ".",
            "countryname",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "3"
        ],
        "response_blank_res": "Here is a list of countries that have at least three car manufacturers .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "a",
            "list",
            "of",
            "countries",
            "that",
            "have",
            "at",
            "least",
            "three",
            "car",
            "manufacturers",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT T1.CountryName, count ( * )  FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent   =   T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId   =   T3.Country WHERE T2.Continent   =   'europe' GROUP BY T1.CountryName HAVING count ( * )    > =    3",
        "query_toks": [
            "select",
            "t1",
            ".",
            "countryname",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "countries",
            "as",
            "t1",
            "join",
            "continents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "continent",
            "=",
            "t2",
            ".",
            "contid",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "countryid",
            "=",
            "t3",
            ".",
            "country",
            "where",
            "t2",
            ".",
            "continent",
            "=",
            "'europe'",
            "group",
            "by",
            "t1",
            ".",
            "countryname",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "3"
        ],
        "results_raw": [
            [
                "CountryName",
                "count(*)"
            ],
            [
                "france",
                3
            ],
            [
                "germany",
                4
            ]
        ],
        "response": "Here is a table of the names of countries in Europe with at least three care manufacturers and the number of care manufacturers in each. For example, France has 3.",
        "response_toks": [
            "Here",
            "is",
            "a",
            "table",
            "of",
            "the",
            "names",
            "of",
            "countries",
            "in",
            "Europe",
            "with",
            "at",
            "least",
            "three",
            "care",
            "manufacturers",
            "and",
            "the",
            "number",
            "of",
            "care",
            "manufacturers",
            "in",
            "each",
            ".",
            "For",
            "example",
            ",",
            "France",
            "has",
            "3",
            "."
        ],
        "results_map": {
            "result0": "3"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT T1.CountryName, count ( * )  FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent   =   T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId   =   T3.Country WHERE T2.Continent   =   'europe' GROUP BY T1.CountryName HAVING count ( * )    > =    3 | 3 ",
        "query_w_results_blank_res": "SELECT T1.CountryName, count ( * )  FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent   =   T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId   =   T3.Country WHERE T2.Continent   =   'europe' GROUP BY T1.CountryName HAVING count ( * )    > =    3 | result0 ",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "countryname",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "countries",
            "as",
            "t1",
            "join",
            "continents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "continent",
            "=",
            "t2",
            ".",
            "contid",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "countryid",
            "=",
            "t3",
            ".",
            "country",
            "where",
            "t2",
            ".",
            "continent",
            "=",
            "'europe'",
            "group",
            "by",
            "t1",
            ".",
            "countryname",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "3",
            "3"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "countryname",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "countries",
            "as",
            "t1",
            "join",
            "continents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "continent",
            "=",
            "t2",
            ".",
            "contid",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "countryid",
            "=",
            "t3",
            ".",
            "country",
            "where",
            "t2",
            ".",
            "continent",
            "=",
            "'europe'",
            "group",
            "by",
            "t1",
            ".",
            "countryname",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "3",
            "result0"
        ],
        "response_blank_res": "Here is a table of the names of countries in Europe with at least three care manufacturers and the number of care manufacturers in each . For example , France has result0 .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "a",
            "table",
            "of",
            "the",
            "names",
            "of",
            "countries",
            "in",
            "Europe",
            "with",
            "at",
            "least",
            "three",
            "care",
            "manufacturers",
            "and",
            "the",
            "number",
            "of",
            "care",
            "manufacturers",
            "in",
            "each",
            ".",
            "For",
            "example",
            ",",
            "France",
            "has",
            "result0",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT count ( * )  FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent   =   T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId   =   T3.Country WHERE T2.Continent   =   'europe'",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "countries",
            "as",
            "t1",
            "join",
            "continents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "continent",
            "=",
            "t2",
            ".",
            "contid",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "countryid",
            "=",
            "t3",
            ".",
            "country",
            "where",
            "t2",
            ".",
            "continent",
            "=",
            "'europe'"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                11
            ]
        ],
        "response": "The total number of car manufacturers in Europe is 11.",
        "response_toks": [
            "The",
            "total",
            "number",
            "of",
            "car",
            "manufacturers",
            "in",
            "Europe",
            "is",
            "11",
            "."
        ],
        "results_map": {
            "result0": "11"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent   =   T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId   =   T3.Country WHERE T2.Continent   =   'europe' | 11 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent   =   T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId   =   T3.Country WHERE T2.Continent   =   'europe' | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "countries",
            "as",
            "t1",
            "join",
            "continents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "continent",
            "=",
            "t2",
            ".",
            "contid",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "countryid",
            "=",
            "t3",
            ".",
            "country",
            "where",
            "t2",
            ".",
            "continent",
            "=",
            "'europe'",
            "11"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "countries",
            "as",
            "t1",
            "join",
            "continents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "continent",
            "=",
            "t2",
            ".",
            "contid",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "countryid",
            "=",
            "t3",
            ".",
            "country",
            "where",
            "t2",
            ".",
            "continent",
            "=",
            "'europe'",
            "result0"
        ],
        "response_blank_res": "The total number of car manufacturers in Europe is result0 .",
        "response_toks_blank_res": [
            "The",
            "total",
            "number",
            "of",
            "car",
            "manufacturers",
            "in",
            "Europe",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT count ( * )  FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent   =   T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId   =   T3.Country WHERE T2.Continent   =   'america'",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "countries",
            "as",
            "t1",
            "join",
            "continents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "continent",
            "=",
            "t2",
            ".",
            "contid",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "countryid",
            "=",
            "t3",
            ".",
            "country",
            "where",
            "t2",
            ".",
            "continent",
            "=",
            "'america'"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                4
            ]
        ],
        "response": "The total number of car manufacturers in America is 4.",
        "response_toks": [
            "The",
            "total",
            "number",
            "of",
            "car",
            "manufacturers",
            "in",
            "America",
            "is",
            "4",
            "."
        ],
        "results_map": {
            "result0": "4"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent   =   T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId   =   T3.Country WHERE T2.Continent   =   'america' | 4 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent   =   T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId   =   T3.Country WHERE T2.Continent   =   'america' | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "countries",
            "as",
            "t1",
            "join",
            "continents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "continent",
            "=",
            "t2",
            ".",
            "contid",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "countryid",
            "=",
            "t3",
            ".",
            "country",
            "where",
            "t2",
            ".",
            "continent",
            "=",
            "'america'",
            "4"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "countries",
            "as",
            "t1",
            "join",
            "continents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "continent",
            "=",
            "t2",
            ".",
            "contid",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "countryid",
            "=",
            "t3",
            ".",
            "country",
            "where",
            "t2",
            ".",
            "continent",
            "=",
            "'america'",
            "result0"
        ],
        "response_blank_res": "The total number of car manufacturers in America is result0 .",
        "response_toks_blank_res": [
            "The",
            "total",
            "number",
            "of",
            "car",
            "manufacturers",
            "in",
            "America",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT T3.Fullname FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent   =   T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId   =   T3.Country WHERE T2.Continent   =   'america'",
        "query_toks": [
            "select",
            "t3",
            ".",
            "fullname",
            "from",
            "countries",
            "as",
            "t1",
            "join",
            "continents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "continent",
            "=",
            "t2",
            ".",
            "contid",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "countryid",
            "=",
            "t3",
            ".",
            "country",
            "where",
            "t2",
            ".",
            "continent",
            "=",
            "'america'"
        ],
        "results_raw": [
            [
                "FullName"
            ],
            [
                "American Motor Company"
            ],
            [
                "General Motors"
            ],
            [
                "Ford Motor Company"
            ]
        ],
        "response": "Here is a list of the car manufacturers in America.",
        "response_toks": [
            "Here",
            "is",
            "a",
            "list",
            "of",
            "the",
            "car",
            "manufacturers",
            "in",
            "America",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T3.Fullname FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent   =   T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId   =   T3.Country WHERE T2.Continent   =   'america'",
        "query_w_results_blank_res": "SELECT T3.Fullname FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent   =   T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId   =   T3.Country WHERE T2.Continent   =   'america'",
        "query_toks_w_results": [
            "select",
            "t3",
            ".",
            "fullname",
            "from",
            "countries",
            "as",
            "t1",
            "join",
            "continents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "continent",
            "=",
            "t2",
            ".",
            "contid",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "countryid",
            "=",
            "t3",
            ".",
            "country",
            "where",
            "t2",
            ".",
            "continent",
            "=",
            "'america'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t3",
            ".",
            "fullname",
            "from",
            "countries",
            "as",
            "t1",
            "join",
            "continents",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "continent",
            "=",
            "t2",
            ".",
            "contid",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "countryid",
            "=",
            "t3",
            ".",
            "country",
            "where",
            "t2",
            ".",
            "continent",
            "=",
            "'america'"
        ],
        "response_blank_res": "Here is a list of the car manufacturers in America .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "a",
            "list",
            "of",
            "the",
            "car",
            "manufacturers",
            "in",
            "America",
            "."
        ]
    },
    {
        "database_id": "museum_visit",
        "query": "SELECT count ( * )  FROM visitor WHERE id NOT IN  ( SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID   =   t2.Museum_ID WHERE t1.open_year  >  2010 ) ",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "visitor",
            "where",
            "id",
            "not",
            "in",
            "(",
            "select",
            "t2",
            ".",
            "visitor_id",
            "from",
            "museum",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "museum_id",
            "=",
            "t2",
            ".",
            "museum_id",
            "where",
            "t1",
            ".",
            "open_year",
            ">",
            "2010",
            ")"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                3
            ]
        ],
        "response": "There are 3 visitors who did not visit any museum that was opened after 2010",
        "response_toks": [
            "There",
            "are",
            "3",
            "visitors",
            "who",
            "did",
            "not",
            "visit",
            "any",
            "museum",
            "that",
            "was",
            "opened",
            "after",
            "2010"
        ],
        "results_map": {
            "result0": "3"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM visitor WHERE id NOT IN  ( SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID   =   t2.Museum_ID WHERE t1.open_year  >  2010 )  | 3 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM visitor WHERE id NOT IN  ( SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID   =   t2.Museum_ID WHERE t1.open_year  >  2010 )  | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "visitor",
            "where",
            "id",
            "not",
            "in",
            "(",
            "select",
            "t2",
            ".",
            "visitor_id",
            "from",
            "museum",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "museum_id",
            "=",
            "t2",
            ".",
            "museum_id",
            "where",
            "t1",
            ".",
            "open_year",
            ">",
            "2010",
            ")",
            "3"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "visitor",
            "where",
            "id",
            "not",
            "in",
            "(",
            "select",
            "t2",
            ".",
            "visitor_id",
            "from",
            "museum",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "museum_id",
            "=",
            "t2",
            ".",
            "museum_id",
            "where",
            "t1",
            ".",
            "open_year",
            ">",
            "2010",
            ")",
            "result0"
        ],
        "response_blank_res": "There are result0 visitors who did not visit any museum that was opened after 2010",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "visitors",
            "who",
            "did",
            "not",
            "visit",
            "any",
            "museum",
            "that",
            "was",
            "opened",
            "after",
            "2010"
        ]
    },
    {
        "database_id": "museum_visit",
        "query": "SELECT name, level_of_membership FROM visitor WHERE id NOT IN  ( SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID   =   t2.Museum_ID WHERE t1.open_year  >  2010 ) ",
        "query_toks": [
            "select",
            "name",
            ",",
            "level_of_membership",
            "from",
            "visitor",
            "where",
            "id",
            "not",
            "in",
            "(",
            "select",
            "t2",
            ".",
            "visitor_id",
            "from",
            "museum",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "museum_id",
            "=",
            "t2",
            ".",
            "museum_id",
            "where",
            "t1",
            ".",
            "open_year",
            ">",
            "2010",
            ")"
        ],
        "results_raw": [
            [
                "Name",
                "Level_of_membership"
            ],
            [
                "Gonzalo Higua\u00edn ",
                8
            ],
            [
                "Guti Midfielder",
                5
            ],
            [
                "Ra\u00fal Brown",
                2
            ]
        ],
        "response": "Here are the names and their level of memberships of the visitors who did not visit any museum that was opened after 2010",
        "response_toks": [
            "Here",
            "are",
            "the",
            "names",
            "and",
            "their",
            "level",
            "of",
            "memberships",
            "of",
            "the",
            "visitors",
            "who",
            "did",
            "not",
            "visit",
            "any",
            "museum",
            "that",
            "was",
            "opened",
            "after",
            "2010"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT name, level_of_membership FROM visitor WHERE id NOT IN  ( SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID   =   t2.Museum_ID WHERE t1.open_year  >  2010 ) ",
        "query_w_results_blank_res": "SELECT name, level_of_membership FROM visitor WHERE id NOT IN  ( SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID   =   t2.Museum_ID WHERE t1.open_year  >  2010 ) ",
        "query_toks_w_results": [
            "select",
            "name",
            ",",
            "level_of_membership",
            "from",
            "visitor",
            "where",
            "id",
            "not",
            "in",
            "(",
            "select",
            "t2",
            ".",
            "visitor_id",
            "from",
            "museum",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "museum_id",
            "=",
            "t2",
            ".",
            "museum_id",
            "where",
            "t1",
            ".",
            "open_year",
            ">",
            "2010",
            ")"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            ",",
            "level_of_membership",
            "from",
            "visitor",
            "where",
            "id",
            "not",
            "in",
            "(",
            "select",
            "t2",
            ".",
            "visitor_id",
            "from",
            "museum",
            "as",
            "t1",
            "join",
            "visit",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "museum_id",
            "=",
            "t2",
            ".",
            "museum_id",
            "where",
            "t1",
            ".",
            "open_year",
            ">",
            "2010",
            ")"
        ],
        "response_blank_res": "Here are the names and their level of memberships of the visitors who did not visit any museum that was opened after 2010",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "names",
            "and",
            "their",
            "level",
            "of",
            "memberships",
            "of",
            "the",
            "visitors",
            "who",
            "did",
            "not",
            "visit",
            "any",
            "museum",
            "that",
            "was",
            "opened",
            "after",
            "2010"
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT count ( * )  FROM Owners WHERE owner_id NOT IN  (  SELECT owner_id FROM Dogs  ) ",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "owners",
            "where",
            "owner_id",
            "not",
            "in",
            "(",
            "select",
            "owner_id",
            "from",
            "dogs",
            ")"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                3
            ]
        ],
        "response": "There are 3 owners who do not have dogs.",
        "response_toks": [
            "There",
            "are",
            "3",
            "owners",
            "who",
            "do",
            "not",
            "have",
            "dogs",
            "."
        ],
        "results_map": {
            "result0": "3"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM Owners WHERE owner_id NOT IN  (  SELECT owner_id FROM Dogs  )  | 3 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM Owners WHERE owner_id NOT IN  (  SELECT owner_id FROM Dogs  )  | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "owners",
            "where",
            "owner_id",
            "not",
            "in",
            "(",
            "select",
            "owner_id",
            "from",
            "dogs",
            ")",
            "3"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "owners",
            "where",
            "owner_id",
            "not",
            "in",
            "(",
            "select",
            "owner_id",
            "from",
            "dogs",
            ")",
            "result0"
        ],
        "response_blank_res": "There are result0 owners who do not have dogs .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "owners",
            "who",
            "do",
            "not",
            "have",
            "dogs",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT count ( * )  FROM Owners WHERE owner_id NOT IN  (  SELECT owner_id FROM Dogs  ) ",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "owners",
            "where",
            "owner_id",
            "not",
            "in",
            "(",
            "select",
            "owner_id",
            "from",
            "dogs",
            ")"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                3
            ]
        ],
        "response": "Here are the first and last names of owners who do not have dogs.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "first",
            "and",
            "last",
            "names",
            "of",
            "owners",
            "who",
            "do",
            "not",
            "have",
            "dogs",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT count ( * )  FROM Owners WHERE owner_id NOT IN  (  SELECT owner_id FROM Dogs  ) ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM Owners WHERE owner_id NOT IN  (  SELECT owner_id FROM Dogs  ) ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "owners",
            "where",
            "owner_id",
            "not",
            "in",
            "(",
            "select",
            "owner_id",
            "from",
            "dogs",
            ")"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "owners",
            "where",
            "owner_id",
            "not",
            "in",
            "(",
            "select",
            "owner_id",
            "from",
            "dogs",
            ")"
        ],
        "response_blank_res": "Here are the first and last names of owners who do not have dogs .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "first",
            "and",
            "last",
            "names",
            "of",
            "owners",
            "who",
            "do",
            "not",
            "have",
            "dogs",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "select abandoned_yn from dogs where owner_id in  ( SELECT owner_id FROM Owners WHERE owner_id NOT IN  (  SELECT owner_id FROM Dogs  )  ) ",
        "query_toks": [
            "select",
            "abandoned_yn",
            "from",
            "dogs",
            "where",
            "owner_id",
            "in",
            "(",
            "select",
            "owner_id",
            "from",
            "owners",
            "where",
            "owner_id",
            "not",
            "in",
            "(",
            "select",
            "owner_id",
            "from",
            "dogs",
            ")",
            ")"
        ],
        "results_raw": [
            [
                "abandoned_yn"
            ]
        ],
        "response": "No.",
        "response_toks": [
            "No",
            "."
        ],
        "results_map": null,
        "results_blank_res": null,
        "query_w_results": null,
        "query_w_results_blank_res": null,
        "query_toks_w_results": null,
        "query_toks_w_results_blank_res": null,
        "response_blank_res": null,
        "response_toks_blank_res": null
    },
    {
        "database_id": "tvshow",
        "query": "SELECT title  FROM cartoon ORDER BY original_air_date LIMIT 1",
        "query_toks": [
            "select",
            "title",
            "from",
            "cartoon",
            "order",
            "by",
            "original_air_date",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Title"
            ],
            [
                "Invasion of the Secret Santas!"
            ]
        ],
        "response": "The title of cartoon aired first is Invasion of the Secret Santas!",
        "response_toks": [
            "The",
            "title",
            "of",
            "cartoon",
            "aired",
            "first",
            "is",
            "Invasion",
            "of",
            "the",
            "Secret",
            "Santas",
            "!"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT title  FROM cartoon ORDER BY original_air_date LIMIT 1",
        "query_w_results_blank_res": "SELECT title  FROM cartoon ORDER BY original_air_date LIMIT 1",
        "query_toks_w_results": [
            "select",
            "title",
            "from",
            "cartoon",
            "order",
            "by",
            "original_air_date",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "title",
            "from",
            "cartoon",
            "order",
            "by",
            "original_air_date",
            "limit",
            "1"
        ],
        "response_blank_res": "The title of cartoon aired first is Invasion of the Secret Santas !",
        "response_toks_blank_res": [
            "The",
            "title",
            "of",
            "cartoon",
            "aired",
            "first",
            "is",
            "Invasion",
            "of",
            "the",
            "Secret",
            "Santas",
            "!"
        ]
    },
    {
        "database_id": "tvshow",
        "query": "SELECT title  FROM cartoon ORDER BY original_air_date desc LIMIT 1",
        "query_toks": [
            "select",
            "title",
            "from",
            "cartoon",
            "order",
            "by",
            "original_air_date",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Title"
            ],
            [
                "Terror on Dinosaur Island!"
            ]
        ],
        "response": "The title of cartoon aired last is Terror on Dinosaur Island!",
        "response_toks": [
            "The",
            "title",
            "of",
            "cartoon",
            "aired",
            "last",
            "is",
            "Terror",
            "on",
            "Dinosaur",
            "Island",
            "!"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT title  FROM cartoon ORDER BY original_air_date desc LIMIT 1",
        "query_w_results_blank_res": "SELECT title  FROM cartoon ORDER BY original_air_date desc LIMIT 1",
        "query_toks_w_results": [
            "select",
            "title",
            "from",
            "cartoon",
            "order",
            "by",
            "original_air_date",
            "desc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "title",
            "from",
            "cartoon",
            "order",
            "by",
            "original_air_date",
            "desc",
            "limit",
            "1"
        ],
        "response_blank_res": "The title of cartoon aired last is Terror on Dinosaur Island !",
        "response_toks_blank_res": [
            "The",
            "title",
            "of",
            "cartoon",
            "aired",
            "last",
            "is",
            "Terror",
            "on",
            "Dinosaur",
            "Island",
            "!"
        ]
    },
    {
        "database_id": "tvshow",
        "query": "SELECT channel FROM cartoon ORDER BY original_air_date desc LIMIT 1",
        "query_toks": [
            "select",
            "channel",
            "from",
            "cartoon",
            "order",
            "by",
            "original_air_date",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Channel"
            ],
            [
                "701"
            ]
        ],
        "response": "The channel of the cartoon aired last is 701",
        "response_toks": [
            "The",
            "channel",
            "of",
            "the",
            "cartoon",
            "aired",
            "last",
            "is",
            "701"
        ],
        "results_map": {
            "result0": "701"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT channel FROM cartoon ORDER BY original_air_date desc LIMIT 1 | 701 ",
        "query_w_results_blank_res": "SELECT channel FROM cartoon ORDER BY original_air_date desc LIMIT 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "channel",
            "from",
            "cartoon",
            "order",
            "by",
            "original_air_date",
            "desc",
            "limit",
            "1",
            "701"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "channel",
            "from",
            "cartoon",
            "order",
            "by",
            "original_air_date",
            "desc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "The channel of the cartoon aired last is result0",
        "response_toks_blank_res": [
            "The",
            "channel",
            "of",
            "the",
            "cartoon",
            "aired",
            "last",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "tvshow",
        "query": "SELECT production_code FROM cartoon ORDER BY original_air_date desc LIMIT 1",
        "query_toks": [
            "select",
            "production_code",
            "from",
            "cartoon",
            "order",
            "by",
            "original_air_date",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Production_code"
            ],
            [
                102.0
            ]
        ],
        "response": "The production code of the cartoon aired last is 102.0",
        "response_toks": [
            "The",
            "production",
            "code",
            "of",
            "the",
            "cartoon",
            "aired",
            "last",
            "is",
            "102.0"
        ],
        "results_map": {
            "result0": "102.0"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT production_code FROM cartoon ORDER BY original_air_date desc LIMIT 1 | 102.0 ",
        "query_w_results_blank_res": "SELECT production_code FROM cartoon ORDER BY original_air_date desc LIMIT 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "production_code",
            "from",
            "cartoon",
            "order",
            "by",
            "original_air_date",
            "desc",
            "limit",
            "1",
            "102.0"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "production_code",
            "from",
            "cartoon",
            "order",
            "by",
            "original_air_date",
            "desc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "The production code of the cartoon aired last is result0",
        "response_toks_blank_res": [
            "The",
            "production",
            "code",
            "of",
            "the",
            "cartoon",
            "aired",
            "last",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "singer",
        "query": "SELECT * FROM singer WHERE Birth_Year  <  1945",
        "query_toks": [
            "select",
            "*",
            "from",
            "singer",
            "where",
            "birth_year",
            "<",
            "1945"
        ],
        "results_raw": [
            [
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship"
            ],
            [
                1,
                "Liliane Bettencourt",
                1944.0,
                30.0,
                "France"
            ],
            [
                4,
                "Iris Fontbona",
                1942.0,
                17.4,
                "Chile"
            ],
            [
                5,
                "Jacqueline Mars",
                1940.0,
                17.8,
                "United States"
            ]
        ],
        "response": "There are all the info of the singers were born before 1945.",
        "response_toks": [
            "There",
            "are",
            "all",
            "the",
            "info",
            "of",
            "the",
            "singers",
            "were",
            "born",
            "before",
            "1945",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT * FROM singer WHERE Birth_Year  <  1945",
        "query_w_results_blank_res": "SELECT * FROM singer WHERE Birth_Year  <  1945",
        "query_toks_w_results": [
            "select",
            "*",
            "from",
            "singer",
            "where",
            "birth_year",
            "<",
            "1945"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "*",
            "from",
            "singer",
            "where",
            "birth_year",
            "<",
            "1945"
        ],
        "response_blank_res": "There are all the info of the singers were born before 1945 .",
        "response_toks_blank_res": [
            "There",
            "are",
            "all",
            "the",
            "info",
            "of",
            "the",
            "singers",
            "were",
            "born",
            "before",
            "1945",
            "."
        ]
    },
    {
        "database_id": "singer",
        "query": "SELECT * FROM singer WHERE Birth_Year  >  1955",
        "query_toks": [
            "select",
            "*",
            "from",
            "singer",
            "where",
            "birth_year",
            ">",
            "1955"
        ],
        "results_raw": [
            [
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship"
            ],
            [
                7,
                "Susanne Klatten",
                1962.0,
                14.3,
                "Germany"
            ],
            [
                8,
                "Abigail Johnson",
                1961.0,
                12.7,
                "United States"
            ]
        ],
        "response": "There are all the info of the singers were born after 1955.",
        "response_toks": [
            "There",
            "are",
            "all",
            "the",
            "info",
            "of",
            "the",
            "singers",
            "were",
            "born",
            "after",
            "1955",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT * FROM singer WHERE Birth_Year  >  1955",
        "query_w_results_blank_res": "SELECT * FROM singer WHERE Birth_Year  >  1955",
        "query_toks_w_results": [
            "select",
            "*",
            "from",
            "singer",
            "where",
            "birth_year",
            ">",
            "1955"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "*",
            "from",
            "singer",
            "where",
            "birth_year",
            ">",
            "1955"
        ],
        "response_blank_res": "There are all the info of the singers were born after 1955 .",
        "response_toks_blank_res": [
            "There",
            "are",
            "all",
            "the",
            "info",
            "of",
            "the",
            "singers",
            "were",
            "born",
            "after",
            "1955",
            "."
        ]
    },
    {
        "database_id": "singer",
        "query": "SELECT * FROM singer WHERE Birth_Year < 1945",
        "query_toks": [
            "select",
            "*",
            "from",
            "singer",
            "where",
            "birth_year",
            "<",
            "1945"
        ],
        "results_raw": [
            [
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship"
            ],
            [
                1,
                "Liliane Bettencourt",
                1944.0,
                30.0,
                "France"
            ],
            [
                4,
                "Iris Fontbona",
                1942.0,
                17.4,
                "Chile"
            ],
            [
                5,
                "Jacqueline Mars",
                1940.0,
                17.8,
                "United States"
            ]
        ],
        "response": "No singers born before 1945 have the same citizenship.",
        "response_toks": [
            "No",
            "singers",
            "born",
            "before",
            "1945",
            "have",
            "the",
            "same",
            "citizenship",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT * FROM singer WHERE Birth_Year < 1945",
        "query_w_results_blank_res": "SELECT * FROM singer WHERE Birth_Year < 1945",
        "query_toks_w_results": [
            "select",
            "*",
            "from",
            "singer",
            "where",
            "birth_year",
            "<",
            "1945"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "*",
            "from",
            "singer",
            "where",
            "birth_year",
            "<",
            "1945"
        ],
        "response_blank_res": "No singers born before 1945 have the same citizenship .",
        "response_toks_blank_res": [
            "No",
            "singers",
            "born",
            "before",
            "1945",
            "have",
            "the",
            "same",
            "citizenship",
            "."
        ]
    },
    {
        "database_id": "singer",
        "query": "SELECT * FROM singer WHERE Birth_Year > 1955",
        "query_toks": [
            "select",
            "*",
            "from",
            "singer",
            "where",
            "birth_year",
            ">",
            "1955"
        ],
        "results_raw": [
            [
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship"
            ],
            [
                7,
                "Susanne Klatten",
                1962.0,
                14.3,
                "Germany"
            ],
            [
                8,
                "Abigail Johnson",
                1961.0,
                12.7,
                "United States"
            ]
        ],
        "response": "The same. No singers born after 1955 have the same citizenship.",
        "response_toks": [
            "The",
            "same",
            ".",
            "No",
            "singers",
            "born",
            "after",
            "1955",
            "have",
            "the",
            "same",
            "citizenship",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT * FROM singer WHERE Birth_Year > 1955",
        "query_w_results_blank_res": "SELECT * FROM singer WHERE Birth_Year > 1955",
        "query_toks_w_results": [
            "select",
            "*",
            "from",
            "singer",
            "where",
            "birth_year",
            ">",
            "1955"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "*",
            "from",
            "singer",
            "where",
            "birth_year",
            ">",
            "1955"
        ],
        "response_blank_res": "The same . No singers born after 1955 have the same citizenship .",
        "response_toks_blank_res": [
            "The",
            "same",
            ".",
            "No",
            "singers",
            "born",
            "after",
            "1955",
            "have",
            "the",
            "same",
            "citizenship",
            "."
        ]
    },
    {
        "database_id": "singer",
        "query": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945",
        "query_toks": [
            "select",
            "citizenship",
            "from",
            "singer",
            "where",
            "birth_year",
            "<",
            "1945"
        ],
        "results_raw": [
            [
                "Citizenship"
            ],
            [
                "France"
            ],
            [
                "Chile"
            ],
            [
                "United States"
            ]
        ],
        "response": "the citizenships of the singers born before 1945 are France, Chile, and United States.",
        "response_toks": [
            "the",
            "citizenships",
            "of",
            "the",
            "singers",
            "born",
            "before",
            "1945",
            "are",
            "France",
            ",",
            "Chile",
            ",",
            "and",
            "United",
            "States",
            "."
        ],
        "results_map": {
            "result0": "France",
            "result1": "Chile"
        },
        "results_blank_res": "result0 result1 ",
        "query_w_results": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 | France Chile ",
        "query_w_results_blank_res": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 | result0 result1 ",
        "query_toks_w_results": [
            "select",
            "citizenship",
            "from",
            "singer",
            "where",
            "birth_year",
            "<",
            "1945",
            "France",
            "Chile"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "citizenship",
            "from",
            "singer",
            "where",
            "birth_year",
            "<",
            "1945",
            "result0",
            "result1"
        ],
        "response_blank_res": "the citizenships of the singers born before 1945 are result0 , result1 , and United States .",
        "response_toks_blank_res": [
            "the",
            "citizenships",
            "of",
            "the",
            "singers",
            "born",
            "before",
            "1945",
            "are",
            "result0",
            ",",
            "result1",
            ",",
            "and",
            "United",
            "States",
            "."
        ]
    },
    {
        "database_id": "singer",
        "query": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 or Birth_Year  >  1955",
        "query_toks": [
            "select",
            "citizenship",
            "from",
            "singer",
            "where",
            "birth_year",
            "<",
            "1945",
            "or",
            "birth_year",
            ">",
            "1955"
        ],
        "results_raw": [
            [
                "Citizenship"
            ],
            [
                "France"
            ],
            [
                "Chile"
            ],
            [
                "United States"
            ]
        ],
        "response": "There are the citizenships of the singers born before 1945 or after 1955.",
        "response_toks": [
            "There",
            "are",
            "the",
            "citizenships",
            "of",
            "the",
            "singers",
            "born",
            "before",
            "1945",
            "or",
            "after",
            "1955",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 or Birth_Year  >  1955",
        "query_w_results_blank_res": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 or Birth_Year  >  1955",
        "query_toks_w_results": [
            "select",
            "citizenship",
            "from",
            "singer",
            "where",
            "birth_year",
            "<",
            "1945",
            "or",
            "birth_year",
            ">",
            "1955"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "citizenship",
            "from",
            "singer",
            "where",
            "birth_year",
            "<",
            "1945",
            "or",
            "birth_year",
            ">",
            "1955"
        ],
        "response_blank_res": "There are the citizenships of the singers born before 1945 or after 1955 .",
        "response_toks_blank_res": [
            "There",
            "are",
            "the",
            "citizenships",
            "of",
            "the",
            "singers",
            "born",
            "before",
            "1945",
            "or",
            "after",
            "1955",
            "."
        ]
    },
    {
        "database_id": "singer",
        "query": "SELECT * FROM singer WHERE Birth_Year  <  1945 and Citizenship  =  'United States'",
        "query_toks": [
            "select",
            "*",
            "from",
            "singer",
            "where",
            "birth_year",
            "<",
            "1945",
            "and",
            "citizenship",
            "=",
            "'united",
            "states'"
        ],
        "results_raw": [
            [
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship"
            ],
            [
                5,
                "Jacqueline Mars",
                1940.0,
                17.8,
                "United States"
            ]
        ],
        "response": "There is all the info of the singer born before 1945 and with citizenship of the United States.",
        "response_toks": [
            "There",
            "is",
            "all",
            "the",
            "info",
            "of",
            "the",
            "singer",
            "born",
            "before",
            "1945",
            "and",
            "with",
            "citizenship",
            "of",
            "the",
            "United",
            "States",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT * FROM singer WHERE Birth_Year  <  1945 and Citizenship  =  'United States'",
        "query_w_results_blank_res": "SELECT * FROM singer WHERE Birth_Year  <  1945 and Citizenship  =  'United States'",
        "query_toks_w_results": [
            "select",
            "*",
            "from",
            "singer",
            "where",
            "birth_year",
            "<",
            "1945",
            "and",
            "citizenship",
            "=",
            "'united",
            "states'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "*",
            "from",
            "singer",
            "where",
            "birth_year",
            "<",
            "1945",
            "and",
            "citizenship",
            "=",
            "'united",
            "states'"
        ],
        "response_blank_res": "There is all the info of the singer born before 1945 and with citizenship of the United States .",
        "response_toks_blank_res": [
            "There",
            "is",
            "all",
            "the",
            "info",
            "of",
            "the",
            "singer",
            "born",
            "before",
            "1945",
            "and",
            "with",
            "citizenship",
            "of",
            "the",
            "United",
            "States",
            "."
        ]
    },
    {
        "database_id": "singer",
        "query": "SELECT * FROM singer WHERE Birth_Year  <  1945 and Citizenship  =  'United States' UNION SELECT * FROM singer WHERE Birth_Year  >  1955 and Citizenship  =  'United States'",
        "query_toks": [
            "select",
            "*",
            "from",
            "singer",
            "where",
            "birth_year",
            "<",
            "1945",
            "and",
            "citizenship",
            "=",
            "'united",
            "states'",
            "union",
            "select",
            "*",
            "from",
            "singer",
            "where",
            "birth_year",
            ">",
            "1955",
            "and",
            "citizenship",
            "=",
            "'united",
            "states'"
        ],
        "results_raw": [
            [
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship"
            ],
            [
                2,
                "Christy Walton",
                1948.0,
                28.8,
                "United States"
            ],
            [
                3,
                "Alice Walton",
                1949.0,
                26.3,
                "United States"
            ],
            [
                5,
                "Jacqueline Mars",
                1940.0,
                17.8,
                "United States"
            ]
        ],
        "response": "There is all the info of the singers with citizenship of the United States born before 1945 or after 1955,",
        "response_toks": [
            "There",
            "is",
            "all",
            "the",
            "info",
            "of",
            "the",
            "singers",
            "with",
            "citizenship",
            "of",
            "the",
            "United",
            "States",
            "born",
            "before",
            "1945",
            "or",
            "after",
            "1955",
            ","
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT * FROM singer WHERE Birth_Year  <  1945 and Citizenship  =  'United States' UNION SELECT * FROM singer WHERE Birth_Year  >  1955 and Citizenship  =  'United States'",
        "query_w_results_blank_res": "SELECT * FROM singer WHERE Birth_Year  <  1945 and Citizenship  =  'United States' UNION SELECT * FROM singer WHERE Birth_Year  >  1955 and Citizenship  =  'United States'",
        "query_toks_w_results": [
            "select",
            "*",
            "from",
            "singer",
            "where",
            "birth_year",
            "<",
            "1945",
            "and",
            "citizenship",
            "=",
            "'united",
            "states'",
            "union",
            "select",
            "*",
            "from",
            "singer",
            "where",
            "birth_year",
            ">",
            "1955",
            "and",
            "citizenship",
            "=",
            "'united",
            "states'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "*",
            "from",
            "singer",
            "where",
            "birth_year",
            "<",
            "1945",
            "and",
            "citizenship",
            "=",
            "'united",
            "states'",
            "union",
            "select",
            "*",
            "from",
            "singer",
            "where",
            "birth_year",
            ">",
            "1955",
            "and",
            "citizenship",
            "=",
            "'united",
            "states'"
        ],
        "response_blank_res": "There is all the info of the singers with citizenship of the United States born before 1945 or after 1955 ,",
        "response_toks_blank_res": [
            "There",
            "is",
            "all",
            "the",
            "info",
            "of",
            "the",
            "singers",
            "with",
            "citizenship",
            "of",
            "the",
            "United",
            "States",
            "born",
            "before",
            "1945",
            "or",
            "after",
            "1955",
            ","
        ]
    },
    {
        "database_id": "singer",
        "query": "SELECT * FROM singer WHERE Birth_Year  <  1945 and Citizenship  =  'France'",
        "query_toks": [
            "select",
            "*",
            "from",
            "singer",
            "where",
            "birth_year",
            "<",
            "1945",
            "and",
            "citizenship",
            "=",
            "'france'"
        ],
        "results_raw": [
            [
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship"
            ],
            [
                1,
                "Liliane Bettencourt",
                1944.0,
                30.0,
                "France"
            ]
        ],
        "response": "There is all the info of the singer born before 1945 and with citizenship of France.",
        "response_toks": [
            "There",
            "is",
            "all",
            "the",
            "info",
            "of",
            "the",
            "singer",
            "born",
            "before",
            "1945",
            "and",
            "with",
            "citizenship",
            "of",
            "France",
            "."
        ],
        "results_map": {
            "result0": "France"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT * FROM singer WHERE Birth_Year  <  1945 and Citizenship  =  'France' | France ",
        "query_w_results_blank_res": "SELECT * FROM singer WHERE Birth_Year  <  1945 and Citizenship  =  'France' | result0 ",
        "query_toks_w_results": [
            "select",
            "*",
            "from",
            "singer",
            "where",
            "birth_year",
            "<",
            "1945",
            "and",
            "citizenship",
            "=",
            "'france'",
            "France"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "*",
            "from",
            "singer",
            "where",
            "birth_year",
            "<",
            "1945",
            "and",
            "citizenship",
            "=",
            "'france'",
            "result0"
        ],
        "response_blank_res": "There is all the info of the singer born before 1945 and with citizenship of result0 .",
        "response_toks_blank_res": [
            "There",
            "is",
            "all",
            "the",
            "info",
            "of",
            "the",
            "singer",
            "born",
            "before",
            "1945",
            "and",
            "with",
            "citizenship",
            "of",
            "result0",
            "."
        ]
    },
    {
        "database_id": "singer",
        "query": "SELECT * FROM singer WHERE Birth_Year  <  1945 and Citizenship  =  'France' UNION SELECT * FROM singer WHERE Birth_Year  >  1955 and Citizenship  =  'France'",
        "query_toks": [
            "select",
            "*",
            "from",
            "singer",
            "where",
            "birth_year",
            "<",
            "1945",
            "and",
            "citizenship",
            "=",
            "'france'",
            "union",
            "select",
            "*",
            "from",
            "singer",
            "where",
            "birth_year",
            ">",
            "1955",
            "and",
            "citizenship",
            "=",
            "'france'"
        ],
        "results_raw": [
            [
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship"
            ],
            [
                1,
                "Liliane Bettencourt",
                1944.0,
                30.0,
                "France"
            ]
        ],
        "response": "There is all the info of the singers with citizenship of France born before 1945 or after 1955,",
        "response_toks": [
            "There",
            "is",
            "all",
            "the",
            "info",
            "of",
            "the",
            "singers",
            "with",
            "citizenship",
            "of",
            "France",
            "born",
            "before",
            "1945",
            "or",
            "after",
            "1955",
            ","
        ],
        "results_map": {
            "result0": "France"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT * FROM singer WHERE Birth_Year  <  1945 and Citizenship  =  'France' UNION SELECT * FROM singer WHERE Birth_Year  >  1955 and Citizenship  =  'France' | France ",
        "query_w_results_blank_res": "SELECT * FROM singer WHERE Birth_Year  <  1945 and Citizenship  =  'France' UNION SELECT * FROM singer WHERE Birth_Year  >  1955 and Citizenship  =  'France' | result0 ",
        "query_toks_w_results": [
            "select",
            "*",
            "from",
            "singer",
            "where",
            "birth_year",
            "<",
            "1945",
            "and",
            "citizenship",
            "=",
            "'france'",
            "union",
            "select",
            "*",
            "from",
            "singer",
            "where",
            "birth_year",
            ">",
            "1955",
            "and",
            "citizenship",
            "=",
            "'france'",
            "France"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "*",
            "from",
            "singer",
            "where",
            "birth_year",
            "<",
            "1945",
            "and",
            "citizenship",
            "=",
            "'france'",
            "union",
            "select",
            "*",
            "from",
            "singer",
            "where",
            "birth_year",
            ">",
            "1955",
            "and",
            "citizenship",
            "=",
            "'france'",
            "result0"
        ],
        "response_blank_res": "There is all the info of the singers with citizenship of result0 born before 1945 or after 1955 ,",
        "response_toks_blank_res": [
            "There",
            "is",
            "all",
            "the",
            "info",
            "of",
            "the",
            "singers",
            "with",
            "citizenship",
            "of",
            "result0",
            "born",
            "before",
            "1945",
            "or",
            "after",
            "1955",
            ","
        ]
    },
    {
        "database_id": "singer",
        "query": "SELECT * FROM singer WHERE Birth_Year  <  1945 and Citizenship  =  'Chile' UNION SELECT * FROM singer WHERE Birth_Year  >  1955 and Citizenship  =  'Chile'",
        "query_toks": [
            "select",
            "*",
            "from",
            "singer",
            "where",
            "birth_year",
            "<",
            "1945",
            "and",
            "citizenship",
            "=",
            "'chile'",
            "union",
            "select",
            "*",
            "from",
            "singer",
            "where",
            "birth_year",
            ">",
            "1955",
            "and",
            "citizenship",
            "=",
            "'chile'"
        ],
        "results_raw": [
            [
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship"
            ],
            [
                4,
                "Iris Fontbona",
                1942.0,
                17.4,
                "Chile"
            ]
        ],
        "response": "There is all the info of the singer with citizenship of Chile was born before 1945 or after 1955,",
        "response_toks": [
            "There",
            "is",
            "all",
            "the",
            "info",
            "of",
            "the",
            "singer",
            "with",
            "citizenship",
            "of",
            "Chile",
            "was",
            "born",
            "before",
            "1945",
            "or",
            "after",
            "1955",
            ","
        ],
        "results_map": {
            "result0": "Chile"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT * FROM singer WHERE Birth_Year  <  1945 and Citizenship  =  'Chile' UNION SELECT * FROM singer WHERE Birth_Year  >  1955 and Citizenship  =  'Chile' | Chile ",
        "query_w_results_blank_res": "SELECT * FROM singer WHERE Birth_Year  <  1945 and Citizenship  =  'Chile' UNION SELECT * FROM singer WHERE Birth_Year  >  1955 and Citizenship  =  'Chile' | result0 ",
        "query_toks_w_results": [
            "select",
            "*",
            "from",
            "singer",
            "where",
            "birth_year",
            "<",
            "1945",
            "and",
            "citizenship",
            "=",
            "'chile'",
            "union",
            "select",
            "*",
            "from",
            "singer",
            "where",
            "birth_year",
            ">",
            "1955",
            "and",
            "citizenship",
            "=",
            "'chile'",
            "Chile"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "*",
            "from",
            "singer",
            "where",
            "birth_year",
            "<",
            "1945",
            "and",
            "citizenship",
            "=",
            "'chile'",
            "union",
            "select",
            "*",
            "from",
            "singer",
            "where",
            "birth_year",
            ">",
            "1955",
            "and",
            "citizenship",
            "=",
            "'chile'",
            "result0"
        ],
        "response_blank_res": "There is all the info of the singer with citizenship of result0 was born before 1945 or after 1955 ,",
        "response_toks_blank_res": [
            "There",
            "is",
            "all",
            "the",
            "info",
            "of",
            "the",
            "singer",
            "with",
            "citizenship",
            "of",
            "result0",
            "was",
            "born",
            "before",
            "1945",
            "or",
            "after",
            "1955",
            ","
        ]
    },
    {
        "database_id": "world_1",
        "query": "select count ( * )  from Country",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "country"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                239
            ]
        ],
        "response": "there are 239 countries",
        "response_toks": [
            "there",
            "are",
            "239",
            "countries"
        ],
        "results_map": {
            "result0": "239"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "select count ( * )  from Country | 239 ",
        "query_w_results_blank_res": "select count ( * )  from Country | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "country",
            "239"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "country",
            "result0"
        ],
        "response_blank_res": "there are result0 countries",
        "response_toks_blank_res": [
            "there",
            "are",
            "result0",
            "countries"
        ]
    },
    {
        "database_id": "world_1",
        "query": "select count ( distinct Language )  from countrylanguage",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "language",
            ")",
            "from",
            "countrylanguage"
        ],
        "results_raw": [
            [
                "count(distinct(Language))"
            ],
            [
                457
            ]
        ],
        "response": "there are 457 languages",
        "response_toks": [
            "there",
            "are",
            "457",
            "languages"
        ],
        "results_map": {
            "result0": "457"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "select count ( distinct Language )  from countrylanguage | 457 ",
        "query_w_results_blank_res": "select count ( distinct Language )  from countrylanguage | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "distinct",
            "language",
            ")",
            "from",
            "countrylanguage",
            "457"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "distinct",
            "language",
            ")",
            "from",
            "countrylanguage",
            "result0"
        ],
        "response_blank_res": "there are result0 languages",
        "response_toks_blank_res": [
            "there",
            "are",
            "result0",
            "languages"
        ]
    },
    {
        "database_id": "world_1",
        "query": "select SurfaceArea from Country where Code  =  'AFG'",
        "query_toks": [
            "select",
            "surfacearea",
            "from",
            "country",
            "where",
            "code",
            "=",
            "'afg'"
        ],
        "results_raw": [
            [
                "SurfaceArea"
            ],
            [
                652090.0
            ]
        ],
        "response": "the surface area of code AFG is  652090.0",
        "response_toks": [
            "the",
            "surface",
            "area",
            "of",
            "code",
            "AFG",
            "is",
            "652090.0"
        ],
        "results_map": {
            "result0": "652090.0"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "select SurfaceArea from Country where Code  =  'AFG' | 652090.0 ",
        "query_w_results_blank_res": "select SurfaceArea from Country where Code  =  'AFG' | result0 ",
        "query_toks_w_results": [
            "select",
            "surfacearea",
            "from",
            "country",
            "where",
            "code",
            "=",
            "'afg'",
            "652090.0"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "surfacearea",
            "from",
            "country",
            "where",
            "code",
            "=",
            "'afg'",
            "result0"
        ],
        "response_blank_res": "the surface area of code AFG is result0",
        "response_toks_blank_res": [
            "the",
            "surface",
            "area",
            "of",
            "code",
            "AFG",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT sum ( Population )  FROM country WHERE Region  =  \"Caribbean\"",
        "query_toks": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            "from",
            "country",
            "where",
            "region",
            "=",
            "\"caribbean\""
        ],
        "results_raw": [
            [
                "sum(Population)"
            ],
            [
                38140000
            ]
        ],
        "response": "The sum of the populations of Caribbean countries is 38140000.",
        "response_toks": [
            "The",
            "sum",
            "of",
            "the",
            "populations",
            "of",
            "Caribbean",
            "countries",
            "is",
            "38140000",
            "."
        ],
        "results_map": {
            "result0": "38140000"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT sum ( Population )  FROM country WHERE Region  =  \"Caribbean\" | 38140000 ",
        "query_w_results_blank_res": "SELECT sum ( Population )  FROM country WHERE Region  =  \"Caribbean\" | result0 ",
        "query_toks_w_results": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            "from",
            "country",
            "where",
            "region",
            "=",
            "\"caribbean\"",
            "38140000"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            "from",
            "country",
            "where",
            "region",
            "=",
            "\"caribbean\"",
            "result0"
        ],
        "response_blank_res": "The sum of the populations of Caribbean countries is result0 .",
        "response_toks_blank_res": [
            "The",
            "sum",
            "of",
            "the",
            "populations",
            "of",
            "Caribbean",
            "countries",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT Continent FROM country GROUP BY Continent HAVING avg ( LifeExpectancy )   <  72",
        "query_toks": [
            "select",
            "continent",
            "from",
            "country",
            "group",
            "by",
            "continent",
            "having",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            "<",
            "72"
        ],
        "results_raw": [
            [
                "Continent"
            ],
            [
                "Africa"
            ],
            [
                "Asia"
            ],
            [
                "Oceania"
            ]
        ],
        "response": "The continents with average life expectancies shorter than 72 are Africa, Asia, Oceania, and South America.",
        "response_toks": [
            "The",
            "continents",
            "with",
            "average",
            "life",
            "expectancies",
            "shorter",
            "than",
            "72",
            "are",
            "Africa",
            ",",
            "Asia",
            ",",
            "Oceania",
            ",",
            "and",
            "South",
            "America",
            "."
        ],
        "results_map": {
            "result0": "Africa",
            "result1": "Asia",
            "result2": "Oceania"
        },
        "results_blank_res": "result0 result1 result2 ",
        "query_w_results": "SELECT Continent FROM country GROUP BY Continent HAVING avg ( LifeExpectancy )   <  72 | Africa Asia Oceania ",
        "query_w_results_blank_res": "SELECT Continent FROM country GROUP BY Continent HAVING avg ( LifeExpectancy )   <  72 | result0 result1 result2 ",
        "query_toks_w_results": [
            "select",
            "continent",
            "from",
            "country",
            "group",
            "by",
            "continent",
            "having",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            "<",
            "72",
            "Africa",
            "Asia",
            "Oceania"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "continent",
            "from",
            "country",
            "group",
            "by",
            "continent",
            "having",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            "<",
            "72",
            "result0",
            "result1",
            "result2"
        ],
        "response_blank_res": "The continents with average life expectancies shorter than 72 are result0 , result1 , result2 , and South America .",
        "response_toks_blank_res": [
            "The",
            "continents",
            "with",
            "average",
            "life",
            "expectancies",
            "shorter",
            "than",
            "72",
            "are",
            "result0",
            ",",
            "result1",
            ",",
            "result2",
            ",",
            "and",
            "South",
            "America",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT sum ( Population ) ,  Continent FROM country GROUP BY Continent HAVING avg ( LifeExpectancy )   <  72",
        "query_toks": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "continent",
            "from",
            "country",
            "group",
            "by",
            "continent",
            "having",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            "<",
            "72"
        ],
        "results_raw": [
            [
                "sum(Population)",
                "Continent"
            ],
            [
                784475000,
                "Africa"
            ],
            [
                3705025700,
                "Asia"
            ],
            [
                30401150,
                "Oceania"
            ]
        ],
        "response": "Here are the total populations for the continents with an average life expectancy shorter than 72.  For example, Africa has a population of 784475000.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "total",
            "populations",
            "for",
            "the",
            "continents",
            "with",
            "an",
            "average",
            "life",
            "expectancy",
            "shorter",
            "than",
            "72",
            ".",
            "For",
            "example",
            ",",
            "Africa",
            "has",
            "a",
            "population",
            "of",
            "784475000",
            "."
        ],
        "results_map": {
            "result0": "Africa",
            "result1": "784475000"
        },
        "results_blank_res": "result0 result1 ",
        "query_w_results": "SELECT sum ( Population ) ,  Continent FROM country GROUP BY Continent HAVING avg ( LifeExpectancy )   <  72 | Africa 784475000 ",
        "query_w_results_blank_res": "SELECT sum ( Population ) ,  Continent FROM country GROUP BY Continent HAVING avg ( LifeExpectancy )   <  72 | result0 result1 ",
        "query_toks_w_results": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "continent",
            "from",
            "country",
            "group",
            "by",
            "continent",
            "having",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            "<",
            "72",
            "Africa",
            "784475000"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "continent",
            "from",
            "country",
            "group",
            "by",
            "continent",
            "having",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            "<",
            "72",
            "result0",
            "result1"
        ],
        "response_blank_res": "Here are the total populations for the continents with an average life expectancy shorter than 72 . For example , result0 has a population of result1 .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "total",
            "populations",
            "for",
            "the",
            "continents",
            "with",
            "an",
            "average",
            "life",
            "expectancy",
            "shorter",
            "than",
            "72",
            ".",
            "For",
            "example",
            ",",
            "result0",
            "has",
            "a",
            "population",
            "of",
            "result1",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT avg ( LifeExpectancy )  ,  Continent FROM country GROUP BY Continent HAVING avg ( LifeExpectancy )   <  72",
        "query_toks": [
            "select",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            ",",
            "continent",
            "from",
            "country",
            "group",
            "by",
            "continent",
            "having",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            "<",
            "72"
        ],
        "results_raw": [
            [
                "avg(LifeExpectancy)",
                "Continent"
            ],
            [
                52.571929824561394,
                "Africa"
            ],
            [
                67.44117647058825,
                "Asia"
            ],
            [
                69.715,
                "Oceania"
            ]
        ],
        "response": "Here are the average life expectancies for the continents with an average life expectancy shorter than 72.  For example, Africa has an average life expectancy of 52.571929824561394.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "average",
            "life",
            "expectancies",
            "for",
            "the",
            "continents",
            "with",
            "an",
            "average",
            "life",
            "expectancy",
            "shorter",
            "than",
            "72",
            ".",
            "For",
            "example",
            ",",
            "Africa",
            "has",
            "an",
            "average",
            "life",
            "expectancy",
            "of",
            "52.571929824561394",
            "."
        ],
        "results_map": {
            "result0": "Africa",
            "result1": "52.571929824561394"
        },
        "results_blank_res": "result0 result1 ",
        "query_w_results": "SELECT avg ( LifeExpectancy )  ,  Continent FROM country GROUP BY Continent HAVING avg ( LifeExpectancy )   <  72 | Africa 52.571929824561394 ",
        "query_w_results_blank_res": "SELECT avg ( LifeExpectancy )  ,  Continent FROM country GROUP BY Continent HAVING avg ( LifeExpectancy )   <  72 | result0 result1 ",
        "query_toks_w_results": [
            "select",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            ",",
            "continent",
            "from",
            "country",
            "group",
            "by",
            "continent",
            "having",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            "<",
            "72",
            "Africa",
            "52.571929824561394"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            ",",
            "continent",
            "from",
            "country",
            "group",
            "by",
            "continent",
            "having",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            "<",
            "72",
            "result0",
            "result1"
        ],
        "response_blank_res": "Here are the average life expectancies for the continents with an average life expectancy shorter than 72 . For example , result0 has an average life expectancy of result1 .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "average",
            "life",
            "expectancies",
            "for",
            "the",
            "continents",
            "with",
            "an",
            "average",
            "life",
            "expectancy",
            "shorter",
            "than",
            "72",
            ".",
            "For",
            "example",
            ",",
            "result0",
            "has",
            "an",
            "average",
            "life",
            "expectancy",
            "of",
            "result1",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT sum ( Population )  ,  avg ( LifeExpectancy )  ,  Continent FROM country GROUP BY Continent HAVING avg ( LifeExpectancy )   <  72",
        "query_toks": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            ",",
            "continent",
            "from",
            "country",
            "group",
            "by",
            "continent",
            "having",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            "<",
            "72"
        ],
        "results_raw": [
            [
                "sum(Population)",
                "avg(LifeExpectancy)",
                "Continent"
            ],
            [
                784475000,
                52.571929824561394,
                "Africa"
            ],
            [
                3705025700,
                67.44117647058825,
                "Asia"
            ],
            [
                30401150,
                69.715,
                "Oceania"
            ]
        ],
        "response": "Here are the average life expectancies and total populations for continents having an average life expectancy shorter than 72.  For example, Africa has a population of 784475000 and a life expectancy of 52.571929824561394.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "average",
            "life",
            "expectancies",
            "and",
            "total",
            "populations",
            "for",
            "continents",
            "having",
            "an",
            "average",
            "life",
            "expectancy",
            "shorter",
            "than",
            "72",
            ".",
            "For",
            "example",
            ",",
            "Africa",
            "has",
            "a",
            "population",
            "of",
            "784475000",
            "and",
            "a",
            "life",
            "expectancy",
            "of",
            "52.571929824561394",
            "."
        ],
        "results_map": {
            "result0": "Africa",
            "result1": "784475000",
            "result2": "52.571929824561394"
        },
        "results_blank_res": "result0 result1 result2 ",
        "query_w_results": "SELECT sum ( Population )  ,  avg ( LifeExpectancy )  ,  Continent FROM country GROUP BY Continent HAVING avg ( LifeExpectancy )   <  72 | Africa 784475000 52.571929824561394 ",
        "query_w_results_blank_res": "SELECT sum ( Population )  ,  avg ( LifeExpectancy )  ,  Continent FROM country GROUP BY Continent HAVING avg ( LifeExpectancy )   <  72 | result0 result1 result2 ",
        "query_toks_w_results": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            ",",
            "continent",
            "from",
            "country",
            "group",
            "by",
            "continent",
            "having",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            "<",
            "72",
            "Africa",
            "784475000",
            "52.571929824561394"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            ",",
            "continent",
            "from",
            "country",
            "group",
            "by",
            "continent",
            "having",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            "<",
            "72",
            "result0",
            "result1",
            "result2"
        ],
        "response_blank_res": "Here are the average life expectancies and total populations for continents having an average life expectancy shorter than 72 . For example , result0 has a population of result1 and a life expectancy of result2 .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "average",
            "life",
            "expectancies",
            "and",
            "total",
            "populations",
            "for",
            "continents",
            "having",
            "an",
            "average",
            "life",
            "expectancy",
            "shorter",
            "than",
            "72",
            ".",
            "For",
            "example",
            ",",
            "result0",
            "has",
            "a",
            "population",
            "of",
            "result1",
            "and",
            "a",
            "life",
            "expectancy",
            "of",
            "result2",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT street FROM Owners WHERE first_name  =  \"Nora\" and last_name  =  \"Haley\"",
        "query_toks": [
            "select",
            "street",
            "from",
            "owners",
            "where",
            "first_name",
            "=",
            "\"nora\"",
            "and",
            "last_name",
            "=",
            "\"haley\""
        ],
        "results_raw": [
            [
                "street"
            ],
            [
                "0647 Hintz Village Apt. 024"
            ]
        ],
        "response": "The owner with full name Nora Haley lives at the street of 0647 Hintz Village Apt. 024",
        "response_toks": [
            "The",
            "owner",
            "with",
            "full",
            "name",
            "Nora",
            "Haley",
            "lives",
            "at",
            "the",
            "street",
            "of",
            "0647",
            "Hintz",
            "Village",
            "Apt",
            ".",
            "024"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT street FROM Owners WHERE first_name  =  \"Nora\" and last_name  =  \"Haley\"",
        "query_w_results_blank_res": "SELECT street FROM Owners WHERE first_name  =  \"Nora\" and last_name  =  \"Haley\"",
        "query_toks_w_results": [
            "select",
            "street",
            "from",
            "owners",
            "where",
            "first_name",
            "=",
            "\"nora\"",
            "and",
            "last_name",
            "=",
            "\"haley\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "street",
            "from",
            "owners",
            "where",
            "first_name",
            "=",
            "\"nora\"",
            "and",
            "last_name",
            "=",
            "\"haley\""
        ],
        "response_blank_res": "The owner with full name Nora Haley lives at the street of 0647 Hintz Village Apt . 024",
        "response_toks_blank_res": [
            "The",
            "owner",
            "with",
            "full",
            "name",
            "Nora",
            "Haley",
            "lives",
            "at",
            "the",
            "street",
            "of",
            "0647",
            "Hintz",
            "Village",
            "Apt",
            ".",
            "024"
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT home_phone FROM Owners WHERE first_name  =  \"Nora\" and last_name  =  \"Haley\"",
        "query_toks": [
            "select",
            "home_phone",
            "from",
            "owners",
            "where",
            "first_name",
            "=",
            "\"nora\"",
            "and",
            "last_name",
            "=",
            "\"haley\""
        ],
        "results_raw": [
            [
                "home_phone"
            ],
            [
                "1-682-845-0116x63235"
            ]
        ],
        "response": "The home phone of the house owned by the  owner with full name Nora Haley is 1-682-845-0116x63235",
        "response_toks": [
            "The",
            "home",
            "phone",
            "of",
            "the",
            "house",
            "owned",
            "by",
            "the",
            "owner",
            "with",
            "full",
            "name",
            "Nora",
            "Haley",
            "is",
            "1-682-845-0116x63235"
        ],
        "results_map": {
            "result0": "1-682-845-0116x63235"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT home_phone FROM Owners WHERE first_name  =  \"Nora\" and last_name  =  \"Haley\" | 1-682-845-0116x63235 ",
        "query_w_results_blank_res": "SELECT home_phone FROM Owners WHERE first_name  =  \"Nora\" and last_name  =  \"Haley\" | result0 ",
        "query_toks_w_results": [
            "select",
            "home_phone",
            "from",
            "owners",
            "where",
            "first_name",
            "=",
            "\"nora\"",
            "and",
            "last_name",
            "=",
            "\"haley\"",
            "1-682-845-0116x63235"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "home_phone",
            "from",
            "owners",
            "where",
            "first_name",
            "=",
            "\"nora\"",
            "and",
            "last_name",
            "=",
            "\"haley\"",
            "result0"
        ],
        "response_blank_res": "The home phone of the house owned by the owner with full name Nora Haley is result0",
        "response_toks_blank_res": [
            "The",
            "home",
            "phone",
            "of",
            "the",
            "house",
            "owned",
            "by",
            "the",
            "owner",
            "with",
            "full",
            "name",
            "Nora",
            "Haley",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT email_address FROM Owners WHERE first_name  =  \"Jaclyn\" and last_name  =  \"Stoltenberg\"",
        "query_toks": [
            "select",
            "email_address",
            "from",
            "owners",
            "where",
            "first_name",
            "=",
            "\"jaclyn\"",
            "and",
            "last_name",
            "=",
            "\"stoltenberg\""
        ],
        "results_raw": [
            [
                "email_address"
            ],
            [
                "hudson.favian@example.com"
            ]
        ],
        "response": "The email address of the house owned by the owner with full name Jaclyn Stoltenberg is hudson.favian@example.com",
        "response_toks": [
            "The",
            "email",
            "address",
            "of",
            "the",
            "house",
            "owned",
            "by",
            "the",
            "owner",
            "with",
            "full",
            "name",
            "Jaclyn",
            "Stoltenberg",
            "is",
            "hudson.favian",
            "@",
            "example.com"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT email_address FROM Owners WHERE first_name  =  \"Jaclyn\" and last_name  =  \"Stoltenberg\"",
        "query_w_results_blank_res": "SELECT email_address FROM Owners WHERE first_name  =  \"Jaclyn\" and last_name  =  \"Stoltenberg\"",
        "query_toks_w_results": [
            "select",
            "email_address",
            "from",
            "owners",
            "where",
            "first_name",
            "=",
            "\"jaclyn\"",
            "and",
            "last_name",
            "=",
            "\"stoltenberg\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "email_address",
            "from",
            "owners",
            "where",
            "first_name",
            "=",
            "\"jaclyn\"",
            "and",
            "last_name",
            "=",
            "\"stoltenberg\""
        ],
        "response_blank_res": "The email address of the house owned by the owner with full name Jaclyn Stoltenberg is hudson.favian @ example.com",
        "response_toks_blank_res": [
            "The",
            "email",
            "address",
            "of",
            "the",
            "house",
            "owned",
            "by",
            "the",
            "owner",
            "with",
            "full",
            "name",
            "Jaclyn",
            "Stoltenberg",
            "is",
            "hudson.favian",
            "@",
            "example.com"
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT first_name FROM Owners WHERE last_name  =  \"DuBuque\"",
        "query_toks": [
            "select",
            "first_name",
            "from",
            "owners",
            "where",
            "last_name",
            "=",
            "\"dubuque\""
        ],
        "results_raw": [
            [
                "first_name"
            ],
            [
                "Melisa"
            ]
        ],
        "response": "the first name of the customer with last name DuBuque is Melisa",
        "response_toks": [
            "the",
            "first",
            "name",
            "of",
            "the",
            "customer",
            "with",
            "last",
            "name",
            "DuBuque",
            "is",
            "Melisa"
        ],
        "results_map": {
            "result0": "Melisa"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT first_name FROM Owners WHERE last_name  =  \"DuBuque\" | Melisa ",
        "query_w_results_blank_res": "SELECT first_name FROM Owners WHERE last_name  =  \"DuBuque\" | result0 ",
        "query_toks_w_results": [
            "select",
            "first_name",
            "from",
            "owners",
            "where",
            "last_name",
            "=",
            "\"dubuque\"",
            "Melisa"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "first_name",
            "from",
            "owners",
            "where",
            "last_name",
            "=",
            "\"dubuque\"",
            "result0"
        ],
        "response_blank_res": "the first name of the customer with last name DuBuque is result0",
        "response_toks_blank_res": [
            "the",
            "first",
            "name",
            "of",
            "the",
            "customer",
            "with",
            "last",
            "name",
            "DuBuque",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count ( * )  ASC LIMIT 1",
        "query_toks": [
            "select",
            "document_id",
            "from",
            "paragraphs",
            "group",
            "by",
            "document_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "asc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Document_ID"
            ],
            [
                3
            ]
        ],
        "response": "the id of document with least number of paragraphs is 3",
        "response_toks": [
            "the",
            "id",
            "of",
            "document",
            "with",
            "least",
            "number",
            "of",
            "paragraphs",
            "is",
            "3"
        ],
        "results_map": {
            "result0": "3"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count ( * )  ASC LIMIT 1 | 3 ",
        "query_w_results_blank_res": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count ( * )  ASC LIMIT 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "document_id",
            "from",
            "paragraphs",
            "group",
            "by",
            "document_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "asc",
            "limit",
            "1",
            "3"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "document_id",
            "from",
            "paragraphs",
            "group",
            "by",
            "document_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "asc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "the id of document with least number of paragraphs is result0",
        "response_toks_blank_res": [
            "the",
            "id",
            "of",
            "document",
            "with",
            "least",
            "number",
            "of",
            "paragraphs",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count ( * )  desc LIMIT 1",
        "query_toks": [
            "select",
            "document_id",
            "from",
            "paragraphs",
            "group",
            "by",
            "document_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Document_ID"
            ],
            [
                2394
            ]
        ],
        "response": "the id of document with most number of paragraphs is 2394",
        "response_toks": [
            "the",
            "id",
            "of",
            "document",
            "with",
            "most",
            "number",
            "of",
            "paragraphs",
            "is",
            "2394"
        ],
        "results_map": {
            "result0": "2394"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count ( * )  desc LIMIT 1 | 2394 ",
        "query_w_results_blank_res": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count ( * )  desc LIMIT 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "document_id",
            "from",
            "paragraphs",
            "group",
            "by",
            "document_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1",
            "2394"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "document_id",
            "from",
            "paragraphs",
            "group",
            "by",
            "document_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "the id of document with most number of paragraphs is result0",
        "response_toks_blank_res": [
            "the",
            "id",
            "of",
            "document",
            "with",
            "most",
            "number",
            "of",
            "paragraphs",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "query": "select count ( paragraph_id )  from Paragraphs where Document_ID  =  2394",
        "query_toks": [
            "select",
            "count",
            "(",
            "paragraph_id",
            ")",
            "from",
            "paragraphs",
            "where",
            "document_id",
            "=",
            "2394"
        ],
        "results_raw": [
            [
                "count(paragraph_id)"
            ],
            [
                3
            ]
        ],
        "response": "there are 3 paragraphs in the document whose id is 2394",
        "response_toks": [
            "there",
            "are",
            "3",
            "paragraphs",
            "in",
            "the",
            "document",
            "whose",
            "id",
            "is",
            "2394"
        ],
        "results_map": {
            "result0": "3"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "select count ( paragraph_id )  from Paragraphs where Document_ID  =  2394 | 3 ",
        "query_w_results_blank_res": "select count ( paragraph_id )  from Paragraphs where Document_ID  =  2394 | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "paragraph_id",
            ")",
            "from",
            "paragraphs",
            "where",
            "document_id",
            "=",
            "2394",
            "3"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "paragraph_id",
            ")",
            "from",
            "paragraphs",
            "where",
            "document_id",
            "=",
            "2394",
            "result0"
        ],
        "response_blank_res": "there are result0 paragraphs in the document whose id is 2394",
        "response_toks_blank_res": [
            "there",
            "are",
            "result0",
            "paragraphs",
            "in",
            "the",
            "document",
            "whose",
            "id",
            "is",
            "2394"
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "query": "select Paragraph_Text from Paragraphs where Document_ID  =  2394",
        "query_toks": [
            "select",
            "paragraph_text",
            "from",
            "paragraphs",
            "where",
            "document_id",
            "=",
            "2394"
        ],
        "results_raw": [
            [
                "Paragraph_Text"
            ],
            [
                "Korea"
            ],
            [
                "Ukraine"
            ],
            [
                "Korea"
            ]
        ],
        "response": "here are the paragraph texts for each paragraph",
        "response_toks": [
            "here",
            "are",
            "the",
            "paragraph",
            "texts",
            "for",
            "each",
            "paragraph"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "select Paragraph_Text from Paragraphs where Document_ID  =  2394",
        "query_w_results_blank_res": "select Paragraph_Text from Paragraphs where Document_ID  =  2394",
        "query_toks_w_results": [
            "select",
            "paragraph_text",
            "from",
            "paragraphs",
            "where",
            "document_id",
            "=",
            "2394"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "paragraph_text",
            "from",
            "paragraphs",
            "where",
            "document_id",
            "=",
            "2394"
        ],
        "response_blank_res": "here are the paragraph texts for each paragraph",
        "response_toks_blank_res": [
            "here",
            "are",
            "the",
            "paragraph",
            "texts",
            "for",
            "each",
            "paragraph"
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT email_address from owners where owner_id  =  1",
        "query_toks": [
            "select",
            "email_address",
            "from",
            "owners",
            "where",
            "owner_id",
            "=",
            "1"
        ],
        "results_raw": [
            [
                "email_address"
            ],
            [
                "lynn81@example.org"
            ]
        ],
        "response": "lynn81@example.org is the email address of owner id 1.",
        "response_toks": [
            "lynn81",
            "@",
            "example.org",
            "is",
            "the",
            "email",
            "address",
            "of",
            "owner",
            "id",
            "1",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT email_address from owners where owner_id  =  1",
        "query_w_results_blank_res": "SELECT email_address from owners where owner_id  =  1",
        "query_toks_w_results": [
            "select",
            "email_address",
            "from",
            "owners",
            "where",
            "owner_id",
            "=",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "email_address",
            "from",
            "owners",
            "where",
            "owner_id",
            "=",
            "1"
        ],
        "response_blank_res": "lynn81 @ example.org is the email address of owner id 1 .",
        "response_toks_blank_res": [
            "lynn81",
            "@",
            "example.org",
            "is",
            "the",
            "email",
            "address",
            "of",
            "owner",
            "id",
            "1",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT weight from dogs where dog_id  =  1",
        "query_toks": [
            "select",
            "weight",
            "from",
            "dogs",
            "where",
            "dog_id",
            "=",
            "1"
        ],
        "results_raw": [
            [
                "weight"
            ],
            [
                "7.57"
            ]
        ],
        "response": "7.57 is the weight of dog id 1",
        "response_toks": [
            "7.57",
            "is",
            "the",
            "weight",
            "of",
            "dog",
            "id",
            "1"
        ],
        "results_map": {
            "result0": "7.57"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT weight from dogs where dog_id  =  1 | 7.57 ",
        "query_w_results_blank_res": "SELECT weight from dogs where dog_id  =  1 | result0 ",
        "query_toks_w_results": [
            "select",
            "weight",
            "from",
            "dogs",
            "where",
            "dog_id",
            "=",
            "1",
            "7.57"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "weight",
            "from",
            "dogs",
            "where",
            "dog_id",
            "=",
            "1",
            "result0"
        ],
        "response_blank_res": "result0 is the weight of dog id 1",
        "response_toks_blank_res": [
            "result0",
            "is",
            "the",
            "weight",
            "of",
            "dog",
            "id",
            "1"
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT age from dogs where dog_id  =  1",
        "query_toks": [
            "select",
            "age",
            "from",
            "dogs",
            "where",
            "dog_id",
            "=",
            "1"
        ],
        "results_raw": [
            [
                "age"
            ],
            [
                "6"
            ]
        ],
        "response": "The age of dog id 1 is 6.",
        "response_toks": [
            "The",
            "age",
            "of",
            "dog",
            "id",
            "1",
            "is",
            "6",
            "."
        ],
        "results_map": {
            "result0": "6"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT age from dogs where dog_id  =  1 | 6 ",
        "query_w_results_blank_res": "SELECT age from dogs where dog_id  =  1 | result0 ",
        "query_toks_w_results": [
            "select",
            "age",
            "from",
            "dogs",
            "where",
            "dog_id",
            "=",
            "1",
            "6"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "age",
            "from",
            "dogs",
            "where",
            "dog_id",
            "=",
            "1",
            "result0"
        ],
        "response_blank_res": "The age of dog id 1 is result0 .",
        "response_toks_blank_res": [
            "The",
            "age",
            "of",
            "dog",
            "id",
            "1",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id JOIN Treatments AS T3 ON T2.dog_id   =   T3.dog_id GROUP BY T1.owner_id ORDER BY count ( * )  DESC LIMIT 1",
        "query_toks": [
            "select",
            "t1",
            ".",
            "owner_id",
            ",",
            "t1",
            ".",
            "last_name",
            "from",
            "owners",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "owner_id",
            "=",
            "t2",
            ".",
            "owner_id",
            "join",
            "treatments",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "dog_id",
            "=",
            "t3",
            ".",
            "dog_id",
            "group",
            "by",
            "t1",
            ".",
            "owner_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "owner_id",
                "last_name"
            ],
            [
                14,
                "Funk"
            ]
        ],
        "response": "The following table shows the owner id and last name of owner who has paid for the most treatments on his or her dogs",
        "response_toks": [
            "The",
            "following",
            "table",
            "shows",
            "the",
            "owner",
            "id",
            "and",
            "last",
            "name",
            "of",
            "owner",
            "who",
            "has",
            "paid",
            "for",
            "the",
            "most",
            "treatments",
            "on",
            "his",
            "or",
            "her",
            "dogs"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id JOIN Treatments AS T3 ON T2.dog_id   =   T3.dog_id GROUP BY T1.owner_id ORDER BY count ( * )  DESC LIMIT 1",
        "query_w_results_blank_res": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id JOIN Treatments AS T3 ON T2.dog_id   =   T3.dog_id GROUP BY T1.owner_id ORDER BY count ( * )  DESC LIMIT 1",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "owner_id",
            ",",
            "t1",
            ".",
            "last_name",
            "from",
            "owners",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "owner_id",
            "=",
            "t2",
            ".",
            "owner_id",
            "join",
            "treatments",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "dog_id",
            "=",
            "t3",
            ".",
            "dog_id",
            "group",
            "by",
            "t1",
            ".",
            "owner_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "owner_id",
            ",",
            "t1",
            ".",
            "last_name",
            "from",
            "owners",
            "as",
            "t1",
            "join",
            "dogs",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "owner_id",
            "=",
            "t2",
            ".",
            "owner_id",
            "join",
            "treatments",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "dog_id",
            "=",
            "t3",
            ".",
            "dog_id",
            "group",
            "by",
            "t1",
            ".",
            "owner_id",
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc",
            "limit",
            "1"
        ],
        "response_blank_res": "The following table shows the owner id and last name of owner who has paid for the most treatments on his or her dogs",
        "response_toks_blank_res": [
            "The",
            "following",
            "table",
            "shows",
            "the",
            "owner",
            "id",
            "and",
            "last",
            "name",
            "of",
            "owner",
            "who",
            "has",
            "paid",
            "for",
            "the",
            "most",
            "treatments",
            "on",
            "his",
            "or",
            "her",
            "dogs"
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT count ( * )  FROM matches WHERE YEAR   =   2013",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "matches",
            "where",
            "year",
            "=",
            "2013"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                12
            ]
        ],
        "response": "The count of  matchesplayed in 2013  is 12",
        "response_toks": [
            "The",
            "count",
            "of",
            "matchesplayed",
            "in",
            "2013",
            "is",
            "12"
        ],
        "results_map": {
            "result0": "12"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM matches WHERE YEAR   =   2013 | 12 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM matches WHERE YEAR   =   2013 | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "matches",
            "where",
            "year",
            "=",
            "2013",
            "12"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "matches",
            "where",
            "year",
            "=",
            "2013",
            "result0"
        ],
        "response_blank_res": "The count of matchesplayed in 2013 is result0",
        "response_toks_blank_res": [
            "The",
            "count",
            "of",
            "matchesplayed",
            "in",
            "2013",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT count ( * )  FROM matches WHERE YEAR   =   2016",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "matches",
            "where",
            "year",
            "=",
            "2016"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                158
            ]
        ],
        "response": "The count of matches  played in 2016  is 158",
        "response_toks": [
            "The",
            "count",
            "of",
            "matches",
            "played",
            "in",
            "2016",
            "is",
            "158"
        ],
        "results_map": {
            "result0": "158"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM matches WHERE YEAR   =   2016 | 158 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM matches WHERE YEAR   =   2016 | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "matches",
            "where",
            "year",
            "=",
            "2016",
            "158"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "matches",
            "where",
            "year",
            "=",
            "2016",
            "result0"
        ],
        "response_blank_res": "The count of matches played in 2016 is result0",
        "response_toks_blank_res": [
            "The",
            "count",
            "of",
            "matches",
            "played",
            "in",
            "2016",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "wta_1",
        "query": "SELECT distinct loser_id  FROM  matches where loser_name   = \"Petra Kvitova\"",
        "query_toks": [
            "select",
            "distinct",
            "loser_id",
            "from",
            "matches",
            "where",
            "loser_name",
            "=",
            "\"petra",
            "kvitova\""
        ],
        "results_raw": [
            [
                "loser_id"
            ],
            [
                201520
            ]
        ],
        "response": "the  loser id  of petra kvitota   is 201520",
        "response_toks": [
            "the",
            "loser",
            "id",
            "of",
            "petra",
            "kvitota",
            "is",
            "201520"
        ],
        "results_map": {
            "result0": "201520"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT distinct loser_id  FROM  matches where loser_name   = \"Petra Kvitova\" | 201520 ",
        "query_w_results_blank_res": "SELECT distinct loser_id  FROM  matches where loser_name   = \"Petra Kvitova\" | result0 ",
        "query_toks_w_results": [
            "select",
            "distinct",
            "loser_id",
            "from",
            "matches",
            "where",
            "loser_name",
            "=",
            "\"petra",
            "kvitova\"",
            "201520"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "loser_id",
            "from",
            "matches",
            "where",
            "loser_name",
            "=",
            "\"petra",
            "kvitova\"",
            "result0"
        ],
        "response_blank_res": "the loser id of petra kvitota is result0",
        "response_toks_blank_res": [
            "the",
            "loser",
            "id",
            "of",
            "petra",
            "kvitota",
            "is",
            "result0"
        ]
    },
    {
        "database_id": "tvshow",
        "query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.written_by   =   'Todd Casey'",
        "query_toks": [
            "select",
            "country",
            "from",
            "tv_channel",
            "except",
            "select",
            "t1",
            ".",
            "country",
            "from",
            "tv_channel",
            "as",
            "t1",
            "join",
            "cartoon",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "channel",
            "where",
            "t2",
            ".",
            "written_by",
            "=",
            "'todd",
            "casey'"
        ],
        "results_raw": [
            [
                "Country"
            ],
            [
                "Poland"
            ]
        ],
        "response": "Poland is the country whose tv channels are not playing any cartoon written by Todd Casey",
        "response_toks": [
            "Poland",
            "is",
            "the",
            "country",
            "whose",
            "tv",
            "channels",
            "are",
            "not",
            "playing",
            "any",
            "cartoon",
            "written",
            "by",
            "Todd",
            "Casey"
        ],
        "results_map": {
            "result0": "Poland"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.written_by   =   'Todd Casey' | Poland ",
        "query_w_results_blank_res": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.written_by   =   'Todd Casey' | result0 ",
        "query_toks_w_results": [
            "select",
            "country",
            "from",
            "tv_channel",
            "except",
            "select",
            "t1",
            ".",
            "country",
            "from",
            "tv_channel",
            "as",
            "t1",
            "join",
            "cartoon",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "channel",
            "where",
            "t2",
            ".",
            "written_by",
            "=",
            "'todd",
            "casey'",
            "Poland"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "country",
            "from",
            "tv_channel",
            "except",
            "select",
            "t1",
            ".",
            "country",
            "from",
            "tv_channel",
            "as",
            "t1",
            "join",
            "cartoon",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "channel",
            "where",
            "t2",
            ".",
            "written_by",
            "=",
            "'todd",
            "casey'",
            "result0"
        ],
        "response_blank_res": "result0 is the country whose tv channels are not playing any cartoon written by Todd Casey",
        "response_toks_blank_res": [
            "result0",
            "is",
            "the",
            "country",
            "whose",
            "tv",
            "channels",
            "are",
            "not",
            "playing",
            "any",
            "cartoon",
            "written",
            "by",
            "Todd",
            "Casey"
        ]
    },
    {
        "database_id": "tvshow",
        "query": "SELECT directed_by from cartoon where title  =  \"The Rise of the Blue Beetle!\" and written_by  =  \"Michael Jelenic\"",
        "query_toks": [
            "select",
            "directed_by",
            "from",
            "cartoon",
            "where",
            "title",
            "=",
            "\"the",
            "rise",
            "of",
            "the",
            "blue",
            "beetle!\"",
            "and",
            "written_by",
            "=",
            "\"michael",
            "jelenic\""
        ],
        "results_raw": [
            [
                "Directed_by"
            ],
            [
                "Ben Jones"
            ]
        ],
        "response": "Ben Jones directed the cartoon with a title \"The Rise of the Blue Beetle!\" written by Michael Jelenic",
        "response_toks": [
            "Ben",
            "Jones",
            "directed",
            "the",
            "cartoon",
            "with",
            "a",
            "title",
            "``",
            "The",
            "Rise",
            "of",
            "the",
            "Blue",
            "Beetle",
            "!",
            "''",
            "written",
            "by",
            "Michael",
            "Jelenic"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT directed_by from cartoon where title  =  \"The Rise of the Blue Beetle!\" and written_by  =  \"Michael Jelenic\"",
        "query_w_results_blank_res": "SELECT directed_by from cartoon where title  =  \"The Rise of the Blue Beetle!\" and written_by  =  \"Michael Jelenic\"",
        "query_toks_w_results": [
            "select",
            "directed_by",
            "from",
            "cartoon",
            "where",
            "title",
            "=",
            "\"the",
            "rise",
            "of",
            "the",
            "blue",
            "beetle!\"",
            "and",
            "written_by",
            "=",
            "\"michael",
            "jelenic\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "directed_by",
            "from",
            "cartoon",
            "where",
            "title",
            "=",
            "\"the",
            "rise",
            "of",
            "the",
            "blue",
            "beetle!\"",
            "and",
            "written_by",
            "=",
            "\"michael",
            "jelenic\""
        ],
        "response_blank_res": "Ben Jones directed the cartoon with a title `` The Rise of the Blue Beetle ! '' written by Michael Jelenic",
        "response_toks_blank_res": [
            "Ben",
            "Jones",
            "directed",
            "the",
            "cartoon",
            "with",
            "a",
            "title",
            "``",
            "The",
            "Rise",
            "of",
            "the",
            "Blue",
            "Beetle",
            "!",
            "''",
            "written",
            "by",
            "Michael",
            "Jelenic"
        ]
    },
    {
        "database_id": "tvshow",
        "query": "SELECT Package_Option from tv_channel where country  =  \"Italy\"",
        "query_toks": [
            "select",
            "package_option",
            "from",
            "tv_channel",
            "where",
            "country",
            "=",
            "\"italy\""
        ],
        "results_raw": [
            [
                "Package_Option"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ],
            [
                "Sky Famiglia"
            ]
        ],
        "response": "Here are the package options for TV channels in Italy.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "package",
            "options",
            "for",
            "TV",
            "channels",
            "in",
            "Italy",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Package_Option from tv_channel where country  =  \"Italy\"",
        "query_w_results_blank_res": "SELECT Package_Option from tv_channel where country  =  \"Italy\"",
        "query_toks_w_results": [
            "select",
            "package_option",
            "from",
            "tv_channel",
            "where",
            "country",
            "=",
            "\"italy\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "package_option",
            "from",
            "tv_channel",
            "where",
            "country",
            "=",
            "\"italy\""
        ],
        "response_blank_res": "Here are the package options for TV channels in Italy .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "package",
            "options",
            "for",
            "TV",
            "channels",
            "in",
            "Italy",
            "."
        ]
    },
    {
        "database_id": "concert_singer",
        "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
        "query_toks": [
            "select",
            "song_name",
            ",",
            "song_release_year",
            "from",
            "singer",
            "order",
            "by",
            "age",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Song_Name",
                "Song_release_year"
            ],
            [
                "Love",
                "2016"
            ]
        ],
        "response": "the name of the song by the youngest singer is Love, and its release year is 2016.",
        "response_toks": [
            "the",
            "name",
            "of",
            "the",
            "song",
            "by",
            "the",
            "youngest",
            "singer",
            "is",
            "Love",
            ",",
            "and",
            "its",
            "release",
            "year",
            "is",
            "2016",
            "."
        ],
        "results_map": {
            "result0": "Love",
            "result1": "2016"
        },
        "results_blank_res": "result0 result1 ",
        "query_w_results": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1 | Love 2016 ",
        "query_w_results_blank_res": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1 | result0 result1 ",
        "query_toks_w_results": [
            "select",
            "song_name",
            ",",
            "song_release_year",
            "from",
            "singer",
            "order",
            "by",
            "age",
            "limit",
            "1",
            "Love",
            "2016"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "song_name",
            ",",
            "song_release_year",
            "from",
            "singer",
            "order",
            "by",
            "age",
            "limit",
            "1",
            "result0",
            "result1"
        ],
        "response_blank_res": "the name of the song by the youngest singer is result0 , and its release year is result1 .",
        "response_toks_blank_res": [
            "the",
            "name",
            "of",
            "the",
            "song",
            "by",
            "the",
            "youngest",
            "singer",
            "is",
            "result0",
            ",",
            "and",
            "its",
            "release",
            "year",
            "is",
            "result1",
            "."
        ]
    },
    {
        "database_id": "concert_singer",
        "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age desc LIMIT 1",
        "query_toks": [
            "select",
            "song_name",
            ",",
            "song_release_year",
            "from",
            "singer",
            "order",
            "by",
            "age",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Song_Name",
                "Song_release_year"
            ],
            [
                "You",
                "1992"
            ]
        ],
        "response": "the name of the song by the oldest singer is You, and its release year is 1992.",
        "response_toks": [
            "the",
            "name",
            "of",
            "the",
            "song",
            "by",
            "the",
            "oldest",
            "singer",
            "is",
            "You",
            ",",
            "and",
            "its",
            "release",
            "year",
            "is",
            "1992",
            "."
        ],
        "results_map": {
            "result0": "You",
            "result1": "1992"
        },
        "results_blank_res": "result0 result1 ",
        "query_w_results": "SELECT song_name ,  song_release_year FROM singer ORDER BY age desc LIMIT 1 | You 1992 ",
        "query_w_results_blank_res": "SELECT song_name ,  song_release_year FROM singer ORDER BY age desc LIMIT 1 | result0 result1 ",
        "query_toks_w_results": [
            "select",
            "song_name",
            ",",
            "song_release_year",
            "from",
            "singer",
            "order",
            "by",
            "age",
            "desc",
            "limit",
            "1",
            "You",
            "1992"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "song_name",
            ",",
            "song_release_year",
            "from",
            "singer",
            "order",
            "by",
            "age",
            "desc",
            "limit",
            "1",
            "result0",
            "result1"
        ],
        "response_blank_res": "the name of the song by the oldest singer is result0 , and its release year is result1 .",
        "response_toks_blank_res": [
            "the",
            "name",
            "of",
            "the",
            "song",
            "by",
            "the",
            "oldest",
            "singer",
            "is",
            "result0",
            ",",
            "and",
            "its",
            "release",
            "year",
            "is",
            "result1",
            "."
        ]
    },
    {
        "database_id": "concert_singer",
        "query": "SELECT Name FROM singer ORDER BY age LIMIT 1",
        "query_toks": [
            "select",
            "name",
            "from",
            "singer",
            "order",
            "by",
            "age",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Tribal King"
            ]
        ],
        "response": "The name of the youngest singer is 'Tribal King'.",
        "response_toks": [
            "The",
            "name",
            "of",
            "the",
            "youngest",
            "singer",
            "is",
            "'Tribal",
            "King",
            "'",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Name FROM singer ORDER BY age LIMIT 1",
        "query_w_results_blank_res": "SELECT Name FROM singer ORDER BY age LIMIT 1",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "singer",
            "order",
            "by",
            "age",
            "limit",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "singer",
            "order",
            "by",
            "age",
            "limit",
            "1"
        ],
        "response_blank_res": "The name of the youngest singer is 'Tribal King ' .",
        "response_toks_blank_res": [
            "The",
            "name",
            "of",
            "the",
            "youngest",
            "singer",
            "is",
            "'Tribal",
            "King",
            "'",
            "."
        ]
    },
    {
        "database_id": "concert_singer",
        "query": "SELECT Name, age FROM singer ORDER BY age desc LIMIT 1",
        "query_toks": [
            "select",
            "name",
            ",",
            "age",
            "from",
            "singer",
            "order",
            "by",
            "age",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Name",
                "Age"
            ],
            [
                "Joe Sharp",
                52
            ]
        ],
        "response": "The name and age of the oldest singer are 'Joe Sharp' and 52.",
        "response_toks": [
            "The",
            "name",
            "and",
            "age",
            "of",
            "the",
            "oldest",
            "singer",
            "are",
            "'Joe",
            "Sharp",
            "'",
            "and",
            "52",
            "."
        ],
        "results_map": {
            "result0": "52"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT Name, age FROM singer ORDER BY age desc LIMIT 1 | 52 ",
        "query_w_results_blank_res": "SELECT Name, age FROM singer ORDER BY age desc LIMIT 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "name",
            ",",
            "age",
            "from",
            "singer",
            "order",
            "by",
            "age",
            "desc",
            "limit",
            "1",
            "52"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            ",",
            "age",
            "from",
            "singer",
            "order",
            "by",
            "age",
            "desc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "The name and age of the oldest singer are 'Joe Sharp ' and result0 .",
        "response_toks_blank_res": [
            "The",
            "name",
            "and",
            "age",
            "of",
            "the",
            "oldest",
            "singer",
            "are",
            "'Joe",
            "Sharp",
            "'",
            "and",
            "result0",
            "."
        ]
    },
    {
        "database_id": "concert_singer",
        "query": "SELECT Country FROM singer ORDER BY age desc LIMIT 1",
        "query_toks": [
            "select",
            "country",
            "from",
            "singer",
            "order",
            "by",
            "age",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Country"
            ],
            [
                "Netherlands"
            ]
        ],
        "response": "The country of the oldest singer is Netherlands.",
        "response_toks": [
            "The",
            "country",
            "of",
            "the",
            "oldest",
            "singer",
            "is",
            "Netherlands",
            "."
        ],
        "results_map": {
            "result0": "Netherlands"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT Country FROM singer ORDER BY age desc LIMIT 1 | Netherlands ",
        "query_w_results_blank_res": "SELECT Country FROM singer ORDER BY age desc LIMIT 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "country",
            "from",
            "singer",
            "order",
            "by",
            "age",
            "desc",
            "limit",
            "1",
            "Netherlands"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "country",
            "from",
            "singer",
            "order",
            "by",
            "age",
            "desc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "The country of the oldest singer is result0 .",
        "response_toks_blank_res": [
            "The",
            "country",
            "of",
            "the",
            "oldest",
            "singer",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "concert_singer",
        "query": "SELECT Name FROM singer where country  =  'United States'",
        "query_toks": [
            "select",
            "name",
            "from",
            "singer",
            "where",
            "country",
            "=",
            "'united",
            "states'"
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Timbaland"
            ]
        ],
        "response": "the name of the singer from United States is Timbaland.",
        "response_toks": [
            "the",
            "name",
            "of",
            "the",
            "singer",
            "from",
            "United",
            "States",
            "is",
            "Timbaland",
            "."
        ],
        "results_map": {
            "result0": "Timbaland"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT Name FROM singer where country  =  'United States' | Timbaland ",
        "query_w_results_blank_res": "SELECT Name FROM singer where country  =  'United States' | result0 ",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "singer",
            "where",
            "country",
            "=",
            "'united",
            "states'",
            "Timbaland"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "singer",
            "where",
            "country",
            "=",
            "'united",
            "states'",
            "result0"
        ],
        "response_blank_res": "the name of the singer from United States is result0 .",
        "response_toks_blank_res": [
            "the",
            "name",
            "of",
            "the",
            "singer",
            "from",
            "United",
            "States",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "pets_1",
        "query": "SELECT count ( * )  FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T3.pettype   =   'dog'",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "where",
            "t3",
            ".",
            "pettype",
            "=",
            "'dog'"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                2
            ]
        ],
        "response": "The number of students having a dog as pet is 2.",
        "response_toks": [
            "The",
            "number",
            "of",
            "students",
            "having",
            "a",
            "dog",
            "as",
            "pet",
            "is",
            "2",
            "."
        ],
        "results_map": {
            "result0": "2"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T3.pettype   =   'dog' | 2 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T3.pettype   =   'dog' | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "where",
            "t3",
            ".",
            "pettype",
            "=",
            "'dog'",
            "2"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "where",
            "t3",
            ".",
            "pettype",
            "=",
            "'dog'",
            "result0"
        ],
        "response_blank_res": "The number of students having a dog as pet is result0 .",
        "response_toks_blank_res": [
            "The",
            "number",
            "of",
            "students",
            "having",
            "a",
            "dog",
            "as",
            "pet",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "pets_1",
        "query": "SELECT count ( * )  FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T3.pettype   =   'cat'",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "where",
            "t3",
            ".",
            "pettype",
            "=",
            "'cat'"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                1
            ]
        ],
        "response": "The number of students having a cat as a pet is 1.",
        "response_toks": [
            "The",
            "number",
            "of",
            "students",
            "having",
            "a",
            "cat",
            "as",
            "a",
            "pet",
            "is",
            "1",
            "."
        ],
        "results_map": {
            "result0": "1"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T3.pettype   =   'cat' | 1 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T3.pettype   =   'cat' | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "where",
            "t3",
            ".",
            "pettype",
            "=",
            "'cat'",
            "1"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "where",
            "t3",
            ".",
            "pettype",
            "=",
            "'cat'",
            "result0"
        ],
        "response_blank_res": "The number of students having a cat as a pet is result0 .",
        "response_toks_blank_res": [
            "The",
            "number",
            "of",
            "students",
            "having",
            "a",
            "cat",
            "as",
            "a",
            "pet",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "pets_1",
        "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T3.pettype   =   'cat' OR T3.pettype   =   'dog'",
        "query_toks": [
            "select",
            "distinct",
            "t1",
            ".",
            "fname",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "where",
            "t3",
            ".",
            "pettype",
            "=",
            "'cat'",
            "or",
            "t3",
            ".",
            "pettype",
            "=",
            "'dog'"
        ],
        "results_raw": [
            [
                "Fname"
            ],
            [
                "Linda"
            ],
            [
                "Tracy"
            ]
        ],
        "response": "The first name of students who have cat or dog as pet is listed.",
        "response_toks": [
            "The",
            "first",
            "name",
            "of",
            "students",
            "who",
            "have",
            "cat",
            "or",
            "dog",
            "as",
            "pet",
            "is",
            "listed",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T3.pettype   =   'cat' OR T3.pettype   =   'dog'",
        "query_w_results_blank_res": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T3.pettype   =   'cat' OR T3.pettype   =   'dog'",
        "query_toks_w_results": [
            "select",
            "distinct",
            "t1",
            ".",
            "fname",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "where",
            "t3",
            ".",
            "pettype",
            "=",
            "'cat'",
            "or",
            "t3",
            ".",
            "pettype",
            "=",
            "'dog'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "t1",
            ".",
            "fname",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "where",
            "t3",
            ".",
            "pettype",
            "=",
            "'cat'",
            "or",
            "t3",
            ".",
            "pettype",
            "=",
            "'dog'"
        ],
        "response_blank_res": "The first name of students who have cat or dog as pet is listed .",
        "response_toks_blank_res": [
            "The",
            "first",
            "name",
            "of",
            "students",
            "who",
            "have",
            "cat",
            "or",
            "dog",
            "as",
            "pet",
            "is",
            "listed",
            "."
        ]
    },
    {
        "database_id": "pets_1",
        "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T3.pettype   =   'cat' OR T3.pettype   =   'dog'",
        "query_toks": [
            "select",
            "distinct",
            "t1",
            ".",
            "fname",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "where",
            "t3",
            ".",
            "pettype",
            "=",
            "'cat'",
            "or",
            "t3",
            ".",
            "pettype",
            "=",
            "'dog'"
        ],
        "results_raw": [
            [
                "Fname"
            ],
            [
                "Linda"
            ],
            [
                "Tracy"
            ]
        ],
        "response": "No.",
        "response_toks": [
            "No",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T3.pettype   =   'cat' OR T3.pettype   =   'dog'",
        "query_w_results_blank_res": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T3.pettype   =   'cat' OR T3.pettype   =   'dog'",
        "query_toks_w_results": [
            "select",
            "distinct",
            "t1",
            ".",
            "fname",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "where",
            "t3",
            ".",
            "pettype",
            "=",
            "'cat'",
            "or",
            "t3",
            ".",
            "pettype",
            "=",
            "'dog'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "t1",
            ".",
            "fname",
            "from",
            "student",
            "as",
            "t1",
            "join",
            "has_pet",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "stuid",
            "=",
            "t2",
            ".",
            "stuid",
            "join",
            "pets",
            "as",
            "t3",
            "on",
            "t3",
            ".",
            "petid",
            "=",
            "t2",
            ".",
            "petid",
            "where",
            "t3",
            ".",
            "pettype",
            "=",
            "'cat'",
            "or",
            "t3",
            ".",
            "pettype",
            "=",
            "'dog'"
        ],
        "response_blank_res": "No .",
        "response_toks_blank_res": [
            "No",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT state FROM Owners",
        "query_toks": [
            "select",
            "state",
            "from",
            "owners"
        ],
        "results_raw": [
            [
                "state"
            ],
            [
                "Wisconsin"
            ],
            [
                "Virginia"
            ],
            [
                "Vermont"
            ]
        ],
        "response": "Yes, they do. Here is the result table of the states that have owners living there. For example, one of them is Wisconsin.",
        "response_toks": [
            "Yes",
            ",",
            "they",
            "do",
            ".",
            "Here",
            "is",
            "the",
            "result",
            "table",
            "of",
            "the",
            "states",
            "that",
            "have",
            "owners",
            "living",
            "there",
            ".",
            "For",
            "example",
            ",",
            "one",
            "of",
            "them",
            "is",
            "Wisconsin",
            "."
        ],
        "results_map": {
            "result0": "Wisconsin"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT state FROM Owners | Wisconsin ",
        "query_w_results_blank_res": "SELECT state FROM Owners | result0 ",
        "query_toks_w_results": [
            "select",
            "state",
            "from",
            "owners",
            "Wisconsin"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "state",
            "from",
            "owners",
            "result0"
        ],
        "response_blank_res": "Yes , they do . Here is the result table of the states that have owners living there . For example , one of them is result0 .",
        "response_toks_blank_res": [
            "Yes",
            ",",
            "they",
            "do",
            ".",
            "Here",
            "is",
            "the",
            "result",
            "table",
            "of",
            "the",
            "states",
            "that",
            "have",
            "owners",
            "living",
            "there",
            ".",
            "For",
            "example",
            ",",
            "one",
            "of",
            "them",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT state FROM Professionals",
        "query_toks": [
            "select",
            "state",
            "from",
            "professionals"
        ],
        "results_raw": [
            [
                "state"
            ],
            [
                "Indiana"
            ],
            [
                "Connecticut"
            ],
            [
                "Wisconsin"
            ]
        ],
        "response": "Here is the result table of the states that have professionals living there. For example, one of them is Indiana.",
        "response_toks": [
            "Here",
            "is",
            "the",
            "result",
            "table",
            "of",
            "the",
            "states",
            "that",
            "have",
            "professionals",
            "living",
            "there",
            ".",
            "For",
            "example",
            ",",
            "one",
            "of",
            "them",
            "is",
            "Indiana",
            "."
        ],
        "results_map": {
            "result0": "Indiana"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT state FROM Professionals | Indiana ",
        "query_w_results_blank_res": "SELECT state FROM Professionals | result0 ",
        "query_toks_w_results": [
            "select",
            "state",
            "from",
            "professionals",
            "Indiana"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "state",
            "from",
            "professionals",
            "result0"
        ],
        "response_blank_res": "Here is the result table of the states that have professionals living there . For example , one of them is result0 .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "result",
            "table",
            "of",
            "the",
            "states",
            "that",
            "have",
            "professionals",
            "living",
            "there",
            ".",
            "For",
            "example",
            ",",
            "one",
            "of",
            "them",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
        "query_toks": [
            "select",
            "state",
            "from",
            "owners",
            "intersect",
            "select",
            "state",
            "from",
            "professionals"
        ],
        "results_raw": [
            [
                "state"
            ],
            [
                "Indiana"
            ],
            [
                "Mississippi"
            ],
            [
                "Wisconsin"
            ]
        ],
        "response": "Here is the result table of the states that have both owners and professionals living there. For example, one of them is Mississippi.",
        "response_toks": [
            "Here",
            "is",
            "the",
            "result",
            "table",
            "of",
            "the",
            "states",
            "that",
            "have",
            "both",
            "owners",
            "and",
            "professionals",
            "living",
            "there",
            ".",
            "For",
            "example",
            ",",
            "one",
            "of",
            "them",
            "is",
            "Mississippi",
            "."
        ],
        "results_map": {
            "result0": "Mississippi"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals | Mississippi ",
        "query_w_results_blank_res": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals | result0 ",
        "query_toks_w_results": [
            "select",
            "state",
            "from",
            "owners",
            "intersect",
            "select",
            "state",
            "from",
            "professionals",
            "Mississippi"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "state",
            "from",
            "owners",
            "intersect",
            "select",
            "state",
            "from",
            "professionals",
            "result0"
        ],
        "response_blank_res": "Here is the result table of the states that have both owners and professionals living there . For example , one of them is result0 .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "the",
            "result",
            "table",
            "of",
            "the",
            "states",
            "that",
            "have",
            "both",
            "owners",
            "and",
            "professionals",
            "living",
            "there",
            ".",
            "For",
            "example",
            ",",
            "one",
            "of",
            "them",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT DISTINCT first_name FROM professionals",
        "query_toks": [
            "select",
            "distinct",
            "first_name",
            "from",
            "professionals"
        ],
        "results_raw": [
            [
                "first_name"
            ],
            [
                "Taryn"
            ],
            [
                "Jayson"
            ],
            [
                "Olaf"
            ]
        ],
        "response": "Here is a list of the first names of all the professionals.",
        "response_toks": [
            "Here",
            "is",
            "a",
            "list",
            "of",
            "the",
            "first",
            "names",
            "of",
            "all",
            "the",
            "professionals",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT DISTINCT first_name FROM professionals",
        "query_w_results_blank_res": "SELECT DISTINCT first_name FROM professionals",
        "query_toks_w_results": [
            "select",
            "distinct",
            "first_name",
            "from",
            "professionals"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "first_name",
            "from",
            "professionals"
        ],
        "response_blank_res": "Here is a list of the first names of all the professionals .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "a",
            "list",
            "of",
            "the",
            "first",
            "names",
            "of",
            "all",
            "the",
            "professionals",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code   =   T3.treatment_type_code",
        "query_toks": [
            "select",
            "distinct",
            "t1",
            ".",
            "first_name",
            ",",
            "t3",
            ".",
            "treatment_type_description",
            "from",
            "professionals",
            "as",
            "t1",
            "join",
            "treatments",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "professional_id",
            "=",
            "t2",
            ".",
            "professional_id",
            "join",
            "treatment_types",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "treatment_type_code",
            "=",
            "t3",
            ".",
            "treatment_type_code"
        ],
        "results_raw": [
            [
                "first_name",
                "treatment_type_description"
            ],
            [
                "Monte",
                "Take for a Walk"
            ],
            [
                "Domenica",
                "Vaccination"
            ],
            [
                "Vernice",
                "Physical examination"
            ]
        ],
        "response": "Here is a table of the first names of all professionals with the description of their treatment.",
        "response_toks": [
            "Here",
            "is",
            "a",
            "table",
            "of",
            "the",
            "first",
            "names",
            "of",
            "all",
            "professionals",
            "with",
            "the",
            "description",
            "of",
            "their",
            "treatment",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code   =   T3.treatment_type_code",
        "query_w_results_blank_res": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code   =   T3.treatment_type_code",
        "query_toks_w_results": [
            "select",
            "distinct",
            "t1",
            ".",
            "first_name",
            ",",
            "t3",
            ".",
            "treatment_type_description",
            "from",
            "professionals",
            "as",
            "t1",
            "join",
            "treatments",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "professional_id",
            "=",
            "t2",
            ".",
            "professional_id",
            "join",
            "treatment_types",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "treatment_type_code",
            "=",
            "t3",
            ".",
            "treatment_type_code"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "t1",
            ".",
            "first_name",
            ",",
            "t3",
            ".",
            "treatment_type_description",
            "from",
            "professionals",
            "as",
            "t1",
            "join",
            "treatments",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "professional_id",
            "=",
            "t2",
            ".",
            "professional_id",
            "join",
            "treatment_types",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "treatment_type_code",
            "=",
            "t3",
            ".",
            "treatment_type_code"
        ],
        "response_blank_res": "Here is a table of the first names of all professionals with the description of their treatment .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "a",
            "table",
            "of",
            "the",
            "first",
            "names",
            "of",
            "all",
            "professionals",
            "with",
            "the",
            "description",
            "of",
            "their",
            "treatment",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code   =   T3.treatment_type_code",
        "query_toks": [
            "select",
            "distinct",
            "t1",
            ".",
            "first_name",
            ",",
            "t3",
            ".",
            "treatment_type_description",
            "from",
            "professionals",
            "as",
            "t1",
            "join",
            "treatments",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "professional_id",
            "=",
            "t2",
            ".",
            "professional_id",
            "join",
            "treatment_types",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "treatment_type_code",
            "=",
            "t3",
            ".",
            "treatment_type_code"
        ],
        "results_raw": [
            [
                "first_name",
                "treatment_type_description"
            ],
            [
                "Monte",
                "Take for a Walk"
            ],
            [
                "Domenica",
                "Vaccination"
            ],
            [
                "Vernice",
                "Physical examination"
            ]
        ],
        "response": "Here is a table of the first name of all professionals along with the description of the treatment they have done.",
        "response_toks": [
            "Here",
            "is",
            "a",
            "table",
            "of",
            "the",
            "first",
            "name",
            "of",
            "all",
            "professionals",
            "along",
            "with",
            "the",
            "description",
            "of",
            "the",
            "treatment",
            "they",
            "have",
            "done",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code   =   T3.treatment_type_code",
        "query_w_results_blank_res": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code   =   T3.treatment_type_code",
        "query_toks_w_results": [
            "select",
            "distinct",
            "t1",
            ".",
            "first_name",
            ",",
            "t3",
            ".",
            "treatment_type_description",
            "from",
            "professionals",
            "as",
            "t1",
            "join",
            "treatments",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "professional_id",
            "=",
            "t2",
            ".",
            "professional_id",
            "join",
            "treatment_types",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "treatment_type_code",
            "=",
            "t3",
            ".",
            "treatment_type_code"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "distinct",
            "t1",
            ".",
            "first_name",
            ",",
            "t3",
            ".",
            "treatment_type_description",
            "from",
            "professionals",
            "as",
            "t1",
            "join",
            "treatments",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "professional_id",
            "=",
            "t2",
            ".",
            "professional_id",
            "join",
            "treatment_types",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "treatment_type_code",
            "=",
            "t3",
            ".",
            "treatment_type_code"
        ],
        "response_blank_res": "Here is a table of the first name of all professionals along with the description of the treatment they have done .",
        "response_toks_blank_res": [
            "Here",
            "is",
            "a",
            "table",
            "of",
            "the",
            "first",
            "name",
            "of",
            "all",
            "professionals",
            "along",
            "with",
            "the",
            "description",
            "of",
            "the",
            "treatment",
            "they",
            "have",
            "done",
            "."
        ]
    },
    {
        "database_id": "course_teach",
        "query": "SELECT count ( Course_ID )  FROM course",
        "query_toks": [
            "select",
            "count",
            "(",
            "course_id",
            ")",
            "from",
            "course"
        ],
        "results_raw": [
            [
                "count(Course_ID)"
            ],
            [
                10
            ]
        ],
        "response": "there are 10 course id numbers in table course",
        "response_toks": [
            "there",
            "are",
            "10",
            "course",
            "id",
            "numbers",
            "in",
            "table",
            "course"
        ],
        "results_map": {
            "result0": "10"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( Course_ID )  FROM course | 10 ",
        "query_w_results_blank_res": "SELECT count ( Course_ID )  FROM course | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "course_id",
            ")",
            "from",
            "course",
            "10"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "course_id",
            ")",
            "from",
            "course",
            "result0"
        ],
        "response_blank_res": "there are result0 course id numbers in table course",
        "response_toks_blank_res": [
            "there",
            "are",
            "result0",
            "course",
            "id",
            "numbers",
            "in",
            "table",
            "course"
        ]
    },
    {
        "database_id": "course_teach",
        "query": "SELECT Course FROM course",
        "query_toks": [
            "select",
            "course",
            "from",
            "course"
        ],
        "results_raw": [
            [
                "Course"
            ],
            [
                "Language Arts"
            ],
            [
                "Math"
            ],
            [
                "Science"
            ]
        ],
        "response": "this shows all  course names",
        "response_toks": [
            "this",
            "shows",
            "all",
            "course",
            "names"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT Course FROM course",
        "query_w_results_blank_res": "SELECT Course FROM course",
        "query_toks_w_results": [
            "select",
            "course",
            "from",
            "course"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "course",
            "from",
            "course"
        ],
        "response_blank_res": "this shows all course names",
        "response_toks_blank_res": [
            "this",
            "shows",
            "all",
            "course",
            "names"
        ]
    },
    {
        "database_id": "course_teach",
        "query": "SELECT count ( Teacher_ID )  FROM teacher",
        "query_toks": [
            "select",
            "count",
            "(",
            "teacher_id",
            ")",
            "from",
            "teacher"
        ],
        "results_raw": [
            [
                "count(Teacher_ID)"
            ],
            [
                7
            ]
        ],
        "response": "there are 7 teachers in total",
        "response_toks": [
            "there",
            "are",
            "7",
            "teachers",
            "in",
            "total"
        ],
        "results_map": {
            "result0": "7"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( Teacher_ID )  FROM teacher | 7 ",
        "query_w_results_blank_res": "SELECT count ( Teacher_ID )  FROM teacher | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "teacher_id",
            ")",
            "from",
            "teacher",
            "7"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "teacher_id",
            ")",
            "from",
            "teacher",
            "result0"
        ],
        "response_blank_res": "there are result0 teachers in total",
        "response_toks_blank_res": [
            "there",
            "are",
            "result0",
            "teachers",
            "in",
            "total"
        ]
    },
    {
        "database_id": "course_teach",
        "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID   =   T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID   =   T3.Teacher_ID WHERE T2.Course   =   \"Math\"",
        "query_toks": [
            "select",
            "t3",
            ".",
            "name",
            "from",
            "course_arrange",
            "as",
            "t1",
            "join",
            "course",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "course_id",
            "=",
            "t2",
            ".",
            "course_id",
            "join",
            "teacher",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "teacher_id",
            "=",
            "t3",
            ".",
            "teacher_id",
            "where",
            "t2",
            ".",
            "course",
            "=",
            "\"math\""
        ],
        "results_raw": [
            [
                "Name"
            ],
            [
                "Kearsley Brown"
            ],
            [
                "Vicente Carretero"
            ]
        ],
        "response": "Teacher Kearsley Brown and Vicente Carretero take math class",
        "response_toks": [
            "Teacher",
            "Kearsley",
            "Brown",
            "and",
            "Vicente",
            "Carretero",
            "take",
            "math",
            "class"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID   =   T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID   =   T3.Teacher_ID WHERE T2.Course   =   \"Math\"",
        "query_w_results_blank_res": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID   =   T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID   =   T3.Teacher_ID WHERE T2.Course   =   \"Math\"",
        "query_toks_w_results": [
            "select",
            "t3",
            ".",
            "name",
            "from",
            "course_arrange",
            "as",
            "t1",
            "join",
            "course",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "course_id",
            "=",
            "t2",
            ".",
            "course_id",
            "join",
            "teacher",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "teacher_id",
            "=",
            "t3",
            ".",
            "teacher_id",
            "where",
            "t2",
            ".",
            "course",
            "=",
            "\"math\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t3",
            ".",
            "name",
            "from",
            "course_arrange",
            "as",
            "t1",
            "join",
            "course",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "course_id",
            "=",
            "t2",
            ".",
            "course_id",
            "join",
            "teacher",
            "as",
            "t3",
            "on",
            "t1",
            ".",
            "teacher_id",
            "=",
            "t3",
            ".",
            "teacher_id",
            "where",
            "t2",
            ".",
            "course",
            "=",
            "\"math\""
        ],
        "response_blank_res": "Teacher Kearsley Brown and Vicente Carretero take math class",
        "response_toks_blank_res": [
            "Teacher",
            "Kearsley",
            "Brown",
            "and",
            "Vicente",
            "Carretero",
            "take",
            "math",
            "class"
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT T1.Continent ,  count ( * )  FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId   =   T2.continent JOIN car_makers AS T3 ON T2.CountryId   =   T3.Country GROUP BY T1.Continent",
        "query_toks": [
            "select",
            "t1",
            ".",
            "continent",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "continents",
            "as",
            "t1",
            "join",
            "countries",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "contid",
            "=",
            "t2",
            ".",
            "continent",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "countryid",
            "=",
            "t3",
            ".",
            "country",
            "group",
            "by",
            "t1",
            ".",
            "continent"
        ],
        "results_raw": [
            [
                "Continent",
                "count(*)"
            ],
            [
                "america",
                4
            ],
            [
                "asia",
                7
            ],
            [
                "europe",
                11
            ]
        ],
        "response": "Here are the names of continents and the count of car makers on each of them.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "names",
            "of",
            "continents",
            "and",
            "the",
            "count",
            "of",
            "car",
            "makers",
            "on",
            "each",
            "of",
            "them",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.Continent ,  count ( * )  FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId   =   T2.continent JOIN car_makers AS T3 ON T2.CountryId   =   T3.Country GROUP BY T1.Continent",
        "query_w_results_blank_res": "SELECT T1.Continent ,  count ( * )  FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId   =   T2.continent JOIN car_makers AS T3 ON T2.CountryId   =   T3.Country GROUP BY T1.Continent",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "continent",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "continents",
            "as",
            "t1",
            "join",
            "countries",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "contid",
            "=",
            "t2",
            ".",
            "continent",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "countryid",
            "=",
            "t3",
            ".",
            "country",
            "group",
            "by",
            "t1",
            ".",
            "continent"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "continent",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "continents",
            "as",
            "t1",
            "join",
            "countries",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "contid",
            "=",
            "t2",
            ".",
            "continent",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "countryid",
            "=",
            "t3",
            ".",
            "country",
            "group",
            "by",
            "t1",
            ".",
            "continent"
        ],
        "response_blank_res": "Here are the names of continents and the count of car makers on each of them .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "names",
            "of",
            "continents",
            "and",
            "the",
            "count",
            "of",
            "car",
            "makers",
            "on",
            "each",
            "of",
            "them",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT T3.fullname,  T2.countryName FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId   =   T2.continent JOIN car_makers AS T3 ON T2.CountryId   =   T3.Country where T1.continent  =  \"asia\"",
        "query_toks": [
            "select",
            "t3",
            ".",
            "fullname",
            ",",
            "t2",
            ".",
            "countryname",
            "from",
            "continents",
            "as",
            "t1",
            "join",
            "countries",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "contid",
            "=",
            "t2",
            ".",
            "continent",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "countryid",
            "=",
            "t3",
            ".",
            "country",
            "where",
            "t1",
            ".",
            "continent",
            "=",
            "\"asia\""
        ],
        "results_raw": [
            [
                "FullName",
                "CountryName"
            ],
            [
                "Nissan Motors",
                "japan"
            ],
            [
                "Honda",
                "japan"
            ],
            [
                "Mazda",
                "japan"
            ]
        ],
        "response": "Here are the names and country names of the car makers from continent Asia.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "names",
            "and",
            "country",
            "names",
            "of",
            "the",
            "car",
            "makers",
            "from",
            "continent",
            "Asia",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T3.fullname,  T2.countryName FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId   =   T2.continent JOIN car_makers AS T3 ON T2.CountryId   =   T3.Country where T1.continent  =  \"asia\"",
        "query_w_results_blank_res": "SELECT T3.fullname,  T2.countryName FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId   =   T2.continent JOIN car_makers AS T3 ON T2.CountryId   =   T3.Country where T1.continent  =  \"asia\"",
        "query_toks_w_results": [
            "select",
            "t3",
            ".",
            "fullname",
            ",",
            "t2",
            ".",
            "countryname",
            "from",
            "continents",
            "as",
            "t1",
            "join",
            "countries",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "contid",
            "=",
            "t2",
            ".",
            "continent",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "countryid",
            "=",
            "t3",
            ".",
            "country",
            "where",
            "t1",
            ".",
            "continent",
            "=",
            "\"asia\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t3",
            ".",
            "fullname",
            ",",
            "t2",
            ".",
            "countryname",
            "from",
            "continents",
            "as",
            "t1",
            "join",
            "countries",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "contid",
            "=",
            "t2",
            ".",
            "continent",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "countryid",
            "=",
            "t3",
            ".",
            "country",
            "where",
            "t1",
            ".",
            "continent",
            "=",
            "\"asia\""
        ],
        "response_blank_res": "Here are the names and country names of the car makers from continent Asia .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "names",
            "and",
            "country",
            "names",
            "of",
            "the",
            "car",
            "makers",
            "from",
            "continent",
            "Asia",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT T3.fullname,  T2.countryName FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId   =   T2.continent JOIN car_makers AS T3 ON T2.CountryId   =   T3.Country where T1.continent  =  \"europe\"",
        "query_toks": [
            "select",
            "t3",
            ".",
            "fullname",
            ",",
            "t2",
            ".",
            "countryname",
            "from",
            "continents",
            "as",
            "t1",
            "join",
            "countries",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "contid",
            "=",
            "t2",
            ".",
            "continent",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "countryid",
            "=",
            "t3",
            ".",
            "country",
            "where",
            "t1",
            ".",
            "continent",
            "=",
            "\"europe\""
        ],
        "results_raw": [
            [
                "FullName",
                "CountryName"
            ],
            [
                "Volkswagen",
                "germany"
            ],
            [
                "BMW",
                "germany"
            ],
            [
                "Citroen",
                "france"
            ]
        ],
        "response": "Here are the names and country names of the car makers from continent Europe.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "names",
            "and",
            "country",
            "names",
            "of",
            "the",
            "car",
            "makers",
            "from",
            "continent",
            "Europe",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T3.fullname,  T2.countryName FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId   =   T2.continent JOIN car_makers AS T3 ON T2.CountryId   =   T3.Country where T1.continent  =  \"europe\"",
        "query_w_results_blank_res": "SELECT T3.fullname,  T2.countryName FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId   =   T2.continent JOIN car_makers AS T3 ON T2.CountryId   =   T3.Country where T1.continent  =  \"europe\"",
        "query_toks_w_results": [
            "select",
            "t3",
            ".",
            "fullname",
            ",",
            "t2",
            ".",
            "countryname",
            "from",
            "continents",
            "as",
            "t1",
            "join",
            "countries",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "contid",
            "=",
            "t2",
            ".",
            "continent",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "countryid",
            "=",
            "t3",
            ".",
            "country",
            "where",
            "t1",
            ".",
            "continent",
            "=",
            "\"europe\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t3",
            ".",
            "fullname",
            ",",
            "t2",
            ".",
            "countryname",
            "from",
            "continents",
            "as",
            "t1",
            "join",
            "countries",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "contid",
            "=",
            "t2",
            ".",
            "continent",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "countryid",
            "=",
            "t3",
            ".",
            "country",
            "where",
            "t1",
            ".",
            "continent",
            "=",
            "\"europe\""
        ],
        "response_blank_res": "Here are the names and country names of the car makers from continent Europe .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "names",
            "and",
            "country",
            "names",
            "of",
            "the",
            "car",
            "makers",
            "from",
            "continent",
            "Europe",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT T3.fullname,  T2.countryName FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId   =   T2.continent JOIN car_makers AS T3 ON T2.CountryId   =   T3.Country where T1.continent  =  \"america\"",
        "query_toks": [
            "select",
            "t3",
            ".",
            "fullname",
            ",",
            "t2",
            ".",
            "countryname",
            "from",
            "continents",
            "as",
            "t1",
            "join",
            "countries",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "contid",
            "=",
            "t2",
            ".",
            "continent",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "countryid",
            "=",
            "t3",
            ".",
            "country",
            "where",
            "t1",
            ".",
            "continent",
            "=",
            "\"america\""
        ],
        "results_raw": [
            [
                "FullName",
                "CountryName"
            ],
            [
                "American Motor Company",
                "usa"
            ],
            [
                "General Motors",
                "usa"
            ],
            [
                "Ford Motor Company",
                "usa"
            ]
        ],
        "response": "Here are the names and country names of the car makers from continent America.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "names",
            "and",
            "country",
            "names",
            "of",
            "the",
            "car",
            "makers",
            "from",
            "continent",
            "America",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T3.fullname,  T2.countryName FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId   =   T2.continent JOIN car_makers AS T3 ON T2.CountryId   =   T3.Country where T1.continent  =  \"america\"",
        "query_w_results_blank_res": "SELECT T3.fullname,  T2.countryName FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId   =   T2.continent JOIN car_makers AS T3 ON T2.CountryId   =   T3.Country where T1.continent  =  \"america\"",
        "query_toks_w_results": [
            "select",
            "t3",
            ".",
            "fullname",
            ",",
            "t2",
            ".",
            "countryname",
            "from",
            "continents",
            "as",
            "t1",
            "join",
            "countries",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "contid",
            "=",
            "t2",
            ".",
            "continent",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "countryid",
            "=",
            "t3",
            ".",
            "country",
            "where",
            "t1",
            ".",
            "continent",
            "=",
            "\"america\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t3",
            ".",
            "fullname",
            ",",
            "t2",
            ".",
            "countryname",
            "from",
            "continents",
            "as",
            "t1",
            "join",
            "countries",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "contid",
            "=",
            "t2",
            ".",
            "continent",
            "join",
            "car_makers",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "countryid",
            "=",
            "t3",
            ".",
            "country",
            "where",
            "t1",
            ".",
            "continent",
            "=",
            "\"america\""
        ],
        "response_blank_res": "Here are the names and country names of the car makers from continent America .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "names",
            "and",
            "country",
            "names",
            "of",
            "the",
            "car",
            "makers",
            "from",
            "continent",
            "America",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "select count ( * )  from car_makers",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "car_makers"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                22
            ]
        ],
        "response": "There are 22 car makers in total.",
        "response_toks": [
            "There",
            "are",
            "22",
            "car",
            "makers",
            "in",
            "total",
            "."
        ],
        "results_map": {
            "result0": "22"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "select count ( * )  from car_makers | 22 ",
        "query_w_results_blank_res": "select count ( * )  from car_makers | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "car_makers",
            "22"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "car_makers",
            "result0"
        ],
        "response_blank_res": "There are result0 car makers in total .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "car",
            "makers",
            "in",
            "total",
            "."
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT count ( distinct professional_id )  from professionals",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "professional_id",
            ")",
            "from",
            "professionals"
        ],
        "results_raw": [
            [
                "count(distinct professional_id)"
            ],
            [
                15
            ]
        ],
        "response": "There are 15 different professional IDs",
        "response_toks": [
            "There",
            "are",
            "15",
            "different",
            "professional",
            "IDs"
        ],
        "results_map": {
            "result0": "15"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( distinct professional_id )  from professionals | 15 ",
        "query_w_results_blank_res": "SELECT count ( distinct professional_id )  from professionals | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "distinct",
            "professional_id",
            ")",
            "from",
            "professionals",
            "15"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "distinct",
            "professional_id",
            ")",
            "from",
            "professionals",
            "result0"
        ],
        "response_blank_res": "There are result0 different professional IDs",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "different",
            "professional",
            "IDs"
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT T1.professional_id, T1.first_name ,  T3.treatment_type_code FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code   =   T3.treatment_type_code",
        "query_toks": [
            "select",
            "t1",
            ".",
            "professional_id",
            ",",
            "t1",
            ".",
            "first_name",
            ",",
            "t3",
            ".",
            "treatment_type_code",
            "from",
            "professionals",
            "as",
            "t1",
            "join",
            "treatments",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "professional_id",
            "=",
            "t2",
            ".",
            "professional_id",
            "join",
            "treatment_types",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "treatment_type_code",
            "=",
            "t3",
            ".",
            "treatment_type_code"
        ],
        "results_raw": [
            [
                "professional_id",
                "first_name",
                "treatment_type_code"
            ],
            [
                9,
                "Monte",
                "WALK"
            ],
            [
                10,
                "Domenica",
                "VAC"
            ],
            [
                4,
                "Vernice",
                "EXAM"
            ]
        ],
        "response": "Here are the ids, first name for all professionals, along with the type codes of the treatment they have done",
        "response_toks": [
            "Here",
            "are",
            "the",
            "ids",
            ",",
            "first",
            "name",
            "for",
            "all",
            "professionals",
            ",",
            "along",
            "with",
            "the",
            "type",
            "codes",
            "of",
            "the",
            "treatment",
            "they",
            "have",
            "done"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.professional_id, T1.first_name ,  T3.treatment_type_code FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code   =   T3.treatment_type_code",
        "query_w_results_blank_res": "SELECT T1.professional_id, T1.first_name ,  T3.treatment_type_code FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code   =   T3.treatment_type_code",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "professional_id",
            ",",
            "t1",
            ".",
            "first_name",
            ",",
            "t3",
            ".",
            "treatment_type_code",
            "from",
            "professionals",
            "as",
            "t1",
            "join",
            "treatments",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "professional_id",
            "=",
            "t2",
            ".",
            "professional_id",
            "join",
            "treatment_types",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "treatment_type_code",
            "=",
            "t3",
            ".",
            "treatment_type_code"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "professional_id",
            ",",
            "t1",
            ".",
            "first_name",
            ",",
            "t3",
            ".",
            "treatment_type_code",
            "from",
            "professionals",
            "as",
            "t1",
            "join",
            "treatments",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "professional_id",
            "=",
            "t2",
            ".",
            "professional_id",
            "join",
            "treatment_types",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "treatment_type_code",
            "=",
            "t3",
            ".",
            "treatment_type_code"
        ],
        "response_blank_res": "Here are the ids , first name for all professionals , along with the type codes of the treatment they have done",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "ids",
            ",",
            "first",
            "name",
            "for",
            "all",
            "professionals",
            ",",
            "along",
            "with",
            "the",
            "type",
            "codes",
            "of",
            "the",
            "treatment",
            "they",
            "have",
            "done"
        ]
    },
    {
        "database_id": "dog_kennels",
        "query": "SELECT T1.professional_id, T1.first_name, T3.treatment_type_code FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code   =   T3.treatment_type_code order by T2.date_of_treatment desc limit 5",
        "query_toks": [
            "select",
            "t1",
            ".",
            "professional_id",
            ",",
            "t1",
            ".",
            "first_name",
            ",",
            "t3",
            ".",
            "treatment_type_code",
            "from",
            "professionals",
            "as",
            "t1",
            "join",
            "treatments",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "professional_id",
            "=",
            "t2",
            ".",
            "professional_id",
            "join",
            "treatment_types",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "treatment_type_code",
            "=",
            "t3",
            ".",
            "treatment_type_code",
            "order",
            "by",
            "t2",
            ".",
            "date_of_treatment",
            "desc",
            "limit",
            "5"
        ],
        "results_raw": [
            [
                "professional_id",
                "first_name",
                "treatment_type_code"
            ],
            [
                6,
                "Ruben",
                "EXAM"
            ],
            [
                14,
                "Sigurd",
                "VAC"
            ],
            [
                9,
                "Monte",
                "WALK"
            ]
        ],
        "response": "Here are the ids, first name for all professionals, along with the type codes of the treatment they have done for the 5 most recent treatments.",
        "response_toks": [
            "Here",
            "are",
            "the",
            "ids",
            ",",
            "first",
            "name",
            "for",
            "all",
            "professionals",
            ",",
            "along",
            "with",
            "the",
            "type",
            "codes",
            "of",
            "the",
            "treatment",
            "they",
            "have",
            "done",
            "for",
            "the",
            "5",
            "most",
            "recent",
            "treatments",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT T1.professional_id, T1.first_name, T3.treatment_type_code FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code   =   T3.treatment_type_code order by T2.date_of_treatment desc limit 5",
        "query_w_results_blank_res": "SELECT T1.professional_id, T1.first_name, T3.treatment_type_code FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code   =   T3.treatment_type_code order by T2.date_of_treatment desc limit 5",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "professional_id",
            ",",
            "t1",
            ".",
            "first_name",
            ",",
            "t3",
            ".",
            "treatment_type_code",
            "from",
            "professionals",
            "as",
            "t1",
            "join",
            "treatments",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "professional_id",
            "=",
            "t2",
            ".",
            "professional_id",
            "join",
            "treatment_types",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "treatment_type_code",
            "=",
            "t3",
            ".",
            "treatment_type_code",
            "order",
            "by",
            "t2",
            ".",
            "date_of_treatment",
            "desc",
            "limit",
            "5"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "professional_id",
            ",",
            "t1",
            ".",
            "first_name",
            ",",
            "t3",
            ".",
            "treatment_type_code",
            "from",
            "professionals",
            "as",
            "t1",
            "join",
            "treatments",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "professional_id",
            "=",
            "t2",
            ".",
            "professional_id",
            "join",
            "treatment_types",
            "as",
            "t3",
            "on",
            "t2",
            ".",
            "treatment_type_code",
            "=",
            "t3",
            ".",
            "treatment_type_code",
            "order",
            "by",
            "t2",
            ".",
            "date_of_treatment",
            "desc",
            "limit",
            "5"
        ],
        "response_blank_res": "Here are the ids , first name for all professionals , along with the type codes of the treatment they have done for the 5 most recent treatments .",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "ids",
            ",",
            "first",
            "name",
            "for",
            "all",
            "professionals",
            ",",
            "along",
            "with",
            "the",
            "type",
            "codes",
            "of",
            "the",
            "treatment",
            "they",
            "have",
            "done",
            "for",
            "the",
            "5",
            "most",
            "recent",
            "treatments",
            "."
        ]
    },
    {
        "database_id": "battle_death",
        "query": "SELECT name  FROM battle",
        "query_toks": [
            "select",
            "name",
            "from",
            "battle"
        ],
        "results_raw": [
            [
                "name"
            ],
            [
                "Battle of Adrianople"
            ],
            [
                "Battle of Serres"
            ],
            [
                "Battle of Rusion"
            ]
        ],
        "response": "Here are  the names of all the battles",
        "response_toks": [
            "Here",
            "are",
            "the",
            "names",
            "of",
            "all",
            "the",
            "battles"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT name  FROM battle",
        "query_w_results_blank_res": "SELECT name  FROM battle",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "battle"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "battle"
        ],
        "response_blank_res": "Here are the names of all the battles",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "names",
            "of",
            "all",
            "the",
            "battles"
        ]
    },
    {
        "database_id": "battle_death",
        "query": "SELECT name, bulgarian_commander FROM battle",
        "query_toks": [
            "select",
            "name",
            ",",
            "bulgarian_commander",
            "from",
            "battle"
        ],
        "results_raw": [
            [
                "name",
                "bulgarian_commander"
            ],
            [
                "Battle of Adrianople",
                "Kaloyan"
            ],
            [
                "Battle of Serres",
                "Kaloyan"
            ],
            [
                "Battle of Rusion",
                "Kaloyan"
            ]
        ],
        "response": "Here are  the names of all the battles and their Bulgarian commanders",
        "response_toks": [
            "Here",
            "are",
            "the",
            "names",
            "of",
            "all",
            "the",
            "battles",
            "and",
            "their",
            "Bulgarian",
            "commanders"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT name, bulgarian_commander FROM battle",
        "query_w_results_blank_res": "SELECT name, bulgarian_commander FROM battle",
        "query_toks_w_results": [
            "select",
            "name",
            ",",
            "bulgarian_commander",
            "from",
            "battle"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            ",",
            "bulgarian_commander",
            "from",
            "battle"
        ],
        "response_blank_res": "Here are the names of all the battles and their Bulgarian commanders",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "names",
            "of",
            "all",
            "the",
            "battles",
            "and",
            "their",
            "Bulgarian",
            "commanders"
        ]
    },
    {
        "database_id": "battle_death",
        "query": "SELECT name  FROM battle EXCEPT SELECT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'",
        "query_toks": [
            "select",
            "name",
            "from",
            "battle",
            "except",
            "select",
            "t1",
            ".",
            "name",
            "from",
            "battle",
            "as",
            "t1",
            "join",
            "ship",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "lost_in_battle",
            "where",
            "t2",
            ".",
            "location",
            "=",
            "'english",
            "channel'"
        ],
        "results_raw": [
            [
                "name"
            ],
            [
                "Battle of Adrianople"
            ],
            [
                "Battle of Rusion"
            ],
            [
                "Battle of Serres"
            ]
        ],
        "response": "Here are  the names of all the battles with no ships lost in the English Channel",
        "response_toks": [
            "Here",
            "are",
            "the",
            "names",
            "of",
            "all",
            "the",
            "battles",
            "with",
            "no",
            "ships",
            "lost",
            "in",
            "the",
            "English",
            "Channel"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT name  FROM battle EXCEPT SELECT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'",
        "query_w_results_blank_res": "SELECT name  FROM battle EXCEPT SELECT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'",
        "query_toks_w_results": [
            "select",
            "name",
            "from",
            "battle",
            "except",
            "select",
            "t1",
            ".",
            "name",
            "from",
            "battle",
            "as",
            "t1",
            "join",
            "ship",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "lost_in_battle",
            "where",
            "t2",
            ".",
            "location",
            "=",
            "'english",
            "channel'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            "from",
            "battle",
            "except",
            "select",
            "t1",
            ".",
            "name",
            "from",
            "battle",
            "as",
            "t1",
            "join",
            "ship",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "lost_in_battle",
            "where",
            "t2",
            ".",
            "location",
            "=",
            "'english",
            "channel'"
        ],
        "response_blank_res": "Here are the names of all the battles with no ships lost in the English Channel",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "names",
            "of",
            "all",
            "the",
            "battles",
            "with",
            "no",
            "ships",
            "lost",
            "in",
            "the",
            "English",
            "Channel"
        ]
    },
    {
        "database_id": "battle_death",
        "query": "SELECT name , RESULT FROM battle EXCEPT SELECT T1.name , T1.result  FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'",
        "query_toks": [
            "select",
            "name",
            ",",
            "result",
            "from",
            "battle",
            "except",
            "select",
            "t1",
            ".",
            "name",
            ",",
            "t1",
            ".",
            "result",
            "from",
            "battle",
            "as",
            "t1",
            "join",
            "ship",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "lost_in_battle",
            "where",
            "t2",
            ".",
            "location",
            "=",
            "'english",
            "channel'"
        ],
        "results_raw": [
            [
                "name",
                "result"
            ],
            [
                "Battle of Adrianople",
                "Bulgarian victory"
            ],
            [
                "Battle of Rusion",
                "Bulgarian victory"
            ],
            [
                "Battle of Serres",
                "Bulgarian victory"
            ]
        ],
        "response": "Here are the names and results of all battles with no ships lost in the English channel",
        "response_toks": [
            "Here",
            "are",
            "the",
            "names",
            "and",
            "results",
            "of",
            "all",
            "battles",
            "with",
            "no",
            "ships",
            "lost",
            "in",
            "the",
            "English",
            "channel"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT name , RESULT FROM battle EXCEPT SELECT T1.name , T1.result  FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'",
        "query_w_results_blank_res": "SELECT name , RESULT FROM battle EXCEPT SELECT T1.name , T1.result  FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'",
        "query_toks_w_results": [
            "select",
            "name",
            ",",
            "result",
            "from",
            "battle",
            "except",
            "select",
            "t1",
            ".",
            "name",
            ",",
            "t1",
            ".",
            "result",
            "from",
            "battle",
            "as",
            "t1",
            "join",
            "ship",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "lost_in_battle",
            "where",
            "t2",
            ".",
            "location",
            "=",
            "'english",
            "channel'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            ",",
            "result",
            "from",
            "battle",
            "except",
            "select",
            "t1",
            ".",
            "name",
            ",",
            "t1",
            ".",
            "result",
            "from",
            "battle",
            "as",
            "t1",
            "join",
            "ship",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "lost_in_battle",
            "where",
            "t2",
            ".",
            "location",
            "=",
            "'english",
            "channel'"
        ],
        "response_blank_res": "Here are the names and results of all battles with no ships lost in the English channel",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "names",
            "and",
            "results",
            "of",
            "all",
            "battles",
            "with",
            "no",
            "ships",
            "lost",
            "in",
            "the",
            "English",
            "channel"
        ]
    },
    {
        "database_id": "battle_death",
        "query": "SELECT name , RESULT , bulgarian_commander FROM battle EXCEPT SELECT T1.name , T1.result , T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'",
        "query_toks": [
            "select",
            "name",
            ",",
            "result",
            ",",
            "bulgarian_commander",
            "from",
            "battle",
            "except",
            "select",
            "t1",
            ".",
            "name",
            ",",
            "t1",
            ".",
            "result",
            ",",
            "t1",
            ".",
            "bulgarian_commander",
            "from",
            "battle",
            "as",
            "t1",
            "join",
            "ship",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "lost_in_battle",
            "where",
            "t2",
            ".",
            "location",
            "=",
            "'english",
            "channel'"
        ],
        "results_raw": [
            [
                "name",
                "result",
                "bulgarian_commander"
            ],
            [
                "Battle of Adrianople",
                "Bulgarian victory",
                "Kaloyan"
            ],
            [
                "Battle of Rusion",
                "Bulgarian victory",
                "Kaloyan"
            ],
            [
                "Battle of Serres",
                "Bulgarian victory",
                "Kaloyan"
            ]
        ],
        "response": "Here are the names,results, and Bulgarian commanders of all battles with no ships lost in the English channel",
        "response_toks": [
            "Here",
            "are",
            "the",
            "names",
            ",",
            "results",
            ",",
            "and",
            "Bulgarian",
            "commanders",
            "of",
            "all",
            "battles",
            "with",
            "no",
            "ships",
            "lost",
            "in",
            "the",
            "English",
            "channel"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT name , RESULT , bulgarian_commander FROM battle EXCEPT SELECT T1.name , T1.result , T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'",
        "query_w_results_blank_res": "SELECT name , RESULT , bulgarian_commander FROM battle EXCEPT SELECT T1.name , T1.result , T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'",
        "query_toks_w_results": [
            "select",
            "name",
            ",",
            "result",
            ",",
            "bulgarian_commander",
            "from",
            "battle",
            "except",
            "select",
            "t1",
            ".",
            "name",
            ",",
            "t1",
            ".",
            "result",
            ",",
            "t1",
            ".",
            "bulgarian_commander",
            "from",
            "battle",
            "as",
            "t1",
            "join",
            "ship",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "lost_in_battle",
            "where",
            "t2",
            ".",
            "location",
            "=",
            "'english",
            "channel'"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "name",
            ",",
            "result",
            ",",
            "bulgarian_commander",
            "from",
            "battle",
            "except",
            "select",
            "t1",
            ".",
            "name",
            ",",
            "t1",
            ".",
            "result",
            ",",
            "t1",
            ".",
            "bulgarian_commander",
            "from",
            "battle",
            "as",
            "t1",
            "join",
            "ship",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "id",
            "=",
            "t2",
            ".",
            "lost_in_battle",
            "where",
            "t2",
            ".",
            "location",
            "=",
            "'english",
            "channel'"
        ],
        "response_blank_res": "Here are the names , results , and Bulgarian commanders of all battles with no ships lost in the English channel",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "names",
            ",",
            "results",
            ",",
            "and",
            "Bulgarian",
            "commanders",
            "of",
            "all",
            "battles",
            "with",
            "no",
            "ships",
            "lost",
            "in",
            "the",
            "English",
            "channel"
        ]
    },
    {
        "database_id": "battle_death",
        "query": "SELECT date FROM battle WHERE result  =  \"Bulgarian victory\"",
        "query_toks": [
            "select",
            "date",
            "from",
            "battle",
            "where",
            "result",
            "=",
            "\"bulgarian",
            "victory\""
        ],
        "results_raw": [
            [
                "date"
            ],
            [
                "14 April 1205"
            ],
            [
                "June 1205"
            ],
            [
                "31 January 1206"
            ]
        ],
        "response": "Here are the dates of all the battles with the result of Bulgarian victory",
        "response_toks": [
            "Here",
            "are",
            "the",
            "dates",
            "of",
            "all",
            "the",
            "battles",
            "with",
            "the",
            "result",
            "of",
            "Bulgarian",
            "victory"
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT date FROM battle WHERE result  =  \"Bulgarian victory\"",
        "query_w_results_blank_res": "SELECT date FROM battle WHERE result  =  \"Bulgarian victory\"",
        "query_toks_w_results": [
            "select",
            "date",
            "from",
            "battle",
            "where",
            "result",
            "=",
            "\"bulgarian",
            "victory\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "date",
            "from",
            "battle",
            "where",
            "result",
            "=",
            "\"bulgarian",
            "victory\""
        ],
        "response_blank_res": "Here are the dates of all the battles with the result of Bulgarian victory",
        "response_toks_blank_res": [
            "Here",
            "are",
            "the",
            "dates",
            "of",
            "all",
            "the",
            "battles",
            "with",
            "the",
            "result",
            "of",
            "Bulgarian",
            "victory"
        ]
    },
    {
        "database_id": "network_1",
        "query": "SELECT count ( * )  FROM Likes",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "likes"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                10
            ]
        ],
        "response": "There are 10 likes.",
        "response_toks": [
            "There",
            "are",
            "10",
            "likes",
            "."
        ],
        "results_map": {
            "result0": "10"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM Likes | 10 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM Likes | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "likes",
            "10"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "likes",
            "result0"
        ],
        "response_blank_res": "There are result0 likes .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "likes",
            "."
        ]
    },
    {
        "database_id": "network_1",
        "query": "SELECT count ( * )  FROM friend",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "friend"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                20
            ]
        ],
        "response": "There are 20 pairs of friends.",
        "response_toks": [
            "There",
            "are",
            "20",
            "pairs",
            "of",
            "friends",
            "."
        ],
        "results_map": {
            "result0": "20"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM friend | 20 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM friend | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "friend",
            "20"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "friend",
            "result0"
        ],
        "response_blank_res": "There are result0 pairs of friends .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "pairs",
            "of",
            "friends",
            "."
        ]
    },
    {
        "database_id": "network_1",
        "query": "SELECT student_id FROM friend where friend_id  =  1689",
        "query_toks": [
            "select",
            "student_id",
            "from",
            "friend",
            "where",
            "friend_id",
            "=",
            "1689"
        ],
        "results_raw": [
            [
                "student_id"
            ],
            [
                1510
            ]
        ],
        "response": "1510 is the  id of students with friend id 1689",
        "response_toks": [
            "1510",
            "is",
            "the",
            "id",
            "of",
            "students",
            "with",
            "friend",
            "id",
            "1689"
        ],
        "results_map": {
            "result0": "1510"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT student_id FROM friend where friend_id  =  1689 | 1510 ",
        "query_w_results_blank_res": "SELECT student_id FROM friend where friend_id  =  1689 | result0 ",
        "query_toks_w_results": [
            "select",
            "student_id",
            "from",
            "friend",
            "where",
            "friend_id",
            "=",
            "1689",
            "1510"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "student_id",
            "from",
            "friend",
            "where",
            "friend_id",
            "=",
            "1689",
            "result0"
        ],
        "response_blank_res": "result0 is the id of students with friend id 1689",
        "response_toks_blank_res": [
            "result0",
            "is",
            "the",
            "id",
            "of",
            "students",
            "with",
            "friend",
            "id",
            "1689"
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "query": "SELECT * FROM Documents",
        "query_toks": [
            "select",
            "*",
            "from",
            "documents"
        ],
        "results_raw": [
            [
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details"
            ],
            [
                0,
                7,
                "Introduction of OS",
                "n",
                null
            ],
            [
                1,
                25,
                "Understanding DB",
                "y",
                null
            ],
            [
                3,
                6,
                "Summer Show",
                "u",
                null
            ]
        ],
        "response": "There is all the info for all the documents.",
        "response_toks": [
            "There",
            "is",
            "all",
            "the",
            "info",
            "for",
            "all",
            "the",
            "documents",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT * FROM Documents",
        "query_w_results_blank_res": "SELECT * FROM Documents",
        "query_toks_w_results": [
            "select",
            "*",
            "from",
            "documents"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "*",
            "from",
            "documents"
        ],
        "response_blank_res": "There is all the info for all the documents .",
        "response_toks_blank_res": [
            "There",
            "is",
            "all",
            "the",
            "info",
            "for",
            "all",
            "the",
            "documents",
            "."
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "query": "SELECT * FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID   =   T2.Template_ID",
        "query_toks": [
            "select",
            "*",
            "from",
            "documents",
            "as",
            "t1",
            "join",
            "templates",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "template_id",
            "=",
            "t2",
            ".",
            "template_id"
        ],
        "results_raw": [
            [
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details"
            ],
            [
                0,
                7,
                "Introduction of OS",
                "n",
                null
            ],
            [
                1,
                25,
                "Understanding DB",
                "y",
                null
            ],
            [
                3,
                6,
                "Summer Show",
                "u",
                null
            ]
        ],
        "response": "There is all the info for the documents using a template.",
        "response_toks": [
            "There",
            "is",
            "all",
            "the",
            "info",
            "for",
            "the",
            "documents",
            "using",
            "a",
            "template",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT * FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID   =   T2.Template_ID",
        "query_w_results_blank_res": "SELECT * FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID   =   T2.Template_ID",
        "query_toks_w_results": [
            "select",
            "*",
            "from",
            "documents",
            "as",
            "t1",
            "join",
            "templates",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "template_id",
            "=",
            "t2",
            ".",
            "template_id"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "*",
            "from",
            "documents",
            "as",
            "t1",
            "join",
            "templates",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "template_id",
            "=",
            "t2",
            ".",
            "template_id"
        ],
        "response_blank_res": "There is all the info for the documents using a template .",
        "response_toks_blank_res": [
            "There",
            "is",
            "all",
            "the",
            "info",
            "for",
            "the",
            "documents",
            "using",
            "a",
            "template",
            "."
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count ( * )  FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID   =   T2.Template_ID WHERE T2.Template_Type_Code   =   'PPT'",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "documents",
            "as",
            "t1",
            "join",
            "templates",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "template_id",
            "=",
            "t2",
            ".",
            "template_id",
            "where",
            "t2",
            ".",
            "template_type_code",
            "=",
            "'ppt'"
        ],
        "results_raw": [
            [
                "count(*)"
            ],
            [
                3
            ]
        ],
        "response": "There are 3 documents using a template with code 'PPT'.",
        "response_toks": [
            "There",
            "are",
            "3",
            "documents",
            "using",
            "a",
            "template",
            "with",
            "code",
            "'PPT",
            "'",
            "."
        ],
        "results_map": {
            "result0": "3"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT count ( * )  FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID   =   T2.Template_ID WHERE T2.Template_Type_Code   =   'PPT' | 3 ",
        "query_w_results_blank_res": "SELECT count ( * )  FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID   =   T2.Template_ID WHERE T2.Template_Type_Code   =   'PPT' | result0 ",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "documents",
            "as",
            "t1",
            "join",
            "templates",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "template_id",
            "=",
            "t2",
            ".",
            "template_id",
            "where",
            "t2",
            ".",
            "template_type_code",
            "=",
            "'ppt'",
            "3"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "documents",
            "as",
            "t1",
            "join",
            "templates",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "template_id",
            "=",
            "t2",
            ".",
            "template_id",
            "where",
            "t2",
            ".",
            "template_type_code",
            "=",
            "'ppt'",
            "result0"
        ],
        "response_blank_res": "There are result0 documents using a template with code 'PPT ' .",
        "response_toks_blank_res": [
            "There",
            "are",
            "result0",
            "documents",
            "using",
            "a",
            "template",
            "with",
            "code",
            "'PPT",
            "'",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT AVG ( Accelerate )  FROM cars_data",
        "query_toks": [
            "select",
            "avg",
            "(",
            "accelerate",
            ")",
            "from",
            "cars_data"
        ],
        "results_raw": [
            [
                "AVG(Accelerate)"
            ],
            [
                15.519704433497521
            ]
        ],
        "response": "The average acceleration of all cars data is 15.519704433497521.",
        "response_toks": [
            "The",
            "average",
            "acceleration",
            "of",
            "all",
            "cars",
            "data",
            "is",
            "15.519704433497521",
            "."
        ],
        "results_map": {
            "result0": "15.519704433497521"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT AVG ( Accelerate )  FROM cars_data | 15.519704433497521 ",
        "query_w_results_blank_res": "SELECT AVG ( Accelerate )  FROM cars_data | result0 ",
        "query_toks_w_results": [
            "select",
            "avg",
            "(",
            "accelerate",
            ")",
            "from",
            "cars_data",
            "15.519704433497521"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "avg",
            "(",
            "accelerate",
            ")",
            "from",
            "cars_data",
            "result0"
        ],
        "response_blank_res": "The average acceleration of all cars data is result0 .",
        "response_toks_blank_res": [
            "The",
            "average",
            "acceleration",
            "of",
            "all",
            "cars",
            "data",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT AVG ( Horsepower )  FROM cars_data",
        "query_toks": [
            "select",
            "avg",
            "(",
            "horsepower",
            ")",
            "from",
            "cars_data"
        ],
        "results_raw": [
            [
                "AVG(Horsepower)"
            ],
            [
                103.5295566502463
            ]
        ],
        "response": "The average horse power is 103.5295566502463.",
        "response_toks": [
            "The",
            "average",
            "horse",
            "power",
            "is",
            "103.5295566502463",
            "."
        ],
        "results_map": {
            "result0": "103.5295566502463"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT AVG ( Horsepower )  FROM cars_data | 103.5295566502463 ",
        "query_w_results_blank_res": "SELECT AVG ( Horsepower )  FROM cars_data | result0 ",
        "query_toks_w_results": [
            "select",
            "avg",
            "(",
            "horsepower",
            ")",
            "from",
            "cars_data",
            "103.5295566502463"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "avg",
            "(",
            "horsepower",
            ")",
            "from",
            "cars_data",
            "result0"
        ],
        "response_blank_res": "The average horse power is result0 .",
        "response_toks_blank_res": [
            "The",
            "average",
            "horse",
            "power",
            "is",
            "result0",
            "."
        ]
    },
    {
        "database_id": "car_1",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1",
        "query_toks": [
            "select",
            "t1",
            ".",
            "model",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "cars_data",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t2",
            ".",
            "id",
            "where",
            "t2",
            ".",
            "cylinders",
            "=",
            "4",
            "order",
            "by",
            "t2",
            ".",
            "horsepower",
            "desc",
            "limit",
            "1"
        ],
        "results_raw": [
            [
                "Model"
            ],
            [
                "ford"
            ]
        ],
        "response": "Of the cars with 4 cylinders, ford is the model of the car that has the largest horsepower.",
        "response_toks": [
            "Of",
            "the",
            "cars",
            "with",
            "4",
            "cylinders",
            ",",
            "ford",
            "is",
            "the",
            "model",
            "of",
            "the",
            "car",
            "that",
            "has",
            "the",
            "largest",
            "horsepower",
            "."
        ],
        "results_map": {
            "result0": "ford"
        },
        "results_blank_res": "result0 ",
        "query_w_results": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1 | ford ",
        "query_w_results_blank_res": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1 | result0 ",
        "query_toks_w_results": [
            "select",
            "t1",
            ".",
            "model",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "cars_data",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t2",
            ".",
            "id",
            "where",
            "t2",
            ".",
            "cylinders",
            "=",
            "4",
            "order",
            "by",
            "t2",
            ".",
            "horsepower",
            "desc",
            "limit",
            "1",
            "ford"
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "t1",
            ".",
            "model",
            "from",
            "car_names",
            "as",
            "t1",
            "join",
            "cars_data",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "makeid",
            "=",
            "t2",
            ".",
            "id",
            "where",
            "t2",
            ".",
            "cylinders",
            "=",
            "4",
            "order",
            "by",
            "t2",
            ".",
            "horsepower",
            "desc",
            "limit",
            "1",
            "result0"
        ],
        "response_blank_res": "Of the cars with 4 cylinders , result0 is the model of the car that has the largest horsepower .",
        "response_toks_blank_res": [
            "Of",
            "the",
            "cars",
            "with",
            "4",
            "cylinders",
            ",",
            "result0",
            "is",
            "the",
            "model",
            "of",
            "the",
            "car",
            "that",
            "has",
            "the",
            "largest",
            "horsepower",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT count ( DISTINCT T2.Language )  FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial   =   \"T\"",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "t2",
            ".",
            "language",
            ")",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "indepyear",
            "<",
            "1930",
            "and",
            "t2",
            ".",
            "isofficial",
            "=",
            "\"t\""
        ],
        "results_raw": [
            [
                "count(DISTINCT T2.Language)"
            ],
            [
                40
            ]
        ],
        "response": "These are the unique official languages spoken that are found before 1930.",
        "response_toks": [
            "These",
            "are",
            "the",
            "unique",
            "official",
            "languages",
            "spoken",
            "that",
            "are",
            "found",
            "before",
            "1930",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT count ( DISTINCT T2.Language )  FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial   =   \"T\"",
        "query_w_results_blank_res": "SELECT count ( DISTINCT T2.Language )  FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial   =   \"T\"",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "distinct",
            "t2",
            ".",
            "language",
            ")",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "indepyear",
            "<",
            "1930",
            "and",
            "t2",
            ".",
            "isofficial",
            "=",
            "\"t\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "distinct",
            "t2",
            ".",
            "language",
            ")",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "indepyear",
            "<",
            "1930",
            "and",
            "t2",
            ".",
            "isofficial",
            "=",
            "\"t\""
        ],
        "response_blank_res": "These are the unique official languages spoken that are found before 1930 .",
        "response_toks_blank_res": [
            "These",
            "are",
            "the",
            "unique",
            "official",
            "languages",
            "spoken",
            "that",
            "are",
            "found",
            "before",
            "1930",
            "."
        ]
    },
    {
        "database_id": "world_1",
        "query": "SELECT count ( DISTINCT T2.Language )  FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial   =   \"T\"",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "t2",
            ".",
            "language",
            ")",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "indepyear",
            "<",
            "1930",
            "and",
            "t2",
            ".",
            "isofficial",
            "=",
            "\"t\""
        ],
        "results_raw": [
            [
                "count(DISTINCT T2.Language)"
            ],
            [
                40
            ]
        ],
        "response": "This is the total number of unique official languages spoken in the countries that are founded before 1930.",
        "response_toks": [
            "This",
            "is",
            "the",
            "total",
            "number",
            "of",
            "unique",
            "official",
            "languages",
            "spoken",
            "in",
            "the",
            "countries",
            "that",
            "are",
            "founded",
            "before",
            "1930",
            "."
        ],
        "results_map": {},
        "results_blank_res": "",
        "query_w_results": "SELECT count ( DISTINCT T2.Language )  FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial   =   \"T\"",
        "query_w_results_blank_res": "SELECT count ( DISTINCT T2.Language )  FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial   =   \"T\"",
        "query_toks_w_results": [
            "select",
            "count",
            "(",
            "distinct",
            "t2",
            ".",
            "language",
            ")",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "indepyear",
            "<",
            "1930",
            "and",
            "t2",
            ".",
            "isofficial",
            "=",
            "\"t\""
        ],
        "query_toks_w_results_blank_res": [
            "select",
            "count",
            "(",
            "distinct",
            "t2",
            ".",
            "language",
            ")",
            "from",
            "country",
            "as",
            "t1",
            "join",
            "countrylanguage",
            "as",
            "t2",
            "on",
            "t1",
            ".",
            "code",
            "=",
            "t2",
            ".",
            "countrycode",
            "where",
            "indepyear",
            "<",
            "1930",
            "and",
            "t2",
            ".",
            "isofficial",
            "=",
            "\"t\""
        ],
        "response_blank_res": "This is the total number of unique official languages spoken in the countries that are founded before 1930 .",
        "response_toks_blank_res": [
            "This",
            "is",
            "the",
            "total",
            "number",
            "of",
            "unique",
            "official",
            "languages",
            "spoken",
            "in",
            "the",
            "countries",
            "that",
            "are",
            "founded",
            "before",
            "1930",
            "."
        ]
    }
]